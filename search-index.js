var searchIndex = {};
searchIndex["aho_corasick"] = {"doc":"An implementation of the Aho-Corasick string search algorithm.","items":[[3,"Match","aho_corasick","Records a match in the search text.",null,null],[12,"pati","","The pattern index.",0,null],[12,"start","","The starting byte offset of the match in the search text.",0,null],[12,"end","","The ending byte offset of the match in the search text.",0,null],[3,"Matches","","An iterator of non-overlapping matches for in-memory text.",null,null],[3,"MatchesOverlapping","","An iterator of overlapping matches for in-memory text.",null,null],[3,"StreamMatches","","An iterator of non-overlapping matches for streaming text.",null,null],[3,"StreamMatchesOverlapping","","An iterator of overlapping matches for streaming text.",null,null],[3,"FullAcAutomaton","","A complete Aho-Corasick automaton.",null,null],[3,"AcAutomaton","","An Aho-Corasick finite automaton.",null,null],[3,"Dense","","State transitions that can be stored either sparsely or densely.",null,null],[3,"Sparse","","State transitions that are always sparse.",null,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"match"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",0,null],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"match"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"match"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"fullacautomaton"}}],[11,"new","","Build a new expanded Aho-Corasick automaton from an existing Aho-Corasick automaton.",5,{"inputs":[{"name":"acautomaton"}],"output":{"name":"fullacautomaton"}}],[11,"next_state","","",5,{"inputs":[{"name":"self"},{"name":"stateidx"},{"name":"u8"}],"output":{"name":"stateidx"}}],[11,"get_match","","",5,{"inputs":[{"name":"self"},{"name":"stateidx"},{"name":"usize"},{"name":"usize"}],"output":{"name":"match"}}],[11,"has_match","","",5,{"inputs":[{"name":"self"},{"name":"stateidx"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"start_bytes","","",5,null],[11,"patterns","","",5,null],[11,"pattern","","",5,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"p"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[6,"StateIdx","","The integer type used for the state index.",null,null],[8,"Automaton","","An abstraction over automatons and their corresponding iterators. The type parameter `P` is the type of the pattern that was used to construct this Automaton.",null,null],[10,"next_state","","Return the next state given the current state and next character.",6,{"inputs":[{"name":"self"},{"name":"stateidx"},{"name":"u8"}],"output":{"name":"stateidx"}}],[10,"has_match","","Return true if and only if the given state and current pattern index indicate a match.",6,{"inputs":[{"name":"self"},{"name":"stateidx"},{"name":"usize"}],"output":{"name":"bool"}}],[10,"get_match","","Build a match given the current state, pattern index and input index.",6,{"inputs":[{"name":"self"},{"name":"stateidx"},{"name":"usize"},{"name":"usize"}],"output":{"name":"match"}}],[10,"start_bytes","","Return the set of bytes that have transitions in the root state.",6,null],[10,"patterns","","Returns all of the patterns matched by this automaton.",6,null],[10,"pattern","","Returns the pattern indexed at `i`.",6,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"p"}}],[11,"len","","Return the number of patterns in the automaton.",6,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the automaton has no patterns.",6,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"find","","Returns an iterator of non-overlapping matches in `s`.",6,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"matches"}}],[11,"find_overlapping","","Returns an iterator of overlapping matches in `s`.",6,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"matchesoverlapping"}}],[11,"stream_find","","Returns an iterator of non-overlapping matches in the given reader.",6,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"streammatches"}}],[11,"stream_find_overlapping","","Returns an iterator of overlapping matches in the given reader.",6,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"streammatchesoverlapping"}}],[8,"Transitions","","An abstraction over state transition strategies.",null,null],[10,"new","","Return a new state at the given depth.",7,{"inputs":[{"name":"u32"}],"output":{"name":"self"}}],[10,"goto","","Return the next state index given the next character.",7,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"stateidx"}}],[10,"set_goto","","Set the next state index for the character given.",7,{"inputs":[{"name":"self"},{"name":"u8"},{"name":"stateidx"}],"output":null}],[10,"heap_bytes","","The memory use in bytes (on the heap) of this set of transitions.",7,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"acautomaton"}}],[11,"new","","Create a new automaton from an iterator of patterns.",8,{"inputs":[{"name":"i"}],"output":{"name":"acautomaton"}}],[11,"with_transitions","","Create a new automaton from an iterator of patterns.",8,{"inputs":[{"name":"i"}],"output":{"name":"acautomaton"}}],[11,"into_full","","Build out the entire automaton into a single matrix.",8,{"inputs":[{"name":"self"}],"output":{"name":"fullacautomaton"}}],[11,"next_state","","",8,{"inputs":[{"name":"self"},{"name":"stateidx"},{"name":"u8"}],"output":{"name":"stateidx"}}],[11,"get_match","","",8,{"inputs":[{"name":"self"},{"name":"stateidx"},{"name":"usize"},{"name":"usize"}],"output":{"name":"match"}}],[11,"has_match","","",8,{"inputs":[{"name":"self"},{"name":"stateidx"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"start_bytes","","",8,null],[11,"patterns","","",8,null],[11,"pattern","","",8,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"p"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"dense"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",9,{"inputs":[{"name":"u32"}],"output":{"name":"dense"}}],[11,"goto","","",9,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"stateidx"}}],[11,"set_goto","","",9,{"inputs":[{"name":"self"},{"name":"u8"},{"name":"stateidx"}],"output":null}],[11,"heap_bytes","","",9,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"sparse"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",10,{"inputs":[{"name":"u32"}],"output":{"name":"sparse"}}],[11,"goto","","",10,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"stateidx"}}],[11,"set_goto","","",10,{"inputs":[{"name":"self"},{"name":"u8"},{"name":"stateidx"}],"output":null}],[11,"heap_bytes","","",10,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"from_iter","","Create an automaton from an iterator of strings.",8,{"inputs":[{"name":"t"}],"output":{"name":"acautomaton"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"len","","Return the number of patterns in the automaton.",6,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the automaton has no patterns.",6,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"find","","Returns an iterator of non-overlapping matches in `s`.",6,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"matches"}}],[11,"find_overlapping","","Returns an iterator of overlapping matches in `s`.",6,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"matchesoverlapping"}}],[11,"stream_find","","Returns an iterator of non-overlapping matches in the given reader.",6,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"streammatches"}}],[11,"stream_find_overlapping","","Returns an iterator of overlapping matches in the given reader.",6,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"streammatchesoverlapping"}}]],"paths":[[3,"Match"],[3,"Matches"],[3,"StreamMatches"],[3,"MatchesOverlapping"],[3,"StreamMatchesOverlapping"],[3,"FullAcAutomaton"],[8,"Automaton"],[8,"Transitions"],[3,"AcAutomaton"],[3,"Dense"],[3,"Sparse"]]};
searchIndex["antidote"] = {"doc":"Mutex and RwLock types that do not poison themselves.","items":[[3,"WaitTimeoutResult","antidote","A type indicating whether a timed wait on a condition variable returned due to a time out or not.",null,null],[3,"Mutex","","Like `std::sync::Mutex` except that it does not poison itself.",null,null],[3,"MutexGuard","","Like `std::sync::MutexGuard`.",null,null],[3,"Condvar","","Like `std::sync::Condvar`.",null,null],[3,"TryLockError","","Like `std::sync::TryLockError`.",null,null],[3,"RwLock","","Like `std::sync::RwLock` except that it does not poison itself.",null,null],[3,"RwLockReadGuard","","Like `std::sync::RwLockReadGuard`.",null,null],[3,"RwLockWriteGuard","","Like `std::sync::RwLockWriteGuard`.",null,null],[6,"TryLockResult","","Like `std::sync::TryLockResult`.",null,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Like `std::sync::Mutex::new`.",0,{"inputs":[{"name":"t"}],"output":{"name":"mutex"}}],[11,"into_inner","","Like `std::sync::Mutex::into_inner`.",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"lock","","Like `std::sync::Mutex::lock`.",0,{"inputs":[{"name":"self"}],"output":{"name":"mutexguard"}}],[11,"try_lock","","Like `std::sync::Mutex::try_lock`.",0,{"inputs":[{"name":"self"}],"output":{"name":"trylockresult"}}],[11,"get_mut","","Like `std::sync::Mutex::get_mut`.",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref_mut","","",1,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"new","","Like `std::sync::Condvar::new`.",2,{"inputs":[],"output":{"name":"condvar"}}],[11,"wait","","Like `std::sync::Condvar::wait`.",2,{"inputs":[{"name":"self"},{"name":"mutexguard"}],"output":{"name":"mutexguard"}}],[11,"wait_timeout","","Like `std::sync::Condvar::wait_timeout`.",2,null],[11,"notify_one","","Like `std::sync::Condvar::notify_one`.",2,{"inputs":[{"name":"self"}],"output":null}],[11,"notify_all","","Like `std::sync::Condvar::notify_all`.",2,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",3,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Like `std::sync::RwLock::new`.",4,{"inputs":[{"name":"t"}],"output":{"name":"rwlock"}}],[11,"into_inner","","Like `std::sync::RwLock::into_inner`.",4,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"read","","Like `std::sync::RwLock::read`.",4,{"inputs":[{"name":"self"}],"output":{"name":"rwlockreadguard"}}],[11,"try_read","","Like `std::sync::RwLock::try_read`.",4,{"inputs":[{"name":"self"}],"output":{"name":"trylockresult"}}],[11,"write","","Like `std::sync::RwLock::write`.",4,{"inputs":[{"name":"self"}],"output":{"name":"rwlockwriteguard"}}],[11,"try_write","","Like `std::sync::RwLock::try_write`.",4,{"inputs":[{"name":"self"}],"output":{"name":"trylockresult"}}],[11,"get_mut","","Like `std::sync::RwLock::get_mut`.",4,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",5,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",6,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref_mut","","",6,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"timed_out","","Returns whether the wait was known to have timed out.",7,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"waittimeoutresult"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"self"},{"name":"waittimeoutresult"}],"output":{"name":"bool"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"waittimeoutresult"}}]],"paths":[[3,"Mutex"],[3,"MutexGuard"],[3,"Condvar"],[3,"TryLockError"],[3,"RwLock"],[3,"RwLockReadGuard"],[3,"RwLockWriteGuard"],[3,"WaitTimeoutResult"]]};
searchIndex["backtrace"] = {"doc":"A library for acquiring a backtrace at runtime","items":[[3,"Frame","backtrace","A trait representing one frame of a backtrace, yielded to the `trace` function of this crate.",null,null],[3,"Symbol","","A trait representing the resolution of a symbol in a file.",null,null],[3,"SymbolName","","A wrapper around a symbol name to provide ergonomic accessors to the demangled name, the raw bytes, the raw string, etc.",null,null],[3,"Backtrace","","Representation of an owned and self-contained backtrace.",null,null],[3,"BacktraceFrame","","Captured version of a frame in a backtrace.",null,null],[3,"BacktraceSymbol","","Captured version of a symbol in a backtrace.",null,null],[5,"trace","","Inspects the current call-stack, passing all active frames into the closure provided to calculate a stack trace.",null,{"inputs":[{"name":"f"}],"output":null}],[5,"resolve","","Resolve an address to a symbol, passing the symbol to the specified closure.",null,null],[11,"ip","","Returns the current instruction pointer of this frame.",0,null],[11,"symbol_address","","Returns the starting symbol address of the frame of this function.",0,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"name","","Returns the name of this function.",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"addr","","Returns the starting address of this function.",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"filename","","Returns the file name where this function was defined.",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"lineno","","Returns the line number for where this symbol is currently executing.",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new symbol name from the raw underlying bytes.",2,null],[11,"as_str","","Returns the raw symbol name as a `str` if the symbols is valid utf-8.",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_bytes","","Returns the raw symbol name as a list of bytes",2,null],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"backtrace"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"backtraceframe"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"backtracesymbol"}}],[11,"new","","Captures a backtrace at the callsite of this function, returning an owned representation.",3,{"inputs":[],"output":{"name":"backtrace"}}],[11,"new_unresolved","","Similar to `new` except that this does not resolve any symbols, this simply captures the backtrace as a list of addresses.",3,{"inputs":[],"output":{"name":"backtrace"}}],[11,"frames","","Returns the frames from when this backtrace was captured.",3,null],[11,"resolve","","If this backtrace was created from `new_unresolved` then this function will resolve all addresses in the backtrace to their symbolic names.",3,{"inputs":[{"name":"self"}],"output":null}],[11,"from","","",3,{"inputs":[{"name":"vec"}],"output":{"name":"self"}}],[11,"into","","",3,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"ip","","Same as `Frame::ip`",4,null],[11,"symbol_address","","Same as `Frame::symbol_address`",4,null],[11,"symbols","","Returns the list of symbols that this frame corresponds to.",4,null],[11,"name","","Same as `Symbol::name`",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"addr","","Same as `Symbol::addr`",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"filename","","Same as `Symbol::filename`",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"lineno","","Same as `Symbol::lineno`",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",3,{"inputs":[],"output":{"name":"backtrace"}}]],"paths":[[3,"Frame"],[3,"Symbol"],[3,"SymbolName"],[3,"Backtrace"],[3,"BacktraceFrame"],[3,"BacktraceSymbol"]]};
searchIndex["backtrace_sys"] = {"doc":"","items":[[4,"backtrace_state","backtrace_sys","",null,null],[5,"backtrace_create_state","","",null,null],[5,"backtrace_syminfo","","",null,null],[5,"backtrace_pcinfo","","",null,null],[6,"backtrace_syminfo_callback","","",null,null],[6,"backtrace_full_callback","","",null,null],[6,"backtrace_error_callback","","",null,null]],"paths":[]};
searchIndex["base64"] = {"doc":"","items":[[3,"Config","base64","Contains configuration parameters for base64 encoding",null,null],[4,"CharacterSet","","Available encoding character sets",null,null],[13,"Standard","","The standard character set (uses `+` and `/`)",0,null],[13,"UrlSafe","","The URL safe character set (uses `-` and `_`)",0,null],[4,"LineEnding","","",null,null],[13,"LF","","",1,null],[13,"CRLF","","",1,null],[4,"LineWrap","","",null,null],[13,"NoWrap","","",2,null],[13,"Wrap","","",2,null],[4,"DecodeError","","",null,null],[13,"InvalidByte","","",3,null],[13,"InvalidLength","","",3,null],[5,"encode","","Encode arbitrary octets as base64. Returns a String. Convenience for `encode_config(input, base64::STANDARD);`.",null,{"inputs":[{"name":"t"}],"output":{"name":"string"}}],[5,"decode","","Decode from string reference as octets. Returns a Result containing a Vec. Convenience `decode_config(input, base64::STANDARD);`.",null,{"inputs":[{"name":"t"}],"output":{"name":"result"}}],[5,"encode_config","","Encode arbitrary octets as base64. Returns a String.",null,{"inputs":[{"name":"t"},{"name":"config"}],"output":{"name":"string"}}],[5,"encode_config_buf","","Encode arbitrary octets as base64. Writes into the supplied buffer to avoid allocations.",null,{"inputs":[{"name":"t"},{"name":"config"},{"name":"string"}],"output":null}],[5,"decode_config","","Decode from string reference as octets. Returns a Result containing a Vec.",null,{"inputs":[{"name":"t"},{"name":"config"}],"output":{"name":"result"}}],[5,"decode_config_buf","","Decode from string reference as octets. Writes into the supplied buffer to avoid allocation. Returns a Result containing an empty tuple, aka ().",null,{"inputs":[{"name":"t"},{"name":"config"},{"name":"vec"}],"output":{"name":"result"}}],[7,"STANDARD","","",null,null],[7,"MIME","","",null,null],[7,"URL_SAFE","","",null,null],[7,"URL_SAFE_NO_PAD","","",null,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"characterset"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"lineending"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"linewrap"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"config"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",4,{"inputs":[{"name":"characterset"},{"name":"bool"},{"name":"bool"},{"name":"linewrap"}],"output":{"name":"config"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"decodeerror"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"decodeerror"}],"output":{"name":"bool"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",3,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}]],"paths":[[4,"CharacterSet"],[4,"LineEnding"],[4,"LineWrap"],[4,"DecodeError"],[3,"Config"]]};
searchIndex["bitflags"] = {"doc":"A typesafe bitmask flag generator useful for sets of C-style bitmask flags. It can be used for creating typesafe wrappers around C APIs.","items":[[0,"example_generated","bitflags","This module shows an example of code generated by the macro. IT MUST NOT BE USED OUTSIDE THIS CRATE.",null,null],[3,"Flags","bitflags::example_generated","This is the same `Flags` struct defined in the crate level example. Note that this struct is just for documentation purposes only, it must not be used outside this crate.",null,null],[17,"FLAG_A","","",null,null],[17,"FLAG_B","","",null,null],[17,"FLAG_C","","",null,null],[17,"FLAG_ABC","","",null,null],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"flags"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"ordering"}}],[11,"hash","","",0,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",0,{"inputs":[],"output":{"name":"flags"}}],[11,"all","","Returns the set containing all flags.",0,{"inputs":[],"output":{"name":"flags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",0,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",0,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",0,{"inputs":[{"name":"u32"}],"output":{"name":"flags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",0,{"inputs":[{"name":"self"},{"name":"flags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"flags"}}],[11,"bitor_assign","","Adds the set of flags.",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"flags"}}],[11,"bitxor_assign","","Toggles the set of flags.",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"flags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"flags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",0,{"inputs":[{"name":"self"}],"output":{"name":"flags"}}],[11,"extend","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",0,{"inputs":[{"name":"t"}],"output":{"name":"flags"}}],[14,"bitflags","bitflags","The macro used to generate the flag structure.",null,null]],"paths":[[3,"Flags"]]};
searchIndex["byteorder"] = {"doc":"This crate provides convenience methods for encoding and decoding numbers in either big-endian or little-endian order.","items":[[4,"BigEndian","byteorder","Defines big-endian serialization.",null,null],[4,"LittleEndian","","Defines little-endian serialization.",null,null],[6,"BE","","A type alias for `BigEndian`.",null,null],[6,"LE","","A type alias for `LittleEndian`.",null,null],[6,"NetworkEndian","","Defines network byte order serialization.",null,null],[6,"NativeEndian","","Defines system native-endian serialization.",null,null],[8,"ReadBytesExt","","Extends `Read` with methods for reading numbers. (For `std::io`.)",null,null],[11,"read_u8","","Reads an unsigned 8 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_i8","","Reads a signed 8 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_u16","","Reads an unsigned 16 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_i16","","Reads a signed 16 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_u24","","Reads an unsigned 24 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_i24","","Reads a signed 24 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_u32","","Reads an unsigned 32 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_i32","","Reads a signed 32 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_u64","","Reads an unsigned 64 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_i64","","Reads a signed 64 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_uint","","Reads an unsigned n-bytes integer from the underlying reader.",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[11,"read_int","","Reads a signed n-bytes integer from the underlying reader.",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_u16_into","","Reads a sequence of unsigned 16 bit integers from the underlying reader.",0,null],[11,"read_u32_into","","Reads a sequence of unsigned 32 bit integers from the underlying reader.",0,null],[11,"read_u64_into","","Reads a sequence of unsigned 64 bit integers from the underlying reader.",0,null],[11,"read_i16_into","","Reads a sequence of signed 16 bit integers from the underlying reader.",0,null],[11,"read_i32_into","","Reads a sequence of signed 32 bit integers from the underlying reader.",0,null],[11,"read_i64_into","","Reads a sequence of signed 64 bit integers from the underlying reader.",0,null],[11,"read_f32_into_unchecked","","Reads a sequence of IEEE754 single-precision (4 bytes) floating point numbers from the underlying reader.",0,null],[11,"read_f64_into_unchecked","","Reads a sequence of IEEE754 double-precision (8 bytes) floating point numbers from the underlying reader.",0,null],[8,"WriteBytesExt","","Extends `Write` with methods for writing numbers. (For `std::io`.)",null,null],[11,"write_u8","","Writes an unsigned 8 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"result"}}],[11,"write_i8","","Writes a signed 8 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"result"}}],[11,"write_u16","","Writes an unsigned 16 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"result"}}],[11,"write_i16","","Writes a signed 16 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"result"}}],[11,"write_u24","","Writes an unsigned 24 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"write_i24","","Writes a signed 24 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"result"}}],[11,"write_u32","","Writes an unsigned 32 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"write_i32","","Writes a signed 32 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"result"}}],[11,"write_u64","","Writes an unsigned 64 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"result"}}],[11,"write_i64","","Writes a signed 64 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"result"}}],[11,"write_uint","","Writes an unsigned n-bytes integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u64"},{"name":"usize"}],"output":{"name":"result"}}],[11,"write_int","","Writes a signed n-bytes integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i64"},{"name":"usize"}],"output":{"name":"result"}}],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"result"}}],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"result"}}],[8,"ByteOrder","","ByteOrder describes types that can serialize integers as bytes.",null,null],[10,"read_u16","","Reads an unsigned 16 bit integer from `buf`.",2,null],[11,"read_u24","","Reads an unsigned 24 bit integer from `buf`, stored in u32.",2,null],[10,"read_u32","","Reads an unsigned 32 bit integer from `buf`.",2,null],[10,"read_u64","","Reads an unsigned 64 bit integer from `buf`.",2,null],[10,"read_uint","","Reads an unsigned n-bytes integer from `buf`.",2,null],[10,"write_u16","","Writes an unsigned 16 bit integer `n` to `buf`.",2,null],[11,"write_u24","","Writes an unsigned 24 bit integer `n` to `buf`, stored in u32.",2,null],[10,"write_u32","","Writes an unsigned 32 bit integer `n` to `buf`.",2,null],[10,"write_u64","","Writes an unsigned 64 bit integer `n` to `buf`.",2,null],[10,"write_uint","","Writes an unsigned integer `n` to `buf` using only `nbytes`.",2,null],[11,"read_i16","","Reads a signed 16 bit integer from `buf`.",2,null],[11,"read_i24","","Reads a signed 24 bit integer from `buf`, stored in i32.",2,null],[11,"read_i32","","Reads a signed 32 bit integer from `buf`.",2,null],[11,"read_i64","","Reads a signed 64 bit integer from `buf`.",2,null],[11,"read_int","","Reads a signed n-bytes integer from `buf`.",2,null],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number.",2,null],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number.",2,null],[11,"write_i16","","Writes a signed 16 bit integer `n` to `buf`.",2,null],[11,"write_i24","","Writes a signed 24 bit integer `n` to `buf`, stored in i32.",2,null],[11,"write_i32","","Writes a signed 32 bit integer `n` to `buf`.",2,null],[11,"write_i64","","Writes a signed 64 bit integer `n` to `buf`.",2,null],[11,"write_int","","Writes a signed integer `n` to `buf` using only `nbytes`.",2,null],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number.",2,null],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number.",2,null],[10,"read_u16_into","","Reads unsigned 16 bit integers from `src` into `dst`.",2,null],[10,"read_u32_into","","Reads unsigned 32 bit integers from `src` into `dst`.",2,null],[10,"read_u64_into","","Reads unsigned 64 bit integers from `src` into `dst`.",2,null],[11,"read_i16_into","","Reads signed 16 bit integers from `src` to `dst`.",2,null],[11,"read_i32_into","","Reads signed 32 bit integers from `src` into `dst`.",2,null],[11,"read_i64_into","","Reads signed 64 bit integers from `src` into `dst`.",2,null],[11,"read_f32_into_unchecked","","Reads IEEE754 single-precision (4 bytes) floating point numbers from `src` into `dst`.",2,null],[11,"read_f64_into_unchecked","","Reads IEEE754 single-precision (4 bytes) floating point numbers from `src` into `dst`.",2,null],[10,"write_u16_into","","Writes unsigned 16 bit integers from `src` into `dst`.",2,null],[10,"write_u32_into","","Writes unsigned 32 bit integers from `src` into `dst`.",2,null],[10,"write_u64_into","","Writes unsigned 64 bit integers from `src` into `dst`.",2,null],[11,"write_i16_into","","Writes signed 16 bit integers from `src` into `dst`.",2,null],[11,"write_i32_into","","Writes signed 32 bit integers from `src` into `dst`.",2,null],[11,"write_i64_into","","Writes signed 64 bit integers from `src` into `dst`.",2,null],[11,"write_f32_into","","Writes IEEE754 single-precision (4 bytes) floating point numbers from `src` into `dst`.",2,null],[11,"write_f64_into","","Writes IEEE754 double-precision (8 bytes) floating point numbers from `src` into `dst`.",2,null],[10,"from_slice_u16","","Converts the given slice of unsigned 16 bit integers to a particular endianness.",2,null],[10,"from_slice_u32","","Converts the given slice of unsigned 32 bit integers to a particular endianness.",2,null],[10,"from_slice_u64","","Converts the given slice of unsigned 64 bit integers to a particular endianness.",2,null],[11,"from_slice_i16","","Converts the given slice of signed 16 bit integers to a particular endianness.",2,null],[11,"from_slice_i32","","Converts the given slice of signed 32 bit integers to a particular endianness.",2,null],[11,"from_slice_i64","","Converts the given slice of signed 64 bit integers to a particular endianness.",2,null],[10,"from_slice_f32","","Converts the given slice of IEEE754 single-precision (4 bytes) floating point numbers to a particular endianness.",2,null],[10,"from_slice_f64","","Converts the given slice of IEEE754 double-precision (8 bytes) floating point numbers to a particular endianness.",2,null],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"bigendian"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",3,null],[11,"cmp","","",3,{"inputs":[{"name":"self"},{"name":"bigendian"}],"output":{"name":"ordering"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"bigendian"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",3,{"inputs":[{"name":"self"},{"name":"bigendian"}],"output":{"name":"option"}}],[11,"default","","",3,{"inputs":[],"output":{"name":"bigendian"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"littleendian"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",4,null],[11,"cmp","","",4,{"inputs":[{"name":"self"},{"name":"littleendian"}],"output":{"name":"ordering"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"littleendian"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",4,{"inputs":[{"name":"self"},{"name":"littleendian"}],"output":{"name":"option"}}],[11,"default","","",4,{"inputs":[],"output":{"name":"littleendian"}}],[11,"read_u16","","",3,null],[11,"read_u32","","",3,null],[11,"read_u64","","",3,null],[11,"read_uint","","",3,null],[11,"write_u16","","",3,null],[11,"write_u32","","",3,null],[11,"write_u64","","",3,null],[11,"write_uint","","",3,null],[11,"read_u16_into","","",3,null],[11,"read_u32_into","","",3,null],[11,"read_u64_into","","",3,null],[11,"write_u16_into","","",3,null],[11,"write_u32_into","","",3,null],[11,"write_u64_into","","",3,null],[11,"from_slice_u16","","",3,null],[11,"from_slice_u32","","",3,null],[11,"from_slice_u64","","",3,null],[11,"from_slice_f32","","",3,null],[11,"from_slice_f64","","",3,null],[11,"read_u16","","",4,null],[11,"read_u32","","",4,null],[11,"read_u64","","",4,null],[11,"read_uint","","",4,null],[11,"write_u16","","",4,null],[11,"write_u32","","",4,null],[11,"write_u64","","",4,null],[11,"write_uint","","",4,null],[11,"read_u16_into","","",4,null],[11,"read_u32_into","","",4,null],[11,"read_u64_into","","",4,null],[11,"write_u16_into","","",4,null],[11,"write_u32_into","","",4,null],[11,"write_u64_into","","",4,null],[11,"from_slice_u16","","",4,null],[11,"from_slice_u32","","",4,null],[11,"from_slice_u64","","",4,null],[11,"from_slice_f32","","",4,null],[11,"from_slice_f64","","",4,null],[11,"read_u8","","Reads an unsigned 8 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_i8","","Reads a signed 8 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_u16","","Reads an unsigned 16 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_i16","","Reads a signed 16 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_u24","","Reads an unsigned 24 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_i24","","Reads a signed 24 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_u32","","Reads an unsigned 32 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_i32","","Reads a signed 32 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_u64","","Reads an unsigned 64 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_i64","","Reads a signed 64 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_uint","","Reads an unsigned n-bytes integer from the underlying reader.",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[11,"read_int","","Reads a signed n-bytes integer from the underlying reader.",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_u16_into","","Reads a sequence of unsigned 16 bit integers from the underlying reader.",0,null],[11,"read_u32_into","","Reads a sequence of unsigned 32 bit integers from the underlying reader.",0,null],[11,"read_u64_into","","Reads a sequence of unsigned 64 bit integers from the underlying reader.",0,null],[11,"read_i16_into","","Reads a sequence of signed 16 bit integers from the underlying reader.",0,null],[11,"read_i32_into","","Reads a sequence of signed 32 bit integers from the underlying reader.",0,null],[11,"read_i64_into","","Reads a sequence of signed 64 bit integers from the underlying reader.",0,null],[11,"read_f32_into_unchecked","","Reads a sequence of IEEE754 single-precision (4 bytes) floating point numbers from the underlying reader.",0,null],[11,"read_f64_into_unchecked","","Reads a sequence of IEEE754 double-precision (8 bytes) floating point numbers from the underlying reader.",0,null],[11,"write_u8","","Writes an unsigned 8 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"result"}}],[11,"write_i8","","Writes a signed 8 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"result"}}],[11,"write_u16","","Writes an unsigned 16 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"result"}}],[11,"write_i16","","Writes a signed 16 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"result"}}],[11,"write_u24","","Writes an unsigned 24 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"write_i24","","Writes a signed 24 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"result"}}],[11,"write_u32","","Writes an unsigned 32 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"write_i32","","Writes a signed 32 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"result"}}],[11,"write_u64","","Writes an unsigned 64 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"result"}}],[11,"write_i64","","Writes a signed 64 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"result"}}],[11,"write_uint","","Writes an unsigned n-bytes integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u64"},{"name":"usize"}],"output":{"name":"result"}}],[11,"write_int","","Writes a signed n-bytes integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i64"},{"name":"usize"}],"output":{"name":"result"}}],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"result"}}],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"result"}}]],"paths":[[8,"ReadBytesExt"],[8,"WriteBytesExt"],[8,"ByteOrder"],[4,"BigEndian"],[4,"LittleEndian"]]};
searchIndex["cfg_if"] = {"doc":"A macro for defining #[cfg] if-else statements.","items":[[14,"cfg_if","cfg_if","",null,null]],"paths":[]};
searchIndex["chrono"] = {"doc":"Chrono 0.4.0","items":[[3,"Duration","chrono","ISO 8601 time duration with nanosecond precision. This also allows for the negative duration; see individual methods for details.",null,null],[3,"Date","","ISO 8601 calendar date with time zone.",null,null],[3,"DateTime","","ISO 8601 combined date and time with time zone.",null,null],[3,"ParseWeekdayError","","An error resulting from reading `Weekday` value with `FromStr`.",null,null],[4,"Weekday","","The day of week.",null,null],[13,"Mon","","Monday.",0,null],[13,"Tue","","Tuesday.",0,null],[13,"Wed","","Wednesday.",0,null],[13,"Thu","","Thursday.",0,null],[13,"Fri","","Friday.",0,null],[13,"Sat","","Saturday.",0,null],[13,"Sun","","Sunday.",0,null],[0,"prelude","","A convenience module appropriate for glob imports (`use chrono::prelude::*;`).",null,null],[0,"offset","","The time zone, which calculates offsets from the local time to UTC.",null,null],[3,"Utc","chrono::offset","The UTC time zone. This is the most efficient time zone when you don't need the local time. It is also used as an offset (which is also a dummy type).",null,null],[3,"FixedOffset","","The time zone with fixed offset, from UTC-23:59:59 to UTC+23:59:59.",null,null],[3,"Local","","The local timescale. This is implemented via the standard `time` crate.",null,null],[4,"LocalResult","","The conversion result from the local time to the timezone-aware datetime types.",null,null],[13,"None","","Given local time representation is invalid. This can occur when, for example, the positive timezone transition.",1,null],[13,"Single","","Given local time representation has a single unique result.",1,null],[13,"Ambiguous","","Given local time representation has multiple results and thus ambiguous. This can occur when, for example, the negative timezone transition.",1,null],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"utc"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"utc"}],"output":{"name":"bool"}}],[11,"today","","Returns a `Date` which corresponds to the current date.",2,{"inputs":[],"output":{"name":"date"}}],[11,"now","","Returns a `DateTime` which corresponds to the current date.",2,{"inputs":[],"output":{"name":"datetime"}}],[11,"from_offset","","",2,{"inputs":[{"name":"utc"}],"output":{"name":"utc"}}],[11,"offset_from_local_date","","",2,{"inputs":[{"name":"self"},{"name":"naivedate"}],"output":{"name":"localresult"}}],[11,"offset_from_local_datetime","","",2,{"inputs":[{"name":"self"},{"name":"naivedatetime"}],"output":{"name":"localresult"}}],[11,"offset_from_utc_date","","",2,{"inputs":[{"name":"self"},{"name":"naivedate"}],"output":{"name":"utc"}}],[11,"offset_from_utc_datetime","","",2,{"inputs":[{"name":"self"},{"name":"naivedatetime"}],"output":{"name":"utc"}}],[11,"fix","","",2,{"inputs":[{"name":"self"}],"output":{"name":"fixedoffset"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"fixedoffset"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"fixedoffset"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"fixedoffset"}],"output":{"name":"bool"}}],[11,"east","","Makes a new `FixedOffset` for the Eastern Hemisphere with given timezone difference. The negative `secs` means the Western Hemisphere.",3,{"inputs":[{"name":"i32"}],"output":{"name":"fixedoffset"}}],[11,"east_opt","","Makes a new `FixedOffset` for the Eastern Hemisphere with given timezone difference. The negative `secs` means the Western Hemisphere.",3,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[11,"west","","Makes a new `FixedOffset` for the Western Hemisphere with given timezone difference. The negative `secs` means the Eastern Hemisphere.",3,{"inputs":[{"name":"i32"}],"output":{"name":"fixedoffset"}}],[11,"west_opt","","Makes a new `FixedOffset` for the Western Hemisphere with given timezone difference. The negative `secs` means the Eastern Hemisphere.",3,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[11,"local_minus_utc","","Returns the number of seconds to add to convert from UTC to the local time.",3,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"utc_minus_local","","Returns the number of seconds to add to convert from the local time to UTC.",3,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"from_offset","","",3,{"inputs":[{"name":"fixedoffset"}],"output":{"name":"fixedoffset"}}],[11,"offset_from_local_date","","",3,{"inputs":[{"name":"self"},{"name":"naivedate"}],"output":{"name":"localresult"}}],[11,"offset_from_local_datetime","","",3,{"inputs":[{"name":"self"},{"name":"naivedatetime"}],"output":{"name":"localresult"}}],[11,"offset_from_utc_date","","",3,{"inputs":[{"name":"self"},{"name":"naivedate"}],"output":{"name":"fixedoffset"}}],[11,"offset_from_utc_datetime","","",3,{"inputs":[{"name":"self"},{"name":"naivedatetime"}],"output":{"name":"fixedoffset"}}],[11,"fix","","",3,{"inputs":[{"name":"self"}],"output":{"name":"fixedoffset"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"add","chrono","",4,{"inputs":[{"name":"self"},{"name":"fixedoffset"}],"output":{"name":"datetime"}}],[11,"sub","","",4,{"inputs":[{"name":"self"},{"name":"fixedoffset"}],"output":{"name":"datetime"}}],[11,"clone","chrono::offset","",5,{"inputs":[{"name":"self"}],"output":{"name":"local"}}],[11,"today","","Returns a `Date` which corresponds to the current date.",5,{"inputs":[],"output":{"name":"date"}}],[11,"now","","Returns a `DateTime` which corresponds to the current date.",5,{"inputs":[],"output":{"name":"datetime"}}],[11,"from_offset","","",5,{"inputs":[{"name":"fixedoffset"}],"output":{"name":"local"}}],[11,"offset_from_local_date","","",5,{"inputs":[{"name":"self"},{"name":"naivedate"}],"output":{"name":"localresult"}}],[11,"offset_from_local_datetime","","",5,{"inputs":[{"name":"self"},{"name":"naivedatetime"}],"output":{"name":"localresult"}}],[11,"offset_from_utc_date","","",5,{"inputs":[{"name":"self"},{"name":"naivedate"}],"output":{"name":"fixedoffset"}}],[11,"offset_from_utc_datetime","","",5,{"inputs":[{"name":"self"},{"name":"naivedatetime"}],"output":{"name":"fixedoffset"}}],[11,"from_local_date","","",5,{"inputs":[{"name":"self"},{"name":"naivedate"}],"output":{"name":"localresult"}}],[11,"from_local_datetime","","",5,{"inputs":[{"name":"self"},{"name":"naivedatetime"}],"output":{"name":"localresult"}}],[11,"from_utc_date","","",5,{"inputs":[{"name":"self"},{"name":"naivedate"}],"output":{"name":"date"}}],[11,"from_utc_datetime","","",5,{"inputs":[{"name":"self"},{"name":"naivedatetime"}],"output":{"name":"datetime"}}],[8,"Offset","","The offset from the local time to UTC.",null,null],[10,"fix","","Returns the fixed offset from UTC to the local time stored.",6,{"inputs":[{"name":"self"}],"output":{"name":"fixedoffset"}}],[8,"TimeZone","","The time zone.",null,null],[16,"Offset","","An associated offset type. This type is used to store the actual offset in date and time types. The original `TimeZone` value can be recovered via `TimeZone::from_offset`.",7,null],[11,"ymd","","Makes a new `Date` from year, month, day and the current time zone. This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.",7,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"date"}}],[11,"ymd_opt","","Makes a new `Date` from year, month, day and the current time zone. This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.",7,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"localresult"}}],[11,"yo","","Makes a new `Date` from year, day of year (DOY or \"ordinal\") and the current time zone. This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.",7,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"u32"}],"output":{"name":"date"}}],[11,"yo_opt","","Makes a new `Date` from year, day of year (DOY or \"ordinal\") and the current time zone. This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.",7,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"u32"}],"output":{"name":"localresult"}}],[11,"isoywd","","Makes a new `Date` from ISO week date (year and week number), day of the week (DOW) and the current time zone. This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE. The resulting `Date` may have a different year from the input year.",7,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"u32"},{"name":"weekday"}],"output":{"name":"date"}}],[11,"isoywd_opt","","Makes a new `Date` from ISO week date (year and week number), day of the week (DOW) and the current time zone. This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE. The resulting `Date` may have a different year from the input year.",7,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"u32"},{"name":"weekday"}],"output":{"name":"localresult"}}],[11,"timestamp","","Makes a new `DateTime` from the number of non-leap seconds since January 1, 1970 0:00:00 UTC (aka \"UNIX timestamp\") and the number of nanoseconds since the last whole non-leap second.",7,{"inputs":[{"name":"self"},{"name":"i64"},{"name":"u32"}],"output":{"name":"datetime"}}],[11,"timestamp_opt","","Makes a new `DateTime` from the number of non-leap seconds since January 1, 1970 0:00:00 UTC (aka \"UNIX timestamp\") and the number of nanoseconds since the last whole non-leap second.",7,{"inputs":[{"name":"self"},{"name":"i64"},{"name":"u32"}],"output":{"name":"localresult"}}],[11,"datetime_from_str","","Parses a string with the specified format string and returns a `DateTime` with the current offset. See the `format::strftime` module on the supported escape sequences.",7,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"}],"output":{"name":"parseresult"}}],[10,"from_offset","","Reconstructs the time zone from the offset.",7,null],[10,"offset_from_local_date","","Creates the offset(s) for given local `NaiveDate` if possible.",7,{"inputs":[{"name":"self"},{"name":"naivedate"}],"output":{"name":"localresult"}}],[10,"offset_from_local_datetime","","Creates the offset(s) for given local `NaiveDateTime` if possible.",7,{"inputs":[{"name":"self"},{"name":"naivedatetime"}],"output":{"name":"localresult"}}],[11,"from_local_date","","Converts the local `NaiveDate` to the timezone-aware `Date` if possible.",7,{"inputs":[{"name":"self"},{"name":"naivedate"}],"output":{"name":"localresult"}}],[11,"from_local_datetime","","Converts the local `NaiveDateTime` to the timezone-aware `DateTime` if possible.",7,{"inputs":[{"name":"self"},{"name":"naivedatetime"}],"output":{"name":"localresult"}}],[10,"offset_from_utc_date","","Creates the offset for given UTC `NaiveDate`. This cannot fail.",7,null],[10,"offset_from_utc_datetime","","Creates the offset for given UTC `NaiveDateTime`. This cannot fail.",7,null],[11,"from_utc_date","","Converts the UTC `NaiveDate` to the local time. The UTC is continuous and thus this cannot fail (but can give the duplicate local time).",7,{"inputs":[{"name":"self"},{"name":"naivedate"}],"output":{"name":"date"}}],[11,"from_utc_datetime","","Converts the UTC `NaiveDateTime` to the local time. The UTC is continuous and thus this cannot fail (but can give the duplicate local time).",7,{"inputs":[{"name":"self"},{"name":"naivedatetime"}],"output":{"name":"datetime"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"localresult"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"localresult"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"localresult"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"single","","Returns `Some` only when the conversion result is unique, or `None` otherwise.",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"earliest","","Returns `Some` for the earliest possible conversion result, or `None` if none.",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"latest","","Returns `Some` for the latest possible conversion result, or `None` if none.",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"map","","Maps a `LocalResult<T>` into `LocalResult<U>` with given function.",1,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"localresult"}}],[11,"and_time","","Makes a new `DateTime` from the current date and given `NaiveTime`. The offset in the current date is preserved.",1,{"inputs":[{"name":"self"},{"name":"naivetime"}],"output":{"name":"localresult"}}],[11,"and_hms_opt","","Makes a new `DateTime` from the current date, hour, minute and second. The offset in the current date is preserved.",1,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"localresult"}}],[11,"and_hms_milli_opt","","Makes a new `DateTime` from the current date, hour, minute, second and millisecond. The millisecond part can exceed 1,000 in order to represent the leap second. The offset in the current date is preserved.",1,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"localresult"}}],[11,"and_hms_micro_opt","","Makes a new `DateTime` from the current date, hour, minute, second and microsecond. The microsecond part can exceed 1,000,000 in order to represent the leap second. The offset in the current date is preserved.",1,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"localresult"}}],[11,"and_hms_nano_opt","","Makes a new `DateTime` from the current date, hour, minute, second and nanosecond. The nanosecond part can exceed 1,000,000,000 in order to represent the leap second. The offset in the current date is preserved.",1,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"localresult"}}],[11,"unwrap","","Returns the single unique conversion result, or panics accordingly.",1,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[0,"naive","chrono","Date and time types which do not concern about the timezones.",null,null],[3,"NaiveDate","chrono::naive","ISO 8601 calendar date without timezone. Allows for every proleptic Gregorian date from Jan 1, 262145 BCE to Dec 31, 262143 CE. Also supports the conversion from ISO 8601 ordinal and week date.",null,null],[3,"IsoWeek","","ISO 8601 week.",null,null],[3,"NaiveTime","","ISO 8601 time without timezone. Allows for the nanosecond precision and optional leap second representation.",null,null],[3,"NaiveDateTime","","ISO 8601 combined date and time without timezone.",null,null],[3,"TsSeconds","","A DateTime that can be deserialized from a seconds-based timestamp",null,null],[11,"serialize","","",8,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",8,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"naivedate"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"self"},{"name":"naivedate"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",8,{"inputs":[{"name":"self"},{"name":"naivedate"}],"output":{"name":"option"}}],[11,"lt","","",8,{"inputs":[{"name":"self"},{"name":"naivedate"}],"output":{"name":"bool"}}],[11,"le","","",8,{"inputs":[{"name":"self"},{"name":"naivedate"}],"output":{"name":"bool"}}],[11,"gt","","",8,{"inputs":[{"name":"self"},{"name":"naivedate"}],"output":{"name":"bool"}}],[11,"ge","","",8,{"inputs":[{"name":"self"},{"name":"naivedate"}],"output":{"name":"bool"}}],[11,"cmp","","",8,{"inputs":[{"name":"self"},{"name":"naivedate"}],"output":{"name":"ordering"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"naivedate"}}],[11,"from_ymd","","Makes a new `NaiveDate` from the calendar date (year, month and day).",8,{"inputs":[{"name":"i32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"naivedate"}}],[11,"from_ymd_opt","","Makes a new `NaiveDate` from the calendar date (year, month and day).",8,{"inputs":[{"name":"i32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"from_yo","","Makes a new `NaiveDate` from the ordinal date (year and day of the year).",8,{"inputs":[{"name":"i32"},{"name":"u32"}],"output":{"name":"naivedate"}}],[11,"from_yo_opt","","Makes a new `NaiveDate` from the ordinal date (year and day of the year).",8,{"inputs":[{"name":"i32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"from_isoywd","","Makes a new `NaiveDate` from the ISO week date (year, week number and day of the week). The resulting `NaiveDate` may have a different year from the input year.",8,{"inputs":[{"name":"i32"},{"name":"u32"},{"name":"weekday"}],"output":{"name":"naivedate"}}],[11,"from_isoywd_opt","","Makes a new `NaiveDate` from the ISO week date (year, week number and day of the week). The resulting `NaiveDate` may have a different year from the input year.",8,{"inputs":[{"name":"i32"},{"name":"u32"},{"name":"weekday"}],"output":{"name":"option"}}],[11,"from_num_days_from_ce","","Makes a new `NaiveDate` from the number of days since January 1, 1 (Day 1) in the proleptic Gregorian calendar.",8,{"inputs":[{"name":"i32"}],"output":{"name":"naivedate"}}],[11,"from_num_days_from_ce_opt","","Makes a new `NaiveDate` from the number of days since January 1, 1 (Day 1) in the proleptic Gregorian calendar.",8,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[11,"parse_from_str","","Parses a string with the specified format string and returns a new `NaiveDate`. See the `format::strftime` module on the supported escape sequences.",8,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"parseresult"}}],[11,"and_time","","Makes a new `NaiveDateTime` from the current date and given `NaiveTime`.",8,{"inputs":[{"name":"self"},{"name":"naivetime"}],"output":{"name":"naivedatetime"}}],[11,"and_hms","","Makes a new `NaiveDateTime` from the current date, hour, minute and second.",8,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"naivedatetime"}}],[11,"and_hms_opt","","Makes a new `NaiveDateTime` from the current date, hour, minute and second.",8,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"and_hms_milli","","Makes a new `NaiveDateTime` from the current date, hour, minute, second and millisecond.",8,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"naivedatetime"}}],[11,"and_hms_milli_opt","","Makes a new `NaiveDateTime` from the current date, hour, minute, second and millisecond.",8,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"and_hms_micro","","Makes a new `NaiveDateTime` from the current date, hour, minute, second and microsecond.",8,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"naivedatetime"}}],[11,"and_hms_micro_opt","","Makes a new `NaiveDateTime` from the current date, hour, minute, second and microsecond.",8,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"and_hms_nano","","Makes a new `NaiveDateTime` from the current date, hour, minute, second and nanosecond.",8,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"naivedatetime"}}],[11,"and_hms_nano_opt","","Makes a new `NaiveDateTime` from the current date, hour, minute, second and nanosecond.",8,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"succ","","Makes a new `NaiveDate` for the next calendar date.",8,{"inputs":[{"name":"self"}],"output":{"name":"naivedate"}}],[11,"succ_opt","","Makes a new `NaiveDate` for the next calendar date.",8,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"pred","","Makes a new `NaiveDate` for the previous calendar date.",8,{"inputs":[{"name":"self"}],"output":{"name":"naivedate"}}],[11,"pred_opt","","Makes a new `NaiveDate` for the previous calendar date.",8,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"checked_add_signed","","Adds the `days` part of given `Duration` to the current date.",8,{"inputs":[{"name":"self"},{"name":"oldduration"}],"output":{"name":"option"}}],[11,"checked_sub_signed","","Subtracts the `days` part of given `Duration` from the current date.",8,{"inputs":[{"name":"self"},{"name":"oldduration"}],"output":{"name":"option"}}],[11,"signed_duration_since","","Subtracts another `NaiveDate` from the current date. Returns a `Duration` of integral numbers.",8,{"inputs":[{"name":"self"},{"name":"naivedate"}],"output":{"name":"oldduration"}}],[11,"format_with_items","","Formats the date with the specified formatting items. Otherwise it is same to the ordinary `format` method.",8,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"delayedformat"}}],[11,"format","","Formats the date with the specified format string. See the `format::strftime` module on the supported escape sequences.",8,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"delayedformat"}}],[11,"year","","Returns the year number in the calendar date.",8,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"month","","Returns the month number starting from 1.",8,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"month0","","Returns the month number starting from 0.",8,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"day","","Returns the day of month starting from 1.",8,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"day0","","Returns the day of month starting from 0.",8,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"ordinal","","Returns the day of year starting from 1.",8,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"ordinal0","","Returns the day of year starting from 0.",8,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"weekday","","Returns the day of week.",8,{"inputs":[{"name":"self"}],"output":{"name":"weekday"}}],[11,"iso_week","","",8,{"inputs":[{"name":"self"}],"output":{"name":"isoweek"}}],[11,"with_year","","Makes a new `NaiveDate` with the year number changed.",8,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"option"}}],[11,"with_month","","Makes a new `NaiveDate` with the month number (starting from 1) changed.",8,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_month0","","Makes a new `NaiveDate` with the month number (starting from 0) changed.",8,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_day","","Makes a new `NaiveDate` with the day of month (starting from 1) changed.",8,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_day0","","Makes a new `NaiveDate` with the day of month (starting from 0) changed.",8,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_ordinal","","Makes a new `NaiveDate` with the day of year (starting from 1) changed.",8,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_ordinal0","","Makes a new `NaiveDate` with the day of year (starting from 0) changed.",8,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"hash","","",8,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"add","","",8,{"inputs":[{"name":"self"},{"name":"oldduration"}],"output":{"name":"naivedate"}}],[11,"add_assign","","",8,{"inputs":[{"name":"self"},{"name":"oldduration"}],"output":null}],[11,"sub","","",8,{"inputs":[{"name":"self"},{"name":"oldduration"}],"output":{"name":"naivedate"}}],[11,"sub_assign","","",8,{"inputs":[{"name":"self"},{"name":"oldduration"}],"output":null}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",8,{"inputs":[{"name":"str"}],"output":{"name":"parseresult"}}],[11,"eq","","",9,{"inputs":[{"name":"self"},{"name":"isoweek"}],"output":{"name":"bool"}}],[11,"ne","","",9,{"inputs":[{"name":"self"},{"name":"isoweek"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",9,{"inputs":[{"name":"self"},{"name":"isoweek"}],"output":{"name":"option"}}],[11,"lt","","",9,{"inputs":[{"name":"self"},{"name":"isoweek"}],"output":{"name":"bool"}}],[11,"le","","",9,{"inputs":[{"name":"self"},{"name":"isoweek"}],"output":{"name":"bool"}}],[11,"gt","","",9,{"inputs":[{"name":"self"},{"name":"isoweek"}],"output":{"name":"bool"}}],[11,"ge","","",9,{"inputs":[{"name":"self"},{"name":"isoweek"}],"output":{"name":"bool"}}],[11,"cmp","","",9,{"inputs":[{"name":"self"},{"name":"isoweek"}],"output":{"name":"ordering"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"isoweek"}}],[11,"year","","Returns the year number for this ISO week.",9,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"week","","Returns the ISO week number starting from 1.",9,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"week0","","Returns the ISO week number starting from 0.",9,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"serialize","","",10,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",10,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"naivetime"}],"output":{"name":"bool"}}],[11,"ne","","",10,{"inputs":[{"name":"self"},{"name":"naivetime"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",10,{"inputs":[{"name":"self"},{"name":"naivetime"}],"output":{"name":"option"}}],[11,"lt","","",10,{"inputs":[{"name":"self"},{"name":"naivetime"}],"output":{"name":"bool"}}],[11,"le","","",10,{"inputs":[{"name":"self"},{"name":"naivetime"}],"output":{"name":"bool"}}],[11,"gt","","",10,{"inputs":[{"name":"self"},{"name":"naivetime"}],"output":{"name":"bool"}}],[11,"ge","","",10,{"inputs":[{"name":"self"},{"name":"naivetime"}],"output":{"name":"bool"}}],[11,"cmp","","",10,{"inputs":[{"name":"self"},{"name":"naivetime"}],"output":{"name":"ordering"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"naivetime"}}],[11,"from_hms","","Makes a new `NaiveTime` from hour, minute and second.",10,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"naivetime"}}],[11,"from_hms_opt","","Makes a new `NaiveTime` from hour, minute and second.",10,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"from_hms_milli","","Makes a new `NaiveTime` from hour, minute, second and millisecond.",10,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"naivetime"}}],[11,"from_hms_milli_opt","","Makes a new `NaiveTime` from hour, minute, second and millisecond.",10,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"from_hms_micro","","Makes a new `NaiveTime` from hour, minute, second and microsecond.",10,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"naivetime"}}],[11,"from_hms_micro_opt","","Makes a new `NaiveTime` from hour, minute, second and microsecond.",10,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"from_hms_nano","","Makes a new `NaiveTime` from hour, minute, second and nanosecond.",10,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"naivetime"}}],[11,"from_hms_nano_opt","","Makes a new `NaiveTime` from hour, minute, second and nanosecond.",10,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"from_num_seconds_from_midnight","","Makes a new `NaiveTime` from the number of seconds since midnight and nanosecond.",10,{"inputs":[{"name":"u32"},{"name":"u32"}],"output":{"name":"naivetime"}}],[11,"from_num_seconds_from_midnight_opt","","Makes a new `NaiveTime` from the number of seconds since midnight and nanosecond.",10,{"inputs":[{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"parse_from_str","","Parses a string with the specified format string and returns a new `NaiveTime`. See the `format::strftime` module on the supported escape sequences.",10,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"parseresult"}}],[11,"overflowing_add_signed","","Adds given `Duration` to the current time, and also returns the number of seconds in the integral number of days ignored from the addition. (We cannot return `Duration` because it is subject to overflow or underflow.)",10,null],[11,"overflowing_sub_signed","","Subtracts given `Duration` from the current time, and also returns the number of seconds in the integral number of days ignored from the subtraction. (We cannot return `Duration` because it is subject to overflow or underflow.)",10,null],[11,"signed_duration_since","","Subtracts another `NaiveTime` from the current time. Returns a `Duration` within +/- 1 day. This does not overflow or underflow at all.",10,{"inputs":[{"name":"self"},{"name":"naivetime"}],"output":{"name":"oldduration"}}],[11,"format_with_items","","Formats the time with the specified formatting items. Otherwise it is same to the ordinary `format` method.",10,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"delayedformat"}}],[11,"format","","Formats the time with the specified format string. See the `format::strftime` module on the supported escape sequences.",10,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"delayedformat"}}],[11,"hour","","Returns the hour number from 0 to 23.",10,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"minute","","Returns the minute number from 0 to 59.",10,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"second","","Returns the second number from 0 to 59.",10,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"nanosecond","","Returns the number of nanoseconds since the whole non-leap second. The range from 1,000,000,000 to 1,999,999,999 represents the leap second.",10,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"with_hour","","Makes a new `NaiveTime` with the hour number changed.",10,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_minute","","Makes a new `NaiveTime` with the minute number changed.",10,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_second","","Makes a new `NaiveTime` with the second number changed.",10,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_nanosecond","","Makes a new `NaiveTime` with nanoseconds since the whole non-leap second changed.",10,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"num_seconds_from_midnight","","Returns the number of non-leap seconds past the last midnight.",10,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"hash","","",10,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"add","","",10,{"inputs":[{"name":"self"},{"name":"oldduration"}],"output":{"name":"naivetime"}}],[11,"add_assign","","",10,{"inputs":[{"name":"self"},{"name":"oldduration"}],"output":null}],[11,"sub","","",10,{"inputs":[{"name":"self"},{"name":"oldduration"}],"output":{"name":"naivetime"}}],[11,"sub_assign","","",10,{"inputs":[{"name":"self"},{"name":"oldduration"}],"output":null}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",10,{"inputs":[{"name":"str"}],"output":{"name":"parseresult"}}],[11,"serialize","","",11,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",11,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"eq","","",11,{"inputs":[{"name":"self"},{"name":"naivedatetime"}],"output":{"name":"bool"}}],[11,"ne","","",11,{"inputs":[{"name":"self"},{"name":"naivedatetime"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",11,{"inputs":[{"name":"self"},{"name":"naivedatetime"}],"output":{"name":"option"}}],[11,"lt","","",11,{"inputs":[{"name":"self"},{"name":"naivedatetime"}],"output":{"name":"bool"}}],[11,"le","","",11,{"inputs":[{"name":"self"},{"name":"naivedatetime"}],"output":{"name":"bool"}}],[11,"gt","","",11,{"inputs":[{"name":"self"},{"name":"naivedatetime"}],"output":{"name":"bool"}}],[11,"ge","","",11,{"inputs":[{"name":"self"},{"name":"naivedatetime"}],"output":{"name":"bool"}}],[11,"cmp","","",11,{"inputs":[{"name":"self"},{"name":"naivedatetime"}],"output":{"name":"ordering"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"naivedatetime"}}],[11,"from","","Pull the internal NaiveDateTime out",11,{"inputs":[{"name":"tsseconds"}],"output":{"name":"naivedatetime"}}],[11,"deref","","",12,null],[11,"new","","Makes a new `NaiveDateTime` from date and time components. Equivalent to `date.and_time(time)` and many other helper constructors on `NaiveDate`.",11,{"inputs":[{"name":"naivedate"},{"name":"naivetime"}],"output":{"name":"naivedatetime"}}],[11,"from_timestamp","","Makes a new `NaiveDateTime` corresponding to a UTC date and time, from the number of non-leap seconds since the midnight UTC on January 1, 1970 (aka \"UNIX timestamp\") and the number of nanoseconds since the last whole non-leap second.",11,{"inputs":[{"name":"i64"},{"name":"u32"}],"output":{"name":"naivedatetime"}}],[11,"from_timestamp_opt","","Makes a new `NaiveDateTime` corresponding to a UTC date and time, from the number of non-leap seconds since the midnight UTC on January 1, 1970 (aka \"UNIX timestamp\") and the number of nanoseconds since the last whole non-leap second.",11,{"inputs":[{"name":"i64"},{"name":"u32"}],"output":{"name":"option"}}],[11,"parse_from_str","","Parses a string with the specified format string and returns a new `NaiveDateTime`. See the `format::strftime` module on the supported escape sequences.",11,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"parseresult"}}],[11,"date","","Retrieves a date component.",11,{"inputs":[{"name":"self"}],"output":{"name":"naivedate"}}],[11,"time","","Retrieves a time component.",11,{"inputs":[{"name":"self"}],"output":{"name":"naivetime"}}],[11,"timestamp","","Returns the number of non-leap seconds since the midnight on January 1, 1970.",11,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"timestamp_subsec_millis","","Returns the number of milliseconds since the last whole non-leap second.",11,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"timestamp_subsec_micros","","Returns the number of microseconds since the last whole non-leap second.",11,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"timestamp_subsec_nanos","","Returns the number of nanoseconds since the last whole non-leap second.",11,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"checked_add_signed","","Adds given `Duration` to the current date and time.",11,{"inputs":[{"name":"self"},{"name":"oldduration"}],"output":{"name":"option"}}],[11,"checked_sub_signed","","Subtracts given `Duration` from the current date and time.",11,{"inputs":[{"name":"self"},{"name":"oldduration"}],"output":{"name":"option"}}],[11,"signed_duration_since","","Subtracts another `NaiveDateTime` from the current date and time. This does not overflow or underflow at all.",11,{"inputs":[{"name":"self"},{"name":"naivedatetime"}],"output":{"name":"oldduration"}}],[11,"format_with_items","","Formats the combined date and time with the specified formatting items. Otherwise it is same to the ordinary `format` method.",11,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"delayedformat"}}],[11,"format","","Formats the combined date and time with the specified format string. See the `format::strftime` module on the supported escape sequences.",11,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"delayedformat"}}],[11,"year","","Returns the year number in the calendar date.",11,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"month","","Returns the month number starting from 1.",11,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"month0","","Returns the month number starting from 0.",11,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"day","","Returns the day of month starting from 1.",11,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"day0","","Returns the day of month starting from 0.",11,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"ordinal","","Returns the day of year starting from 1.",11,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"ordinal0","","Returns the day of year starting from 0.",11,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"weekday","","Returns the day of week.",11,{"inputs":[{"name":"self"}],"output":{"name":"weekday"}}],[11,"iso_week","","",11,{"inputs":[{"name":"self"}],"output":{"name":"isoweek"}}],[11,"with_year","","Makes a new `NaiveDateTime` with the year number changed.",11,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"option"}}],[11,"with_month","","Makes a new `NaiveDateTime` with the month number (starting from 1) changed.",11,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_month0","","Makes a new `NaiveDateTime` with the month number (starting from 0) changed.",11,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_day","","Makes a new `NaiveDateTime` with the day of month (starting from 1) changed.",11,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_day0","","Makes a new `NaiveDateTime` with the day of month (starting from 0) changed.",11,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_ordinal","","Makes a new `NaiveDateTime` with the day of year (starting from 1) changed.",11,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_ordinal0","","Makes a new `NaiveDateTime` with the day of year (starting from 0) changed.",11,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"hour","","Returns the hour number from 0 to 23.",11,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"minute","","Returns the minute number from 0 to 59.",11,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"second","","Returns the second number from 0 to 59.",11,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"nanosecond","","Returns the number of nanoseconds since the whole non-leap second. The range from 1,000,000,000 to 1,999,999,999 represents the leap second.",11,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"with_hour","","Makes a new `NaiveDateTime` with the hour number changed.",11,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_minute","","Makes a new `NaiveDateTime` with the minute number changed.",11,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_second","","Makes a new `NaiveDateTime` with the second number changed.",11,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_nanosecond","","Makes a new `NaiveDateTime` with nanoseconds since the whole non-leap second changed.",11,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"hash","","",11,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"add","","",11,{"inputs":[{"name":"self"},{"name":"oldduration"}],"output":{"name":"naivedatetime"}}],[11,"add_assign","","",11,{"inputs":[{"name":"self"},{"name":"oldduration"}],"output":null}],[11,"sub","","",11,{"inputs":[{"name":"self"},{"name":"oldduration"}],"output":{"name":"naivedatetime"}}],[11,"sub_assign","","",11,{"inputs":[{"name":"self"},{"name":"oldduration"}],"output":null}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",11,{"inputs":[{"name":"str"}],"output":{"name":"parseresult"}}],[0,"serde","","Tools to help serializing/deserializing naive types.",null,null],[0,"ts_seconds","chrono::naive::serde","Used to serialize/deserialize from second-precision timestamps",null,null],[5,"deserialize","chrono::naive::serde::ts_seconds","Deserialize a DateTime from a seconds timestamp",null,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[5,"serialize","","Serialize a UTC datetime into an integer number of seconds since the epoch",null,{"inputs":[{"name":"naivedatetime"},{"name":"s"}],"output":{"name":"result"}}],[17,"MIN_DATE","chrono::naive","The minimum possible `NaiveDate` (January 1, 262145 BCE).",null,null],[17,"MAX_DATE","","The maximum possible `NaiveDate` (December 31, 262143 CE).",null,null],[11,"clone","chrono","",13,{"inputs":[{"name":"self"}],"output":{"name":"date"}}],[11,"from_utc","","Makes a new `Date` with given UTC date and offset. The local date should be constructed via the `TimeZone` trait.",13,null],[11,"and_time","","Makes a new `DateTime` from the current date and given `NaiveTime`. The offset in the current date is preserved.",13,{"inputs":[{"name":"self"},{"name":"naivetime"}],"output":{"name":"option"}}],[11,"and_hms","","Makes a new `DateTime` from the current date, hour, minute and second. The offset in the current date is preserved.",13,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"datetime"}}],[11,"and_hms_opt","","Makes a new `DateTime` from the current date, hour, minute and second. The offset in the current date is preserved.",13,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"and_hms_milli","","Makes a new `DateTime` from the current date, hour, minute, second and millisecond. The millisecond part can exceed 1,000 in order to represent the leap second. The offset in the current date is preserved.",13,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"datetime"}}],[11,"and_hms_milli_opt","","Makes a new `DateTime` from the current date, hour, minute, second and millisecond. The millisecond part can exceed 1,000 in order to represent the leap second. The offset in the current date is preserved.",13,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"and_hms_micro","","Makes a new `DateTime` from the current date, hour, minute, second and microsecond. The microsecond part can exceed 1,000,000 in order to represent the leap second. The offset in the current date is preserved.",13,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"datetime"}}],[11,"and_hms_micro_opt","","Makes a new `DateTime` from the current date, hour, minute, second and microsecond. The microsecond part can exceed 1,000,000 in order to represent the leap second. The offset in the current date is preserved.",13,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"and_hms_nano","","Makes a new `DateTime` from the current date, hour, minute, second and nanosecond. The nanosecond part can exceed 1,000,000,000 in order to represent the leap second. The offset in the current date is preserved.",13,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"datetime"}}],[11,"and_hms_nano_opt","","Makes a new `DateTime` from the current date, hour, minute, second and nanosecond. The nanosecond part can exceed 1,000,000,000 in order to represent the leap second. The offset in the current date is preserved.",13,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"succ","","Makes a new `Date` for the next date.",13,{"inputs":[{"name":"self"}],"output":{"name":"date"}}],[11,"succ_opt","","Makes a new `Date` for the next date.",13,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"pred","","Makes a new `Date` for the prior date.",13,{"inputs":[{"name":"self"}],"output":{"name":"date"}}],[11,"pred_opt","","Makes a new `Date` for the prior date.",13,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"offset","","Retrieves an associated offset from UTC.",13,null],[11,"timezone","","Retrieves an associated time zone.",13,{"inputs":[{"name":"self"}],"output":{"name":"tz"}}],[11,"with_timezone","","Changes the associated time zone. This does not change the actual `Date` (but will change the string representation).",13,{"inputs":[{"name":"self"},{"name":"tz2"}],"output":{"name":"date"}}],[11,"checked_add_signed","","Adds given `Duration` to the current date.",13,{"inputs":[{"name":"self"},{"name":"oldduration"}],"output":{"name":"option"}}],[11,"checked_sub_signed","","Subtracts given `Duration` from the current date.",13,{"inputs":[{"name":"self"},{"name":"oldduration"}],"output":{"name":"option"}}],[11,"signed_duration_since","","Subtracts another `Date` from the current date. Returns a `Duration` of integral numbers.",13,{"inputs":[{"name":"self"},{"name":"date"}],"output":{"name":"oldduration"}}],[11,"naive_utc","","Returns a view to the naive UTC date.",13,{"inputs":[{"name":"self"}],"output":{"name":"naivedate"}}],[11,"naive_local","","Returns a view to the naive local date.",13,{"inputs":[{"name":"self"}],"output":{"name":"naivedate"}}],[11,"format_with_items","","Formats the date with the specified formatting items.",13,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"delayedformat"}}],[11,"format","","Formats the date with the specified format string. See the `format::strftime` module on the supported escape sequences.",13,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"delayedformat"}}],[11,"year","","",13,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"month","","",13,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"month0","","",13,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"day","","",13,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"day0","","",13,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"ordinal","","",13,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"ordinal0","","",13,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"weekday","","",13,{"inputs":[{"name":"self"}],"output":{"name":"weekday"}}],[11,"iso_week","","",13,{"inputs":[{"name":"self"}],"output":{"name":"isoweek"}}],[11,"with_year","","",13,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"option"}}],[11,"with_month","","",13,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_month0","","",13,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_day","","",13,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_day0","","",13,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_ordinal","","",13,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_ordinal0","","",13,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"eq","","",13,{"inputs":[{"name":"self"},{"name":"date"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",13,{"inputs":[{"name":"self"},{"name":"date"}],"output":{"name":"option"}}],[11,"cmp","","",13,{"inputs":[{"name":"self"},{"name":"date"}],"output":{"name":"ordering"}}],[11,"hash","","",13,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"add","","",13,{"inputs":[{"name":"self"},{"name":"oldduration"}],"output":{"name":"date"}}],[11,"sub","","",13,{"inputs":[{"name":"self"},{"name":"oldduration"}],"output":{"name":"date"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"serialize","","",4,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",4,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"deserialize","","",4,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"deserialize","","",4,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"datetime"}}],[11,"from_utc","","Makes a new `DateTime` with given UTC datetime and offset. The local datetime should be constructed via the `TimeZone` trait.",4,null],[11,"date","","Retrieves a date component.",4,{"inputs":[{"name":"self"}],"output":{"name":"date"}}],[11,"time","","Retrieves a time component. Unlike `date`, this is not associated to the time zone.",4,{"inputs":[{"name":"self"}],"output":{"name":"naivetime"}}],[11,"timestamp","","Returns the number of non-leap seconds since January 1, 1970 0:00:00 UTC (aka \"UNIX timestamp\").",4,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"timestamp_subsec_millis","","Returns the number of milliseconds since the last second boundary",4,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"timestamp_subsec_micros","","Returns the number of microseconds since the last second boundary",4,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"timestamp_subsec_nanos","","Returns the number of nanoseconds since the last second boundary",4,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"offset","","Retrieves an associated offset from UTC.",4,null],[11,"timezone","","Retrieves an associated time zone.",4,{"inputs":[{"name":"self"}],"output":{"name":"tz"}}],[11,"with_timezone","","Changes the associated time zone. This does not change the actual `DateTime` (but will change the string representation).",4,{"inputs":[{"name":"self"},{"name":"tz2"}],"output":{"name":"datetime"}}],[11,"checked_add_signed","","Adds given `Duration` to the current date and time.",4,{"inputs":[{"name":"self"},{"name":"oldduration"}],"output":{"name":"option"}}],[11,"checked_sub_signed","","Subtracts given `Duration` from the current date and time.",4,{"inputs":[{"name":"self"},{"name":"oldduration"}],"output":{"name":"option"}}],[11,"signed_duration_since","","Subtracts another `DateTime` from the current date and time. This does not overflow or underflow at all.",4,{"inputs":[{"name":"self"},{"name":"datetime"}],"output":{"name":"oldduration"}}],[11,"naive_utc","","Returns a view to the naive UTC datetime.",4,{"inputs":[{"name":"self"}],"output":{"name":"naivedatetime"}}],[11,"naive_local","","Returns a view to the naive local datetime.",4,{"inputs":[{"name":"self"}],"output":{"name":"naivedatetime"}}],[11,"parse_from_rfc2822","","Parses an RFC 2822 date and time string such as `Tue, 1 Jul 2003 10:52:37 +0200`, then returns a new `DateTime` with a parsed `FixedOffset`.",4,{"inputs":[{"name":"str"}],"output":{"name":"parseresult"}}],[11,"parse_from_rfc3339","","Parses an RFC 3339 and ISO 8601 date and time string such as `1996-12-19T16:39:57-08:00`, then returns a new `DateTime` with a parsed `FixedOffset`.",4,{"inputs":[{"name":"str"}],"output":{"name":"parseresult"}}],[11,"parse_from_str","","Parses a string with the specified format string and returns a new `DateTime` with a parsed `FixedOffset`. See the `format::strftime` module on the supported escape sequences.",4,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"parseresult"}}],[11,"to_rfc2822","","Returns an RFC 2822 date and time string such as `Tue, 1 Jul 2003 10:52:37 +0200`.",4,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"to_rfc3339","","Returns an RFC 3339 and ISO 8601 date and time string such as `1996-12-19T16:39:57-08:00`.",4,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"format_with_items","","Formats the combined date and time with the specified formatting items.",4,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"delayedformat"}}],[11,"format","","Formats the combined date and time with the specified format string. See the `format::strftime` module on the supported escape sequences.",4,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"delayedformat"}}],[11,"year","","",4,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"month","","",4,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"month0","","",4,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"day","","",4,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"day0","","",4,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"ordinal","","",4,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"ordinal0","","",4,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"weekday","","",4,{"inputs":[{"name":"self"}],"output":{"name":"weekday"}}],[11,"iso_week","","",4,{"inputs":[{"name":"self"}],"output":{"name":"isoweek"}}],[11,"with_year","","",4,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"option"}}],[11,"with_month","","",4,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_month0","","",4,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_day","","",4,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_day0","","",4,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_ordinal","","",4,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_ordinal0","","",4,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"hour","","",4,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"minute","","",4,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"second","","",4,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"nanosecond","","",4,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"with_hour","","",4,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_minute","","",4,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_second","","",4,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_nanosecond","","",4,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"datetime"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",4,{"inputs":[{"name":"self"},{"name":"datetime"}],"output":{"name":"option"}}],[11,"cmp","","",4,{"inputs":[{"name":"self"},{"name":"datetime"}],"output":{"name":"ordering"}}],[11,"hash","","",4,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"add","","",4,{"inputs":[{"name":"self"},{"name":"oldduration"}],"output":{"name":"datetime"}}],[11,"sub","","",4,{"inputs":[{"name":"self"},{"name":"oldduration"}],"output":{"name":"datetime"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",4,{"inputs":[{"name":"str"}],"output":{"name":"parseresult"}}],[11,"from_str","","",4,{"inputs":[{"name":"str"}],"output":{"name":"parseresult"}}],[11,"from_str","","",4,{"inputs":[{"name":"str"}],"output":{"name":"parseresult"}}],[11,"from","","",4,{"inputs":[{"name":"systemtime"}],"output":{"name":"datetime"}}],[11,"from","","",4,{"inputs":[{"name":"systemtime"}],"output":{"name":"datetime"}}],[0,"format","","Formatting (and parsing) utilities for date and time.",null,null],[3,"Parsed","chrono::format","Parsed parts of date and time. There are two classes of methods:",null,null],[12,"year","","Year.",14,null],[12,"year_div_100","","Year divided by 100. Implies that the year is >= 1 BCE when set.",14,null],[12,"year_mod_100","","Year modulo 100. Implies that the year is >= 1 BCE when set.",14,null],[12,"isoyear","","Year in the ISO week date.",14,null],[12,"isoyear_div_100","","Year in the ISO week date, divided by 100. Implies that the year is >= 1 BCE when set.",14,null],[12,"isoyear_mod_100","","Year in the ISO week date, modulo 100. Implies that the year is >= 1 BCE when set.",14,null],[12,"month","","Month (1--12).",14,null],[12,"week_from_sun","","Week number, where the week 1 starts at the first Sunday of January (0--53, 1--53 or 1--52 depending on the year).",14,null],[12,"week_from_mon","","Week number, where the week 1 starts at the first Monday of January (0--53, 1--53 or 1--52 depending on the year).",14,null],[12,"isoweek","","ISO week number (1--52 or 1--53 depending on the year).",14,null],[12,"weekday","","Day of the week.",14,null],[12,"ordinal","","Day of the year (1--365 or 1--366 depending on the year).",14,null],[12,"day","","Day of the month (1--28, 1--29, 1--30 or 1--31 depending on the month).",14,null],[12,"hour_div_12","","Hour number divided by 12 (0--1). 0 indicates AM and 1 indicates PM.",14,null],[12,"hour_mod_12","","Hour number modulo 12 (0--11).",14,null],[12,"minute","","Minute number (0--59).",14,null],[12,"second","","Second number (0--60, accounting for leap seconds).",14,null],[12,"nanosecond","","The number of nanoseconds since the whole second (0--999,999,999).",14,null],[12,"timestamp","","The number of non-leap seconds since the midnight UTC on January 1, 1970.",14,null],[12,"offset","","Offset from the local time to UTC, in seconds.",14,null],[3,"InternalNumeric","","An opaque type representing numeric item types for internal uses only.",null,null],[3,"InternalFixed","","An opaque type representing fixed-format item types for internal uses only.",null,null],[3,"ParseError","","An error from the `parse` function.",null,null],[3,"DelayedFormat","","A temporary object which can be used as an argument to `format!` or others. This is normally constructed via `format` methods of each date and time type.",null,null],[4,"Pad","","Padding characters for numeric items.",null,null],[13,"None","","No padding.",15,null],[13,"Zero","","Zero (`0`) padding.",15,null],[13,"Space","","Space padding.",15,null],[4,"Numeric","","Numeric item types. They have associated formatting width (FW) and parsing width (PW).",null,null],[13,"Year","","Full Gregorian year (FW=4, PW=∞). May accept years before 1 BCE or after 9999 CE, given an initial sign.",16,null],[13,"YearDiv100","","Gregorian year divided by 100 (century number; FW=PW=2). Implies the non-negative year.",16,null],[13,"YearMod100","","Gregorian year modulo 100 (FW=PW=2). Cannot be negative.",16,null],[13,"IsoYear","","Year in the ISO week date (FW=4, PW=∞). May accept years before 1 BCE or after 9999 CE, given an initial sign.",16,null],[13,"IsoYearDiv100","","Year in the ISO week date, divided by 100 (FW=PW=2). Implies the non-negative year.",16,null],[13,"IsoYearMod100","","Year in the ISO week date, modulo 100 (FW=PW=2). Cannot be negative.",16,null],[13,"Month","","Month (FW=PW=2).",16,null],[13,"Day","","Day of the month (FW=PW=2).",16,null],[13,"WeekFromSun","","Week number, where the week 1 starts at the first Sunday of January (FW=PW=2).",16,null],[13,"WeekFromMon","","Week number, where the week 1 starts at the first Monday of January (FW=PW=2).",16,null],[13,"IsoWeek","","Week number in the ISO week date (FW=PW=2).",16,null],[13,"NumDaysFromSun","","Day of the week, where Sunday = 0 and Saturday = 6 (FW=PW=1).",16,null],[13,"WeekdayFromMon","","Day of the week, where Monday = 1 and Sunday = 7 (FW=PW=1).",16,null],[13,"Ordinal","","Day of the year (FW=PW=3).",16,null],[13,"Hour","","Hour number in the 24-hour clocks (FW=PW=2).",16,null],[13,"Hour12","","Hour number in the 12-hour clocks (FW=PW=2).",16,null],[13,"Minute","","The number of minutes since the last whole hour (FW=PW=2).",16,null],[13,"Second","","The number of seconds since the last whole minute (FW=PW=2).",16,null],[13,"Nanosecond","","The number of nanoseconds since the last whole second (FW=PW=9). Note that this is not left-aligned; see also `Fixed::Nanosecond`.",16,null],[13,"Timestamp","","The number of non-leap seconds since the midnight UTC on January 1, 1970 (FW=1, PW=∞). For formatting, it assumes UTC upon the absence of time zone offset.",16,null],[13,"Internal","","Internal uses only.",16,null],[4,"Fixed","","Fixed-format item types.",null,null],[13,"ShortMonthName","","Abbreviated month names.",17,null],[13,"LongMonthName","","Full month names.",17,null],[13,"ShortWeekdayName","","Abbreviated day of the week names.",17,null],[13,"LongWeekdayName","","Full day of the week names.",17,null],[13,"LowerAmPm","","AM/PM.",17,null],[13,"UpperAmPm","","AM/PM.",17,null],[13,"Nanosecond","","An optional dot plus one or more digits for left-aligned nanoseconds. May print nothing, 3, 6 or 9 digits according to the available accuracy. See also `Numeric::Nanosecond`.",17,null],[13,"Nanosecond3","","Same to `Nanosecond` but the accuracy is fixed to 3.",17,null],[13,"Nanosecond6","","Same to `Nanosecond` but the accuracy is fixed to 6.",17,null],[13,"Nanosecond9","","Same to `Nanosecond` but the accuracy is fixed to 9.",17,null],[13,"TimezoneName","","Timezone name.",17,null],[13,"TimezoneOffsetColon","","Offset from the local time to UTC (`+09:00` or `-04:00` or `+00:00`).",17,null],[13,"TimezoneOffsetColonZ","","Offset from the local time to UTC (`+09:00` or `-04:00` or `Z`).",17,null],[13,"TimezoneOffset","","Same to `TimezoneOffsetColon` but prints no colon. Parsing allows an optional colon.",17,null],[13,"TimezoneOffsetZ","","Same to `TimezoneOffsetColonZ` but prints no colon. Parsing allows an optional colon.",17,null],[13,"RFC2822","","RFC 2822 date and time syntax. Commonly used for email and MIME date and time.",17,null],[13,"RFC3339","","RFC 3339 & ISO 8601 date and time syntax.",17,null],[13,"Internal","","Internal uses only.",17,null],[4,"Item","","A single formatting item. This is used for both formatting and parsing.",null,null],[13,"Literal","","A literally printed and parsed text.",18,null],[13,"OwnedLiteral","","Same to `Literal` but with the string owned by the item.",18,null],[13,"Space","","Whitespace. Prints literally but reads zero or more whitespace.",18,null],[13,"OwnedSpace","","Same to `Space` but with the string owned by the item.",18,null],[13,"Numeric","","Numeric item. Can be optionally padded to the maximal length (if any) when formatting; the parser simply ignores any padded whitespace and zeroes.",18,null],[13,"Fixed","","Fixed-format item.",18,null],[13,"Error","","Issues a formatting error. Used to signal an invalid format string.",18,null],[5,"parse","","Tries to parse given string into `parsed` with given formatting items. Returns `Ok` when the entire string has been parsed (otherwise `parsed` should not be used). There should be no trailing string after parsing; use a stray `Item::Space` to trim whitespaces.",null,{"inputs":[{"name":"parsed"},{"name":"str"},{"name":"i"}],"output":{"name":"parseresult"}}],[5,"format","","Tries to format given arguments with given formatting items. Internally used by `DelayedFormat`.",null,{"inputs":[{"name":"formatter"},{"name":"option"},{"name":"option"},{"name":"option"},{"name":"i"}],"output":{"name":"result"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"parsed"}}],[11,"eq","","",14,{"inputs":[{"name":"self"},{"name":"parsed"}],"output":{"name":"bool"}}],[11,"ne","","",14,{"inputs":[{"name":"self"},{"name":"parsed"}],"output":{"name":"bool"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",14,{"inputs":[],"output":{"name":"parsed"}}],[11,"new","","Returns the initial value of parsed parts.",14,{"inputs":[],"output":{"name":"parsed"}}],[11,"set_year","","Tries to set the `year` field from given value.",14,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"parseresult"}}],[11,"set_year_div_100","","Tries to set the `year_div_100` field from given value.",14,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"parseresult"}}],[11,"set_year_mod_100","","Tries to set the `year_mod_100` field from given value.",14,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"parseresult"}}],[11,"set_isoyear","","Tries to set the `isoyear` field from given value.",14,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"parseresult"}}],[11,"set_isoyear_div_100","","Tries to set the `isoyear_div_100` field from given value.",14,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"parseresult"}}],[11,"set_isoyear_mod_100","","Tries to set the `isoyear_mod_100` field from given value.",14,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"parseresult"}}],[11,"set_month","","Tries to set the `month` field from given value.",14,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"parseresult"}}],[11,"set_week_from_sun","","Tries to set the `week_from_sun` field from given value.",14,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"parseresult"}}],[11,"set_week_from_mon","","Tries to set the `week_from_mon` field from given value.",14,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"parseresult"}}],[11,"set_isoweek","","Tries to set the `isoweek` field from given value.",14,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"parseresult"}}],[11,"set_weekday","","Tries to set the `weekday` field from given value.",14,{"inputs":[{"name":"self"},{"name":"weekday"}],"output":{"name":"parseresult"}}],[11,"set_ordinal","","Tries to set the `ordinal` field from given value.",14,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"parseresult"}}],[11,"set_day","","Tries to set the `day` field from given value.",14,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"parseresult"}}],[11,"set_ampm","","Tries to set the `hour_div_12` field from given value. (`false` for AM, `true` for PM)",14,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"parseresult"}}],[11,"set_hour12","","Tries to set the `hour_mod_12` field from given hour number in 12-hour clocks.",14,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"parseresult"}}],[11,"set_hour","","Tries to set both `hour_div_12` and `hour_mod_12` fields from given value.",14,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"parseresult"}}],[11,"set_minute","","Tries to set the `minute` field from given value.",14,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"parseresult"}}],[11,"set_second","","Tries to set the `second` field from given value.",14,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"parseresult"}}],[11,"set_nanosecond","","Tries to set the `nanosecond` field from given value.",14,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"parseresult"}}],[11,"set_timestamp","","Tries to set the `timestamp` field from given value.",14,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"parseresult"}}],[11,"set_offset","","Tries to set the `offset` field from given value.",14,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"parseresult"}}],[11,"to_naive_date","","Returns a parsed naive date out of given fields.",14,{"inputs":[{"name":"self"}],"output":{"name":"parseresult"}}],[11,"to_naive_time","","Returns a parsed naive time out of given fields.",14,{"inputs":[{"name":"self"}],"output":{"name":"parseresult"}}],[11,"to_naive_datetime_with_offset","","Returns a parsed naive date and time out of given fields, except for the `offset` field (assumed to have a given value). This is required for parsing a local time or other known-timezone inputs.",14,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"parseresult"}}],[11,"to_fixed_offset","","Returns a parsed fixed time zone offset out of given fields.",14,{"inputs":[{"name":"self"}],"output":{"name":"parseresult"}}],[11,"to_datetime","","Returns a parsed timezone-aware date and time out of given fields.",14,{"inputs":[{"name":"self"}],"output":{"name":"parseresult"}}],[11,"to_datetime_with_timezone","","Returns a parsed timezone-aware date and time out of given fields, with an additional `TimeZone` used to interpret and validate the local date.",14,{"inputs":[{"name":"self"},{"name":"tz"}],"output":{"name":"parseresult"}}],[0,"strftime","","`strftime`/`strptime`-inspired date and time formatting syntax.",null,null],[3,"StrftimeItems","chrono::format::strftime","Parsing iterator for `strftime`-like format strings.",null,null],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"strftimeitems"}}],[11,"new","","Creates a new parsing iterator from the `strftime`-like format string.",19,{"inputs":[{"name":"str"}],"output":{"name":"strftimeitems"}}],[11,"next","","",19,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[6,"ParseResult","chrono::format","Same to `Result<T, ParseError>`.",null,null],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"pad"}}],[11,"eq","","",15,{"inputs":[{"name":"self"},{"name":"pad"}],"output":{"name":"bool"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"numeric"}}],[11,"eq","","",16,{"inputs":[{"name":"self"},{"name":"numeric"}],"output":{"name":"bool"}}],[11,"ne","","",16,{"inputs":[{"name":"self"},{"name":"numeric"}],"output":{"name":"bool"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"eq","","",20,{"inputs":[{"name":"self"},{"name":"internalnumeric"}],"output":{"name":"bool"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"fixed"}}],[11,"eq","","",17,{"inputs":[{"name":"self"},{"name":"fixed"}],"output":{"name":"bool"}}],[11,"ne","","",17,{"inputs":[{"name":"self"},{"name":"fixed"}],"output":{"name":"bool"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"eq","","",21,{"inputs":[{"name":"self"},{"name":"internalfixed"}],"output":{"name":"bool"}}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"item"}}],[11,"eq","","",18,{"inputs":[{"name":"self"},{"name":"item"}],"output":{"name":"bool"}}],[11,"ne","","",18,{"inputs":[{"name":"self"},{"name":"item"}],"output":{"name":"bool"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"parseerror"}}],[11,"eq","","",22,{"inputs":[{"name":"self"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"ne","","",22,{"inputs":[{"name":"self"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",22,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Makes a new `DelayedFormat` value out of local date and time.",23,{"inputs":[{"name":"option"},{"name":"option"},{"name":"i"}],"output":{"name":"delayedformat"}}],[11,"new_with_offset","","Makes a new `DelayedFormat` value out of local date and time and UTC offset.",23,{"inputs":[{"name":"option"},{"name":"option"},{"name":"off"},{"name":"i"}],"output":{"name":"delayedformat"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","chrono","",0,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[0,"serde","","Ser/de helpers",null,null],[0,"ts_seconds","chrono::serde","Ser/de to/from timestamps in seconds",null,null],[5,"deserialize","chrono::serde::ts_seconds","Deserialize a DateTime from a seconds timestamp",null,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[5,"serialize","","Serialize a UTC datetime into an integer number of seconds since the epoch",null,{"inputs":[{"name":"datetime"},{"name":"s"}],"output":{"name":"result"}}],[11,"serialize","chrono","",0,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",0,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[17,"MIN_DATE","","The minimum possible `Date`.",null,null],[17,"MAX_DATE","","The maximum possible `Date`.",null,null],[8,"Datelike","","The common set of methods for date component.",null,null],[10,"year","","Returns the year number in the calendar date.",24,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"year_ce","","Returns the absolute year number starting from 1 with a boolean flag, which is false when the year predates the epoch (BCE/BC) and true otherwise (CE/AD).",24,null],[10,"month","","Returns the month number starting from 1.",24,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"month0","","Returns the month number starting from 0.",24,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"day","","Returns the day of month starting from 1.",24,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"day0","","Returns the day of month starting from 0.",24,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"ordinal","","Returns the day of year starting from 1.",24,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"ordinal0","","Returns the day of year starting from 0.",24,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"weekday","","Returns the day of week.",24,{"inputs":[{"name":"self"}],"output":{"name":"weekday"}}],[10,"iso_week","","Returns the ISO week.",24,{"inputs":[{"name":"self"}],"output":{"name":"isoweek"}}],[10,"with_year","","Makes a new value with the year number changed.",24,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"option"}}],[10,"with_month","","Makes a new value with the month number (starting from 1) changed.",24,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[10,"with_month0","","Makes a new value with the month number (starting from 0) changed.",24,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[10,"with_day","","Makes a new value with the day of month (starting from 1) changed.",24,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[10,"with_day0","","Makes a new value with the day of month (starting from 0) changed.",24,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[10,"with_ordinal","","Makes a new value with the day of year (starting from 1) changed.",24,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[10,"with_ordinal0","","Makes a new value with the day of year (starting from 0) changed.",24,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"num_days_from_ce","","Returns the number of days since January 1, 1 (Day 1) in the proleptic Gregorian calendar.",24,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[8,"Timelike","","The common set of methods for time component.",null,null],[10,"hour","","Returns the hour number from 0 to 23.",25,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"hour12","","Returns the hour number from 1 to 12 with a boolean flag, which is false for AM and true for PM.",25,null],[10,"minute","","Returns the minute number from 0 to 59.",25,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"second","","Returns the second number from 0 to 59.",25,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"nanosecond","","Returns the number of nanoseconds since the whole non-leap second. The range from 1,000,000,000 to 1,999,999,999 represents the leap second.",25,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"with_hour","","Makes a new value with the hour number changed.",25,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[10,"with_minute","","Makes a new value with the minute number changed.",25,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[10,"with_second","","Makes a new value with the second number changed.",25,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[10,"with_nanosecond","","Makes a new value with nanoseconds since the whole non-leap second changed.",25,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"num_seconds_from_midnight","","Returns the number of non-leap seconds past the last midnight.",25,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"weekday"}],"output":{"name":"bool"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"weekday"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",0,null],[11,"succ","","The next day in the week.",0,{"inputs":[{"name":"self"}],"output":{"name":"weekday"}}],[11,"pred","","The previous day in the week.",0,{"inputs":[{"name":"self"}],"output":{"name":"weekday"}}],[11,"number_from_monday","","Returns a day-of-week number starting from Monday = 1. (ISO 8601 weekday number)",0,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"number_from_sunday","","Returns a day-of-week number starting from Sunday = 1.",0,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"num_days_from_monday","","Returns a day-of-week number starting from Monday = 0.",0,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"num_days_from_sunday","","Returns a day-of-week number starting from Sunday = 0.",0,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"from_i64","","",0,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",0,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"clone","","",26,{"inputs":[{"name":"self"}],"output":{"name":"parseweekdayerror"}}],[11,"eq","","",26,{"inputs":[{"name":"self"},{"name":"parseweekdayerror"}],"output":{"name":"bool"}}],[11,"ne","","",26,{"inputs":[{"name":"self"},{"name":"parseweekdayerror"}],"output":{"name":"bool"}}],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"weeks","","Makes a new `Duration` with given number of weeks. Equivalent to `Duration::seconds(weeks * 7 * 24 * 60 * 60)` with overflow checks. Panics when the duration is out of bounds.",27,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"days","","Makes a new `Duration` with given number of days. Equivalent to `Duration::seconds(days * 24 * 60 * 60)` with overflow checks. Panics when the duration is out of bounds.",27,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"hours","","Makes a new `Duration` with given number of hours. Equivalent to `Duration::seconds(hours * 60 * 60)` with overflow checks. Panics when the duration is out of bounds.",27,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"minutes","","Makes a new `Duration` with given number of minutes. Equivalent to `Duration::seconds(minutes * 60)` with overflow checks. Panics when the duration is out of bounds.",27,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"seconds","","Makes a new `Duration` with given number of seconds. Panics when the duration is more than `i64::MAX` milliseconds or less than `i64::MIN` milliseconds.",27,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"milliseconds","","Makes a new `Duration` with given number of milliseconds.",27,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"microseconds","","Makes a new `Duration` with given number of microseconds.",27,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"nanoseconds","","Makes a new `Duration` with given number of nanoseconds.",27,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"span","","Runs a closure, returning the duration of time it took to run the closure.",27,{"inputs":[{"name":"f"}],"output":{"name":"duration"}}],[11,"num_weeks","","Returns the total number of whole weeks in the duration.",27,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"num_days","","Returns the total number of whole days in the duration.",27,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"num_hours","","Returns the total number of whole hours in the duration.",27,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"num_minutes","","Returns the total number of whole minutes in the duration.",27,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"num_seconds","","Returns the total number of whole seconds in the duration.",27,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"num_milliseconds","","Returns the total number of whole milliseconds in the duration,",27,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"num_microseconds","","Returns the total number of whole microseconds in the duration, or `None` on overflow (exceeding 2^63 microseconds in either direction).",27,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"num_nanoseconds","","Returns the total number of whole nanoseconds in the duration, or `None` on overflow (exceeding 2^63 nanoseconds in either direction).",27,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"checked_add","","Add two durations, returning `None` if overflow occurred.",27,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"option"}}],[11,"checked_sub","","Subtract two durations, returning `None` if overflow occurred.",27,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"option"}}],[11,"min_value","","The minimum possible `Duration`: `i64::MIN` milliseconds.",27,{"inputs":[],"output":{"name":"duration"}}],[11,"max_value","","The maximum possible `Duration`: `i64::MAX` milliseconds.",27,{"inputs":[],"output":{"name":"duration"}}],[11,"zero","","A duration where the stored seconds and nanoseconds are equal to zero.",27,{"inputs":[],"output":{"name":"duration"}}],[11,"is_zero","","Returns `true` if the duration equals `Duration::zero()`.",27,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_std","","Creates a `time::Duration` object from `std::time::Duration`",27,{"inputs":[{"name":"duration"}],"output":{"name":"result"}}],[11,"to_std","","Creates a `std::time::Duration` object from `time::Duration`",27,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"sub","","",27,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"duration"}}],[11,"partial_cmp","","",27,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"option"}}],[11,"lt","","",27,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"le","","",27,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"gt","","",27,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"ge","","",27,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"div","","",27,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"duration"}}],[11,"fmt","","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",27,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"ordering"}}],[11,"clone","","",27,{"inputs":[{"name":"self"}],"output":{"name":"duration"}}],[11,"eq","","",27,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"ne","","",27,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"add","","",27,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"duration"}}],[11,"neg","","",27,{"inputs":[{"name":"self"}],"output":{"name":"duration"}}],[11,"mul","","",27,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"duration"}}],[11,"fmt","","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"add","chrono::naive","",10,{"inputs":[{"name":"self"},{"name":"fixedoffset"}],"output":{"name":"naivetime"}}],[11,"sub","","",10,{"inputs":[{"name":"self"},{"name":"fixedoffset"}],"output":{"name":"naivetime"}}],[11,"add","","",11,{"inputs":[{"name":"self"},{"name":"fixedoffset"}],"output":{"name":"naivedatetime"}}],[11,"sub","","",11,{"inputs":[{"name":"self"},{"name":"fixedoffset"}],"output":{"name":"naivedatetime"}}]],"paths":[[4,"Weekday"],[4,"LocalResult"],[3,"Utc"],[3,"FixedOffset"],[3,"DateTime"],[3,"Local"],[8,"Offset"],[8,"TimeZone"],[3,"NaiveDate"],[3,"IsoWeek"],[3,"NaiveTime"],[3,"NaiveDateTime"],[3,"TsSeconds"],[3,"Date"],[3,"Parsed"],[4,"Pad"],[4,"Numeric"],[4,"Fixed"],[4,"Item"],[3,"StrftimeItems"],[3,"InternalNumeric"],[3,"InternalFixed"],[3,"ParseError"],[3,"DelayedFormat"],[8,"Datelike"],[8,"Timelike"],[3,"ParseWeekdayError"],[3,"Duration"]]};
searchIndex["derive_error_chain"] = {"doc":"A Macros 1.1 implementation of https://crates.io/crates/error-chain","items":[[5,"derive_error_chain","derive_error_chain","",null,{"inputs":[{"name":"tokenstream"}],"output":{"name":"tokenstream"}}]],"paths":[]};
searchIndex["diesel"] = {"doc":"Diesel is an ORM and query builder designed to reduce the boilerplate for database interactions. A getting started guide can be found on our website.","items":[[5,"debug_query","diesel","Takes a query `QueryFragment` expression as an argument and returns a type that implements `fmt::Display` and `fmt::Debug` to show the query.",null,{"inputs":[{"name":"t"}],"output":{"name":"debugquery"}}],[5,"insert","","Creates an insert statement. Will add the given data to a table. This function is not exported by default. As with other commands, the resulting query can return the inserted rows if you choose.",null,{"inputs":[{"name":"t"}],"output":{"name":"incompleteinsertstatement"}}],[5,"update","","Creates an update statement. Helpers for updating a single row can be generated by deriving `AsChangeset`",null,{"inputs":[{"name":"t"}],"output":{"name":"incompleteupdatestatement"}}],[5,"delete","","Creates a delete statement. Will delete the records in the given set. Because this function has a very generic name, it is not exported by default.",null,{"inputs":[{"name":"t"}],"output":{"name":"deletestatement"}}],[5,"select","","Creates a bare select statement, with no from clause. Primarily used for testing diesel itself, but likely useful for third party crates as well. The given expressions must be selectable from anywhere.",null,{"inputs":[{"name":"t"}],"output":{"name":"select"}}],[5,"insert_default_values","","Creates an insert statement with default values.",null,{"inputs":[],"output":{"name":"incompletedefaultinsertstatement"}}],[0,"associations","","Traits related to relationships between multiple tables.",null,null],[8,"BelongsTo","diesel::associations","",null,null],[16,"ForeignKey","","",0,null],[16,"ForeignKeyColumn","","",0,null],[10,"foreign_key","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"foreign_key_column","","",0,null],[8,"GroupedBy","","",null,null],[10,"grouped_by","","",1,null],[8,"HasTable","","",null,null],[16,"Table","","",2,null],[10,"table","","",2,null],[8,"Identifiable","","Represents a struct which can be identified on a single table in the database. This must be implemented to use associations, and some features of updating. This trait is usually implemented on a reference to a struct, not the struct itself.",null,null],[16,"Id","","",3,null],[10,"id","","",3,null],[0,"backend","diesel","",null,null],[8,"Backend","diesel::backend","",null,null],[16,"QueryBuilder","","",4,null],[16,"BindCollector","","",4,null],[16,"RawValue","","",4,null],[16,"ByteOrder","","",4,null],[8,"TypeMetadata","","",null,null],[16,"TypeMetadata","","",5,null],[16,"MetadataLookup","","",5,null],[8,"SupportsReturningClause","","",null,null],[8,"SupportsDefaultKeyword","","",null,null],[8,"UsesAnsiSavepointSyntax","","",null,null],[0,"connection","diesel","",null,null],[3,"AnsiTransactionManager","diesel::connection","An implementation of `TransactionManager` which can be used for backends which use ANSI standard syntax for savepoints such as SQLite and PostgreSQL.",null,null],[11,"default","","",6,{"inputs":[],"output":{"name":"ansitransactionmanager"}}],[11,"new","","",6,{"inputs":[],"output":{"name":"self"}}],[11,"begin_transaction","","",6,{"inputs":[{"name":"self"},{"name":"conn"}],"output":{"name":"queryresult"}}],[11,"rollback_transaction","","",6,{"inputs":[{"name":"self"},{"name":"conn"}],"output":{"name":"queryresult"}}],[11,"commit_transaction","","",6,{"inputs":[{"name":"self"},{"name":"conn"}],"output":{"name":"queryresult"}}],[11,"get_transaction_depth","","",6,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[8,"TransactionManager","","Manages the internal transaction state for a connection. You should not interface with this trait unless you are implementing a new connection adapter. You should use [`Connection::transaction`][transaction], [`Connection::test_transaction`][test_transaction], or [`Connection::begin_test_transaction`][begin_test_transaction] instead.",null,null],[10,"begin_transaction","","Begin a new transaction. If the transaction depth is greater than 0, this should create a savepoint instead. This function is expected to increment the transaction depth by 1.",7,{"inputs":[{"name":"self"},{"name":"conn"}],"output":{"name":"queryresult"}}],[10,"rollback_transaction","","Rollback the inner-most transaction. If the transaction depth is greater than 1, this should rollback to the most recent savepoint. This function is expected to decrement the transaction depth by 1.",7,{"inputs":[{"name":"self"},{"name":"conn"}],"output":{"name":"queryresult"}}],[10,"commit_transaction","","Commit the inner-most transaction. If the transaction depth is greater than 1, this should release the most recent savepoint. This function is expected to decrement the transaction depth by 1.",7,{"inputs":[{"name":"self"},{"name":"conn"}],"output":{"name":"queryresult"}}],[10,"get_transaction_depth","","Fetch the current transaction depth. Used to ensure that `begin_test_transaction` is not called when already inside of a transaction.",7,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[8,"SimpleConnection","","Perform simple operations on a backend.",null,null],[10,"batch_execute","","Execute multiple SQL statements within the same string.",8,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"queryresult"}}],[8,"Connection","","Perform connections to a backend.",null,null],[16,"Backend","","The backend this connection represents.",9,null],[10,"establish","","Establishes a new connection to the database at the given URL. The URL should be a valid connection string for a given backend. See the documentation for the specific backend for specifics.",9,{"inputs":[{"name":"str"}],"output":{"name":"connectionresult"}}],[11,"transaction","","Executes the given function inside of a database transaction. When a transaction is already occurring, savepoints will be used to emulate a nested transaction.",9,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"begin_test_transaction","","Creates a transaction that will never be committed. This is useful for tests. Panics if called while inside of a transaction.",9,{"inputs":[{"name":"self"}],"output":{"name":"queryresult"}}],[11,"test_transaction","","Executes the given function inside a transaction, but does not commit it. Panics if the given function returns an `Err`.",9,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[0,"expression","diesel","AST types representing various typed SQL expressions. Almost all types implement either `Expression` or `AsExpression`.",null,null],[0,"helper_types","diesel::expression","The types in this module are all shorthand for `PredicateType<Lhs, AsExpr<Rhs, Lhs>>`. Since we often need to return concrete types, instead of a boxed trait object, these can be useful for writing concise return types.",null,null],[3,"IsNull","diesel::expression::helper_types","",null,null],[3,"IsNotNull","","",null,null],[3,"Asc","","",null,null],[3,"Desc","","",null,null],[6,"SqlTypeOf","","",null,null],[6,"AsExpr","","",null,null],[6,"AsExprOf","","",null,null],[6,"Eq","","",null,null],[6,"NotEq","","",null,null],[6,"Gt","","",null,null],[6,"GtEq","","",null,null],[6,"Lt","","",null,null],[6,"LtEq","","",null,null],[6,"And","","",null,null],[6,"Like","","",null,null],[6,"NotLike","","",null,null],[6,"Between","","",null,null],[6,"NotBetween","","",null,null],[6,"Not","","The return type of `not(expr)`",null,null],[6,"EqAny","","",null,null],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"isnull"}}],[11,"new","","",10,{"inputs":[{"name":"expr"}],"output":{"name":"self"}}],[11,"has_static_query_id","","",10,{"inputs":[],"output":{"name":"bool"}}],[11,"walk_ast","","",10,{"inputs":[{"name":"self"},{"name":"astpass"}],"output":{"name":"queryresult"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"isnotnull"}}],[11,"new","","",11,{"inputs":[{"name":"expr"}],"output":{"name":"self"}}],[11,"has_static_query_id","","",11,{"inputs":[],"output":{"name":"bool"}}],[11,"walk_ast","","",11,{"inputs":[{"name":"self"},{"name":"astpass"}],"output":{"name":"queryresult"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"asc"}}],[11,"new","","",12,{"inputs":[{"name":"expr"}],"output":{"name":"self"}}],[11,"has_static_query_id","","",12,{"inputs":[],"output":{"name":"bool"}}],[11,"walk_ast","","",12,{"inputs":[{"name":"self"},{"name":"astpass"}],"output":{"name":"queryresult"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"desc"}}],[11,"new","","",13,{"inputs":[{"name":"expr"}],"output":{"name":"self"}}],[11,"has_static_query_id","","",13,{"inputs":[],"output":{"name":"bool"}}],[11,"walk_ast","","",13,{"inputs":[{"name":"self"},{"name":"astpass"}],"output":{"name":"queryresult"}}],[0,"sql_literal","diesel::expression","",null,null],[3,"SqlLiteral","diesel::expression::sql_literal","Available for when you truly cannot represent something using the expression DSL. You will need to provide the type of the expression, in addition to the SQL. The compiler will be unable to verify the correctness of this type.",null,null],[5,"sql","","Use literal SQL in the query builder",null,{"inputs":[{"name":"str"}],"output":{"name":"sqlliteral"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"sqlliteral"}}],[11,"bind","","Bind a value for use with this SQL query.",14,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"uncheckedbind"}}],[11,"walk_ast","","",14,{"inputs":[{"name":"self"},{"name":"astpass"}],"output":{"name":"queryresult"}}],[11,"has_static_query_id","","",14,{"inputs":[],"output":{"name":"bool"}}],[0,"dsl","diesel::expression","Reexports various top level functions and core extensions that are too generic to export by default. This module exists to conveniently glob import in functions where you need them.",null,null],[3,"Sum","diesel::expression::dsl","",null,null],[3,"Avg","","",null,null],[3,"Max","","",null,null],[3,"Min","","",null,null],[3,"now","","Represents the SQL `CURRENT_TIMESTAMP` constant. This is equivalent to the `NOW()` function on backends that support it.",null,null],[5,"count","","Creates a SQL `COUNT` expression",null,{"inputs":[{"name":"t"}],"output":{"name":"count"}}],[5,"count_star","","Creates a SQL `COUNT(*)` expression",null,{"inputs":[],"output":{"name":"countstar"}}],[5,"exists","","Creates a SQL `EXISTS` expression.",null,{"inputs":[{"name":"t"}],"output":{"name":"exists"}}],[5,"sum","","Represents a SQL `SUM` function. This function can only take types which are Foldable.",null,{"inputs":[{"name":"t"}],"output":{"name":"sum"}}],[5,"avg","","Represents a SQL `AVG` function. This function can only take types which are Foldable.",null,{"inputs":[{"name":"t"}],"output":{"name":"avg"}}],[5,"max","","Represents a SQL `MAX` function. This function can only take types which are ordered.",null,{"inputs":[{"name":"t"}],"output":{"name":"max"}}],[5,"min","","Represents a SQL `MIN` function. This function can only take types which are ordered.",null,{"inputs":[{"name":"t"}],"output":{"name":"min"}}],[5,"date","","Represents the SQL `DATE` function. The argument should be a Timestamp expression, and the return value will be an expression of type Date.",null,{"inputs":[{"name":"x"}],"output":{"name":"date"}}],[5,"not","","Creates a SQL `NOT` expression",null,{"inputs":[{"name":"t"}],"output":{"name":"not"}}],[5,"sql","","Use literal SQL in the query builder",null,{"inputs":[{"name":"str"}],"output":{"name":"sqlliteral"}}],[6,"date","","",null,null],[8,"Expression","diesel::expression","Represents a typed fragment of SQL.",null,null],[16,"SqlType","","",15,null],[8,"AsExpression","","Describes how a type can be represented as an expression for a given type. These types couldn't just implement `Expression` directly, as many things can be used as an expression of multiple types. (`String` for example, can be used as either `VarChar` or `Text`).",null,null],[16,"Expression","","",16,null],[10,"as_expression","","",16,null],[8,"AppearsOnTable","","Indicates that all elements of an expression are valid given a from clause. This is used to ensure that `users.filter(posts::id.eq(1))` fails to compile. This constraint is only used in places where the nullability of a SQL type doesn't matter (everything except `select` and `returning`). For places where nullability is important, `SelectableExpression` is used instead.",null,null],[8,"SelectableExpression","","Indicates that an expression can be selected from a source. Columns will implement this for their table. Certain special types, like `CountStar` and `Bound` will implement this for all sources. Most compound expressions will implement this if each of their parts implement it.",null,null],[8,"NonAggregate","","Marker trait to indicate that an expression does not include any aggregate functions. Used to ensure that aggregate expressions aren't mixed with non-aggregate expressions in a select clause, and that they're never included in a where clause.",null,null],[8,"BoxableExpression","","Helper trait used when boxing expressions. This exists to work around the fact that Rust will not let us use non-core types as bounds on a trait object (you could not return `Box<Expression+NonAggregate>`)",null,null],[11,"has_static_query_id","","",17,{"inputs":[],"output":{"name":"bool"}}],[0,"expression_methods","diesel","Adds various methods to construct new expressions. These traits are exported by default, and implemented automatically.",null,null],[0,"bool_expression_methods","diesel::expression_methods","",null,null],[8,"BoolExpressionMethods","diesel::expression_methods::bool_expression_methods","",null,null],[11,"and","","Creates a SQL `AND` expression",18,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"and"}}],[11,"or","","Creates a SQL `OR` expression",18,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"grouped"}}],[0,"escape_expression_methods","diesel::expression_methods","",null,null],[8,"EscapeExpressionMethods","diesel::expression_methods::escape_expression_methods","Adds the `escape` method to `LIKE` and `NOT LIKE`. This is used to specify the escape character for the pattern.",null,null],[11,"escape","","",19,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"escape"}}],[0,"global_expression_methods","diesel::expression_methods","",null,null],[8,"ExpressionMethods","diesel::expression_methods::global_expression_methods","",null,null],[11,"eq","","Creates a SQL `=` expression.",20,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"eq"}}],[11,"ne","","Creates a SQL `!=` expression.",20,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"noteq"}}],[11,"eq_any","","Creates a SQL `IN` statement. Queries using this method will not be placed in the prepared statement cache. On PostgreSQL, you should use `eq(any())` instead. This method may change in the future to automatically perform `= ANY` on PostgreSQL.",20,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"in"}}],[11,"ne_any","","Creates a SQL `NOT IN` statement. Queries using this method will not be placed in the prepared statement cache. On PostgreSQL, you should use `ne(any())` instead. This method may change in the future to automatically perform `!= ANY` on PostgreSQL.",20,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"notin"}}],[11,"is_null","","Creates a SQL `IS NULL` expression.",20,{"inputs":[{"name":"self"}],"output":{"name":"isnull"}}],[11,"is_not_null","","Creates a SQL `IS NOT NULL` expression.",20,{"inputs":[{"name":"self"}],"output":{"name":"isnotnull"}}],[11,"gt","","Creates a SQL `>` expression.",20,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"gt"}}],[11,"ge","","Creates a SQL `>=` expression.",20,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"gteq"}}],[11,"lt","","Creates a SQL `<` expression.",20,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"lt"}}],[11,"le","","Creates a SQL `<=` expression.",20,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"lteq"}}],[11,"between","","Creates a SQL `BETWEEN` expression using the given range.",20,{"inputs":[{"name":"self"},{"name":"range"}],"output":{"name":"between"}}],[11,"not_between","","Creates a SQL `NOT BETWEEN` expression using the given range.",20,{"inputs":[{"name":"self"},{"name":"range"}],"output":{"name":"notbetween"}}],[11,"desc","","Creates a SQL `DESC` expression, representing this expression in descending order.",20,{"inputs":[{"name":"self"}],"output":{"name":"desc"}}],[11,"asc","","Creates a SQL `ASC` expression, representing this expression in ascending order.",20,{"inputs":[{"name":"self"}],"output":{"name":"asc"}}],[8,"NullableExpressionMethods","","",null,null],[11,"nullable","","Converts this potentially non-null expression into one which is treated as nullable. This method has no impact on the generated SQL, and is only used to allow certain comparisons that would otherwise fail to compile.",21,{"inputs":[{"name":"self"}],"output":{"name":"nullable"}}],[0,"text_expression_methods","diesel::expression_methods","",null,null],[8,"TextExpressionMethods","diesel::expression_methods::text_expression_methods","",null,null],[11,"concat","","Concatenates two strings using the `||` operator.",22,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"concat"}}],[11,"like","","Returns a SQL `LIKE` expression",22,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"like"}}],[11,"not_like","","Returns a SQL `NOT LIKE` expression",22,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"notlike"}}],[8,"BoolExpressionMethods","diesel::expression_methods","",null,null],[11,"and","","Creates a SQL `AND` expression",18,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"and"}}],[11,"or","","Creates a SQL `OR` expression",18,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"grouped"}}],[8,"EscapeExpressionMethods","","Adds the `escape` method to `LIKE` and `NOT LIKE`. This is used to specify the escape character for the pattern.",null,null],[11,"escape","","",19,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"escape"}}],[8,"ExpressionMethods","","",null,null],[11,"eq","","Creates a SQL `=` expression.",20,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"eq"}}],[11,"ne","","Creates a SQL `!=` expression.",20,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"noteq"}}],[11,"eq_any","","Creates a SQL `IN` statement. Queries using this method will not be placed in the prepared statement cache. On PostgreSQL, you should use `eq(any())` instead. This method may change in the future to automatically perform `= ANY` on PostgreSQL.",20,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"in"}}],[11,"ne_any","","Creates a SQL `NOT IN` statement. Queries using this method will not be placed in the prepared statement cache. On PostgreSQL, you should use `ne(any())` instead. This method may change in the future to automatically perform `!= ANY` on PostgreSQL.",20,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"notin"}}],[11,"is_null","","Creates a SQL `IS NULL` expression.",20,{"inputs":[{"name":"self"}],"output":{"name":"isnull"}}],[11,"is_not_null","","Creates a SQL `IS NOT NULL` expression.",20,{"inputs":[{"name":"self"}],"output":{"name":"isnotnull"}}],[11,"gt","","Creates a SQL `>` expression.",20,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"gt"}}],[11,"ge","","Creates a SQL `>=` expression.",20,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"gteq"}}],[11,"lt","","Creates a SQL `<` expression.",20,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"lt"}}],[11,"le","","Creates a SQL `<=` expression.",20,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"lteq"}}],[11,"between","","Creates a SQL `BETWEEN` expression using the given range.",20,{"inputs":[{"name":"self"},{"name":"range"}],"output":{"name":"between"}}],[11,"not_between","","Creates a SQL `NOT BETWEEN` expression using the given range.",20,{"inputs":[{"name":"self"},{"name":"range"}],"output":{"name":"notbetween"}}],[11,"desc","","Creates a SQL `DESC` expression, representing this expression in descending order.",20,{"inputs":[{"name":"self"}],"output":{"name":"desc"}}],[11,"asc","","Creates a SQL `ASC` expression, representing this expression in ascending order.",20,{"inputs":[{"name":"self"}],"output":{"name":"asc"}}],[8,"NullableExpressionMethods","","",null,null],[11,"nullable","","Converts this potentially non-null expression into one which is treated as nullable. This method has no impact on the generated SQL, and is only used to allow certain comparisons that would otherwise fail to compile.",21,{"inputs":[{"name":"self"}],"output":{"name":"nullable"}}],[8,"TextExpressionMethods","","",null,null],[11,"concat","","Concatenates two strings using the `||` operator.",22,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"concat"}}],[11,"like","","Returns a SQL `LIKE` expression",22,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"like"}}],[11,"not_like","","Returns a SQL `NOT LIKE` expression",22,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"notlike"}}],[8,"PgExpressionMethods","","",null,null],[11,"is_not_distinct_from","","Creates a PostgreSQL `IS NOT DISTINCT FROM` expression. This behaves identically to the `=` operator, except that `NULL` is treated as a normal value.",23,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"isnotdistinctfrom"}}],[11,"is_distinct_from","","Creates a PostgreSQL `IS DISTINCT FROM` expression. This behaves identically to the `!=` operator, except that `NULL` is treated as a normal value.",23,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"isdistinctfrom"}}],[8,"ArrayExpressionMethods","","",null,null],[11,"overlaps_with","","Compares two arrays for common elements, using the `&&` operator in the final SQL",24,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"overlapswith"}}],[11,"contains","","Compares whether an array contains another array, using the `@>` operator.",24,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"contains"}}],[11,"is_contained_by","","Compares whether an array is contained by another array, using the `<@` operator. This is the opposite of `contains`",24,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"iscontainedby"}}],[8,"SortExpressionMethods","","",null,null],[11,"nulls_first","","Specify that nulls should come before other values in this ordering. Normally, nulls come last when sorting in ascending order and first when sorting in descending order.",25,{"inputs":[{"name":"self"}],"output":{"name":"nullsfirst"}}],[11,"nulls_last","","Specify that nulls should come after other values in this ordering. Normally, nulls come last when sorting in ascending order and first when sorting in descending order.",25,{"inputs":[{"name":"self"}],"output":{"name":"nullslast"}}],[8,"PgTextExpressionMethods","","",null,null],[11,"ilike","","Returns a SQL `ILIKE` expression",26,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"ilike"}}],[11,"not_ilike","","Returns a SQL `NOT ILIKE` expression",26,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"notilike"}}],[0,"query_builder","diesel","Contains traits responsible for the actual construction of SQL statements",null,null],[3,"AstPass","diesel::query_builder","The primary type used when walking a Diesel AST during query execution.",null,null],[3,"DebugQuery","","A struct that implements `fmt::Display` and `fmt::Debug` to show the SQL representation of a query.",null,null],[3,"IncompleteUpdateStatement","","The type returned by `update`. The only thing you can do with this type is call `set` on it.",null,null],[3,"UpdateStatement","","",null,null],[3,"IncompleteInsertStatement","","The structure returned by `insert`. The only thing that can be done with it is call `into`.",null,null],[3,"IncompleteDefaultInsertStatement","","The structure returned by `insert_default_values`. The only thing that can be done with it is call `into`.",null,null],[5,"debug_query","","Takes a query `QueryFragment` expression as an argument and returns a type that implements `fmt::Display` and `fmt::Debug` to show the query.",null,{"inputs":[{"name":"t"}],"output":{"name":"debugquery"}}],[11,"reborrow","","Call this method whenever you pass an instance of `AstPass` by value.",27,{"inputs":[{"name":"self"}],"output":{"name":"astpass"}}],[11,"unsafe_to_cache_prepared","","Mark the current query being constructed as unsafe to store in the prepared statement cache.",27,{"inputs":[{"name":"self"}],"output":null}],[11,"push_sql","","Push the given SQL string on the end of the query being constructed.",27,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[11,"push_identifier","","Push the given SQL identifier on the end of the query being constructed.",27,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"queryresult"}}],[11,"push_bind_param","","Push a value onto the given query to be sent separate from the SQL",27,{"inputs":[{"name":"self"},{"name":"u"}],"output":{"name":"queryresult"}}],[0,"bind_collector","","",null,null],[3,"RawBytesBindCollector","diesel::query_builder::bind_collector","",null,null],[12,"metadata","","",28,null],[12,"binds","","",28,null],[8,"BindCollector","","",null,null],[10,"push_bound_value","","",29,null],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",28,{"inputs":[],"output":{"name":"self"}}],[11,"push_bound_value","","",28,null],[11,"fmt","diesel::query_builder","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"where_clause","","",null,null],[3,"NoWhereClause","diesel::query_builder::where_clause","",null,null],[3,"WhereClause","","",null,null],[8,"WhereAnd","","",null,null],[16,"Output","","",31,null],[10,"and","","",31,null],[11,"fmt","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",32,{"inputs":[{"name":"self"}],"output":{"name":"nowhereclause"}}],[11,"has_static_query_id","","",32,{"inputs":[],"output":{"name":"bool"}}],[11,"walk_ast","","",32,{"inputs":[{"name":"self"},{"name":"astpass"}],"output":{"name":"queryresult"}}],[11,"and","","",32,null],[11,"into","","",32,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",33,{"inputs":[{"name":"self"}],"output":{"name":"whereclause"}}],[11,"walk_ast","","",33,{"inputs":[{"name":"self"},{"name":"astpass"}],"output":{"name":"queryresult"}}],[11,"has_static_query_id","","",33,{"inputs":[],"output":{"name":"bool"}}],[11,"and","","",33,null],[11,"into","","",33,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[0,"insert_statement","diesel::query_builder","",null,null],[3,"IncompleteInsertStatement","diesel::query_builder::insert_statement","The structure returned by `insert`. The only thing that can be done with it is call `into`.",null,null],[3,"InsertStatement","","",null,null],[3,"BatchInsertStatement","","The result of calling `insert(records).into(some_table)` when `records` is a slice or a `Vec`. When calling methods from `ExecuteDsl` or `LoadDsl`. When the given slice is empty, this struct will not execute any queries. When the given slice is not empty, this will execute a single bulk insert on backends which support the `DEFAULT` keyword, and one query per record on backends which do not (SQLite).",null,null],[3,"Insert","","",null,null],[3,"IncompleteDefaultInsertStatement","","The structure returned by `insert_default_values`. The only thing that can be done with it is call `into`.",null,null],[3,"DefaultInsertStatement","","",null,null],[8,"IntoInsertStatement","","",null,null],[16,"InsertStatement","","",34,null],[10,"into_insert_statement","","",34,null],[8,"UndecoratedInsertRecord","","Marker trait to indicate that no additional operations have been added to a record for insert. Used to prevent things like `insert(&vec![user.on_conflict_do_nothing(), user2.on_conflict_do_nothing()])` from compiling.",null,null],[11,"fmt","","",35,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",35,{"inputs":[{"name":"self"}],"output":{"name":"incompleteinsertstatement"}}],[11,"into","","Specify which table the data passed to `insert` should be added to.",35,null],[11,"fmt","","",36,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",36,{"inputs":[{"name":"self"}],"output":{"name":"insertstatement"}}],[11,"no_returning_clause","","",36,{"inputs":[{"name":"t"},{"name":"u"},{"name":"op"}],"output":{"name":"self"}}],[11,"new","","",36,{"inputs":[{"name":"t"},{"name":"u"},{"name":"op"},{"name":"ret"}],"output":{"name":"self"}}],[11,"walk_ast","","",36,{"inputs":[{"name":"self"},{"name":"astpass"}],"output":{"name":"queryresult"}}],[11,"has_static_query_id","","",36,{"inputs":[],"output":{"name":"bool"}}],[11,"as_query","","",36,null],[11,"returning","","Specify what expression is returned after execution of the `insert`. This method can only be called once.",36,{"inputs":[{"name":"self"},{"name":"e"}],"output":{"name":"insertstatement"}}],[11,"fmt","","",37,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",37,{"inputs":[{"name":"self"}],"output":{"name":"batchinsertstatement"}}],[11,"returning","","Specify what expression is returned after execution of the `insert`. # Examples",37,{"inputs":[{"name":"self"},{"name":"e"}],"output":{"name":"batchinsertstatement"}}],[11,"execute","","",37,{"inputs":[{"name":"self"},{"name":"conn"}],"output":{"name":"queryresult"}}],[11,"internal_load","","",37,{"inputs":[{"name":"self"},{"name":"conn"}],"output":{"name":"queryresult"}}],[11,"fmt","","",38,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",38,{"inputs":[{"name":"self"}],"output":{"name":"insert"}}],[11,"walk_ast","","",38,{"inputs":[{"name":"self"},{"name":"astpass"}],"output":{"name":"queryresult"}}],[11,"has_static_query_id","","",38,{"inputs":[],"output":{"name":"bool"}}],[11,"fmt","","",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",39,{"inputs":[{"name":"self"}],"output":{"name":"incompletedefaultinsertstatement"}}],[11,"default","","",39,{"inputs":[],"output":{"name":"incompletedefaultinsertstatement"}}],[11,"fmt","","",40,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",40,{"inputs":[{"name":"self"}],"output":{"name":"defaultinsertstatement"}}],[11,"into","","Specify which table the data passed to `insert` should be added to.",39,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"defaultinsertstatement"}}],[11,"returning","","Specify what expression is returned after execution of the `insert_default_values`. This method can only be called once.",40,{"inputs":[{"name":"self"},{"name":"e"}],"output":{"name":"defaultinsertstatement"}}],[11,"walk_ast","","",40,{"inputs":[{"name":"self"},{"name":"astpass"}],"output":{"name":"queryresult"}}],[11,"has_static_query_id","","",40,{"inputs":[],"output":{"name":"bool"}}],[0,"update_statement","diesel::query_builder","",null,null],[3,"IncompleteUpdateStatement","diesel::query_builder::update_statement","The type returned by `update`. The only thing you can do with this type is call `set` on it.",null,null],[3,"UpdateStatement","","",null,null],[0,"changeset","","",null,null],[8,"AsChangeset","diesel::query_builder::update_statement::changeset","Types which can be passed to `update.set`.",null,null],[16,"Target","","",41,null],[16,"Changeset","","",41,null],[10,"as_changeset","","",41,null],[8,"Changeset","","Apps should not need to concern themselves with this trait.",null,null],[10,"is_noop","","",42,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"walk_ast","","",42,{"inputs":[{"name":"self"},{"name":"astpass"}],"output":{"name":"queryresult"}}],[0,"target","diesel::query_builder::update_statement","",null,null],[8,"IntoUpdateTarget","diesel::query_builder::update_statement::target","A type which can be passed to `update`.",null,null],[16,"WhereClause","","",43,null],[10,"into_update_target","","",43,{"inputs":[{"name":"self"}],"output":{"name":"updatetarget"}}],[11,"fmt","diesel::query_builder::update_statement","",44,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"set","","",44,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"updatestatement"}}],[11,"fmt","","",45,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",45,{"inputs":[{"name":"self"}],"output":{"name":"updatestatement"}}],[11,"walk_ast","","",45,{"inputs":[{"name":"self"},{"name":"astpass"}],"output":{"name":"queryresult"}}],[11,"has_static_query_id","","",45,{"inputs":[],"output":{"name":"bool"}}],[11,"as_query","","",45,null],[11,"returning","","Specify what expression is returned after execution of the `update`. # Examples",45,{"inputs":[{"name":"self"},{"name":"e"}],"output":{"name":"updatestatement"}}],[6,"BuildQueryResult","diesel::query_builder","",null,null],[8,"QueryId","","",null,null],[16,"QueryId","","",46,null],[10,"has_static_query_id","","",46,{"inputs":[],"output":{"name":"bool"}}],[11,"query_id","","",46,{"inputs":[],"output":{"name":"option"}}],[8,"AsChangeset","","Types which can be passed to `update.set`.",null,null],[16,"Target","","",41,null],[16,"Changeset","","",41,null],[10,"as_changeset","","",41,null],[8,"Changeset","","Apps should not need to concern themselves with this trait.",null,null],[10,"is_noop","","",42,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"walk_ast","","",42,{"inputs":[{"name":"self"},{"name":"astpass"}],"output":{"name":"queryresult"}}],[8,"IntoUpdateTarget","","A type which can be passed to `update`.",null,null],[16,"WhereClause","","",43,null],[10,"into_update_target","","",43,{"inputs":[{"name":"self"}],"output":{"name":"updatetarget"}}],[8,"QueryBuilder","","Apps should not need to concern themselves with this trait.",null,null],[10,"push_sql","","",47,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"push_identifier","","",47,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"queryresult"}}],[10,"push_bind_param","","",47,{"inputs":[{"name":"self"}],"output":null}],[10,"finish","","",47,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[8,"Query","","A complete SQL query with a return type. This can be a select statement, or a command such as `update` or `insert` with a `RETURNING` clause. Unlike `Expression`, types implementing this trait are guaranteed to be executable on their own.",null,null],[16,"SqlType","","",48,null],[8,"QueryFragment","","An untyped fragment of SQL. This may be a complete SQL command (such as an update statement without a `RETURNING` clause), or a subsection (such as our internal types used to represent a `WHERE` clause). All methods on `Connection` that execute a query require this trait to be implemented.",null,null],[10,"walk_ast","","",49,{"inputs":[{"name":"self"},{"name":"astpass"}],"output":{"name":"queryresult"}}],[11,"to_sql","","",49,null],[11,"collect_binds","","",49,null],[11,"is_safe_to_cache_prepared","","",49,{"inputs":[{"name":"self"}],"output":{"name":"queryresult"}}],[8,"AsQuery","","Types that can be converted into a complete, typed SQL query. This is used internally to automatically add the right select clause when none is specified, or to automatically add `RETURNING *` in certain contexts",null,null],[16,"SqlType","","",50,null],[16,"Query","","",50,null],[10,"as_query","","",50,null],[0,"types","diesel","Types which represent a native SQL data type, and the conversions between them and Rust primitives. The structs in this module are only used as markers to represent a SQL type, and shouldn't be used in your structs. See the documentation for each type to see the Rust types that can be used with a corresponding SQL type. Additional types can be added by other crates.",null,null],[3,"Bool","diesel::types","The boolean SQL type. On SQLite this is emulated with an integer.",null,null],[3,"Tinyint","","The tinyint SQL type. This is only available on MySQL.",null,null],[3,"SmallInt","","The small integer SQL type.",null,null],[3,"Integer","","The integer SQL type.",null,null],[3,"BigInt","","The big integer SQL type.",null,null],[3,"Float","","The float SQL type.",null,null],[3,"Double","","The double precision float SQL type.",null,null],[3,"Numeric","","The numeric SQL type.",null,null],[3,"Text","","The text SQL type.",null,null],[3,"Binary","","The binary SQL type.",null,null],[3,"Date","","The date SQL type.",null,null],[3,"Interval","","The interval SQL type.",null,null],[3,"Time","","The time SQL type.",null,null],[3,"Timestamp","","The timestamp/datetime SQL type.",null,null],[3,"Nullable","","The nullable SQL type. This wraps another SQL type to indicate that it can be null. By default all values are assumed to be `NOT NULL`.",null,null],[4,"IsNull","","Tiny enum to make the return type of `ToSql` more descriptive",null,null],[13,"Yes","","",51,null],[13,"No","","",51,null],[0,"ops","","Apps should not need to concern themselves with this module.",null,null],[8,"Add","diesel::types::ops","Represents SQL types which can be added.",null,null],[16,"Rhs","","The SQL type which can be added to this one",52,null],[16,"Output","","The SQL type of the result of adding `Rhs` to `Self`",52,null],[8,"Sub","","Represents SQL types which can be subtracted.",null,null],[16,"Rhs","","The SQL type which can be subtracted from this one",53,null],[16,"Output","","The SQL type of the result of subtracting `Rhs` from `Self`",53,null],[8,"Mul","","Represents SQL types which can be multiplied.",null,null],[16,"Rhs","","The SQL type which this can be multiplied by",54,null],[16,"Output","","The SQL type of the result of multiplying `Self` by `Rhs`",54,null],[8,"Div","","Represents SQL types which can be divided.",null,null],[16,"Rhs","","The SQL type which this one can be divided by",55,null],[16,"Output","","The SQL type of the result of dividing `Self` by `Rhs`",55,null],[11,"has_static_query_id","diesel::types","",56,{"inputs":[],"output":{"name":"bool"}}],[11,"has_static_query_id","","",57,{"inputs":[],"output":{"name":"bool"}}],[11,"has_static_query_id","","",58,{"inputs":[],"output":{"name":"bool"}}],[11,"has_static_query_id","","",59,{"inputs":[],"output":{"name":"bool"}}],[11,"has_static_query_id","","",60,{"inputs":[],"output":{"name":"bool"}}],[11,"has_static_query_id","","",61,{"inputs":[],"output":{"name":"bool"}}],[11,"has_static_query_id","","",62,{"inputs":[],"output":{"name":"bool"}}],[11,"has_static_query_id","","",63,{"inputs":[],"output":{"name":"bool"}}],[11,"has_static_query_id","","",64,{"inputs":[],"output":{"name":"bool"}}],[11,"has_static_query_id","","",65,{"inputs":[],"output":{"name":"bool"}}],[11,"has_static_query_id","","",66,{"inputs":[],"output":{"name":"bool"}}],[11,"has_static_query_id","","",67,{"inputs":[],"output":{"name":"bool"}}],[6,"Decimal","","",null,null],[6,"VarChar","","",null,null],[8,"SqlOrd","","Marker trait for types which can be compared for ordering.",null,null],[8,"Foldable","","Marker trait for types which can be folded for a sum.",null,null],[16,"Sum","","",68,null],[16,"Avg","","",68,null],[8,"HasSqlType","","",null,null],[10,"metadata","","",69,null],[11,"row_metadata","","",69,null],[8,"NotNull","","",null,null],[8,"IntoNullable","","",null,null],[16,"Nullable","","",70,null],[8,"SingleValue","","",null,null],[8,"FromSql","","How to deserialize a single field of a given type. The input will always be the binary representation, not the text.",null,null],[10,"from_sql","","",71,{"inputs":[{"name":"option"}],"output":{"name":"result"}}],[8,"FromSqlRow","","How to deserialize multiple fields, with a known type. This type is implemented for tuples of various sizes.",null,null],[10,"build_from_row","","",72,{"inputs":[{"name":"t"}],"output":{"name":"result"}}],[11,"fields_needed","","The number of fields that this type will consume. Should be equal to the number of times you would call `row.take()` in `build_from_row`",72,{"inputs":[],"output":{"name":"usize"}}],[8,"ToSql","","Serializes a single value to be sent to the database. The output will be included as a bind parameter, and is expected to be the binary format, not text.",null,null],[10,"to_sql","","",73,{"inputs":[{"name":"self"},{"name":"tosqloutput"}],"output":{"name":"result"}}],[11,"fmt","","",57,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",57,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"default","","",57,{"inputs":[],"output":{"name":"bool"}}],[11,"fmt","","",74,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",74,{"inputs":[{"name":"self"}],"output":{"name":"tinyint"}}],[11,"default","","",74,{"inputs":[],"output":{"name":"tinyint"}}],[11,"fmt","","",58,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",58,{"inputs":[{"name":"self"}],"output":{"name":"smallint"}}],[11,"default","","",58,{"inputs":[],"output":{"name":"smallint"}}],[11,"fmt","","",59,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",59,{"inputs":[{"name":"self"}],"output":{"name":"integer"}}],[11,"default","","",59,{"inputs":[],"output":{"name":"integer"}}],[11,"fmt","","",60,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",60,{"inputs":[{"name":"self"}],"output":{"name":"bigint"}}],[11,"default","","",60,{"inputs":[],"output":{"name":"bigint"}}],[11,"fmt","","",61,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",61,{"inputs":[{"name":"self"}],"output":{"name":"float"}}],[11,"default","","",61,{"inputs":[],"output":{"name":"float"}}],[11,"fmt","","",62,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",62,{"inputs":[{"name":"self"}],"output":{"name":"double"}}],[11,"default","","",62,{"inputs":[],"output":{"name":"double"}}],[11,"fmt","","",75,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",75,{"inputs":[{"name":"self"}],"output":{"name":"numeric"}}],[11,"default","","",75,{"inputs":[],"output":{"name":"numeric"}}],[11,"fmt","","",63,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",63,{"inputs":[{"name":"self"}],"output":{"name":"text"}}],[11,"default","","",63,{"inputs":[],"output":{"name":"text"}}],[11,"fmt","","",64,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",64,{"inputs":[{"name":"self"}],"output":{"name":"binary"}}],[11,"default","","",64,{"inputs":[],"output":{"name":"binary"}}],[11,"fmt","","",65,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",65,{"inputs":[{"name":"self"}],"output":{"name":"date"}}],[11,"default","","",65,{"inputs":[],"output":{"name":"date"}}],[11,"fmt","","",76,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",76,{"inputs":[{"name":"self"}],"output":{"name":"interval"}}],[11,"default","","",76,{"inputs":[],"output":{"name":"interval"}}],[11,"fmt","","",66,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",66,{"inputs":[{"name":"self"}],"output":{"name":"time"}}],[11,"default","","",66,{"inputs":[],"output":{"name":"time"}}],[11,"fmt","","",67,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",67,{"inputs":[{"name":"self"}],"output":{"name":"timestamp"}}],[11,"default","","",67,{"inputs":[],"output":{"name":"timestamp"}}],[11,"fmt","","",56,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",56,{"inputs":[{"name":"self"}],"output":{"name":"nullable"}}],[11,"default","","",56,{"inputs":[],"output":{"name":"nullable"}}],[11,"fmt","","",51,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",51,{"inputs":[{"name":"self"}],"output":{"name":"isnull"}}],[11,"eq","","",51,{"inputs":[{"name":"self"},{"name":"isnull"}],"output":{"name":"bool"}}],[0,"pg","diesel","",null,null],[3,"Pg","diesel::pg","",null,null],[3,"PgTypeMetadata","","",null,null],[12,"oid","","",77,null],[12,"array_oid","","",77,null],[3,"PgConnection","","The connection string expected by `PgConnection::establish` should be a PostgreSQL connection string, as documented at http://www.postgresql.org/docs/9.4/static/libpq-connect.html#LIBPQ-CONNSTRING",null,null],[3,"PgMetadataLookup","","",null,null],[3,"PgQueryBuilder","","",null,null],[0,"expression","","",null,null],[0,"expression_methods","diesel::pg::expression","",null,null],[8,"PgExpressionMethods","diesel::pg::expression::expression_methods","",null,null],[11,"is_not_distinct_from","","Creates a PostgreSQL `IS NOT DISTINCT FROM` expression. This behaves identically to the `=` operator, except that `NULL` is treated as a normal value.",23,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"isnotdistinctfrom"}}],[11,"is_distinct_from","","Creates a PostgreSQL `IS DISTINCT FROM` expression. This behaves identically to the `!=` operator, except that `NULL` is treated as a normal value.",23,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"isdistinctfrom"}}],[8,"ArrayExpressionMethods","","",null,null],[11,"overlaps_with","","Compares two arrays for common elements, using the `&&` operator in the final SQL",24,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"overlapswith"}}],[11,"contains","","Compares whether an array contains another array, using the `@>` operator.",24,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"contains"}}],[11,"is_contained_by","","Compares whether an array is contained by another array, using the `<@` operator. This is the opposite of `contains`",24,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"iscontainedby"}}],[8,"SortExpressionMethods","","",null,null],[11,"nulls_first","","Specify that nulls should come before other values in this ordering. Normally, nulls come last when sorting in ascending order and first when sorting in descending order.",25,{"inputs":[{"name":"self"}],"output":{"name":"nullsfirst"}}],[11,"nulls_last","","Specify that nulls should come after other values in this ordering. Normally, nulls come last when sorting in ascending order and first when sorting in descending order.",25,{"inputs":[{"name":"self"}],"output":{"name":"nullslast"}}],[8,"PgTextExpressionMethods","","",null,null],[11,"ilike","","Returns a SQL `ILIKE` expression",26,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"ilike"}}],[11,"not_ilike","","Returns a SQL `NOT ILIKE` expression",26,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"notilike"}}],[0,"extensions","diesel::pg::expression","This module contains extensions that are added to core types to aid in building expressions. These traits are not exported by default. The are also re-exported in `diesel::expression::dsl`",null,null],[8,"MicroIntervalDsl","diesel::pg::expression::extensions","A DSL added to `i64` and `f64` to construct PostgreSQL intervals of less than 1 day.",null,null],[10,"microseconds","","Returns a PgInterval representing `self` as microseconds",78,{"inputs":[{"name":"self"}],"output":{"name":"pginterval"}}],[11,"milliseconds","","Returns a PgInterval representing `self` as milliseconds",78,{"inputs":[{"name":"self"}],"output":{"name":"pginterval"}}],[11,"seconds","","Returns a PgInterval representing `self` as seconds",78,{"inputs":[{"name":"self"}],"output":{"name":"pginterval"}}],[11,"minutes","","Returns a PgInterval representing `self` as minutes",78,{"inputs":[{"name":"self"}],"output":{"name":"pginterval"}}],[11,"hours","","Returns a PgInterval representing `self` as hours",78,{"inputs":[{"name":"self"}],"output":{"name":"pginterval"}}],[11,"microsecond","","Identical to `microseconds`",78,{"inputs":[{"name":"self"}],"output":{"name":"pginterval"}}],[11,"millisecond","","Identical to `milliseconds`",78,{"inputs":[{"name":"self"}],"output":{"name":"pginterval"}}],[11,"second","","Identical to `seconds`",78,{"inputs":[{"name":"self"}],"output":{"name":"pginterval"}}],[11,"minute","","Identical to `minutes`",78,{"inputs":[{"name":"self"}],"output":{"name":"pginterval"}}],[11,"hour","","Identical to `hours`",78,{"inputs":[{"name":"self"}],"output":{"name":"pginterval"}}],[8,"DayAndMonthIntervalDsl","","A DSL added to `i32` and `f64` to construct PostgreSQL intervals of greater than 1 day.",null,null],[10,"days","","Returns a PgInterval representing `self` in days",79,{"inputs":[{"name":"self"}],"output":{"name":"pginterval"}}],[10,"months","","Returns a PgInterval representing `self` in months",79,{"inputs":[{"name":"self"}],"output":{"name":"pginterval"}}],[11,"weeks","","Returns a PgInterval representing `self` in weeks",79,{"inputs":[{"name":"self"}],"output":{"name":"pginterval"}}],[11,"years","","Returns a PgInterval representing `self` in weeks",79,{"inputs":[{"name":"self"}],"output":{"name":"pginterval"}}],[11,"day","","Identical to `days`",79,{"inputs":[{"name":"self"}],"output":{"name":"pginterval"}}],[11,"week","","Identical to `weeks`",79,{"inputs":[{"name":"self"}],"output":{"name":"pginterval"}}],[11,"month","","Identical to `months`",79,{"inputs":[{"name":"self"}],"output":{"name":"pginterval"}}],[11,"year","","Identical to `years`",79,{"inputs":[{"name":"self"}],"output":{"name":"pginterval"}}],[0,"dsl","diesel::pg::expression","PostgreSQL specific expression DSL methods. This module will be glob imported by `expression::dsl` when compiled with the `feature = \"postgres\"` flag.",null,null],[5,"any","diesel::pg::expression::dsl","Creates a PostgreSQL `ANY` expression.",null,{"inputs":[{"name":"t"}],"output":{"name":"any"}}],[5,"all","","Creates a PostgreSQL `ALL` expression.",null,{"inputs":[{"name":"t"}],"output":{"name":"all"}}],[11,"fmt","diesel::pg","",80,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",80,{"inputs":[{"name":"self"}],"output":{"name":"pg"}}],[11,"hash","","",80,null],[11,"eq","","",80,{"inputs":[{"name":"self"},{"name":"pg"}],"output":{"name":"bool"}}],[11,"fmt","","",77,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",77,{"inputs":[{"name":"self"}],"output":{"name":"pgtypemetadata"}}],[11,"hash","","",77,null],[11,"eq","","",77,{"inputs":[{"name":"self"},{"name":"pgtypemetadata"}],"output":{"name":"bool"}}],[11,"ne","","",77,{"inputs":[{"name":"self"},{"name":"pgtypemetadata"}],"output":{"name":"bool"}}],[11,"default","","",77,{"inputs":[],"output":{"name":"pgtypemetadata"}}],[11,"build","","",77,null],[11,"lookup_type","","",81,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"pgtypemetadata"}}],[11,"default","","",82,{"inputs":[],"output":{"name":"pgquerybuilder"}}],[11,"new","","",82,{"inputs":[],"output":{"name":"self"}}],[11,"push_sql","","",82,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[11,"push_identifier","","",82,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"queryresult"}}],[11,"push_bind_param","","",82,{"inputs":[{"name":"self"}],"output":null}],[11,"finish","","",82,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"batch_execute","","",83,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"queryresult"}}],[11,"establish","","",83,{"inputs":[{"name":"str"}],"output":{"name":"connectionresult"}}],[0,"types","","",null,null],[11,"metadata","","",80,{"inputs":[{"name":"pgmetadatalookup"}],"output":{"name":"pgtypemetadata"}}],[11,"metadata","","",80,{"inputs":[{"name":"pgmetadatalookup"}],"output":{"name":"pgtypemetadata"}}],[11,"metadata","","",80,{"inputs":[{"name":"pgmetadatalookup"}],"output":{"name":"pgtypemetadata"}}],[11,"metadata","","",80,{"inputs":[{"name":"pgmetadatalookup"}],"output":{"name":"pgtypemetadata"}}],[11,"metadata","","",80,{"inputs":[{"name":"pgmetadatalookup"}],"output":{"name":"pgtypemetadata"}}],[11,"metadata","","",80,{"inputs":[{"name":"pgmetadatalookup"}],"output":{"name":"pgtypemetadata"}}],[11,"metadata","","",80,{"inputs":[{"name":"pgmetadatalookup"}],"output":{"name":"pgtypemetadata"}}],[0,"date_and_time","diesel::pg::types","",null,null],[3,"PgTimestamp","diesel::pg::types::date_and_time","Timestamps are represented in Postgres as a 64 bit signed integer representing the number of microseconds since January 1st 2000. This struct is a dumb wrapper type, meant only to indicate the integer's meaning.",null,null],[12,"0","","",84,null],[3,"PgDate","","Dates are represented in Postgres as a 32 bit signed integer representing the number of julian days since January 1st 2000. This struct is a dumb wrapper type, meant only to indicate the integer's meaning.",null,null],[12,"0","","",85,null],[3,"PgTime","","Time is represented in Postgres as a 64 bit signed integer representing the number of microseconds since midnight. This struct is a dumb wrapper type, meant only to indicate the integer's meaning.",null,null],[12,"0","","",86,null],[3,"PgInterval","","Intervals in Postgres are separated into 3 parts. A 64 bit integer representing time in microseconds, a 32 bit integer representing number of days, and a 32 bit integer representing number of months. This struct is a dumb wrapper type, meant only to indicate the meaning of these parts.",null,null],[12,"microseconds","","",87,null],[12,"days","","",87,null],[12,"months","","",87,null],[11,"metadata","diesel::pg","",80,{"inputs":[{"name":"pgmetadatalookup"}],"output":{"name":"pgtypemetadata"}}],[11,"metadata","","",80,{"inputs":[{"name":"pgmetadatalookup"}],"output":{"name":"pgtypemetadata"}}],[11,"metadata","","",80,{"inputs":[{"name":"pgmetadatalookup"}],"output":{"name":"pgtypemetadata"}}],[11,"metadata","","",80,{"inputs":[{"name":"pgmetadatalookup"}],"output":{"name":"pgtypemetadata"}}],[11,"fmt","diesel::pg::types::date_and_time","",84,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",84,{"inputs":[{"name":"self"}],"output":{"name":"pgtimestamp"}}],[11,"eq","","",84,{"inputs":[{"name":"self"},{"name":"pgtimestamp"}],"output":{"name":"bool"}}],[11,"ne","","",84,{"inputs":[{"name":"self"},{"name":"pgtimestamp"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",84,{"inputs":[{"name":"self"},{"name":"pgtimestamp"}],"output":{"name":"option"}}],[11,"lt","","",84,{"inputs":[{"name":"self"},{"name":"pgtimestamp"}],"output":{"name":"bool"}}],[11,"le","","",84,{"inputs":[{"name":"self"},{"name":"pgtimestamp"}],"output":{"name":"bool"}}],[11,"gt","","",84,{"inputs":[{"name":"self"},{"name":"pgtimestamp"}],"output":{"name":"bool"}}],[11,"ge","","",84,{"inputs":[{"name":"self"},{"name":"pgtimestamp"}],"output":{"name":"bool"}}],[11,"cmp","","",84,{"inputs":[{"name":"self"},{"name":"pgtimestamp"}],"output":{"name":"ordering"}}],[11,"fmt","","",85,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",85,{"inputs":[{"name":"self"}],"output":{"name":"pgdate"}}],[11,"eq","","",85,{"inputs":[{"name":"self"},{"name":"pgdate"}],"output":{"name":"bool"}}],[11,"ne","","",85,{"inputs":[{"name":"self"},{"name":"pgdate"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",85,{"inputs":[{"name":"self"},{"name":"pgdate"}],"output":{"name":"option"}}],[11,"lt","","",85,{"inputs":[{"name":"self"},{"name":"pgdate"}],"output":{"name":"bool"}}],[11,"le","","",85,{"inputs":[{"name":"self"},{"name":"pgdate"}],"output":{"name":"bool"}}],[11,"gt","","",85,{"inputs":[{"name":"self"},{"name":"pgdate"}],"output":{"name":"bool"}}],[11,"ge","","",85,{"inputs":[{"name":"self"},{"name":"pgdate"}],"output":{"name":"bool"}}],[11,"cmp","","",85,{"inputs":[{"name":"self"},{"name":"pgdate"}],"output":{"name":"ordering"}}],[11,"fmt","","",86,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",86,{"inputs":[{"name":"self"}],"output":{"name":"pgtime"}}],[11,"eq","","",86,{"inputs":[{"name":"self"},{"name":"pgtime"}],"output":{"name":"bool"}}],[11,"ne","","",86,{"inputs":[{"name":"self"},{"name":"pgtime"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",86,{"inputs":[{"name":"self"},{"name":"pgtime"}],"output":{"name":"option"}}],[11,"lt","","",86,{"inputs":[{"name":"self"},{"name":"pgtime"}],"output":{"name":"bool"}}],[11,"le","","",86,{"inputs":[{"name":"self"},{"name":"pgtime"}],"output":{"name":"bool"}}],[11,"gt","","",86,{"inputs":[{"name":"self"},{"name":"pgtime"}],"output":{"name":"bool"}}],[11,"ge","","",86,{"inputs":[{"name":"self"},{"name":"pgtime"}],"output":{"name":"bool"}}],[11,"cmp","","",86,{"inputs":[{"name":"self"},{"name":"pgtime"}],"output":{"name":"ordering"}}],[11,"fmt","","",87,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",87,{"inputs":[{"name":"self"}],"output":{"name":"pginterval"}}],[11,"eq","","",87,{"inputs":[{"name":"self"},{"name":"pginterval"}],"output":{"name":"bool"}}],[11,"ne","","",87,{"inputs":[{"name":"self"},{"name":"pginterval"}],"output":{"name":"bool"}}],[11,"new","","",87,{"inputs":[{"name":"i64"},{"name":"i32"},{"name":"i32"}],"output":{"name":"self"}}],[11,"from_microseconds","","",87,{"inputs":[{"name":"i64"}],"output":{"name":"self"}}],[11,"from_days","","",87,{"inputs":[{"name":"i32"}],"output":{"name":"self"}}],[11,"from_months","","",87,{"inputs":[{"name":"i32"}],"output":{"name":"self"}}],[11,"build_from_row","","",85,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[11,"build","","",85,null],[11,"build_from_row","","",86,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[11,"build","","",86,null],[11,"build_from_row","","",84,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[11,"build","","",84,null],[11,"build_from_row","","",84,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[11,"build","","",84,null],[11,"as_expression","","",85,null],[11,"as_expression","","",85,null],[11,"to_sql","","",85,{"inputs":[{"name":"self"},{"name":"tosqloutput"}],"output":{"name":"result"}}],[11,"as_expression","","",86,null],[11,"as_expression","","",86,null],[11,"to_sql","","",86,{"inputs":[{"name":"self"},{"name":"tosqloutput"}],"output":{"name":"result"}}],[11,"as_expression","","",84,null],[11,"as_expression","","",84,null],[11,"to_sql","","",84,{"inputs":[{"name":"self"},{"name":"tosqloutput"}],"output":{"name":"result"}}],[11,"as_expression","","",84,null],[11,"as_expression","","",84,null],[11,"to_sql","","",84,{"inputs":[{"name":"self"},{"name":"tosqloutput"}],"output":{"name":"result"}}],[11,"has_static_query_id","diesel::types","",76,{"inputs":[],"output":{"name":"bool"}}],[11,"build_from_row","diesel::pg::types::date_and_time","",87,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[11,"build","","",87,null],[11,"as_expression","","",87,null],[11,"as_expression","","",87,null],[11,"to_sql","","",87,{"inputs":[{"name":"self"},{"name":"tosqloutput"}],"output":{"name":"result"}}],[11,"metadata","diesel::pg","",80,{"inputs":[{"name":"pgmetadatalookup"}],"output":{"name":"pgtypemetadata"}}],[11,"to_sql","diesel::pg::types::date_and_time","",84,{"inputs":[{"name":"self"},{"name":"tosqloutput"}],"output":{"name":"result"}}],[11,"from_sql","","",84,{"inputs":[{"name":"option"}],"output":{"name":"result"}}],[11,"to_sql","","",84,{"inputs":[{"name":"self"},{"name":"tosqloutput"}],"output":{"name":"result"}}],[11,"from_sql","","",84,{"inputs":[{"name":"option"}],"output":{"name":"result"}}],[11,"to_sql","","",85,{"inputs":[{"name":"self"},{"name":"tosqloutput"}],"output":{"name":"result"}}],[11,"from_sql","","",85,{"inputs":[{"name":"option"}],"output":{"name":"result"}}],[11,"to_sql","","",86,{"inputs":[{"name":"self"},{"name":"tosqloutput"}],"output":{"name":"result"}}],[11,"from_sql","","",86,{"inputs":[{"name":"option"}],"output":{"name":"result"}}],[11,"to_sql","","",87,{"inputs":[{"name":"self"},{"name":"tosqloutput"}],"output":{"name":"result"}}],[11,"from_sql","","",87,{"inputs":[{"name":"option"}],"output":{"name":"result"}}],[11,"add","","",87,null],[0,"floats","diesel::pg::types","",null,null],[4,"PgNumeric","diesel::pg::types::floats","",null,null],[13,"Positive","","",88,null],[12,"weight","diesel::pg::types::floats::PgNumeric","",88,null],[12,"scale","","",88,null],[12,"digits","","",88,null],[13,"Negative","diesel::pg::types::floats","",88,null],[12,"weight","diesel::pg::types::floats::PgNumeric","",88,null],[12,"scale","","",88,null],[12,"digits","","",88,null],[13,"NaN","diesel::pg::types::floats","",88,null],[11,"fmt","","",88,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",88,{"inputs":[{"name":"self"}],"output":{"name":"pgnumeric"}}],[11,"eq","","",88,{"inputs":[{"name":"self"},{"name":"pgnumeric"}],"output":{"name":"bool"}}],[11,"ne","","",88,{"inputs":[{"name":"self"},{"name":"pgnumeric"}],"output":{"name":"bool"}}],[11,"from_sql","","",88,{"inputs":[{"name":"option"}],"output":{"name":"result"}}],[11,"to_sql","","",88,{"inputs":[{"name":"self"},{"name":"tosqloutput"}],"output":{"name":"result"}}],[11,"metadata","diesel::pg","",80,{"inputs":[{"name":"pgmetadatalookup"}],"output":{"name":"pgtypemetadata"}}],[11,"has_static_query_id","diesel::types","",75,{"inputs":[],"output":{"name":"bool"}}],[11,"build_from_row","diesel::pg::types::floats","",88,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[11,"build","","",88,null],[11,"as_expression","","",88,null],[11,"as_expression","","",88,null],[11,"to_sql","","",88,{"inputs":[{"name":"self"},{"name":"tosqloutput"}],"output":{"name":"result"}}],[11,"metadata","diesel::pg","",80,{"inputs":[{"name":"pgmetadatalookup"}],"output":{"name":"pgtypemetadata"}}],[0,"money","diesel::pg::types","Support for Money values under PostgreSQL.",null,null],[3,"PgMoney","diesel::pg::types::money","Money is represented in Postgres as a 64 bit signed integer.  This struct is a dumb wrapper type, meant only to indicate the integer's meaning.  The fractional precision of the value is determined by the `lc_monetary` setting of the database. This struct is re-exported as `Cents` as a convenient and conventional expression of a typical unit of 1/100th of currency. For other names or precisions, users might consider a differently named `use` of the `PgMoney` struct.",null,null],[12,"0","","",89,null],[11,"fmt","","",89,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",89,{"inputs":[{"name":"self"}],"output":{"name":"pgmoney"}}],[11,"eq","","",89,{"inputs":[{"name":"self"},{"name":"pgmoney"}],"output":{"name":"bool"}}],[11,"ne","","",89,{"inputs":[{"name":"self"},{"name":"pgmoney"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",89,{"inputs":[{"name":"self"},{"name":"pgmoney"}],"output":{"name":"option"}}],[11,"lt","","",89,{"inputs":[{"name":"self"},{"name":"pgmoney"}],"output":{"name":"bool"}}],[11,"le","","",89,{"inputs":[{"name":"self"},{"name":"pgmoney"}],"output":{"name":"bool"}}],[11,"gt","","",89,{"inputs":[{"name":"self"},{"name":"pgmoney"}],"output":{"name":"bool"}}],[11,"ge","","",89,{"inputs":[{"name":"self"},{"name":"pgmoney"}],"output":{"name":"bool"}}],[11,"cmp","","",89,{"inputs":[{"name":"self"},{"name":"pgmoney"}],"output":{"name":"ordering"}}],[11,"build_from_row","","",89,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[11,"build","","",89,null],[11,"as_expression","","",89,null],[11,"as_expression","","",89,null],[11,"to_sql","","",89,{"inputs":[{"name":"self"},{"name":"tosqloutput"}],"output":{"name":"result"}}],[11,"metadata","diesel::pg","",80,{"inputs":[{"name":"pgmetadatalookup"}],"output":{"name":"pgtypemetadata"}}],[11,"from_sql","diesel::pg::types::money","",89,{"inputs":[{"name":"option"}],"output":{"name":"result"}}],[11,"to_sql","","",89,{"inputs":[{"name":"self"},{"name":"tosqloutput"}],"output":{"name":"result"}}],[11,"add","","Panics",89,null],[11,"add_assign","","Panics",89,{"inputs":[{"name":"self"},{"name":"pgmoney"}],"output":null}],[11,"sub","","Panics",89,null],[11,"sub_assign","","Panics",89,{"inputs":[{"name":"self"},{"name":"pgmoney"}],"output":null}],[0,"sql_types","diesel::pg::types","PostgreSQL specific SQL types",null,null],[3,"Oid","diesel::pg::types::sql_types","The `OID` SQL type. This is a PostgreSQL specific type.",null,null],[3,"Timestamptz","","The \"timestamp with time zone\" SQL type, which PostgreSQL abbreviates to `timestamptz`.",null,null],[3,"Array","","The `Array` SQL type. This wraps another type to represent a SQL array of that type. Multidimensional arrays are not supported, nor are arrays containing null.",null,null],[3,"Range","","The `Range` SQL type. This wraps another type to represent a SQL range of that type.",null,null],[3,"Money","","The PostgreSQL Money type.",null,null],[6,"SmallSerial","","Alias for `SmallInt`",null,null],[6,"Serial","","Alias for `Integer`",null,null],[6,"BigSerial","","Alias for `BigInt`",null,null],[6,"Bytea","","Alias for `Binary`, to ensure `infer_schema!` works",null,null],[11,"fmt","","",90,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",90,{"inputs":[{"name":"self"}],"output":{"name":"oid"}}],[11,"default","","",90,{"inputs":[],"output":{"name":"oid"}}],[11,"fmt","","",91,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",91,{"inputs":[{"name":"self"}],"output":{"name":"timestamptz"}}],[11,"default","","",91,{"inputs":[],"output":{"name":"timestamptz"}}],[11,"fmt","","",92,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",92,{"inputs":[{"name":"self"}],"output":{"name":"array"}}],[11,"default","","",92,{"inputs":[],"output":{"name":"array"}}],[11,"fmt","","",93,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",93,{"inputs":[{"name":"self"}],"output":{"name":"range"}}],[11,"default","","",93,{"inputs":[],"output":{"name":"range"}}],[11,"fmt","","",94,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",94,{"inputs":[{"name":"self"}],"output":{"name":"money"}}],[11,"default","","",94,{"inputs":[],"output":{"name":"money"}}],[0,"upsert","diesel::pg","",null,null],[5,"do_nothing","diesel::pg::upsert","Used in conjunction with `on_conflict` to write a query in the form `ON CONFLICT (name) DO NOTHING`. If you want to do nothing when any constraint conflicts, use `on_conflict_do_nothing()` instead.",null,{"inputs":[],"output":{"name":"donothing"}}],[5,"do_update","","Used to create a query in the form `ON CONFLICT (...) DO UPDATE ...`",null,{"inputs":[],"output":{"name":"incompletedoupdate"}}],[5,"excluded","","Represents `excluded.column` in an `ON CONFLICT DO UPDATE` clause.",null,{"inputs":[{"name":"t"}],"output":{"name":"excluded"}}],[5,"on_constraint","","Used to specify the constraint name for an upsert statement in the form `ON CONFLICT ON CONSTRAINT`. Note that `constraint_name` must be the name of a unique constraint, not the name of an index.",null,{"inputs":[{"name":"str"}],"output":{"name":"onconstraint"}}],[8,"OnConflictExtension","","Adds extension methods related to PG upsert",null,null],[11,"on_conflict_do_nothing","","Adds `ON CONFLICT DO NOTHING` to the insert statement, without specifying any columns or constraints to restrict the conflict to.",95,{"inputs":[{"name":"self"}],"output":{"name":"onconflictdonothing"}}],[11,"on_conflict","","Adds an `ON CONFLICT` to the insert statement, performing the action specified by `Action` if a conflict occurs for `Target`.",95,{"inputs":[{"name":"self"},{"name":"target"},{"name":"action"}],"output":{"name":"onconflict"}}],[0,"data_types","diesel::pg","",null,null],[3,"PgTimestamp","diesel::pg::data_types","Timestamps are represented in Postgres as a 64 bit signed integer representing the number of microseconds since January 1st 2000. This struct is a dumb wrapper type, meant only to indicate the integer's meaning.",null,null],[12,"0","","",84,null],[3,"PgDate","","Dates are represented in Postgres as a 32 bit signed integer representing the number of julian days since January 1st 2000. This struct is a dumb wrapper type, meant only to indicate the integer's meaning.",null,null],[12,"0","","",85,null],[3,"PgTime","","Time is represented in Postgres as a 64 bit signed integer representing the number of microseconds since midnight. This struct is a dumb wrapper type, meant only to indicate the integer's meaning.",null,null],[12,"0","","",86,null],[3,"PgInterval","","Intervals in Postgres are separated into 3 parts. A 64 bit integer representing time in microseconds, a 32 bit integer representing number of days, and a 32 bit integer representing number of months. This struct is a dumb wrapper type, meant only to indicate the meaning of these parts.",null,null],[12,"microseconds","","",87,null],[12,"days","","",87,null],[12,"months","","",87,null],[3,"PgMoney","","Money is represented in Postgres as a 64 bit signed integer.  This struct is a dumb wrapper type, meant only to indicate the integer's meaning.  The fractional precision of the value is determined by the `lc_monetary` setting of the database. This struct is re-exported as `Cents` as a convenient and conventional expression of a typical unit of 1/100th of currency. For other names or precisions, users might consider a differently named `use` of the `PgMoney` struct.",null,null],[12,"0","","",89,null],[4,"PgNumeric","","",null,null],[13,"Positive","","",88,null],[12,"weight","diesel::pg::data_types::PgNumeric","",88,null],[12,"scale","","",88,null],[12,"digits","","",88,null],[13,"Negative","diesel::pg::data_types","",88,null],[12,"weight","diesel::pg::data_types::PgNumeric","",88,null],[12,"scale","","",88,null],[12,"digits","","",88,null],[13,"NaN","diesel::pg::data_types","",88,null],[0,"migrations","diesel","Provides functions for maintaining database schema.",null,null],[4,"MigrationError","diesel::migrations","",null,null],[13,"MigrationDirectoryNotFound","","",96,null],[13,"UnknownMigrationFormat","","",96,null],[13,"IoError","","",96,null],[13,"UnknownMigrationVersion","","",96,null],[13,"NoMigrationRun","","",96,null],[4,"RunMigrationsError","","",null,null],[13,"MigrationError","","",97,null],[13,"QueryError","","",97,null],[13,"EmptyMigration","","",97,null],[5,"migration_from","","",null,{"inputs":[{"name":"pathbuf"}],"output":{"name":"result"}}],[5,"run_pending_migrations","","Runs all migrations that have not yet been run. This function will print all progress to stdout. This function will return an `Err` if some error occurs reading the migrations, or if any migration fails to run. Each migration is run in its own transaction, so some migrations may be committed, even if a later migration fails to run.",null,{"inputs":[{"name":"conn"}],"output":{"name":"result"}}],[5,"mark_migrations_in_directory","","Compares migrations found in `migrations_dir` to those that have been applied. Returns a list of pathbufs and whether they have been applied.",null,{"inputs":[{"name":"conn"},{"name":"path"}],"output":{"name":"result"}}],[5,"any_pending_migrations","","",null,{"inputs":[{"name":"conn"}],"output":{"name":"result"}}],[5,"revert_latest_migration","","Reverts the last migration that was run. Returns the version that was reverted. Returns an `Err` if no migrations have ever been run.",null,{"inputs":[{"name":"conn"}],"output":{"name":"result"}}],[5,"revert_latest_migration_in_directory","","",null,{"inputs":[{"name":"conn"},{"name":"path"}],"output":{"name":"result"}}],[5,"run_migrations","","Run all pending migrations in the given list. Apps should likely be calling `run_pending_migrations` or `run_pending_migrations_in_directory` instead.",null,{"inputs":[{"name":"conn"},{"name":"list"},{"name":"write"}],"output":{"name":"result"}}],[5,"find_migrations_directory","","Returns the directory containing migrations. Will look at for $PWD/migrations. If it is not found, it will search the parents of the current directory, until it reaches the root directory.  Returns `MigrationError::MigrationDirectoryNotFound` if no directory is found.",null,{"inputs":[],"output":{"name":"result"}}],[5,"search_for_migrations_directory","","Searches for the migrations directory relative to the given path. See `find_migrations_directory` for more details.",null,{"inputs":[{"name":"path"}],"output":{"name":"result"}}],[11,"fmt","","",96,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",96,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",96,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",96,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"from","","",96,{"inputs":[{"name":"error"}],"output":{"name":"self"}}],[11,"fmt","","",97,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",97,{"inputs":[{"name":"self"},{"name":"runmigrationserror"}],"output":{"name":"bool"}}],[11,"ne","","",97,{"inputs":[{"name":"self"},{"name":"runmigrationserror"}],"output":{"name":"bool"}}],[11,"description","","",97,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",97,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",97,{"inputs":[{"name":"migrationerror"}],"output":{"name":"self"}}],[11,"from","","",97,{"inputs":[{"name":"error"}],"output":{"name":"self"}}],[11,"from","","",97,{"inputs":[{"name":"error"}],"output":{"name":"self"}}],[7,"TIMESTAMP_FORMAT","","",null,null],[8,"MigrationConnection","","A connection which can be passed to the migration methods. This exists only to wrap up some constraints which are meant to hold for all connections. This trait will go away at some point in the future. Any Diesel connection should be useable where this trait is required.",null,null],[10,"previously_run_migration_versions","","",98,{"inputs":[{"name":"self"}],"output":{"name":"queryresult"}}],[10,"latest_run_migration_version","","",98,{"inputs":[{"name":"self"}],"output":{"name":"queryresult"}}],[10,"insert_new_migration","","",98,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"queryresult"}}],[8,"Migration","","",null,null],[10,"version","","",99,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[10,"run","","",99,{"inputs":[{"name":"self"},{"name":"simpleconnection"}],"output":{"name":"result"}}],[10,"revert","","",99,{"inputs":[{"name":"self"},{"name":"simpleconnection"}],"output":{"name":"result"}}],[11,"file_path","","",99,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[0,"query_source","diesel","Types in this module are mostly internal and automatically generated. You shouldn't need to interact with these types during normal usage, other than the methods on `Table`",null,null],[3,"Never","diesel::query_source","",null,null],[3,"Succ","","",null,null],[6,"Once","","",null,null],[8,"JoinTo","","Indicates that two tables can be used together in a JOIN clause. Implementations of this trait will be generated for you automatically by the association annotations from codegen.",null,null],[8,"Queryable","","Trait indicating that a record can be queried from the database. This trait can be derived automatically using `diesel_codegen`. This trait can only be derived for structs, not enums.",null,null],[16,"Row","","",100,null],[10,"build","","",100,null],[8,"Column","","A column on a database table. Types which implement this trait should have been generated by the `table!` macro.",null,null],[16,"Table","","",101,null],[10,"name","","",101,{"inputs":[],"output":{"name":"str"}}],[8,"Table","","A SQL database table. Types which implement this trait should have been generated by the `table!` macro.",null,null],[16,"PrimaryKey","","",102,null],[16,"AllColumns","","",102,null],[10,"primary_key","","",102,null],[10,"all_columns","","",102,null],[8,"AppearsInFromClause","","",null,null],[16,"Count","","",103,null],[0,"result","diesel","",null,null],[4,"Error","diesel::result","The generic \"things can fail in a myriad of ways\" enum. This type is not intended to be exhaustively matched, and new variants may be added in the future without a major version bump.",null,null],[13,"InvalidCString","","",104,null],[13,"DatabaseError","","",104,null],[13,"NotFound","","",104,null],[13,"QueryBuilderError","","",104,null],[13,"DeserializationError","","",104,null],[13,"SerializationError","","",104,null],[13,"RollbackTransaction","","You can return this variant inside of a transaction when you want to roll it back, but have no actual error to return. Diesel will never return this variant unless you gave it to us, and it can be safely ignored in error handling.",104,null],[4,"DatabaseErrorKind","","The kind of database error that occurred. This is not meant to exhaustively cover all possible errors, but is used to identify errors which are commonly recovered from programatically. This enum is not intended to be exhaustively matched, and new variants may be added in the future without a major version bump.",null,null],[13,"UniqueViolation","","",105,null],[13,"ForeignKeyViolation","","",105,null],[13,"UnableToSendCommand","","",105,null],[4,"ConnectionError","","",null,null],[13,"InvalidCString","","",106,null],[13,"BadConnection","","",106,null],[13,"InvalidConnectionUrl","","",106,null],[13,"CouldntSetupConfiguration","","Diesel may try to automatically set session specific configuration values, such as UTF8 encoding, or enabling the `||` operator on MySQL. This variant is returned if an error occurred executing the query to set those options. Diesel will never affect global configuration.",106,null],[6,"QueryResult","","A specialized result type for queries.",null,null],[6,"ConnectionResult","","A specialized result type for establishing connections.",null,null],[8,"DatabaseErrorInformation","","",null,null],[10,"message","","",107,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[10,"details","","",107,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"hint","","",107,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"table_name","","",107,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"column_name","","",107,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"constraint_name","","",107,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[8,"OptionalExtension","","See the method documentation.",null,null],[10,"optional","","Converts a `QueryResult<T>` into a `QueryResult<Option<T>>`.",108,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","","",104,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",105,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",105,{"inputs":[{"name":"self"}],"output":{"name":"databaseerrorkind"}}],[11,"fmt","","",107,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",106,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"optional","","",109,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"from","","",106,{"inputs":[{"name":"nulerror"}],"output":{"name":"self"}}],[11,"from","","",104,{"inputs":[{"name":"nulerror"}],"output":{"name":"self"}}],[11,"fmt","","",104,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",104,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",106,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",106,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"eq","","",104,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[0,"row","diesel","Contains the `Row` trait",null,null],[8,"Row","diesel::row","The row trait which is used for [`FromSqlRow`][]. Apps should not need to concern themselves with this trait.",null,null],[10,"take","","Returns the value of the next column in the row.",110,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"next_is_null","","Returns whether the next `count` columns are all `NULL`.",110,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"advance","","Skips the next `count` columns. This method must be called if you are choosing not to call `take` as a result of `next_is_null` returning `true`.",110,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[0,"helper_types","diesel","Provide helper types for concisely writing the return type of functions. As with iterators, it is unfortunately difficult to return a partially constructed query without exposing the exact implementation of the function. Without higher kinded types, these various DSLs can't be combined into a single trait for boxing purposes.",null,null],[6,"Select","diesel::helper_types","Represents the return type of `.select(selection)`",null,null],[6,"Filter","","Represents the return type of `.filter(predicate)`",null,null],[6,"FindBy","","Represents the return type of `.filter(lhs.eq(rhs))`",null,null],[6,"Find","","Represents the return type of `.find(pk)`",null,null],[6,"Order","","Represents the return type of `.order(ordering)`",null,null],[6,"Limit","","Represents the return type of `.limit()`",null,null],[6,"Offset","","Represents the return type of `.offset()`",null,null],[6,"InnerJoin","","Represents the return type of `.inner_join(rhs)`",null,null],[6,"LeftJoin","","Represents the return type of `.left_join(rhs)`",null,null],[6,"Update","","Represents the return type of `update(lhs).set(rhs)`",null,null],[0,"prelude","diesel","Re-exports important traits and types. Meant to be glob imported when using Diesel.",null,null],[3,"PgConnection","diesel::prelude","The connection string expected by `PgConnection::establish` should be a PostgreSQL connection string, as documented at http://www.postgresql.org/docs/9.4/static/libpq-connect.html#LIBPQ-CONNSTRING",null,null],[8,"GroupedBy","","",null,null],[10,"grouped_by","","",1,null],[8,"Insertable","","Represents that a structure can be used to insert a new row into the database. This is automatically implemented for `&[T]` and `&Vec<T>` for inserting more than one record.",null,null],[16,"Values","","",111,null],[10,"values","","",111,null],[8,"BelongingToDsl","","",null,null],[16,"Output","","",112,null],[10,"belonging_to","","",112,null],[8,"BoxedDsl","","Boxes the pieces of a query into a single type. This is useful for cases where you want to conditionally modify a query, but need the type to remain the same. The backend must be specified as part of this. It is not possible to box a query and have it be useable on multiple backends.",null,null],[11,"into_boxed","","",113,null],[8,"CountDsl","","Adds a simple `count` function to queries. Automatically implemented for all types which implement `SelectDsl`.",null,null],[11,"count","","Get the count of a query. This is equivalent to `.select(count_star())`",114,null],[8,"DistinctDsl","","Adds the `DISTINCT` keyword to a query.",null,null],[16,"Output","","",115,null],[10,"distinct","","",115,null],[8,"FilterDsl","","Adds to the `WHERE` clause of a query. If there is already a `WHERE` clause, the result will be `old AND new`. This is automatically implemented for the various query builder types.",null,null],[16,"Output","","",116,null],[10,"filter","","",116,null],[8,"FindDsl","","Attempts to find a single record from the given table by primary key.",null,null],[16,"Output","","",117,null],[10,"find","","",117,null],[8,"JoinDsl","","Methods allowing various joins between two or more tables.",null,null],[11,"inner_join","","Join two tables using a SQL `INNER JOIN`. The `ON` clause is defined via the associations API.",118,null],[11,"left_outer_join","","Join two tables using a SQL `LEFT OUTER JOIN`. The `ON` clause is defined via the associations API.",118,null],[11,"left_join","","Alias for `left_outer_join`",118,null],[8,"JoinOnDsl","","",null,null],[11,"on","","Specify the `ON` clause for a join statement. This will override any implicit `ON` clause that would come from `#[belongs_to]`",119,{"inputs":[{"name":"self"},{"name":"on"}],"output":{"name":"onclausewrapper"}}],[8,"LimitDsl","","Sets the limit clause of a query. If there was already a limit clause, it will be overridden. This is automatically implemented for the various query builder types.",null,null],[16,"Output","","",120,null],[10,"limit","","",120,null],[8,"LoadDsl","","Methods to execute a query given a connection. These are automatically implemented for the various query types.",null,null],[11,"load","","Executes the given query, returning a `Vec` with the returned rows.",121,{"inputs":[{"name":"self"},{"name":"conn"}],"output":{"name":"queryresult"}}],[11,"get_result","","Runs the command, and returns the affected row. `Err(NotFound)` will be returned if the query affected 0 rows. You can call `.optional()` on the result of this if the command was optional to get back a `Result<Option<U>>`",121,{"inputs":[{"name":"self"},{"name":"conn"}],"output":{"name":"queryresult"}}],[11,"get_results","","Runs the command, returning an `Vec` with the affected rows.",121,{"inputs":[{"name":"self"},{"name":"conn"}],"output":{"name":"queryresult"}}],[8,"ExecuteDsl","","",null,null],[10,"execute","","Executes the given command, returning the number of rows affected. Used in conjunction with `update` and `delete`",122,{"inputs":[{"name":"self"},{"name":"conn"}],"output":{"name":"queryresult"}}],[8,"FirstDsl","","",null,null],[11,"first","","Attempts to load a single record. Returns `Ok(record)` if found, and `Err(NotFound)` if no results are returned. If the query truly is optional, you can call `.optional()` on the result of this to get a `Result<Option<U>>`.",123,{"inputs":[{"name":"self"},{"name":"conn"}],"output":{"name":"queryresult"}}],[8,"LoadQuery","","",null,null],[10,"internal_load","","",124,{"inputs":[{"name":"self"},{"name":"conn"}],"output":{"name":"queryresult"}}],[8,"OffsetDsl","","Sets the offset clause of a query. If there was already a offset clause, it will be overridden. This is automatically implemented for the various query builder types.",null,null],[16,"Output","","",125,null],[10,"offset","","",125,null],[8,"OrderDsl","","Sets the order clause of a query. If there was already a order clause, it will be overridden. The expression passed to `order` must actually be valid for the query. See also: `.desc()` and `.asc()`",null,null],[16,"Output","","",126,null],[10,"order","","",126,null],[8,"SaveChangesDsl","","",null,null],[11,"save_changes","","Sugar for types which implement both `AsChangeset` and `Identifiable`",127,{"inputs":[{"name":"self"},{"name":"conn"}],"output":{"name":"queryresult"}}],[8,"SelectDsl","","Sets the select clause of a query. If there was already a select clause, it will be overridden. The expression passed to `select` must actually be valid for the query (only contains columns from the target table, doesn't mix aggregate + non-aggregate expressions, etc).",null,null],[16,"Output","","",128,null],[10,"select","","",128,null],[8,"JoinTo","","Indicates that two tables can be used together in a JOIN clause. Implementations of this trait will be generated for you automatically by the association annotations from codegen.",null,null],[0,"data_types","diesel","Structs to represent the primitive equivalent of SQL types where there is no existing Rust primitive, or where using it would be confusing (such as date and time types). This module will re-export all backend specific data structures when compiled against that backend.",null,null],[14,"table","","Specifies that a table exists, and what columns it has. This will create a new public module, with the same name, as the name of the table. In this module, you'll find a unit struct named `table`, and a unit struct with the names of each of the columns. In the definition, you can also specify an additional set of columns which exist, but should not be selected by default (for example, for things like full text search)",null,null],[14,"joinable","","Allow two tables to be referenced in a join query.",null,null],[14,"enable_multi_table_joins","","Allow two tables which are otherwise unrelated to be used together in a multi-table join. This macro only needs to be invoked when the two tables don't have an association between them (e.g. parent to grandchild)",null,null],[14,"debug_sql","","Takes a query `QueryFragment` expression as an argument and returns a string of SQL with placeholders for the dynamic values.",null,null],[14,"print_sql","","Takes takes a query `QueryFragment` expression as an argument and prints out the SQL with placeholders for the dynamic values.",null,null],[14,"infer_schema","","Queries the database for the names of all tables, and calls `infer_table_from_schema!` for each one. A schema name can optionally be passed to load from schemas other than the default. If a schema name is given, the inferred tables will be wrapped in a module with the same name.",null,null],[14,"infer_table_from_schema","","Establishes a database connection at compile time, loads the schema information about a table's columns, and invokes `table!` for you automatically. For tables in a schema other than the default, the table name should be given as `\"schema_name.table_name\"`.",null,null],[14,"embed_migrations","","This macro will read your migrations at compile time, and embed a module you can use to execute them at runtime without the migration files being present on the file system. This is useful if you would like to use Diesel's migration infrastructure, but want to ship a single executable file (such as for embedded applications). It can also be used to apply migrations to an in memory database (Diesel does this for its own test suite).",null,null],[14,"operator_allowed","","Implements the Rust operator for a given type. If you create a new SQL function, which returns a type that you'd like to use an operator on, you should invoke this macro. Unfortunately, Rust disallows us from automatically implementing `Add` and other traits from `std::ops`, under its orphan rules.",null,null],[14,"numeric_expr","","Indicates that an expression allows all numeric operators. If you create new SQL functions that return a numeric type, you should invoke this macro that type. Unfortunately, Rust disallows us from automatically implementing `Add` for types which implement `Expression`, under its orphan rules.",null,null],[14,"impl_AsChangeset","","Implements the [`AsChangeset`][changeset] trait for a given struct. This macro should be called with the name of the table you wish to use the struct with, followed by the entire struct body. This macro mirrors `#[as_changeset]` from [`diesel_codegen`][diesel_codegen]",null,null],[14,"BelongsTo","","Defines a one-to-one association for the child table. This macro should be called with the name of the parent struct, followed by any options, followed by the entire struct body. The struct must be annotated with `#[table_name(name_of_table)]`. Both the parent and child structs must implement [`Identifiable`][identifiable].",null,null],[14,"impl_Identifiable","","Implements the [`Identifiable`][identifiable] trait for a reference to a given struct. This macro should be called by copy/pasting the definition of the struct into it.",null,null],[14,"impl_Insertable","","Implements the [`Insertable`][insertable] trait for a given struct. This macro should be called with the name of the table you wish to use the struct with, followed by the entire struct body.",null,null],[14,"sql_function","","Declare a sql function for use in your code. Useful if you have your own SQL functions that you'd like to use. You can optionally provide a doc string as well. `$struct_name` should just be any unique name. You will not need to reference it in your code, but it is required due to the fact that `concat_idents!` is useless.",null,null],[14,"no_arg_sql_function","","Declare a 0 argument SQL function for use in your code. This will generate a unit struct, which is an expression representing calling this function. See `now` for example output. `now` was generated using:",null,null],[14,"diesel_infix_operator","","Useful for libraries adding support for new SQL types. Apps should never need to call this.",null,null],[14,"diesel_postfix_operator","","Useful for libraries adding support for new SQL types. Apps should never need to call this.",null,null],[14,"diesel_prefix_operator","","Useful for libraries adding support for new SQL types. Apps should never need to call this.",null,null],[11,"fmt","diesel::expression::dsl","",129,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",129,{"inputs":[{"name":"self"}],"output":{"name":"max"}}],[11,"walk_ast","","",129,{"inputs":[{"name":"self"},{"name":"astpass"}],"output":{"name":"queryresult"}}],[11,"has_static_query_id","","",129,{"inputs":[],"output":{"name":"bool"}}],[11,"fmt","","",130,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",130,{"inputs":[{"name":"self"}],"output":{"name":"min"}}],[11,"walk_ast","","",130,{"inputs":[{"name":"self"},{"name":"astpass"}],"output":{"name":"queryresult"}}],[11,"has_static_query_id","","",130,{"inputs":[],"output":{"name":"bool"}}],[11,"fmt","","",131,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",131,{"inputs":[{"name":"self"}],"output":{"name":"sum"}}],[11,"walk_ast","","",131,{"inputs":[{"name":"self"},{"name":"astpass"}],"output":{"name":"queryresult"}}],[11,"has_static_query_id","","",131,{"inputs":[],"output":{"name":"bool"}}],[11,"fmt","","",132,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",132,{"inputs":[{"name":"self"}],"output":{"name":"avg"}}],[11,"walk_ast","","",132,{"inputs":[{"name":"self"},{"name":"astpass"}],"output":{"name":"queryresult"}}],[11,"has_static_query_id","","",132,{"inputs":[],"output":{"name":"bool"}}],[11,"fmt","","",133,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",133,{"inputs":[{"name":"self"}],"output":{"name":"now"}}],[11,"walk_ast","","",133,{"inputs":[{"name":"self"},{"name":"astpass"}],"output":{"name":"queryresult"}}],[11,"has_static_query_id","","",133,{"inputs":[],"output":{"name":"bool"}}],[11,"add","","",133,null],[11,"sub","","",133,null],[11,"as_expression","","",133,null],[11,"as_expression","","",133,null],[11,"query_id","diesel::query_builder","",46,{"inputs":[],"output":{"name":"option"}}],[11,"has_static_query_id","","",49,{"inputs":[],"output":{"name":"bool"}}],[11,"metadata","diesel::pg","",80,{"inputs":[{"name":"pgmetadatalookup"}],"output":{"name":"pgtypemetadata"}}],[11,"metadata","","",80,{"inputs":[{"name":"pgmetadatalookup"}],"output":{"name":"pgtypemetadata"}}],[11,"metadata","","",80,{"inputs":[{"name":"pgmetadatalookup"}],"output":{"name":"pgtypemetadata"}}],[11,"metadata","","",80,{"inputs":[{"name":"pgmetadatalookup"}],"output":{"name":"pgtypemetadata"}}],[11,"metadata","","",80,{"inputs":[{"name":"pgmetadatalookup"}],"output":{"name":"pgtypemetadata"}}],[11,"metadata","","",80,{"inputs":[{"name":"pgmetadatalookup"}],"output":{"name":"pgtypemetadata"}}],[11,"metadata","","",80,{"inputs":[{"name":"pgmetadatalookup"}],"output":{"name":"pgtypemetadata"}}],[11,"metadata","","",80,{"inputs":[{"name":"pgmetadatalookup"}],"output":{"name":"pgtypemetadata"}}],[11,"milliseconds","diesel::pg::expression::extensions","Returns a PgInterval representing `self` as milliseconds",78,{"inputs":[{"name":"self"}],"output":{"name":"pginterval"}}],[11,"seconds","","Returns a PgInterval representing `self` as seconds",78,{"inputs":[{"name":"self"}],"output":{"name":"pginterval"}}],[11,"minutes","","Returns a PgInterval representing `self` as minutes",78,{"inputs":[{"name":"self"}],"output":{"name":"pginterval"}}],[11,"hours","","Returns a PgInterval representing `self` as hours",78,{"inputs":[{"name":"self"}],"output":{"name":"pginterval"}}],[11,"microsecond","","Identical to `microseconds`",78,{"inputs":[{"name":"self"}],"output":{"name":"pginterval"}}],[11,"millisecond","","Identical to `milliseconds`",78,{"inputs":[{"name":"self"}],"output":{"name":"pginterval"}}],[11,"second","","Identical to `seconds`",78,{"inputs":[{"name":"self"}],"output":{"name":"pginterval"}}],[11,"minute","","Identical to `minutes`",78,{"inputs":[{"name":"self"}],"output":{"name":"pginterval"}}],[11,"hour","","Identical to `hours`",78,{"inputs":[{"name":"self"}],"output":{"name":"pginterval"}}],[11,"weeks","","Returns a PgInterval representing `self` in weeks",79,{"inputs":[{"name":"self"}],"output":{"name":"pginterval"}}],[11,"years","","Returns a PgInterval representing `self` in weeks",79,{"inputs":[{"name":"self"}],"output":{"name":"pginterval"}}],[11,"day","","Identical to `days`",79,{"inputs":[{"name":"self"}],"output":{"name":"pginterval"}}],[11,"week","","Identical to `weeks`",79,{"inputs":[{"name":"self"}],"output":{"name":"pginterval"}}],[11,"month","","Identical to `months`",79,{"inputs":[{"name":"self"}],"output":{"name":"pginterval"}}],[11,"year","","Identical to `years`",79,{"inputs":[{"name":"self"}],"output":{"name":"pginterval"}}],[11,"has_static_query_id","diesel::pg::types::sql_types","",92,{"inputs":[],"output":{"name":"bool"}}],[11,"has_static_query_id","","",93,{"inputs":[],"output":{"name":"bool"}}],[11,"has_static_query_id","","",91,{"inputs":[],"output":{"name":"bool"}}],[11,"has_static_query_id","","",90,{"inputs":[],"output":{"name":"bool"}}],[11,"has_static_query_id","","",94,{"inputs":[],"output":{"name":"bool"}}],[11,"on_conflict_do_nothing","diesel::pg::upsert","Adds `ON CONFLICT DO NOTHING` to the insert statement, without specifying any columns or constraints to restrict the conflict to.",95,{"inputs":[{"name":"self"}],"output":{"name":"onconflictdonothing"}}],[11,"on_conflict","","Adds an `ON CONFLICT` to the insert statement, performing the action specified by `Action` if a conflict occurs for `Target`.",95,{"inputs":[{"name":"self"},{"name":"target"},{"name":"action"}],"output":{"name":"onconflict"}}],[11,"file_path","diesel::migrations","",99,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"into_boxed","diesel::prelude","",113,null],[11,"count","","Get the count of a query. This is equivalent to `.select(count_star())`",114,null],[11,"inner_join","","Join two tables using a SQL `INNER JOIN`. The `ON` clause is defined via the associations API.",118,null],[11,"left_outer_join","","Join two tables using a SQL `LEFT OUTER JOIN`. The `ON` clause is defined via the associations API.",118,null],[11,"left_join","","Alias for `left_outer_join`",118,null],[11,"on","","Specify the `ON` clause for a join statement. This will override any implicit `ON` clause that would come from `#[belongs_to]`",119,{"inputs":[{"name":"self"},{"name":"on"}],"output":{"name":"onclausewrapper"}}],[11,"load","","Executes the given query, returning a `Vec` with the returned rows.",121,{"inputs":[{"name":"self"},{"name":"conn"}],"output":{"name":"queryresult"}}],[11,"get_result","","Runs the command, and returns the affected row. `Err(NotFound)` will be returned if the query affected 0 rows. You can call `.optional()` on the result of this if the command was optional to get back a `Result<Option<U>>`",121,{"inputs":[{"name":"self"},{"name":"conn"}],"output":{"name":"queryresult"}}],[11,"get_results","","Runs the command, returning an `Vec` with the affected rows.",121,{"inputs":[{"name":"self"},{"name":"conn"}],"output":{"name":"queryresult"}}],[11,"first","","Attempts to load a single record. Returns `Ok(record)` if found, and `Err(NotFound)` if no results are returned. If the query truly is optional, you can call `.optional()` on the result of this to get a `Result<Option<U>>`.",123,{"inputs":[{"name":"self"},{"name":"conn"}],"output":{"name":"queryresult"}}],[11,"save_changes","","Sugar for types which implement both `AsChangeset` and `Identifiable`",127,{"inputs":[{"name":"self"},{"name":"conn"}],"output":{"name":"queryresult"}}],[11,"into_boxed","","",113,null],[11,"load","","Executes the given query, returning a `Vec` with the returned rows.",121,{"inputs":[{"name":"self"},{"name":"conn"}],"output":{"name":"queryresult"}}],[11,"get_result","","Runs the command, and returns the affected row. `Err(NotFound)` will be returned if the query affected 0 rows. You can call `.optional()` on the result of this if the command was optional to get back a `Result<Option<U>>`",121,{"inputs":[{"name":"self"},{"name":"conn"}],"output":{"name":"queryresult"}}],[11,"get_results","","Runs the command, returning an `Vec` with the affected rows.",121,{"inputs":[{"name":"self"},{"name":"conn"}],"output":{"name":"queryresult"}}],[11,"first","","Attempts to load a single record. Returns `Ok(record)` if found, and `Err(NotFound)` if no results are returned. If the query truly is optional, you can call `.optional()` on the result of this to get a `Result<Option<U>>`.",123,{"inputs":[{"name":"self"},{"name":"conn"}],"output":{"name":"queryresult"}}]],"paths":[[8,"BelongsTo"],[8,"GroupedBy"],[8,"HasTable"],[8,"Identifiable"],[8,"Backend"],[8,"TypeMetadata"],[3,"AnsiTransactionManager"],[8,"TransactionManager"],[8,"SimpleConnection"],[8,"Connection"],[3,"IsNull"],[3,"IsNotNull"],[3,"Asc"],[3,"Desc"],[3,"SqlLiteral"],[8,"Expression"],[8,"AsExpression"],[8,"BoxableExpression"],[8,"BoolExpressionMethods"],[8,"EscapeExpressionMethods"],[8,"ExpressionMethods"],[8,"NullableExpressionMethods"],[8,"TextExpressionMethods"],[8,"PgExpressionMethods"],[8,"ArrayExpressionMethods"],[8,"SortExpressionMethods"],[8,"PgTextExpressionMethods"],[3,"AstPass"],[3,"RawBytesBindCollector"],[8,"BindCollector"],[3,"DebugQuery"],[8,"WhereAnd"],[3,"NoWhereClause"],[3,"WhereClause"],[8,"IntoInsertStatement"],[3,"IncompleteInsertStatement"],[3,"InsertStatement"],[3,"BatchInsertStatement"],[3,"Insert"],[3,"IncompleteDefaultInsertStatement"],[3,"DefaultInsertStatement"],[8,"AsChangeset"],[8,"Changeset"],[8,"IntoUpdateTarget"],[3,"IncompleteUpdateStatement"],[3,"UpdateStatement"],[8,"QueryId"],[8,"QueryBuilder"],[8,"Query"],[8,"QueryFragment"],[8,"AsQuery"],[4,"IsNull"],[8,"Add"],[8,"Sub"],[8,"Mul"],[8,"Div"],[3,"Nullable"],[3,"Bool"],[3,"SmallInt"],[3,"Integer"],[3,"BigInt"],[3,"Float"],[3,"Double"],[3,"Text"],[3,"Binary"],[3,"Date"],[3,"Time"],[3,"Timestamp"],[8,"Foldable"],[8,"HasSqlType"],[8,"IntoNullable"],[8,"FromSql"],[8,"FromSqlRow"],[8,"ToSql"],[3,"Tinyint"],[3,"Numeric"],[3,"Interval"],[3,"PgTypeMetadata"],[8,"MicroIntervalDsl"],[8,"DayAndMonthIntervalDsl"],[3,"Pg"],[3,"PgMetadataLookup"],[3,"PgQueryBuilder"],[3,"PgConnection"],[3,"PgTimestamp"],[3,"PgDate"],[3,"PgTime"],[3,"PgInterval"],[4,"PgNumeric"],[3,"PgMoney"],[3,"Oid"],[3,"Timestamptz"],[3,"Array"],[3,"Range"],[3,"Money"],[8,"OnConflictExtension"],[4,"MigrationError"],[4,"RunMigrationsError"],[8,"MigrationConnection"],[8,"Migration"],[8,"Queryable"],[8,"Column"],[8,"Table"],[8,"AppearsInFromClause"],[4,"Error"],[4,"DatabaseErrorKind"],[4,"ConnectionError"],[8,"DatabaseErrorInformation"],[8,"OptionalExtension"],[6,"QueryResult"],[8,"Row"],[8,"Insertable"],[8,"BelongingToDsl"],[8,"BoxedDsl"],[8,"CountDsl"],[8,"DistinctDsl"],[8,"FilterDsl"],[8,"FindDsl"],[8,"JoinDsl"],[8,"JoinOnDsl"],[8,"LimitDsl"],[8,"LoadDsl"],[8,"ExecuteDsl"],[8,"FirstDsl"],[8,"LoadQuery"],[8,"OffsetDsl"],[8,"OrderDsl"],[8,"SaveChangesDsl"],[8,"SelectDsl"],[3,"Max"],[3,"Min"],[3,"Sum"],[3,"Avg"],[3,"now"]]};
searchIndex["diesel_codegen"] = {"doc":"","items":[[5,"derive_queryable","diesel_codegen","",null,{"inputs":[{"name":"tokenstream"}],"output":{"name":"tokenstream"}}],[5,"derive_identifiable","","",null,{"inputs":[{"name":"tokenstream"}],"output":{"name":"tokenstream"}}],[5,"derive_insertable","","",null,{"inputs":[{"name":"tokenstream"}],"output":{"name":"tokenstream"}}],[5,"derive_as_changeset","","",null,{"inputs":[{"name":"tokenstream"}],"output":{"name":"tokenstream"}}],[5,"derive_associations","","",null,{"inputs":[{"name":"tokenstream"}],"output":{"name":"tokenstream"}}],[5,"derive_infer_schema","","",null,{"inputs":[{"name":"tokenstream"}],"output":{"name":"tokenstream"}}],[5,"derive_infer_table_from_schema","","",null,{"inputs":[{"name":"tokenstream"}],"output":{"name":"tokenstream"}}],[5,"derive_embed_migrations","","",null,{"inputs":[{"name":"tokenstream"}],"output":{"name":"tokenstream"}}]],"paths":[]};
searchIndex["diesel_infer_schema"] = {"doc":"","items":[[3,"ColumnInformation","diesel_infer_schema","",null,null],[12,"column_name","","",0,null],[12,"type_name","","",0,null],[12,"nullable","","",0,null],[3,"ColumnType","","",null,null],[12,"rust_name","","",1,null],[12,"is_array","","",1,null],[12,"is_nullable","","",1,null],[3,"ColumnDefinition","","",null,null],[12,"sql_name","","",2,null],[12,"ty","","",2,null],[12,"docs","","",2,null],[12,"rust_name","","",2,null],[3,"ForeignKeyConstraint","","",null,null],[12,"child_table","","",3,null],[12,"parent_table","","",3,null],[12,"foreign_key","","",3,null],[12,"primary_key","","",3,null],[3,"TableName","","",null,null],[12,"name","","",4,null],[12,"schema","","",4,null],[3,"TableData","","",null,null],[12,"name","","",5,null],[12,"primary_key","","",5,null],[12,"column_data","","",5,null],[12,"docs","","",5,null],[4,"Never","","",null,null],[5,"remove_unsafe_foreign_keys_for_codegen","","",null,null],[5,"load_table_names","","",null,{"inputs":[{"name":"str"},{"name":"option"}],"output":{"name":"result"}}],[5,"load_foreign_key_constraints","","",null,{"inputs":[{"name":"str"},{"name":"option"}],"output":{"name":"result"}}],[5,"load_table_data","","",null,{"inputs":[{"name":"str"},{"name":"tablename"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"columninformation"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"columninformation"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"columninformation"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",0,{"inputs":[{"name":"t"},{"name":"u"},{"name":"bool"}],"output":{"name":"self"}}],[11,"build","","",0,null],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"foreignkeyconstraint"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"foreignkeyconstraint"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"foreignkeyconstraint"}],"output":{"name":"bool"}}],[11,"ordered_tables","","",3,null],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"tablename"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"tablename"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"tablename"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",4,{"inputs":[{"name":"self"},{"name":"tablename"}],"output":{"name":"option"}}],[11,"lt","","",4,{"inputs":[{"name":"self"},{"name":"tablename"}],"output":{"name":"bool"}}],[11,"le","","",4,{"inputs":[{"name":"self"},{"name":"tablename"}],"output":{"name":"bool"}}],[11,"gt","","",4,{"inputs":[{"name":"self"},{"name":"tablename"}],"output":{"name":"bool"}}],[11,"ge","","",4,{"inputs":[{"name":"self"},{"name":"tablename"}],"output":{"name":"bool"}}],[11,"cmp","","",4,{"inputs":[{"name":"self"},{"name":"tablename"}],"output":{"name":"ordering"}}],[11,"from_name","","",4,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"new","","",4,{"inputs":[{"name":"t"},{"name":"u"}],"output":{"name":"self"}}],[11,"strip_schema_if_matches","","",4,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[11,"build","","",4,null],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",4,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"ColumnInformation"],[3,"ColumnType"],[3,"ColumnDefinition"],[3,"ForeignKeyConstraint"],[3,"TableName"],[3,"TableData"],[4,"Never"]]};
searchIndex["dotenv"] = {"doc":"This crate provides a configuration loader in the style of the ruby dotenv gem. This library is meant to be used on development or testing environments in which setting environment variables is not practical. It loads environment variables from a .env file, if available, and mashes those with the actual environment variables provided by the operating system.","items":[[3,"Error","dotenv","The Error type.",null,null],[12,"0","","The kind of the error.",0,null],[12,"1","","Contains the error chain and the backtrace.",0,null],[4,"ErrorKind","","",null,null],[13,"Msg","","",1,null],[13,"LineParse","","",1,null],[13,"ParseFormatter","","",1,null],[13,"Io","","",1,null],[13,"EnvVar","","",1,null],[5,"var","","After loading the dotenv file, fetches the environment variable key from the current process.",null,{"inputs":[{"name":"k"}],"output":{"name":"result"}}],[5,"vars","","After loading the dotenv file, returns an iterator of (variable, value) pairs of strings, for all the environment variables of the current process.",null,{"inputs":[],"output":{"name":"vars"}}],[5,"from_path","","Loads the file at the specified absolute path.",null,{"inputs":[{"name":"path"}],"output":{"name":"result"}}],[5,"from_filename","","Loads the specified file from the environment's current directory or its parents in sequence.",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[5,"dotenv","","This is usually what you want. It loads the .env file located in the environment's current directory or its parents in sequence.",null,{"inputs":[],"output":{"name":"result"}}],[6,"Result","","Convenient wrapper around `::std::result::Result`",null,null],[8,"ResultExt","","Additional methods for `Result`, for easy interaction with this crate.",null,null],[10,"chain_err","","If the `Result` is an `Err` then `chain_err` evaluates the closure, which returns some type that can be converted to `ErrorKind`, boxes the original error to store as the cause, then returns a new error containing the original error.",2,{"inputs":[{"name":"self"},{"name":"__f"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","A string describing the error kind.",1,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",1,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"from","","",1,{"inputs":[{"name":"string"}],"output":{"name":"self"}}],[11,"from","","",1,{"inputs":[{"name":"error"}],"output":{"name":"self"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_kind","","Constructs an error from a kind, and generates a backtrace.",0,{"inputs":[{"name":"errorkind"}],"output":{"name":"error"}}],[11,"with_chain","","Constructs a chained error from another error and a kind, and generates a backtrace.",0,{"inputs":[{"name":"__e"},{"name":"__k"}],"output":{"name":"self"}}],[11,"kind","","Returns the kind of the error.",0,{"inputs":[{"name":"self"}],"output":{"name":"errorkind"}}],[11,"iter","","Iterates over the error chain.",0,{"inputs":[{"name":"self"}],"output":{"name":"errorchainiter"}}],[11,"backtrace","","Returns the backtrace associated with this error.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"description","","",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",0,{"inputs":[{"name":"error"}],"output":{"name":"self"}}],[11,"from","","",0,{"inputs":[{"name":"error"}],"output":{"name":"self"}}],[11,"from","","",0,{"inputs":[{"name":"varerror"}],"output":{"name":"self"}}],[11,"from","","",0,{"inputs":[{"name":"errorkind"}],"output":{"name":"self"}}],[11,"from","","",0,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"from","","",0,{"inputs":[{"name":"string"}],"output":{"name":"self"}}],[11,"deref","","",0,null],[11,"new","","",0,null],[11,"from_kind","","",0,null],[11,"with_chain","","",0,{"inputs":[{"name":"__e"},{"name":"__k"}],"output":{"name":"self"}}],[11,"kind","","",0,null],[11,"iter","","",0,{"inputs":[{"name":"self"}],"output":{"name":"errorchainiter"}}],[11,"backtrace","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"extract_backtrace","","",0,{"inputs":[{"name":"error"}],"output":{"name":"option"}}]],"paths":[[3,"Error"],[4,"ErrorKind"],[8,"ResultExt"]]};
searchIndex["dtoa"] = {"doc":"","items":[[5,"write","dtoa","",null,{"inputs":[{"name":"w"},{"name":"v"}],"output":{"name":"result"}}],[8,"Floating","","",null,null],[10,"write","","",0,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[14,"diyfp","","",null,null],[14,"dtoa","","",null,null]],"paths":[[8,"Floating"]]};
searchIndex["error_chain"] = {"doc":"A library for consistent and reliable error handling","items":[[3,"Backtrace","error_chain","Representation of an owned and self-contained backtrace.",null,null],[3,"ErrorChainIter","","Iterator over the error chain using the `Error::cause()` method.",null,null],[12,"0","","",0,null],[3,"Display","","A struct which formats an error for output.",null,null],[8,"ExitCode","","Represents a value that can be used as the exit status of the process. See `quick_main!`.",null,null],[10,"code","","Returns the value to use as the exit status.",1,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[8,"ChainedError","","This trait is implemented on all the errors generated by the `error_chain` macro.",null,null],[16,"ErrorKind","","Associated kind type.",2,null],[10,"from_kind","","Constructs an error from a kind, and generates a backtrace.",2,null],[10,"with_chain","","Constructs a chained error from another error and a kind, and generates a backtrace.",2,{"inputs":[{"name":"e"},{"name":"k"}],"output":{"name":"self"}}],[10,"kind","","Returns the kind of the error.",2,null],[10,"iter","","Iterates over the error chain.",2,{"inputs":[{"name":"self"}],"output":{"name":"errorchainiter"}}],[10,"backtrace","","Returns the backtrace associated with this error.",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"display","","Returns an object which implements `Display` for printing the full context of this error.",2,{"inputs":[{"name":"self"}],"output":{"name":"display"}}],[11,"next","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[14,"quick_error","","",null,null],[14,"error_chain_processed","","Prefer to use `error_chain` instead of this macro.",null,null],[14,"error_chain","","This macro is used for handling of duplicated and out-of-order fields. For the exact rules, see `error_chain_processed`.",null,null],[14,"quick_main","","Convenient wrapper to be able to use `try!` and such in the main. You can use it with a separated function:",null,null],[14,"bail","","Exits a function early with an error",null,null],[14,"ensure","","Exits a function early with an error if the condition is not satisfied",null,null],[11,"new","","Captures a backtrace at the callsite of this function, returning an owned representation.",4,{"inputs":[],"output":{"name":"backtrace"}}],[11,"new_unresolved","","Similar to `new` except that this does not resolve any symbols, this simply captures the backtrace as a list of addresses.",4,{"inputs":[],"output":{"name":"backtrace"}}],[11,"frames","","Returns the frames from when this backtrace was captured.",4,null],[11,"resolve","","If this backtrace was created from `new_unresolved` then this function will resolve all addresses in the backtrace to their symbolic names.",4,null],[11,"from","","",4,{"inputs":[{"name":"vec"}],"output":{"name":"backtrace"}}],[11,"default","","",4,{"inputs":[],"output":{"name":"backtrace"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"backtrace"}}],[11,"into","","",4,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}]],"paths":[[3,"ErrorChainIter"],[8,"ExitCode"],[8,"ChainedError"],[3,"Display"],[3,"Backtrace"]]};
searchIndex["evzht9h3nznqzwl"] = {"doc":"Rust-WebSocket is a WebSocket (RFC6455) library written in Rust.","items":[[0,"ws","evzht9h3nznqzwl","A module containing the traits and structs that lower layer of Rust-WebSocket is based on.",null,null],[0,"message","evzht9h3nznqzwl::ws","Provides a trait for WebSocket messages",null,null],[8,"Message","evzht9h3nznqzwl::ws::message","A trait for WebSocket messages",null,null],[10,"serialize","","Writes this message to the writer",0,{"inputs":[{"name":"self"},{"name":"write"},{"name":"bool"}],"output":{"name":"websocketresult"}}],[10,"message_size","","Returns how many bytes this message will take up",0,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"usize"}}],[10,"from_dataframes","","Attempt to form a message from a series of data frames",0,{"inputs":[{"name":"vec"}],"output":{"name":"websocketresult"}}],[0,"util","evzht9h3nznqzwl::ws","Utility functions for various portions of Rust-WebSocket.",null,null],[5,"bytes_to_string","evzht9h3nznqzwl::ws::util","Transforms a u8 slice into an owned String",null,null],[0,"header","","Utility functions for reading and writing data frame headers.",null,null],[3,"DataFrameFlags","evzht9h3nznqzwl::ws::util::header","Flags relevant to a WebSocket data frame.",null,null],[3,"DataFrameHeader","","Represents a data frame header.",null,null],[12,"flags","","The bit flags for the first byte of the header.",1,null],[12,"opcode","","The opcode of the header - must be <= 16.",1,null],[12,"mask","","The masking key, if any.",1,null],[12,"len","","The length of the payload.",1,null],[5,"write_header","","Writes a data frame header.",null,{"inputs":[{"name":"write"},{"name":"dataframeheader"}],"output":{"name":"websocketresult"}}],[5,"read_header","","Reads a data frame header.",null,{"inputs":[{"name":"r"},{"name":"uuid"}],"output":{"name":"websocketresult"}}],[17,"FIN","","Marks this dataframe as the last dataframe",null,null],[17,"RSV1","","First reserved bit",null,null],[17,"RSV2","","Second reserved bit",null,null],[17,"RSV3","","Third reserved bit",null,null],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"dataframeflags"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"dataframeflags"}],"output":{"name":"bool"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"dataframeflags"}}],[11,"partial_cmp","","",2,{"inputs":[{"name":"self"},{"name":"dataframeflags"}],"output":{"name":"option"}}],[11,"lt","","",2,{"inputs":[{"name":"self"},{"name":"dataframeflags"}],"output":{"name":"bool"}}],[11,"le","","",2,{"inputs":[{"name":"self"},{"name":"dataframeflags"}],"output":{"name":"bool"}}],[11,"gt","","",2,{"inputs":[{"name":"self"},{"name":"dataframeflags"}],"output":{"name":"bool"}}],[11,"ge","","",2,{"inputs":[{"name":"self"},{"name":"dataframeflags"}],"output":{"name":"bool"}}],[11,"cmp","","",2,{"inputs":[{"name":"self"},{"name":"dataframeflags"}],"output":{"name":"ordering"}}],[11,"hash","","",2,null],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",2,{"inputs":[],"output":{"name":"dataframeflags"}}],[11,"all","","Returns the set containing all flags.",2,{"inputs":[],"output":{"name":"dataframeflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",2,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",2,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",2,{"inputs":[{"name":"u8"}],"output":{"name":"dataframeflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",2,{"inputs":[{"name":"self"},{"name":"dataframeflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",2,{"inputs":[{"name":"self"},{"name":"dataframeflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",2,{"inputs":[{"name":"self"},{"name":"dataframeflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",2,{"inputs":[{"name":"self"},{"name":"dataframeflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",2,{"inputs":[{"name":"self"},{"name":"dataframeflags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",2,{"inputs":[{"name":"self"},{"name":"dataframeflags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",2,{"inputs":[{"name":"self"},{"name":"dataframeflags"}],"output":{"name":"dataframeflags"}}],[11,"bitor_assign","","Adds the set of flags.",2,{"inputs":[{"name":"self"},{"name":"dataframeflags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",2,{"inputs":[{"name":"self"},{"name":"dataframeflags"}],"output":{"name":"dataframeflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",2,{"inputs":[{"name":"self"},{"name":"dataframeflags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",2,{"inputs":[{"name":"self"},{"name":"dataframeflags"}],"output":{"name":"dataframeflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",2,{"inputs":[{"name":"self"},{"name":"dataframeflags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",2,{"inputs":[{"name":"self"},{"name":"dataframeflags"}],"output":{"name":"dataframeflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",2,{"inputs":[{"name":"self"},{"name":"dataframeflags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",2,{"inputs":[{"name":"self"}],"output":{"name":"dataframeflags"}}],[11,"extend","","",2,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",2,{"inputs":[{"name":"t"}],"output":{"name":"dataframeflags"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"dataframeheader"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"dataframeheader"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"dataframeheader"}],"output":{"name":"bool"}}],[0,"mask","evzht9h3nznqzwl::ws::util","Utility functions for masking data frame payload data",null,null],[3,"Masker","evzht9h3nznqzwl::ws::util::mask","Struct to pipe data into another writer, while masking the data being written",null,null],[5,"gen_mask","","Generates a random masking key",null,null],[5,"mask_data","","Masks data to send to a server and writes",null,null],[11,"new","","Create a new Masker with the key and the endpoint to be writer to.",3,null],[11,"write","","",3,null],[11,"flush","","",3,{"inputs":[{"name":"self"}],"output":{"name":"ioresult"}}],[0,"dataframe","evzht9h3nznqzwl::ws","Describes the generic DataFrame, defining a trait that all dataframes should share. This is so one can optimize the memory footprint of a dataframe for their own needs, and be able to use custom dataframes quickly",null,null],[8,"DataFrame","evzht9h3nznqzwl::ws::dataframe","A generic DataFrame. Every dataframe should be able to provide these methods. (If the payload is not known in advance then rewrite the write_payload method)",null,null],[10,"is_last","","Is this dataframe the final dataframe of the message?",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"opcode","","What type of data does this dataframe contain?",4,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[10,"reserved","","Reserved bits of this dataframe",4,null],[10,"size","","How long (in bytes) is this dataframe's payload",4,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"frame_size","","Get's the size of the entire dataframe in bytes, i.e. header and payload.",4,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"usize"}}],[10,"write_payload","","Write the payload to a writer",4,{"inputs":[{"name":"self"},{"name":"write"}],"output":{"name":"websocketresult"}}],[10,"take_payload","","Takes the payload out into a vec",4,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"write_to","","Writes a DataFrame to a Writer.",4,{"inputs":[{"name":"self"},{"name":"write"},{"name":"bool"}],"output":{"name":"websocketresult"}}],[0,"sender","evzht9h3nznqzwl::ws","Provides a trait for sending data frames and messages.",null,null],[8,"Sender","evzht9h3nznqzwl::ws::sender","A trait for sending data frames and messages.",null,null],[10,"is_masked","","Should the messages sent be masked. See the RFC for more detail.",5,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"send_dataframe","","Sends a single data frame using this sender.",5,{"inputs":[{"name":"self"},{"name":"w"},{"name":"d"}],"output":{"name":"websocketresult"}}],[11,"send_message","","Sends a single message using this sender.",5,{"inputs":[{"name":"self"},{"name":"w"},{"name":"m"}],"output":{"name":"websocketresult"}}],[0,"receiver","evzht9h3nznqzwl::ws","Provides a trait for receiving data frames and messages.",null,null],[3,"DataFrameIterator","evzht9h3nznqzwl::ws::receiver","An iterator over data frames from a Receiver.",null,null],[3,"MessageIterator","","An iterator over messages from a Receiver.",null,null],[8,"Receiver","","A trait for receiving data frames and messages.",null,null],[16,"F","","The type of dataframe that incoming messages will be serialized to.",6,null],[16,"M","","The type of message that incoming messages will be serialized to.",6,null],[10,"uuid","","Gets the UUID of a receiver",6,{"inputs":[{"name":"self"}],"output":{"name":"uuid"}}],[10,"recv_dataframe","","Reads a single data frame from this receiver.",6,{"inputs":[{"name":"self"},{"name":"r"},{"name":"uuid"}],"output":{"name":"websocketresult"}}],[10,"recv_message_dataframes","","Returns the data frames that constitute one message.",6,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"websocketresult"}}],[11,"incoming_dataframes","","Returns an iterator over incoming data frames.",6,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"dataframeiterator"}}],[11,"recv_message","","Reads a single message from this receiver.",6,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"websocketresult"}}],[11,"incoming_messages","","Returns an iterator over incoming messages.",6,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"messageiterator"}}],[11,"next","","Get the next data frame from the receiver. Always returns `Some`.",7,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","Get the next message from the receiver. Always returns `Some`.",8,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[0,"dataframe","evzht9h3nznqzwl","Module containing the default implementation of data frames.",null,null],[3,"DataFrame","evzht9h3nznqzwl::dataframe","Represents a WebSocket data frame.",null,null],[12,"finished","","Whether or no this constitutes the end of a message",9,null],[12,"reserved","","The reserved portion of the data frame (RFC6455 5.2)",9,null],[12,"opcode","","The opcode associated with this data frame",9,null],[12,"data","","The payload associated with this data frame",9,null],[4,"Opcode","","Represents a WebSocket data frame opcode",null,null],[13,"Continuation","","A continuation data frame",10,null],[13,"Text","","A UTF-8 text data frame",10,null],[13,"Binary","","A binary data frame",10,null],[13,"NonControl1","","An undefined non-control data frame",10,null],[13,"NonControl2","","An undefined non-control data frame",10,null],[13,"NonControl3","","An undefined non-control data frame",10,null],[13,"NonControl4","","An undefined non-control data frame",10,null],[13,"NonControl5","","An undefined non-control data frame",10,null],[13,"Close","","A close data frame",10,null],[13,"Ping","","A ping data frame",10,null],[13,"Pong","","A pong data frame",10,null],[13,"Control1","","An undefined control data frame",10,null],[13,"Control2","","An undefined control data frame",10,null],[13,"Control3","","An undefined control data frame",10,null],[13,"Control4","","An undefined control data frame",10,null],[13,"Control5","","An undefined control data frame",10,null],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"dataframe"}}],[11,"eq","","",9,{"inputs":[{"name":"self"},{"name":"dataframe"}],"output":{"name":"bool"}}],[11,"ne","","",9,{"inputs":[{"name":"self"},{"name":"dataframe"}],"output":{"name":"bool"}}],[11,"new","","Creates a new DataFrame.",9,{"inputs":[{"name":"bool"},{"name":"opcode"},{"name":"vec"}],"output":{"name":"dataframe"}}],[11,"read_dataframe_body","","Take the body and header of a dataframe and combine it into a single Dataframe struct. A websocket message can be made up of many individual dataframes, use the methods from the Message or OwnedMessage structs to take many of these and create a websocket message.",9,{"inputs":[{"name":"dataframeheader"},{"name":"vec"},{"name":"bool"}],"output":{"name":"websocketresult"}}],[11,"read_dataframe","","Reads a DataFrame from a Reader.",9,{"inputs":[{"name":"r"},{"name":"bool"},{"name":"uuid"}],"output":{"name":"websocketresult"}}],[11,"is_last","","",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"opcode","","",9,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"reserved","","",9,null],[11,"size","","",9,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"write_payload","","",9,{"inputs":[{"name":"self"},{"name":"write"}],"output":{"name":"websocketresult"}}],[11,"take_payload","","",9,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"opcode"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"opcode"}],"output":{"name":"bool"}}],[11,"new","","Attempts to form an Opcode from a nibble.",10,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[0,"message","evzht9h3nznqzwl","Module containing the default implementation for messages.",null,null],[3,"Message","evzht9h3nznqzwl::message","Represents a WebSocket message.",null,null],[12,"opcode","","Type of WebSocket message",11,null],[12,"cd_status_code","","Optional status code to send when closing a connection. (only used if this message is of Type::Close)",11,null],[12,"payload","","Main payload",11,null],[3,"CloseData","","Represents data contained in a Close message",null,null],[12,"status_code","","The status-code of the CloseData",12,null],[12,"reason","","The reason-phrase of the CloseData",12,null],[4,"Type","","Valid types of messages (in the default implementation)",null,null],[13,"Text","","Message with UTF8 test",13,null],[13,"Binary","","Message containing binary data",13,null],[13,"Ping","","Ping message with data",13,null],[13,"Pong","","Pong message with data",13,null],[13,"Close","","Close connection message with optional reason",13,null],[4,"OwnedMessage","","Represents an owned WebSocket message.",null,null],[13,"Text","","A message containing UTF-8 text data",14,null],[13,"Binary","","A message containing binary data",14,null],[13,"Close","","A message which indicates closure of the WebSocket connection. This message may or may not contain data.",14,null],[13,"Ping","","A ping message - should be responded to with a pong message. Usually the pong message will be sent with the same data as the received ping message.",14,null],[13,"Pong","","A pong message, sent in response to a Ping message, usually containing the same data as the received ping message.",14,null],[8,"IntoCowBytes","","Trait representing the ability to convert self to a `Cow<'a, [u8]>`",null,null],[10,"into","","Consume `self` and produce a `Cow<'a, [u8]>`",15,{"inputs":[{"name":"self"}],"output":{"name":"cow"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",13,{"inputs":[{"name":"self"},{"name":"type"}],"output":{"name":"bool"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"type"}}],[11,"eq","","",11,{"inputs":[{"name":"self"},{"name":"message"}],"output":{"name":"bool"}}],[11,"ne","","",11,{"inputs":[{"name":"self"},{"name":"message"}],"output":{"name":"bool"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"message"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"text","","Create a new WebSocket message with text data",11,{"inputs":[{"name":"s"}],"output":{"name":"self"}}],[11,"binary","","Create a new WebSocket message with binary data",11,{"inputs":[{"name":"b"}],"output":{"name":"self"}}],[11,"close","","Create a new WebSocket message that signals the end of a WebSocket connection, although messages can still be sent after sending this",11,{"inputs":[],"output":{"name":"self"}}],[11,"close_because","","Create a new WebSocket message that signals the end of a WebSocket connection and provide a text reason and a status code for why. Messages can still be sent after sending this message.",11,{"inputs":[{"name":"u16"},{"name":"s"}],"output":{"name":"self"}}],[11,"ping","","Create a ping WebSocket message, a pong is usually sent back after sending this with the same data",11,{"inputs":[{"name":"p"}],"output":{"name":"self"}}],[11,"pong","","Create a pong WebSocket message, usually a response to a ping message",11,{"inputs":[{"name":"p"}],"output":{"name":"self"}}],[11,"into_pong","","Convert a ping message to a pong, keeping the data. This will fail if the original message is not a ping.",11,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"is_last","","",11,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"opcode","","",11,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"reserved","","",11,null],[11,"size","","",11,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"write_payload","","",11,{"inputs":[{"name":"self"},{"name":"write"}],"output":{"name":"websocketresult"}}],[11,"take_payload","","",11,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"serialize","","Attempt to form a message from a series of data frames",11,{"inputs":[{"name":"self"},{"name":"write"},{"name":"bool"}],"output":{"name":"websocketresult"}}],[11,"message_size","","Returns how many bytes this message will take up",11,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"usize"}}],[11,"from_dataframes","","Attempt to form a message from a series of data frames",11,{"inputs":[{"name":"vec"}],"output":{"name":"websocketresult"}}],[11,"eq","","",14,{"inputs":[{"name":"self"},{"name":"ownedmessage"}],"output":{"name":"bool"}}],[11,"ne","","",14,{"inputs":[{"name":"self"},{"name":"ownedmessage"}],"output":{"name":"bool"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"ownedmessage"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"is_close","","Checks if this message is a close message.",14,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_control","","Checks if this message is a control message.  Control messages are either `Close`, `Ping`, or `Pong`.",14,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_data","","Checks if this message is a data message.  Data messages are either `Text` or `Binary`.",14,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_ping","","Checks if this message is a ping message.  `Ping` messages can come at any time and usually generate a `Pong` message  response.",14,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_pong","","Checks if this message is a pong message.  `Pong` messages are usually sent only in response to `Ping` messages.",14,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"serialize","","Attempt to form a message from a series of data frames",14,{"inputs":[{"name":"self"},{"name":"write"},{"name":"bool"}],"output":{"name":"websocketresult"}}],[11,"message_size","","Returns how many bytes this message will take up",14,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"usize"}}],[11,"from_dataframes","","Attempt to form a message from a series of data frames",14,{"inputs":[{"name":"vec"}],"output":{"name":"websocketresult"}}],[11,"is_last","","",14,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"opcode","","",14,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"reserved","","",14,null],[11,"size","","",14,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"write_payload","","",14,{"inputs":[{"name":"self"},{"name":"write"}],"output":{"name":"websocketresult"}}],[11,"take_payload","","",14,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"from","","",14,{"inputs":[{"name":"message"}],"output":{"name":"self"}}],[11,"from","","",11,{"inputs":[{"name":"ownedmessage"}],"output":{"name":"self"}}],[11,"eq","","",12,{"inputs":[{"name":"self"},{"name":"closedata"}],"output":{"name":"bool"}}],[11,"ne","","",12,{"inputs":[{"name":"self"},{"name":"closedata"}],"output":{"name":"bool"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"closedata"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new CloseData object",12,{"inputs":[{"name":"u16"},{"name":"string"}],"output":{"name":"closedata"}}],[11,"into_bytes","","Convert this into a vector of bytes",12,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[0,"result","evzht9h3nznqzwl","The result type used within Rust-WebSocket",null,null],[4,"WebSocketError","evzht9h3nznqzwl::result","Represents a WebSocket error",null,null],[13,"ProtocolError","","A WebSocket protocol error",16,null],[13,"RequestError","","Invalid WebSocket request error",16,null],[13,"ResponseError","","Invalid WebSocket response error",16,null],[13,"DataFrameError","","Invalid WebSocket data frame error",16,null],[13,"NoDataAvailable","","No data available",16,null],[13,"IoError","","An input/output error",16,null],[13,"HttpError","","An HTTP parsing error",16,null],[13,"UrlError","","A URL parsing error",16,null],[13,"WebSocketUrlError","","A WebSocket URL error",16,null],[13,"TlsError","","An SSL error",16,null],[13,"TlsHandshakeFailure","","an ssl handshake failure",16,null],[13,"TlsHandshakeInterruption","","an ssl handshake interruption",16,null],[13,"Utf8Error","","A UTF-8 error",16,null],[4,"WSUrlErrorKind","","Represents a WebSocket URL error",null,null],[13,"CannotSetFragment","","Fragments are not valid in a WebSocket URL",17,null],[13,"InvalidScheme","","The scheme provided is invalid for a WebSocket",17,null],[13,"NoHostName","","There is no hostname or IP address to connect to",17,null],[6,"WebSocketResult","","The type used for WebSocket results",null,null],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",16,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",16,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"from","","",16,{"inputs":[{"name":"error"}],"output":{"name":"websocketerror"}}],[11,"from","","",16,{"inputs":[{"name":"httperror"}],"output":{"name":"websocketerror"}}],[11,"from","","",16,{"inputs":[{"name":"parseerror"}],"output":{"name":"websocketerror"}}],[11,"from","","",16,{"inputs":[{"name":"tlserror"}],"output":{"name":"websocketerror"}}],[11,"from","","",16,{"inputs":[{"name":"tlshandshakeerror"}],"output":{"name":"websocketerror"}}],[11,"from","","",16,{"inputs":[{"name":"utf8error"}],"output":{"name":"websocketerror"}}],[11,"from","","",16,{"inputs":[{"name":"wsurlerrorkind"}],"output":{"name":"websocketerror"}}],[11,"from","","",16,{"inputs":[{"name":"hyperintowserror"}],"output":{"name":"websocketerror"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",17,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[0,"header","evzht9h3nznqzwl","Structs representing headers relevant in a WebSocket context.",null,null],[3,"WebSocketKey","evzht9h3nznqzwl::header","Represents a Sec-WebSocket-Key header.",null,null],[12,"0","","",18,null],[3,"WebSocketAccept","","Represents a Sec-WebSocket-Accept header",null,null],[3,"WebSocketProtocol","","Represents a Sec-WebSocket-Protocol header",null,null],[12,"0","","",19,null],[3,"Origin","","Represents an Origin header",null,null],[12,"0","","",20,null],[4,"WebSocketVersion","","Represents a Sec-WebSocket-Version header",null,null],[13,"WebSocket13","","The version of WebSocket defined in RFC6455",21,null],[13,"Unknown","","An unknown version of WebSocket",21,null],[11,"eq","","",22,{"inputs":[{"name":"self"},{"name":"websocketaccept"}],"output":{"name":"bool"}}],[11,"ne","","",22,{"inputs":[{"name":"self"},{"name":"websocketaccept"}],"output":{"name":"bool"}}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"websocketaccept"}}],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",22,{"inputs":[{"name":"str"}],"output":{"name":"websocketresult"}}],[11,"new","","Create a new WebSocketAccept from the given WebSocketKey",22,{"inputs":[{"name":"websocketkey"}],"output":{"name":"websocketaccept"}}],[11,"serialize","","Return the Base64 encoding of this WebSocketAccept",22,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"header_name","","",22,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",22,null],[11,"fmt_header","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",18,{"inputs":[{"name":"self"},{"name":"websocketkey"}],"output":{"name":"bool"}}],[11,"ne","","",18,{"inputs":[{"name":"self"},{"name":"websocketkey"}],"output":{"name":"bool"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"websocketkey"}}],[11,"default","","",18,{"inputs":[],"output":{"name":"websocketkey"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",18,{"inputs":[{"name":"str"}],"output":{"name":"websocketresult"}}],[11,"new","","Generate a new, random WebSocketKey",18,{"inputs":[],"output":{"name":"websocketkey"}}],[11,"serialize","","Return the Base64 encoding of this WebSocketKey",18,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"header_name","","",18,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",18,null],[11,"fmt_header","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",19,{"inputs":[{"name":"self"},{"name":"websocketprotocol"}],"output":{"name":"bool"}}],[11,"ne","","",19,{"inputs":[{"name":"self"},{"name":"websocketprotocol"}],"output":{"name":"bool"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"websocketprotocol"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",19,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"header_name","","",19,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",19,null],[11,"fmt_header","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",21,{"inputs":[{"name":"self"},{"name":"websocketversion"}],"output":{"name":"bool"}}],[11,"ne","","",21,{"inputs":[{"name":"self"},{"name":"websocketversion"}],"output":{"name":"bool"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"websocketversion"}}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"header_name","","",21,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",21,null],[11,"fmt_header","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"extensions","","Provides the Sec-WebSocket-Extensions header.",null,null],[3,"WebSocketExtensions","evzht9h3nznqzwl::header::extensions","Represents a Sec-WebSocket-Extensions header",null,null],[12,"0","","",23,null],[3,"Extension","","A WebSocket extension",null,null],[12,"name","","The name of this extension",24,null],[12,"params","","The parameters for this extension",24,null],[3,"Parameter","","A parameter for an Extension",null,null],[12,"name","","The name of this parameter",25,null],[12,"value","","The value of this parameter, if any",25,null],[11,"eq","","",23,{"inputs":[{"name":"self"},{"name":"websocketextensions"}],"output":{"name":"bool"}}],[11,"ne","","",23,{"inputs":[{"name":"self"},{"name":"websocketextensions"}],"output":{"name":"bool"}}],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"websocketextensions"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",23,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"eq","","",24,{"inputs":[{"name":"self"},{"name":"extension"}],"output":{"name":"bool"}}],[11,"ne","","",24,{"inputs":[{"name":"self"},{"name":"extension"}],"output":{"name":"bool"}}],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"extension"}}],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new extension with the given name",24,{"inputs":[{"name":"string"}],"output":{"name":"extension"}}],[11,"from_str","","",24,{"inputs":[{"name":"str"}],"output":{"name":"websocketresult"}}],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",25,{"inputs":[{"name":"self"},{"name":"parameter"}],"output":{"name":"bool"}}],[11,"ne","","",25,{"inputs":[{"name":"self"},{"name":"parameter"}],"output":{"name":"bool"}}],[11,"clone","","",25,{"inputs":[{"name":"self"}],"output":{"name":"parameter"}}],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new parameter with the given name and value",25,{"inputs":[{"name":"string"},{"name":"option"}],"output":{"name":"parameter"}}],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"header_name","","",23,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",23,null],[11,"fmt_header","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","evzht9h3nznqzwl::header","",20,{"inputs":[{"name":"self"},{"name":"origin"}],"output":{"name":"bool"}}],[11,"ne","","",20,{"inputs":[{"name":"self"},{"name":"origin"}],"output":{"name":"bool"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"origin"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",20,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"header_name","","",20,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",20,null],[11,"fmt_header","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"receiver","evzht9h3nznqzwl","The default implementation of a WebSocket Receiver.",null,null],[4,"Shutdown","evzht9h3nznqzwl::receiver","Possible values which can be passed to the [`shutdown`] method of [`TcpStream`].",null,null],[13,"Read","","The reading portion of the [`TcpStream`] should be shut down.",26,null],[13,"Write","","The writing portion of the [`TcpStream`] should be shut down.",26,null],[13,"Both","","Both the reading and the writing portions of the [`TcpStream`] should be shut down.",26,null],[3,"Reader","","This reader bundles an existing stream with a parsing algorithm. It is used by the client in its `.split()` function as the reading component.",null,null],[12,"stream","","the stream to be read from",27,null],[12,"receiver","","the parser to parse bytes into messages",27,null],[3,"Receiver","","A Receiver that wraps a Reader and provides a default implementation using DataFrames and Messages.",null,null],[11,"recv_dataframe","","Reads a single data frame from the remote endpoint.",27,{"inputs":[{"name":"self"}],"output":{"name":"websocketresult"}}],[11,"incoming_dataframes","","Returns an iterator over incoming data frames.",27,{"inputs":[{"name":"self"}],"output":{"name":"dataframeiterator"}}],[11,"recv_message","","Reads a single message from this receiver.",27,{"inputs":[{"name":"self"}],"output":{"name":"websocketresult"}}],[11,"incoming_messages","","An iterator over incoming messsages. This iterator will block until new messages arrive and will never halt.",27,{"inputs":[{"name":"self"}],"output":{"name":"messageiterator"}}],[11,"shutdown","","Closes the receiver side of the connection, will cause all pending and future IO to return immediately with an appropriate value.",27,{"inputs":[{"name":"self"}],"output":{"name":"ioresult"}}],[11,"shutdown_all","","Shuts down both Sender and Receiver, will cause all pending and future IO to return immediately with an appropriate value.",27,{"inputs":[{"name":"self"}],"output":{"name":"ioresult"}}],[11,"new","","Create a new Receiver using the specified Reader.",28,{"inputs":[{"name":"bool"},{"name":"uuid"}],"output":{"name":"receiver"}}],[11,"uuid","","",28,{"inputs":[{"name":"self"}],"output":{"name":"uuid"}}],[11,"recv_dataframe","","Reads a single data frame from the remote endpoint.",28,{"inputs":[{"name":"self"},{"name":"r"},{"name":"uuid"}],"output":{"name":"websocketresult"}}],[11,"recv_message_dataframes","","Returns the data frames that constitute one message.",28,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"websocketresult"}}],[0,"sender","evzht9h3nznqzwl","The default implementation of a WebSocket Sender.",null,null],[4,"Shutdown","evzht9h3nznqzwl::sender","Possible values which can be passed to the [`shutdown`] method of [`TcpStream`].",null,null],[13,"Read","","The reading portion of the [`TcpStream`] should be shut down.",26,null],[13,"Write","","The writing portion of the [`TcpStream`] should be shut down.",26,null],[13,"Both","","Both the reading and the writing portions of the [`TcpStream`] should be shut down.",26,null],[3,"Writer","","A writer that bundles a stream with a serializer to send the messages. This is used in the client's `.split()` function as the writing component.",null,null],[12,"stream","","The stream that websocket messages will be written to",29,null],[12,"sender","","The serializer that will be used to serialize the messages",29,null],[3,"Sender","","A Sender that wraps a Writer and provides a default implementation using DataFrames and Messages.",null,null],[11,"send_dataframe","","Sends a single data frame to the remote endpoint.",29,{"inputs":[{"name":"self"},{"name":"d"}],"output":{"name":"websocketresult"}}],[11,"send_message","","Sends a single message to the remote endpoint.",29,{"inputs":[{"name":"self"},{"name":"m"}],"output":{"name":"websocketresult"}}],[11,"shutdown","","Closes the sender side of the connection, will cause all pending and future IO to return immediately with an appropriate value.",29,{"inputs":[{"name":"self"}],"output":{"name":"ioresult"}}],[11,"shutdown_all","","Shuts down both Sender and Receiver, will cause all pending and future IO to return immediately with an appropriate value.",29,{"inputs":[{"name":"self"}],"output":{"name":"ioresult"}}],[11,"new","","Create a new WebSocketSender using the specified Writer.",30,{"inputs":[{"name":"bool"}],"output":{"name":"sender"}}],[11,"is_masked","","",30,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[0,"client","evzht9h3nznqzwl","Build and use asynchronously or synchronous websocket clients.",null,null],[3,"Url","evzht9h3nznqzwl::client","A parsed URL record.",null,null],[4,"ParseError","","Errors that can occur during parsing.",null,null],[13,"EmptyHost","","",31,null],[13,"IdnaError","","",31,null],[13,"InvalidPort","","",31,null],[13,"InvalidIpv4Address","","",31,null],[13,"InvalidIpv6Address","","",31,null],[13,"InvalidDomainCharacter","","",31,null],[13,"RelativeUrlWithoutBase","","",31,null],[13,"RelativeUrlWithCannotBeABaseBase","","",31,null],[13,"SetHostOnCannotBeABaseUrl","","",31,null],[13,"Overflow","","",31,null],[0,"builder","","Everything you need to create a client connection to a websocket.",null,null],[3,"Url","evzht9h3nznqzwl::client::builder","A parsed URL record.",null,null],[4,"ParseError","","Errors that can occur during parsing.",null,null],[13,"EmptyHost","","",31,null],[13,"IdnaError","","",31,null],[13,"InvalidPort","","",31,null],[13,"InvalidIpv4Address","","",31,null],[13,"InvalidIpv6Address","","",31,null],[13,"InvalidDomainCharacter","","",31,null],[13,"RelativeUrlWithoutBase","","",31,null],[13,"RelativeUrlWithCannotBeABaseBase","","",31,null],[13,"SetHostOnCannotBeABaseUrl","","",31,null],[13,"Overflow","","",31,null],[3,"ClientBuilder","","Build clients with a builder-style API This makes it easy to create and configure a websocket connection:",null,null],[11,"clone","","",32,{"inputs":[{"name":"self"}],"output":{"name":"clientbuilder"}}],[11,"fmt","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_url","","Create a client builder from an already parsed Url, because there is no need to parse this will never error.",32,{"inputs":[{"name":"url"}],"output":{"name":"self"}}],[11,"new","","Create a client builder from a URL string, this will attempt to parse the URL immediately and return a `ParseError` if the URL is invalid. URLs must be of the form: `[ws or wss]://[domain]:[port]/[path]` The path of a URL is optional if no port is given then port 80 will be used in the case of `ws://` and port `443` will be used in the case of `wss://`.",32,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"add_protocol","","Adds a user-defined protocol to the handshake, the server will be given a list of these protocols and will send back the ones it accepts.",32,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"self"}}],[11,"add_protocols","","Adds a user-defined protocols to the handshake. This can take many kinds of iterators.",32,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"self"}}],[11,"clear_protocols","","Removes all the currently set protocols.",32,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"add_extension","","Adds an extension to the connection. Unlike protocols, extensions can be below the application level (like compression). Currently no extensions are supported out-of-the-box but one can still use them by using their own implementation. Support is coming soon though.",32,{"inputs":[{"name":"self"},{"name":"extension"}],"output":{"name":"self"}}],[11,"add_extensions","","Adds some extensions to the connection. Currently no extensions are supported out-of-the-box but one can still use them by using their own implementation. Support is coming soon though.",32,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"self"}}],[11,"clear_extensions","","Remove all the extensions added to the builder.",32,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"key","","Add a custom `Sec-WebSocket-Key` header. Use this only if you know what you're doing, and this almost never has to be used.",32,null],[11,"clear_key","","Remove the currently set `Sec-WebSocket-Key` header if any.",32,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"version","","Set the version of the Websocket connection. Currently this library only supports version 13 (from RFC6455), but one could use this library to create the handshake then use an implementation of another websocket version.",32,{"inputs":[{"name":"self"},{"name":"websocketversion"}],"output":{"name":"self"}}],[11,"clear_version","","Unset the websocket version to be the default (WebSocket 13).",32,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"origin","","Sets the Origin header of the handshake. Normally in browsers this is used to protect against unauthorized cross-origin use of a WebSocket server, but it is rarely send by non-browser clients. Still, it can be useful.",32,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"self"}}],[11,"clear_origin","","Remove the Origin header from the handshake.",32,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"custom_headers","","This is a catch all to add random headers to your handshake, the process here is more manual.",32,{"inputs":[{"name":"self"},{"name":"headers"}],"output":{"name":"self"}}],[11,"clear_header","","Remove a type of header from the handshake, this is to be used with the catch all `custom_headers`.",32,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"get_header","","Get a header to inspect it.",32,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"connect","","Connect to a server (finally)! This will use a `Box<NetworkStream>` to represent either an SSL connection or a normal TCP connection, what to use will be decided using the protocol of the URL passed in (e.g. `ws://` or `wss://`)",32,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"websocketresult"}}],[11,"connect_insecure","","Create an insecure (plain TCP) connection to the client. In this case no `Box` will be used, you will just get a TcpStream, giving you the ability to split the stream into a reader and writer (since SSL streams cannot be cloned).",32,{"inputs":[{"name":"self"}],"output":{"name":"websocketresult"}}],[11,"connect_secure","","Create an SSL connection to the sever. This will only use an `TlsStream`, this is useful when you want to be sure to connect over SSL or when you want access to the `TlsStream` functions (without having to go through a `Box`).",32,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"websocketresult"}}],[11,"connect_on","","Connects to a websocket server on any stream you would like. Possible streams:  - Unix Sockets  - Logging Middle-ware  - SSH",32,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"websocketresult"}}],[0,"sync","evzht9h3nznqzwl::client","Contains the WebSocket client.",null,null],[3,"Client","evzht9h3nznqzwl::client::sync","Represents a WebSocket client, which can send and receive messages/data frames.",null,null],[11,"shutdown_sender","","Shuts down the sending half of the client connection, will cause all pending and future IO to return immediately with an appropriate value.",33,{"inputs":[{"name":"self"}],"output":{"name":"ioresult"}}],[11,"shutdown_receiver","","Shuts down the receiving half of the client connection, will cause all pending and future IO to return immediately with an appropriate value.",33,{"inputs":[{"name":"self"}],"output":{"name":"ioresult"}}],[11,"shutdown","","Shuts down the client connection, will cause all pending and future IO to return immediately with an appropriate value.",33,{"inputs":[{"name":"self"}],"output":{"name":"ioresult"}}],[11,"peer_addr","","See [`TcpStream::peer_addr`] (https://doc.rust-lang.org/std/net/struct.TcpStream.html#method.peer_addr).",33,{"inputs":[{"name":"self"}],"output":{"name":"ioresult"}}],[11,"local_addr","","See [`TcpStream::local_addr`] (https://doc.rust-lang.org/std/net/struct.TcpStream.html#method.local_addr).",33,{"inputs":[{"name":"self"}],"output":{"name":"ioresult"}}],[11,"set_nodelay","","See [`TcpStream::set_nodelay`] (https://doc.rust-lang.org/std/net/struct.TcpStream.html#method.set_nodelay).",33,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"ioresult"}}],[11,"set_nonblocking","","Changes whether the stream is in nonblocking mode.",33,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"ioresult"}}],[11,"send_dataframe","","Sends a single data frame to the remote endpoint.",33,{"inputs":[{"name":"self"},{"name":"d"}],"output":{"name":"websocketresult"}}],[11,"send_message","","Sends a single message to the remote endpoint.",33,{"inputs":[{"name":"self"},{"name":"m"}],"output":{"name":"websocketresult"}}],[11,"recv_dataframe","","Reads a single data frame from the remote endpoint.",33,{"inputs":[{"name":"self"}],"output":{"name":"websocketresult"}}],[11,"incoming_dataframes","","Returns an iterator over incoming data frames.",33,{"inputs":[{"name":"self"}],"output":{"name":"dataframeiterator"}}],[11,"recv_message","","Reads a single message from this receiver.",33,{"inputs":[{"name":"self"}],"output":{"name":"websocketresult"}}],[11,"headers","","Access the headers that were sent in the server's handshake response. This is a catch all for headers other than protocols and extensions.",33,{"inputs":[{"name":"self"}],"output":{"name":"headers"}}],[11,"protocols","","If you supplied a protocol, you must check that it was accepted by the server using this function. This is not done automatically because the terms of accepting a protocol can get complicated, especially if some protocols depend on others, etc.",33,null],[11,"extensions","","If you supplied a protocol, be sure to check if it was accepted by the server here. Since no extensions are implemented out of the box yet, using one will require its own implementation.",33,null],[11,"stream_ref","","Get a reference to the stream. Useful to be able to set options on the stream.",33,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"writer_mut","","Get a handle to the writable portion of this stream. This can be used to write custom extensions.",33,{"inputs":[{"name":"self"}],"output":{"name":"write"}}],[11,"reader_mut","","Get a handle to the readable portion of this stream. This can be used to transform raw bytes before they are read in.",33,{"inputs":[{"name":"self"}],"output":{"name":"read"}}],[11,"into_stream","","Deconstruct the client into its underlying stream and maybe some of the buffer that was already read from the stream. The client uses a buffered reader to read in messages, so some bytes might already be read from the stream when this is called, these buffered bytes are returned in the form",33,null],[11,"incoming_messages","","Returns an iterator over incoming messages.",33,{"inputs":[{"name":"self"}],"output":{"name":"messageiterator"}}],[11,"split","","Split this client into its constituent Sender and Receiver pair.",33,{"inputs":[{"name":"self"}],"output":{"name":"ioresult"}}],[0,"server","evzht9h3nznqzwl","Provides an implementation of a WebSocket server",null,null],[3,"NoTlsAcceptor","evzht9h3nznqzwl::server","Marker struct for a struct not being secure",null,null],[3,"InvalidConnection","","When a sever tries to accept a connection many things can go wrong.",null,null],[12,"stream","","if the stream was successfully setup it will be included here on a failed connection.",34,null],[12,"parsed","","the parsed request. This is a normal HTTP request meaning you can simply run this server and handle both HTTP and Websocket connections. If you already have a server you want to use, checkout the `server::upgrade` module to integrate this crate with your server.",34,null],[12,"buffer","","the buffered data that was already taken from the stream",34,null],[12,"error","","the cause of the failed websocket connection setup",34,null],[3,"WsServer","","Represents a WebSocket server which can work with either normal (non-secure) connections, or secure WebSocket connections.",null,null],[12,"ssl_acceptor","","The SSL acceptor given to the server",35,null],[0,"upgrade","","Allows you to take an existing request or stream of data and convert it into a WebSocket client.",null,null],[3,"WsUpgrade","evzht9h3nznqzwl::server::upgrade","Intermediate representation of a half created websocket session. Should be used to examine the client's handshake accept the protocols requested, route the path, etc.",null,null],[12,"headers","","The headers that will be used in the handshake response.",36,null],[12,"stream","","The stream that will be used to read from / write to.",36,null],[12,"request","","The handshake request, filled with useful metadata.",36,null],[12,"buffer","","Some buffered data from the stream, if it exists.",36,null],[4,"HyperIntoWsError","","Errors that can occur when one tries to upgrade a connection to a websocket connection.",null,null],[13,"MethodNotGet","","The HTTP method in a valid websocket upgrade request must be GET",37,null],[13,"UnsupportedHttpVersion","","Currently HTTP 2 is not supported",37,null],[13,"UnsupportedWebsocketVersion","","Currently only WebSocket13 is supported (RFC6455)",37,null],[13,"NoSecWsKeyHeader","","A websocket upgrade request must contain a key",37,null],[13,"NoWsUpgradeHeader","","A websocket upgrade request must ask to upgrade to a `websocket`",37,null],[13,"NoUpgradeHeader","","A websocket upgrade request must contain an `Upgrade` header",37,null],[13,"NoWsConnectionHeader","","A websocket upgrade request's `Connection` header must be `Upgrade`",37,null],[13,"NoConnectionHeader","","A websocket upgrade request must contain a `Connection` header",37,null],[13,"Io","","IO error from reading the underlying socket",37,null],[13,"Parsing","","Error while parsing an incoming request",37,null],[5,"validate","","Check whether an incoming request is a valid WebSocket upgrade attempt.",null,{"inputs":[{"name":"method"},{"name":"httpversion"},{"name":"headers"}],"output":{"name":"result"}}],[0,"sync","","Allows you to take an existing request or stream of data and convert it into a WebSocket client.",null,null],[3,"Buffer","evzht9h3nznqzwl::server::upgrade::sync","This crate uses buffered readers to read in the handshake quickly, in order to interface with other use cases that don't use buffered readers the buffered readers is deconstructed when it is returned to the user and given as the underlying reader and the buffer.",null,null],[12,"buf","","the contents of the buffered stream data",38,null],[12,"pos","","the current position of cursor in the buffer Any data before `pos` has already been read and parsed.",38,null],[12,"cap","","the last location of valid data Any data after `cap` is not valid.",38,null],[3,"RequestStreamPair","","If you have your requests separate from your stream you can use this struct to upgrade the connection based on the request given (the request should be a handshake).",null,null],[12,"0","","",39,null],[12,"1","","",39,null],[3,"HyperRequest","","Upgrade a hyper connection to a websocket one.",null,null],[12,"0","","",40,null],[6,"Upgrade","","The synchronous specialization of `WsUpgrade`. See the `WsUpgrade` docs for usage and the extra synchronous methods given by this specialization.",null,null],[8,"IntoWs","","Trait to take a stream or similar and attempt to recover the start of a websocket handshake from it. Should be used when a stream might contain a request for a websocket session.",null,null],[16,"Stream","","The type of stream this upgrade process is working with (TcpStream, etc.)",41,null],[16,"Error","","An error value in case the stream is not asking for a websocket connection or something went wrong. It is common to also include the stream here.",41,null],[10,"into_ws","","Attempt to parse the start of a Websocket handshake, later with the  returned `WsUpgrade` struct, call `accept` to start a websocket client, and `reject` to send a handshake rejection response.",41,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","","",38,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"accept","evzht9h3nznqzwl::server::upgrade","Accept the handshake request and send a response, if nothing goes wrong a client will be created.",36,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"accept_with","","Accept the handshake request and send a response while adding on a few headers. These headers are added before the required headers are, so some might be overwritten.",36,{"inputs":[{"name":"self"},{"name":"headers"}],"output":{"name":"result"}}],[11,"reject","","Reject the client's request to make a websocket connection.",36,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"reject_with","","Reject the client's request to make a websocket connection and send extra headers.",36,{"inputs":[{"name":"self"},{"name":"headers"}],"output":{"name":"result"}}],[11,"tcp_stream","","Get a handle to the underlying TCP stream, useful to be able to set TCP options, etc.",36,{"inputs":[{"name":"self"}],"output":{"name":"tcpstream"}}],[11,"into_ws","evzht9h3nznqzwl::server::upgrade::sync","",39,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"into_ws","","",40,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[6,"Request","evzht9h3nznqzwl::server::upgrade","A typical request from hyper",null,null],[11,"use_protocol","","Select a protocol to use in the handshake response.",36,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"self"}}],[11,"use_extension","","Select an extension to use in the handshake response.",36,{"inputs":[{"name":"self"},{"name":"extension"}],"output":{"name":"self"}}],[11,"use_extensions","","Select multiple extensions to use in the connection",36,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"self"}}],[11,"drop","","Drop the connection without saying anything.",36,{"inputs":[{"name":"self"}],"output":null}],[11,"protocols","","A list of protocols requested from the client.",36,null],[11,"extensions","","A list of extensions requested from the client.",36,null],[11,"key","","The client's websocket accept key.",36,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"version","","The client's websocket version.",36,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"origin","","Origin of the client",36,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",37,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",37,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",37,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",37,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"from","","",37,{"inputs":[{"name":"error"}],"output":{"name":"self"}}],[11,"from","","",37,{"inputs":[{"name":"error"}],"output":{"name":"self"}}],[0,"sync","evzht9h3nznqzwl::server","Provides an implementation of a WebSocket server",null,null],[6,"AcceptResult","evzht9h3nznqzwl::server::sync","Either the stream was established and it sent a websocket handshake which represents the `Ok` variant, or there was an error (this is the `Err` variant).",null,null],[6,"Server","","Represents a WebSocket server which can work with either normal (non-secure) connections, or secure WebSocket connections.",null,null],[11,"local_addr","evzht9h3nznqzwl::server","Get the socket address of this server",35,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"set_nonblocking","","Changes whether the Server is in nonblocking mode.  NOTE: It is strongly encouraged to use the `websocket::async` module instead  of this. It provides high level APIs for creating asynchronous servers.",35,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"bind_secure","","Bind this Server to this socket, utilising the given SslContext",35,{"inputs":[{"name":"a"},{"name":"tlsacceptor"}],"output":{"name":"result"}}],[11,"accept","","Wait for and accept an incoming WebSocket connection, returning a WebSocketRequest",35,{"inputs":[{"name":"self"}],"output":{"name":"acceptresult"}}],[11,"next","","",35,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"bind","","Bind this Server to this socket",35,{"inputs":[{"name":"a"}],"output":{"name":"result"}}],[11,"accept","","Wait for and accept an incoming WebSocket connection, returning a WebSocketRequest",35,{"inputs":[{"name":"self"}],"output":{"name":"acceptresult"}}],[11,"try_clone","","Create a new independently owned handle to the underlying socket.",35,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"next","","",35,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[8,"OptionalTlsAcceptor","","Trait that is implemented over NoSslAcceptor and SslAcceptor that serves as a generic bound to make a struct with. Used in the Server to specify impls based on whether the server is running over SSL or not.",null,null],[11,"clone","","",42,{"inputs":[{"name":"self"}],"output":{"name":"notlsacceptor"}}],[0,"stream","evzht9h3nznqzwl","Provides the default stream type for WebSocket connections.",null,null],[3,"ReadWritePair","evzht9h3nznqzwl::stream","If you would like to combine an input stream and an output stream into a single stream to talk websockets over then this is the struct for you!",null,null],[12,"0","","",43,null],[12,"1","","",43,null],[0,"sync","","A collection of traits and implementations for synchronous streams.",null,null],[3,"TcpStream","evzht9h3nznqzwl::stream::sync","A TCP stream between a local and a remote socket.",null,null],[4,"Shutdown","","Possible values which can be passed to the [`shutdown`] method of [`TcpStream`].",null,null],[13,"Read","","The reading portion of the [`TcpStream`] should be shut down.",26,null],[13,"Write","","The writing portion of the [`TcpStream`] should be shut down.",26,null],[13,"Both","","Both the reading and the writing portions of the [`TcpStream`] should be shut down.",26,null],[3,"TlsStream","","A stream managing a TLS session.",null,null],[8,"NetworkStream","","a `Stream` that can also be used as a borrow to a `TcpStream` this is useful when you want to set `TcpStream` options on a `Stream` like `nonblocking`.",null,null],[8,"Splittable","","some streams can be split up into separate reading and writing components `TcpStream` is an example. This trait marks this ability so one can split up the client into two parts.",null,null],[16,"Reader","","The reading component of this type",44,null],[16,"Writer","","The writing component of this type",44,null],[10,"split","","Split apart this type into a reading and writing component.",44,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[8,"AsTcpStream","","The ability access a borrow to an underlying TcpStream, so one can set options on the stream such as `nonblocking`.",null,null],[10,"as_tcp","","Get a borrow of the TcpStream",45,{"inputs":[{"name":"self"}],"output":{"name":"tcpstream"}}],[11,"split","evzht9h3nznqzwl::stream","",43,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"split","evzht9h3nznqzwl::stream::sync","",46,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"as_tcp","","",46,{"inputs":[{"name":"self"}],"output":{"name":"tcpstream"}}],[11,"as_tcp","","",47,{"inputs":[{"name":"self"}],"output":{"name":"tcpstream"}}],[8,"Stream","evzht9h3nznqzwl::stream","Represents a stream that can be read from, and written to. This is an abstraction around readable and writable things to be able to speak websockets over ssl, tcp, unix sockets, etc.",null,null],[11,"read","","",43,null],[11,"read_to_end","","",43,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"result"}}],[11,"read_to_string","","",43,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"result"}}],[11,"read_exact","","",43,null],[11,"write","","",43,null],[11,"flush","","",43,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"write_all","","",43,null],[11,"write_fmt","","",43,{"inputs":[{"name":"self"},{"name":"arguments"}],"output":{"name":"result"}}],[0,"sync","evzht9h3nznqzwl","A collection of handy synchronous-only parts of the crate.",null,null],[0,"server","evzht9h3nznqzwl::sync","A collection of handy synchronous-only parts of the `server` module.",null,null],[0,"client","","A collection of handy synchronous-only parts of the `client` module.",null,null],[11,"from_raw_fd","evzht9h3nznqzwl::stream::sync","",46,{"inputs":[{"name":"i32"}],"output":{"name":"tcpstream"}}],[11,"read","","",46,null],[11,"initializer","","",46,{"inputs":[{"name":"self"}],"output":{"name":"initializer"}}],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",46,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"into_raw_fd","","",46,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"eq","","",26,{"inputs":[{"name":"self"},{"name":"shutdown"}],"output":{"name":"bool"}}],[11,"write","","",46,null],[11,"flush","","",46,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"as_raw_fd","","",46,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"clone","","",26,{"inputs":[{"name":"self"}],"output":{"name":"shutdown"}}],[11,"read","","",47,null],[11,"fmt","","",47,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"raw_stream","","",47,{"inputs":[{"name":"self"}],"output":{"name":"sslstream"}}],[11,"raw_stream_mut","","",47,{"inputs":[{"name":"self"}],"output":{"name":"sslstream"}}],[11,"write","","",47,null],[11,"flush","","",47,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"from","evzht9h3nznqzwl::client::builder","",31,{"inputs":[{"name":"errors"}],"output":{"name":"parseerror"}}],[11,"as_ref","","",48,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"index","","",48,{"inputs":[{"name":"self"},{"name":"range"}],"output":{"name":"str"}}],[11,"index","","",48,{"inputs":[{"name":"self"},{"name":"rangeto"}],"output":{"name":"str"}}],[11,"index","","",48,{"inputs":[{"name":"self"},{"name":"rangefrom"}],"output":{"name":"str"}}],[11,"index","","",48,{"inputs":[{"name":"self"},{"name":"rangefull"}],"output":{"name":"str"}}],[11,"partial_cmp","","",48,{"inputs":[{"name":"self"},{"name":"url"}],"output":{"name":"option"}}],[11,"fmt","","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",48,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",48,{"inputs":[{"name":"self"},{"name":"url"}],"output":{"name":"ordering"}}],[11,"from_str","","",48,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"clone","","",48,{"inputs":[{"name":"self"}],"output":{"name":"url"}}],[11,"clone","","",31,{"inputs":[{"name":"self"}],"output":{"name":"parseerror"}}],[11,"to_socket_addrs","","",48,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"eq","","",31,{"inputs":[{"name":"self"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"eq","","",48,{"inputs":[{"name":"self"},{"name":"url"}],"output":{"name":"bool"}}],[11,"description","","",31,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"hash","","",48,null],[11,"fmt","","",48,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"into_url","","",48,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"parse","","Parse an absolute URL from a string.",48,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"parse_with_params","","Parse an absolute URL from a string and add params to its query string.",48,{"inputs":[{"name":"str"},{"name":"i"}],"output":{"name":"result"}}],[11,"join","","Parse a string as an URL, with this URL as the base URL.",48,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"options","","Return a default `ParseOptions` that can fully configure the URL parser.",48,{"inputs":[],"output":{"name":"parseoptions"}}],[11,"as_str","","Return the serialization of this URL.",48,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"into_string","","Return the serialization of this URL.",48,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"origin","","Return the origin of this URL (https://url.spec.whatwg.org/#origin)",48,{"inputs":[{"name":"self"}],"output":{"name":"origin"}}],[11,"scheme","","Return the scheme of this URL, lower-cased, as an ASCII string without the ':' delimiter.",48,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"has_authority","","Return whether the URL has an 'authority', which can contain a username, password, host, and port number.",48,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"cannot_be_a_base","","Return whether this URL is a cannot-be-a-base URL, meaning that parsing a relative URL string with this URL as the base will return an error.",48,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"username","","Return the username for this URL (typically the empty string) as a percent-encoded ASCII string.",48,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"password","","Return the password for this URL, if any, as a percent-encoded ASCII string.",48,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"has_host","","Equivalent to `url.host().is_some()`.",48,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"host_str","","Return the string representation of the host (domain or IP address) for this URL, if any.",48,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"host","","Return the parsed representation of the host for this URL. Non-ASCII domain labels are punycode-encoded per IDNA.",48,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"domain","","If this URL has a host and it is a domain name (not an IP address), return it.",48,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"port","","Return the port number for this URL, if any.",48,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"port_or_known_default","","Return the port number for this URL, or the default port number if it is known.",48,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"with_default_port","","If the URL has a host, return something that implements `ToSocketAddrs`.",48,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"path","","Return the path for this URL, as a percent-encoded ASCII string. For cannot-be-a-base URLs, this is an arbitrary string that doesn’t start with '/'. For other URLs, this starts with a '/' slash and continues with slash-separated path segments.",48,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"path_segments","","Unless this URL is cannot-be-a-base, return an iterator of '/' slash-separated path segments, each as a percent-encoded ASCII string.",48,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"query","","Return this URL’s query string, if any, as a percent-encoded ASCII string.",48,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"query_pairs","","Parse the URL’s query string, if any, as `application/x-www-form-urlencoded` and return an iterator of (key, value) pairs.",48,{"inputs":[{"name":"self"}],"output":{"name":"parse"}}],[11,"fragment","","Return this URL’s fragment identifier, if any.",48,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"set_fragment","","Change this URL’s fragment identifier.",48,null],[11,"set_query","","Change this URL’s query string.",48,null],[11,"query_pairs_mut","","Manipulate this URL’s query string, viewed as a sequence of name/value pairs in `application/x-www-form-urlencoded` syntax.",48,{"inputs":[{"name":"self"}],"output":{"name":"serializer"}}],[11,"set_path","","Change this URL’s path.",48,null],[11,"path_segments_mut","","Return an object with methods to manipulate this URL’s path segments.",48,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"set_port","","Change this URL’s port number.",48,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"set_host","","Change this URL’s host.",48,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"set_ip_host","","Change this URL’s host to the given IP address.",48,{"inputs":[{"name":"self"},{"name":"ipaddr"}],"output":{"name":"result"}}],[11,"set_password","","Change this URL’s password.",48,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"set_username","","Change this URL’s username.",48,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"set_scheme","","Change this URL’s scheme.",48,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"from_file_path","","Convert a file name as `std::path::Path` into an URL in the `file` scheme.",48,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"from_directory_path","","Convert a directory name as `std::path::Path` into an URL in the `file` scheme.",48,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"to_file_path","","Assuming the URL is in the `file` scheme or similar, convert its path to an absolute `std::path::Path`.",48,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"connect","evzht9h3nznqzwl::stream::sync","Opens a TCP connection to a remote host.",46,{"inputs":[{"name":"a"}],"output":{"name":"result"}}],[11,"connect_timeout","","Opens a TCP connection to a remote host with a timeout.",46,{"inputs":[{"name":"socketaddr"},{"name":"duration"}],"output":{"name":"result"}}],[11,"peer_addr","","Returns the socket address of the remote peer of this TCP connection.",46,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"local_addr","","Returns the socket address of the local half of this TCP connection.",46,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"shutdown","","Shuts down the read, write, or both halves of this connection.",46,{"inputs":[{"name":"self"},{"name":"shutdown"}],"output":{"name":"result"}}],[11,"try_clone","","Creates a new independently owned handle to the underlying socket.",46,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"set_read_timeout","","Sets the read timeout to the timeout specified.",46,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"set_write_timeout","","Sets the write timeout to the timeout specified.",46,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"read_timeout","","Returns the read timeout of this socket.",46,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"write_timeout","","Returns the write timeout of this socket.",46,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"peek","","Receives data on the socket from the remote address to which it is connected, without removing that data from the queue. On success, returns the number of bytes peeked.",46,null],[11,"set_nodelay","","Sets the value of the `TCP_NODELAY` option on this socket.",46,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"nodelay","","Gets the value of the `TCP_NODELAY` option on this socket.",46,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",46,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"ttl","","Gets the value of the `IP_TTL` option for this socket.",46,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"take_error","","Get the value of the `SO_ERROR` option on this socket.",46,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"set_nonblocking","","Moves this TCP stream into or out of nonblocking mode.",46,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"get_ref","","Returns a shared reference to the inner stream.",47,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Returns a mutable reference to the inner stream.",47,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"buffered_read_size","","Returns the number of bytes that can be read without resulting in any network calls.",47,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"shutdown","","Shuts down the TLS session.",47,{"inputs":[{"name":"self"}],"output":{"name":"result"}}]],"paths":[[8,"Message"],[3,"DataFrameHeader"],[3,"DataFrameFlags"],[3,"Masker"],[8,"DataFrame"],[8,"Sender"],[8,"Receiver"],[3,"DataFrameIterator"],[3,"MessageIterator"],[3,"DataFrame"],[4,"Opcode"],[3,"Message"],[3,"CloseData"],[4,"Type"],[4,"OwnedMessage"],[8,"IntoCowBytes"],[4,"WebSocketError"],[4,"WSUrlErrorKind"],[3,"WebSocketKey"],[3,"WebSocketProtocol"],[3,"Origin"],[4,"WebSocketVersion"],[3,"WebSocketAccept"],[3,"WebSocketExtensions"],[3,"Extension"],[3,"Parameter"],[4,"Shutdown"],[3,"Reader"],[3,"Receiver"],[3,"Writer"],[3,"Sender"],[4,"ParseError"],[3,"ClientBuilder"],[3,"Client"],[3,"InvalidConnection"],[3,"WsServer"],[3,"WsUpgrade"],[4,"HyperIntoWsError"],[3,"Buffer"],[3,"RequestStreamPair"],[3,"HyperRequest"],[8,"IntoWs"],[3,"NoTlsAcceptor"],[3,"ReadWritePair"],[8,"Splittable"],[8,"AsTcpStream"],[3,"TcpStream"],[3,"TlsStream"],[3,"Url"]]};
searchIndex["flate2"] = {"doc":"A DEFLATE-based stream compression/decompression library","items":[[3,"GzBuilder","flate2","A builder structure to create a new gzip Encoder.",null,null],[3,"GzHeader","","A structure representing the header of a gzip stream.",null,null],[3,"Compress","","Raw in-memory compression stream for blocks of data.",null,null],[3,"DataError","","Error returned when a decompression object finds that the input stream of bytes was not a valid input stream of bytes.",null,null],[3,"Decompress","","Raw in-memory decompression stream for blocks of data.",null,null],[3,"Crc","","The CRC calculated by a [`CrcReader`].",null,null],[3,"CrcReader","","A wrapper around a [`Read`] that calculates the CRC.",null,null],[4,"Flush","","Values which indicate the form of flushing to be used when compressing or decompressing in-memory data.",null,null],[13,"None","","A typical parameter for passing to compression/decompression functions, this indicates that the underlying stream to decide how much data to accumulate before producing output in order to maximize compression.",0,null],[13,"Sync","","All pending output is flushed to the output buffer and the output is aligned on a byte boundary so that the decompressor can get all input data available so far.",0,null],[13,"Partial","","All pending output is flushed to the output buffer, but the output is not aligned to a byte boundary.",0,null],[13,"Block","","A deflate block is completed and emitted, as for `Flush::Sync`, but the output is not aligned on a byte boundary and up to seven vits of the current block are held to be written as the next byte after the next deflate block is completed.",0,null],[13,"Full","","All output is flushed as with `Flush::Sync` and the compression state is reset so decompression can restart from this point if previous compressed data has been damaged or if random access is desired.",0,null],[13,"Finish","","Pending input is processed and pending output is flushed.",0,null],[4,"Status","","Possible status results of compressing some data or successfully decompressing a block of data.",null,null],[13,"Ok","","Indicates success.",1,null],[13,"BufError","","Indicates that forward progress is not possible due to input or output buffers being empty.",1,null],[13,"StreamEnd","","Indicates that all input has been consumed and all output bytes have been written. Decompression/compression should not be called again.",1,null],[4,"Compression","","When compressing data, the compression level can be specified by a value in this enum.",null,null],[13,"None","","No compression is to be performed, this may actually inflate data slightly when encoding.",2,null],[13,"Fast","","Optimize for the best speed of encoding.",2,null],[13,"Best","","Optimize for the size of data being encoded.",2,null],[13,"Default","","Choose the default compression, a balance between speed and size.",2,null],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new CRC.",3,{"inputs":[],"output":{"name":"crc"}}],[11,"sum","","bla",3,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"amount","","The number of bytes that have been used to calculate the CRC. This value is only accurate if the amount is lower than 2^32.",3,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"update","","Update the CRC with the bytes in `data`.",3,null],[11,"reset","","Reset the CRC.",3,{"inputs":[{"name":"self"}],"output":null}],[11,"combine","","Combine the CRC with the CRC for the subsequent block of bytes.",3,{"inputs":[{"name":"self"},{"name":"crc"}],"output":null}],[11,"new","","Create a new CrcReader.",4,{"inputs":[{"name":"r"}],"output":{"name":"crcreader"}}],[11,"crc","","Get the Crc for this CrcReader.",4,{"inputs":[{"name":"self"}],"output":{"name":"crc"}}],[11,"into_inner","","Get the reader that is wrapped by this CrcReader.",4,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"get_ref","","Get the reader that is wrapped by this CrcReader by reference.",4,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"get_mut","","Get a mutable reference to the reader that is wrapped by this CrcReader.",4,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"reset","","Reset the Crc in this CrcReader.",4,{"inputs":[{"name":"self"}],"output":null}],[11,"read","","",4,null],[11,"fill_buf","","",4,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"consume","","",4,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"header"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"self"},{"name":"header"}],"output":{"name":"bool"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"filename","","Returns the `filename` field of this gzip stream's header, if present.",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"extra","","Returns the `extra` field of this gzip stream's header, if present.",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"comment","","Returns the `comment` field of this gzip stream's header, if present.",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"mtime","","This gives the most recent modification time of the original file being compressed.",5,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"mtime_as_datetime","","Returns the most recent modification time represented by a date-time type. Returns `None` if the value of the underlying counter is 0, indicating no time stamp is available.",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new blank builder with no header by default.",6,{"inputs":[],"output":{"name":"builder"}}],[11,"mtime","","Configure the `mtime` field in the gzip header.",6,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"builder"}}],[11,"extra","","Configure the `extra` field in the gzip header.",6,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"builder"}}],[11,"filename","","Configure the `filename` field in the gzip header.",6,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"builder"}}],[11,"comment","","Configure the `comment` field in the gzip header.",6,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"builder"}}],[11,"write","","Consume this builder, creating a writer encoder in the process.",6,{"inputs":[{"name":"self"},{"name":"w"},{"name":"compression"}],"output":{"name":"gzencoder"}}],[11,"read","","Consume this builder, creating a reader encoder in the process.",6,{"inputs":[{"name":"self"},{"name":"r"},{"name":"compression"}],"output":{"name":"gzencoder"}}],[11,"buf_read","","Consume this builder, creating a reader encoder in the process.",6,{"inputs":[{"name":"self"},{"name":"r"},{"name":"compression"}],"output":{"name":"gzencoder"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"flush"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"flush"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"status"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"status"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new object ready for compressing data that it's given.",7,{"inputs":[{"name":"compression"},{"name":"bool"}],"output":{"name":"compress"}}],[11,"total_in","","Returns the total number of input bytes which have been processed by this compression object.",7,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"total_out","","Returns the total number of output bytes which have been produced by this compression object.",7,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"reset","","Quickly resets this compressor without having to reallocate anything.",7,{"inputs":[{"name":"self"}],"output":null}],[11,"compress","","Compresses the input data into the output, consuming only as much input as needed and writing as much output as possible.",7,null],[11,"compress_vec","","Compresses the input data into the extra space of the output, consuming only as much input as needed and writing as much output as possible.",7,null],[11,"new","","Creates a new object ready for decompressing data that it's given.",8,{"inputs":[{"name":"bool"}],"output":{"name":"decompress"}}],[11,"total_in","","Returns the total number of input bytes which have been processed by this decompression object.",8,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"total_out","","Returns the total number of output bytes which have been produced by this decompression object.",8,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"decompress","","Decompresses the input data into the output, consuming only as much input as needed and writing as much output as possible.",8,null],[11,"decompress_vec","","Decompresses the input data into the extra space in the output vector specified by `output`.",8,null],[11,"reset","","Performs the equivalent of replacing this decompression state with a freshly allocated copy.",8,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"description","","",9,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"read","","Types which operate over [`Read`] streams, both encoders and decoders for various formats.",null,null],[3,"DeflateEncoder","flate2::read","A DEFLATE encoder, or compressor.",null,null],[3,"DeflateDecoder","","A DEFLATE decoder, or decompressor.",null,null],[3,"ZlibEncoder","","A ZLIB encoder, or compressor.",null,null],[3,"ZlibDecoder","","A ZLIB decoder, or decompressor.",null,null],[3,"GzEncoder","","A gzip streaming encoder",null,null],[3,"GzDecoder","","A gzip streaming decoder",null,null],[3,"MultiGzDecoder","","A gzip streaming decoder that decodes all members of a multistream",null,null],[0,"write","flate2","Types which operate over [`Write`] streams, both encoders and decoders for various formats.",null,null],[3,"DeflateEncoder","flate2::write","A DEFLATE encoder, or compressor.",null,null],[3,"DeflateDecoder","","A DEFLATE decoder, or decompressor.",null,null],[3,"ZlibEncoder","","A ZLIB encoder, or compressor.",null,null],[3,"ZlibDecoder","","A ZLIB decoder, or decompressor.",null,null],[3,"GzEncoder","","A gzip streaming encoder",null,null],[0,"bufread","flate2","Types which operate over [`BufRead`] streams, both encoders and decoders for various formats.",null,null],[3,"DeflateEncoder","flate2::bufread","A DEFLATE encoder, or compressor.",null,null],[3,"DeflateDecoder","","A DEFLATE decoder, or decompressor.",null,null],[3,"ZlibEncoder","","A ZLIB encoder, or compressor.",null,null],[3,"ZlibDecoder","","A ZLIB decoder, or decompressor.",null,null],[3,"GzEncoder","","A gzip streaming encoder",null,null],[3,"GzDecoder","","A gzip streaming decoder",null,null],[3,"MultiGzDecoder","","A gzip streaming decoder that decodes all members of a multistream",null,null],[8,"FlateReadExt","flate2","A helper trait to create encoder/decoders with method syntax.",null,null],[11,"gz_encode","","Consume this reader to create a compression stream at the specified compression level.",10,{"inputs":[{"name":"self"},{"name":"compression"}],"output":{"name":"gzencoder"}}],[11,"gz_decode","","Consume this reader to create a decompression stream of this stream.",10,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"zlib_encode","","Consume this reader to create a compression stream at the specified compression level.",10,{"inputs":[{"name":"self"},{"name":"compression"}],"output":{"name":"zlibencoder"}}],[11,"zlib_decode","","Consume this reader to create a decompression stream of this stream.",10,{"inputs":[{"name":"self"}],"output":{"name":"zlibdecoder"}}],[11,"deflate_encode","","Consume this reader to create a compression stream at the specified compression level.",10,{"inputs":[{"name":"self"},{"name":"compression"}],"output":{"name":"deflateencoder"}}],[11,"deflate_decode","","Consume this reader to create a decompression stream of this stream.",10,{"inputs":[{"name":"self"}],"output":{"name":"deflatedecoder"}}],[8,"FlateWriteExt","","A helper trait to create encoder/decoders with method syntax.",null,null],[11,"gz_encode","","Consume this writer to create a compression stream at the specified compression level.",11,{"inputs":[{"name":"self"},{"name":"compression"}],"output":{"name":"gzencoder"}}],[11,"zlib_encode","","Consume this writer to create a compression stream at the specified compression level.",11,{"inputs":[{"name":"self"},{"name":"compression"}],"output":{"name":"zlibencoder"}}],[11,"zlib_decode","","Consume this writer to create a decompression stream of this stream.",11,{"inputs":[{"name":"self"}],"output":{"name":"zlibdecoder"}}],[11,"deflate_encode","","Consume this writer to create a compression stream at the specified compression level.",11,{"inputs":[{"name":"self"},{"name":"compression"}],"output":{"name":"deflateencoder"}}],[11,"deflate_decode","","Consume this writer to create a decompression stream of this stream.",11,{"inputs":[{"name":"self"}],"output":{"name":"deflatedecoder"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"compression"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"compression"}],"output":{"name":"bool"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",2,{"inputs":[],"output":{"name":"compression"}}],[11,"fmt","flate2::bufread","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new encoder which will read uncompressed data from the given stream and emit the compressed stream.",12,{"inputs":[{"name":"r"},{"name":"compression"}],"output":{"name":"deflateencoder"}}],[11,"reset","","Resets the state of this encoder entirely, swapping out the input stream for another.",12,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"r"}}],[11,"get_ref","","Acquires a reference to the underlying reader",12,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream",12,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"into_inner","","Consumes this encoder, returning the underlying reader.",12,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"total_in","","Returns the number of bytes that have been read into this compressor.",12,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"total_out","","Returns the number of bytes that the compressor has produced.",12,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"read","","",12,null],[11,"write","","",12,null],[11,"flush","","",12,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new decoder which will decompress data read from the given stream.",13,{"inputs":[{"name":"r"}],"output":{"name":"deflatedecoder"}}],[11,"reset","","Resets the state of this decoder entirely, swapping out the input stream for another.",13,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"r"}}],[11,"reset_data","","Resets the state of this decoder's data",13,{"inputs":[{"name":"self"}],"output":null}],[11,"get_ref","","Acquires a reference to the underlying stream",13,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream",13,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"into_inner","","Consumes this decoder, returning the underlying reader.",13,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"total_in","","Returns the number of bytes that the decompressor has consumed.",13,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"total_out","","Returns the number of bytes that the decompressor has produced.",13,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"read","","",13,null],[11,"write","","",13,null],[11,"flush","","",13,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","flate2::read","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new encoder which will read uncompressed data from the given stream and emit the compressed stream.",14,{"inputs":[{"name":"r"},{"name":"compression"}],"output":{"name":"deflateencoder"}}],[11,"reset","","Resets the state of this encoder entirely, swapping out the input stream for another.",14,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"r"}}],[11,"get_ref","","Acquires a reference to the underlying reader",14,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream",14,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"into_inner","","Consumes this encoder, returning the underlying reader.",14,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"total_in","","Returns the number of bytes that have been read into this compressor.",14,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"total_out","","Returns the number of bytes that the compressor has produced.",14,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"read","","",14,null],[11,"write","","",14,null],[11,"flush","","",14,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new decoder which will decompress data read from the given stream.",15,{"inputs":[{"name":"r"}],"output":{"name":"deflatedecoder"}}],[11,"new_with_buf","","Same as `new`, but the intermediate buffer for data is specified.",15,{"inputs":[{"name":"r"},{"name":"vec"}],"output":{"name":"deflatedecoder"}}],[11,"reset","","Resets the state of this decoder entirely, swapping out the input stream for another.",15,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"r"}}],[11,"get_ref","","Acquires a reference to the underlying stream",15,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream",15,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"into_inner","","Consumes this decoder, returning the underlying reader.",15,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"total_in","","Returns the number of bytes that the decompressor has consumed.",15,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"total_out","","Returns the number of bytes that the decompressor has produced.",15,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"read","","",15,null],[11,"write","","",15,null],[11,"flush","","",15,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","flate2::write","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new encoder which will write compressed data to the stream given at the given compression level.",16,{"inputs":[{"name":"w"},{"name":"compression"}],"output":{"name":"deflateencoder"}}],[11,"get_ref","","Acquires a reference to the underlying writer.",16,{"inputs":[{"name":"self"}],"output":{"name":"w"}}],[11,"get_mut","","Acquires a mutable reference to the underlying writer.",16,{"inputs":[{"name":"self"}],"output":{"name":"w"}}],[11,"reset","","Resets the state of this encoder entirely, swapping out the output stream for another.",16,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"try_finish","","Attempt to finish this output stream, writing out final chunks of data.",16,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"finish","","Consumes this encoder, flushing the output stream.",16,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"flush_finish","","Consumes this encoder, flushing the output stream.",16,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"total_in","","Returns the number of bytes that have been written to this compresor.",16,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"total_out","","Returns the number of bytes that the compressor has produced.",16,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"write","","",16,null],[11,"flush","","",16,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read","","",16,null],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new decoder which will write uncompressed data to the stream.",17,{"inputs":[{"name":"w"}],"output":{"name":"deflatedecoder"}}],[11,"get_ref","","Acquires a reference to the underlying writer.",17,{"inputs":[{"name":"self"}],"output":{"name":"w"}}],[11,"get_mut","","Acquires a mutable reference to the underlying writer.",17,{"inputs":[{"name":"self"}],"output":{"name":"w"}}],[11,"reset","","Resets the state of this decoder entirely, swapping out the output stream for another.",17,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"try_finish","","Attempt to finish this output stream, writing out final chunks of data.",17,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"finish","","Consumes this encoder, flushing the output stream.",17,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"total_in","","Returns the number of bytes that the decompressor has consumed for decompression.",17,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"total_out","","Returns the number of bytes that the decompressor has written to its output stream.",17,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"write","","",17,null],[11,"flush","","",17,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read","","",17,null],[11,"fmt","flate2::bufread","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new encoder which will use the given compression level.",18,{"inputs":[{"name":"r"},{"name":"compression"}],"output":{"name":"gzencoder"}}],[11,"get_ref","","Acquires a reference to the underlying reader.",18,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"get_mut","","Acquires a mutable reference to the underlying reader.",18,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"into_inner","","Returns the underlying stream, consuming this encoder",18,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"read","","",18,null],[11,"write","","",18,null],[11,"flush","","",18,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new decoder from the given reader, immediately parsing the gzip header.",19,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[11,"header","","Returns the header associated with this stream.",19,{"inputs":[{"name":"self"}],"output":{"name":"header"}}],[11,"get_ref","","Acquires a reference to the underlying reader.",19,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream.",19,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"into_inner","","Consumes this decoder, returning the underlying reader.",19,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"read","","",19,null],[11,"write","","",19,null],[11,"flush","","",19,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new decoder from the given reader, immediately parsing the (first) gzip header. If the gzip stream contains multiple members all will be decoded.",20,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[11,"header","","Returns the current header associated with this stream.",20,{"inputs":[{"name":"self"}],"output":{"name":"header"}}],[11,"get_ref","","Acquires a reference to the underlying reader.",20,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream.",20,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"into_inner","","Consumes this decoder, returning the underlying reader.",20,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"read","","",20,null],[11,"write","","",20,null],[11,"flush","","",20,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","flate2::read","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new encoder which will use the given compression level.",21,{"inputs":[{"name":"r"},{"name":"compression"}],"output":{"name":"gzencoder"}}],[11,"get_ref","","Acquires a reference to the underlying reader.",21,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"get_mut","","Acquires a mutable reference to the underlying reader.",21,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"into_inner","","Returns the underlying stream, consuming this encoder",21,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"read","","",21,null],[11,"write","","",21,null],[11,"flush","","",21,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new decoder from the given reader, immediately parsing the gzip header.",22,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[11,"header","","Returns the header associated with this stream.",22,{"inputs":[{"name":"self"}],"output":{"name":"header"}}],[11,"get_ref","","Acquires a reference to the underlying reader.",22,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream.",22,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"into_inner","","Consumes this decoder, returning the underlying reader.",22,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"read","","",22,null],[11,"write","","",22,null],[11,"flush","","",22,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new decoder from the given reader, immediately parsing the (first) gzip header. If the gzip stream contains multiple members all will be decoded.",23,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[11,"header","","Returns the current header associated with this stream.",23,{"inputs":[{"name":"self"}],"output":{"name":"header"}}],[11,"get_ref","","Acquires a reference to the underlying reader.",23,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream.",23,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"into_inner","","Consumes this decoder, returning the underlying reader.",23,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"read","","",23,null],[11,"write","","",23,null],[11,"flush","","",23,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","flate2::write","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new encoder which will use the given compression level.",24,{"inputs":[{"name":"w"},{"name":"compression"}],"output":{"name":"gzencoder"}}],[11,"get_ref","","Acquires a reference to the underlying writer.",24,{"inputs":[{"name":"self"}],"output":{"name":"w"}}],[11,"get_mut","","Acquires a mutable reference to the underlying writer.",24,{"inputs":[{"name":"self"}],"output":{"name":"w"}}],[11,"try_finish","","Attempt to finish this output stream, writing out final chunks of data.",24,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"finish","","Finish encoding this stream, returning the underlying writer once the encoding is done.",24,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"write","","",24,null],[11,"flush","","",24,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read","","",24,null],[11,"drop","","",24,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","flate2::bufread","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new encoder which will read uncompressed data from the given stream and emit the compressed stream.",25,{"inputs":[{"name":"r"},{"name":"compression"}],"output":{"name":"zlibencoder"}}],[11,"reset","","Resets the state of this encoder entirely, swapping out the input stream for another.",25,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"r"}}],[11,"get_ref","","Acquires a reference to the underlying reader",25,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream",25,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"into_inner","","Consumes this encoder, returning the underlying reader.",25,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"total_in","","Returns the number of bytes that have been read into this compressor.",25,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"total_out","","Returns the number of bytes that the compressor has produced.",25,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"read","","",25,null],[11,"write","","",25,null],[11,"flush","","",25,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new decoder which will decompress data read from the given stream.",26,{"inputs":[{"name":"r"}],"output":{"name":"zlibdecoder"}}],[11,"reset","","Resets the state of this decoder entirely, swapping out the input stream for another.",26,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"r"}}],[11,"get_ref","","Acquires a reference to the underlying stream",26,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream",26,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"into_inner","","Consumes this decoder, returning the underlying reader.",26,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"total_in","","Returns the number of bytes that the decompressor has consumed.",26,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"total_out","","Returns the number of bytes that the decompressor has produced.",26,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"read","","",26,null],[11,"write","","",26,null],[11,"flush","","",26,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","flate2::read","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new encoder which will read uncompressed data from the given stream and emit the compressed stream.",27,{"inputs":[{"name":"r"},{"name":"compression"}],"output":{"name":"zlibencoder"}}],[11,"reset","","Resets the state of this encoder entirely, swapping out the input stream for another.",27,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"r"}}],[11,"get_ref","","Acquires a reference to the underlying stream",27,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream",27,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"into_inner","","Consumes this encoder, returning the underlying reader.",27,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"total_in","","Returns the number of bytes that have been read into this compressor.",27,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"total_out","","Returns the number of bytes that the compressor has produced.",27,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"read","","",27,null],[11,"write","","",27,null],[11,"flush","","",27,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new decoder which will decompress data read from the given stream.",28,{"inputs":[{"name":"r"}],"output":{"name":"zlibdecoder"}}],[11,"new_with_buf","","Same as `new`, but the intermediate buffer for data is specified.",28,{"inputs":[{"name":"r"},{"name":"vec"}],"output":{"name":"zlibdecoder"}}],[11,"reset","","Resets the state of this decoder entirely, swapping out the input stream for another.",28,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"r"}}],[11,"get_ref","","Acquires a reference to the underlying stream",28,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream",28,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"into_inner","","Consumes this decoder, returning the underlying reader.",28,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"total_in","","Returns the number of bytes that the decompressor has consumed.",28,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"total_out","","Returns the number of bytes that the decompressor has produced.",28,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"read","","",28,null],[11,"write","","",28,null],[11,"flush","","",28,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","flate2::write","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new encoder which will write compressed data to the stream given at the given compression level.",29,{"inputs":[{"name":"w"},{"name":"compression"}],"output":{"name":"zlibencoder"}}],[11,"get_ref","","Acquires a reference to the underlying writer.",29,{"inputs":[{"name":"self"}],"output":{"name":"w"}}],[11,"get_mut","","Acquires a mutable reference to the underlying writer.",29,{"inputs":[{"name":"self"}],"output":{"name":"w"}}],[11,"reset","","Resets the state of this encoder entirely, swapping out the output stream for another.",29,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"try_finish","","Attempt to finish this output stream, writing out final chunks of data.",29,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"finish","","Consumes this encoder, flushing the output stream.",29,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"flush_finish","","Consumes this encoder, flushing the output stream.",29,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"total_in","","Returns the number of bytes that have been written to this compresor.",29,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"total_out","","Returns the number of bytes that the compressor has produced.",29,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"write","","",29,null],[11,"flush","","",29,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read","","",29,null],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new decoder which will write uncompressed data to the stream.",30,{"inputs":[{"name":"w"}],"output":{"name":"zlibdecoder"}}],[11,"get_ref","","Acquires a reference to the underlying writer.",30,{"inputs":[{"name":"self"}],"output":{"name":"w"}}],[11,"get_mut","","Acquires a mutable reference to the underlying writer.",30,{"inputs":[{"name":"self"}],"output":{"name":"w"}}],[11,"reset","","Resets the state of this decoder entirely, swapping out the output stream for another.",30,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"try_finish","","Attempt to finish this output stream, writing out final chunks of data.",30,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"finish","","Consumes this encoder, flushing the output stream.",30,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"total_in","","Returns the number of bytes that the decompressor has consumed for decompression.",30,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"total_out","","Returns the number of bytes that the decompressor has written to its output stream.",30,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"write","","",30,null],[11,"flush","","",30,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read","","",30,null]],"paths":[[4,"Flush"],[4,"Status"],[4,"Compression"],[3,"Crc"],[3,"CrcReader"],[3,"GzHeader"],[3,"GzBuilder"],[3,"Compress"],[3,"Decompress"],[3,"DataError"],[8,"FlateReadExt"],[8,"FlateWriteExt"],[3,"DeflateEncoder"],[3,"DeflateDecoder"],[3,"DeflateEncoder"],[3,"DeflateDecoder"],[3,"DeflateEncoder"],[3,"DeflateDecoder"],[3,"GzEncoder"],[3,"GzDecoder"],[3,"MultiGzDecoder"],[3,"GzEncoder"],[3,"GzDecoder"],[3,"MultiGzDecoder"],[3,"GzEncoder"],[3,"ZlibEncoder"],[3,"ZlibDecoder"],[3,"ZlibEncoder"],[3,"ZlibDecoder"],[3,"ZlibEncoder"],[3,"ZlibDecoder"]]};
searchIndex["foreign_types"] = {"doc":"A framework for Rust wrappers over C APIs.","items":[[3,"Opaque","foreign_types","An opaque type used to define `ForeignTypeRef` types.",null,null],[8,"ForeignType","","A type implemented by wrappers over foreign types.",null,null],[16,"CType","","The raw C type.",0,null],[16,"Ref","","The type representing a reference to this type.",0,null],[10,"from_ptr","","Constructs an instance of this type from its raw type.",0,null],[10,"as_ptr","","Returns a raw pointer to the wrapped value.",0,null],[8,"ForeignTypeRef","","A trait implemented by types which reference borrowed foreign types.",null,null],[16,"CType","","The raw C type.",1,null],[11,"from_ptr","","Constructs a shared instance of this type from its raw type.",1,null],[11,"from_ptr_mut","","Constructs a mutable reference of this type from its raw type.",1,null],[11,"as_ptr","","Returns a raw pointer to the wrapped value.",1,null],[14,"foreign_type","","A macro to easily define wrappers for foreign types.",null,null]],"paths":[[8,"ForeignType"],[8,"ForeignTypeRef"]]};
searchIndex["httparse"] = {"doc":"httparse","items":[[3,"InvalidChunkSize","httparse","An error in parsing a chunk size.",null,null],[3,"Request","","A parsed Request.",null,null],[12,"method","","The request method, such as `GET`.",0,null],[12,"path","","The request path, such as `/about-us`.",0,null],[12,"version","","The request version, such as `HTTP/1.1`.",0,null],[12,"headers","","The request headers.",0,null],[3,"Response","","A parsed Response.",null,null],[12,"version","","The response version, such as `HTTP/1.1`.",1,null],[12,"code","","The response code, such as `200`.",1,null],[12,"reason","","The response reason-phrase, such as `OK`.",1,null],[12,"headers","","The response headers.",1,null],[3,"Header","","Represents a parsed header.",null,null],[12,"name","","The name portion of a header.",2,null],[12,"value","","The value portion of a header.",2,null],[4,"Error","","An error in parsing.",null,null],[13,"HeaderName","","Invalid byte in header name.",3,null],[13,"HeaderValue","","Invalid byte in header value.",3,null],[13,"NewLine","","Invalid byte in new line.",3,null],[13,"Status","","Invalid byte in Response status.",3,null],[13,"Token","","Invalid byte where token is required.",3,null],[13,"TooManyHeaders","","Parsed more headers than provided buffer can contain.",3,null],[13,"Version","","Invalid byte in HTTP version.",3,null],[4,"Status","","The result of a successful parse pass.",null,null],[13,"Complete","","The completed result.",4,null],[13,"Partial","","A partial result.",4,null],[5,"parse_headers","","Parse a buffer of bytes as headers.",null,null],[5,"parse_chunk_size","","Parse a buffer of bytes as a chunk size.",null,null],[6,"Result","","A Result of any parsing action.",null,null],[17,"EMPTY_HEADER","","An empty header, useful for constructing a `Header` array to pass in for parsing.",null,null],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",3,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"invalidchunksize"}],"output":{"name":"bool"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"status"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"status"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"status"}],"output":{"name":"bool"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"is_complete","","Convenience method to check if status is complete.",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_partial","","Convenience method to check if status is partial.",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"unwrap","","Convenience method to unwrap a Complete value. Panics if the status is `Partial`.",4,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"request"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"request"}],"output":{"name":"bool"}}],[11,"new","","Creates a new Request, using a slice of headers you allocate.",0,null],[11,"parse","","Try to parse a buffer of bytes into the Request.",0,null],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"response"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"response"}],"output":{"name":"bool"}}],[11,"new","","Creates a new `Response` using a slice of `Header`s you have allocated.",1,null],[11,"parse","","Try to parse a buffer of bytes into this `Response`.",1,null],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"header"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"header"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"header"}],"output":{"name":"bool"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"Request"],[3,"Response"],[3,"Header"],[4,"Error"],[4,"Status"],[3,"InvalidChunkSize"]]};
searchIndex["hyper"] = {"doc":"Hyper","items":[[3,"Url","hyper","A parsed URL record.",null,null],[3,"LanguageTag","","A language tag as described in BCP47.",null,null],[12,"language","","Language subtags are used to indicate the language, ignoring all other aspects such as script, region or spefic invariants.",0,null],[12,"extlangs","","Extended language subtags are used to identify certain specially selected languages that, for various historical and compatibility reasons, are closely identified with or tagged using an existing primary language subtag.",0,null],[12,"script","","Script subtags are used to indicate the script or writing system variations that distinguish the written forms of a language or its dialects.",0,null],[12,"region","","Region subtags are used to indicate linguistic variations associated with or appropriate to a specific country, territory, or region. Typically, a region subtag is used to indicate variations such as regional dialects or usage, or region-specific spelling conventions. It can also be used to indicate that content is expressed in a way that is appropriate for use throughout a region, for instance, Spanish content tailored to be useful throughout Latin America.",0,null],[12,"variants","","Variant subtags are used to indicate additional, well-recognized variations that define a language or its dialects that are not covered by other available subtags.",0,null],[12,"extensions","","Extensions provide a mechanism for extending language tags for use in various applications.  They are intended to identify information that is commonly used in association with languages or language tags but that is not part of language identification.",0,null],[12,"privateuse","","Private use subtags are used to indicate distinctions in language that are important in a given context by private agreement.",0,null],[0,"client","","HTTP Client",null,null],[3,"Client","hyper::client","A Client to use additional features with Requests.",null,null],[3,"RequestBuilder","","Options for an individual Request.",null,null],[3,"ProxyConfig","","Proxy server configuration with a custom connector and TLS wrapper.",null,null],[4,"Body","","An enum of possible body types for a Request.",null,null],[13,"ChunkedBody","","A Reader does not necessarily know it's size, so it is chunked.",1,null],[13,"SizedBody","","For Readers that can know their size, like a `File`.",1,null],[13,"BufBody","","A String has a size, and uses Content-Length.",1,null],[4,"RedirectPolicy","","Behavior regarding how to handle redirects within a Client.",null,null],[13,"FollowNone","","Don't follow any redirects.",2,null],[13,"FollowAll","","Follow all redirects.",2,null],[13,"FollowIf","","Follow a redirect if the contained function returns true.",2,null],[0,"pool","","Client Connection Pooling",null,null],[3,"Pool","hyper::client::pool","The `NetworkConnector` that behaves as a connection pool used by hyper's `Client`.",null,null],[3,"Config","","Config options for the `Pool`.",null,null],[12,"max_idle","","The maximum idle connections per host.",3,null],[3,"PooledStream","","A Stream that will try to be returned to the Pool when dropped.",null,null],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",3,{"inputs":[],"output":{"name":"config"}}],[11,"new","","Creates a `Pool` with a `DefaultConnector`.",4,{"inputs":[{"name":"config"}],"output":{"name":"pool"}}],[11,"with_connector","","Creates a `Pool` with a specified `NetworkConnector`.",4,{"inputs":[{"name":"config"},{"name":"c"}],"output":{"name":"pool"}}],[11,"set_idle_timeout","","Set a duration for how long an idle connection is still valid.",4,{"inputs":[{"name":"self"},{"name":"option"}],"output":null}],[11,"set_stale_check","","",4,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"clear_idle","","Clear all idle connections from the Pool, closing them.",4,{"inputs":[{"name":"self"}],"output":null}],[11,"connect","","",4,{"inputs":[{"name":"self"},{"name":"str"},{"name":"u16"},{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"into_inner","","Take the wrapped stream out of the pool completely.",5,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_ref","","Gets a borrowed reference to the underlying stream.",5,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"read","","",5,null],[11,"write","","",5,null],[11,"flush","","",5,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"peer_addr","","",5,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"set_read_timeout","","",5,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"set_write_timeout","","",5,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"close","","",5,{"inputs":[{"name":"self"},{"name":"shutdown"}],"output":{"name":"result"}}],[11,"set_previous_response_expected_no_content","","",5,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"previous_response_expected_no_content","","",5,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"drop","","",5,{"inputs":[{"name":"self"}],"output":null}],[0,"request","hyper::client","Client Requests",null,null],[3,"Request","hyper::client::request","A client request to a remote server. The W type tracks the state of the request, Fresh vs Streaming.",null,null],[12,"url","","The target URI for this request.",6,null],[12,"version","","The HTTP version of this request.",6,null],[11,"headers","","Read the Request headers.",6,{"inputs":[{"name":"self"}],"output":{"name":"headers"}}],[11,"method","","Read the Request method.",6,{"inputs":[{"name":"self"}],"output":{"name":"method"}}],[11,"set_write_timeout","","Set the write timeout.",6,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"set_read_timeout","","Set the read timeout.",6,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"with_message","","Create a new `Request<Fresh>` that will use the given `HttpMessage` for its communication with the server. This implies that the given `HttpMessage` instance has already been properly initialized by the caller (e.g. a TCP connection's already established).",6,{"inputs":[{"name":"method"},{"name":"url"},{"name":"box"}],"output":{"name":"result"}}],[11,"new","","Create a new client request.",6,{"inputs":[{"name":"method"},{"name":"url"}],"output":{"name":"result"}}],[11,"with_connector","","Create a new client request with a specific underlying NetworkStream.",6,{"inputs":[{"name":"method"},{"name":"url"},{"name":"c"}],"output":{"name":"result"}}],[11,"start","","Consume a Fresh Request, writing the headers and method, returning a Streaming Request.",6,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"headers_mut","","Get a mutable reference to the Request headers.",6,{"inputs":[{"name":"self"}],"output":{"name":"headers"}}],[11,"send","","Completes writing the request, and returns a response to read from.",6,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"write","","",6,null],[11,"flush","","",6,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[0,"response","hyper::client","Client Responses",null,null],[3,"Response","hyper::client::response","A response for a client request to a remote server.",null,null],[12,"status","","The status from the server.",7,null],[12,"headers","","The headers from the server.",7,null],[12,"version","","The HTTP version of this response from the server.",7,null],[12,"url","","The final URL of this response.",7,null],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new response from a server.",7,{"inputs":[{"name":"url"},{"name":"box"}],"output":{"name":"result"}}],[11,"with_message","","Creates a new response received from the server on the given `HttpMessage`.",7,{"inputs":[{"name":"url"},{"name":"box"}],"output":{"name":"result"}}],[11,"status_raw","","Get the raw status code and reason.",7,{"inputs":[{"name":"self"}],"output":{"name":"rawstatus"}}],[11,"get_ref","","Gets a borrowed reference to the underlying `HttpMessage`.",7,{"inputs":[{"name":"self"}],"output":{"name":"httpmessage"}}],[11,"read","","",7,null],[11,"drop","","",7,{"inputs":[{"name":"self"}],"output":null}],[8,"IntoUrl","hyper::client","A helper trait to convert common objects into a Url.",null,null],[10,"into_url","","Consumes the object, trying to return a Url.",8,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new Client.",9,{"inputs":[],"output":{"name":"client"}}],[11,"with_pool_config","","Create a new Client with a configured Pool Config.",9,{"inputs":[{"name":"config"}],"output":{"name":"client"}}],[11,"with_http_proxy","","Create a Client with an HTTP proxy to a (host, port).",9,{"inputs":[{"name":"h"},{"name":"u16"}],"output":{"name":"client"}}],[11,"with_proxy_config","","Create a Client using a proxy with a custom connector and SSL client.",9,{"inputs":[{"name":"proxyconfig"}],"output":{"name":"client"}}],[11,"with_connector","","Create a new client with a specific connector.",9,{"inputs":[{"name":"c"}],"output":{"name":"client"}}],[11,"with_protocol","","Create a new client with a specific `Protocol`.",9,{"inputs":[{"name":"p"}],"output":{"name":"client"}}],[11,"set_redirect_policy","","Set the RedirectPolicy.",9,{"inputs":[{"name":"self"},{"name":"redirectpolicy"}],"output":null}],[11,"set_read_timeout","","Set the read timeout value for all requests.",9,{"inputs":[{"name":"self"},{"name":"option"}],"output":null}],[11,"set_write_timeout","","Set the write timeout value for all requests.",9,{"inputs":[{"name":"self"},{"name":"option"}],"output":null}],[11,"get","","Build a Get request.",9,{"inputs":[{"name":"self"},{"name":"u"}],"output":{"name":"requestbuilder"}}],[11,"head","","Build a Head request.",9,{"inputs":[{"name":"self"},{"name":"u"}],"output":{"name":"requestbuilder"}}],[11,"patch","","Build a Patch request.",9,{"inputs":[{"name":"self"},{"name":"u"}],"output":{"name":"requestbuilder"}}],[11,"post","","Build a Post request.",9,{"inputs":[{"name":"self"},{"name":"u"}],"output":{"name":"requestbuilder"}}],[11,"put","","Build a Put request.",9,{"inputs":[{"name":"self"},{"name":"u"}],"output":{"name":"requestbuilder"}}],[11,"delete","","Build a Delete request.",9,{"inputs":[{"name":"self"},{"name":"u"}],"output":{"name":"requestbuilder"}}],[11,"request","","Build a new request using this Client.",9,{"inputs":[{"name":"self"},{"name":"method"},{"name":"u"}],"output":{"name":"requestbuilder"}}],[11,"default","","",9,{"inputs":[],"output":{"name":"client"}}],[11,"body","","Set a request body to be sent.",10,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"name":"requestbuilder"}}],[11,"headers","","Add additional headers to the request.",10,{"inputs":[{"name":"self"},{"name":"headers"}],"output":{"name":"requestbuilder"}}],[11,"header","","Add an individual new header to the request.",10,{"inputs":[{"name":"self"},{"name":"h"}],"output":{"name":"requestbuilder"}}],[11,"send","","Execute this request and receive a Response back.",10,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read","","",1,null],[11,"from","","",1,{"inputs":[{"name":"r"}],"output":{"name":"body"}}],[11,"into_url","hyper","",11,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"new","hyper::client","Create a new `ProxyConfig`.",12,{"inputs":[{"name":"str"},{"name":"h"},{"name":"u16"},{"name":"c"},{"name":"s"}],"output":{"name":"proxyconfig"}}],[11,"set_pool_config","","Change the `pool::Config` for the proxy.",12,{"inputs":[{"name":"self"},{"name":"option"}],"output":null}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"redirectpolicy"}}],[11,"default","","",2,{"inputs":[],"output":{"name":"redirectpolicy"}}],[0,"error","hyper","Error and Result module.",null,null],[4,"ParseError","hyper::error","Errors that can occur during parsing.",null,null],[13,"EmptyHost","","",13,null],[13,"IdnaError","","",13,null],[13,"InvalidPort","","",13,null],[13,"InvalidIpv4Address","","",13,null],[13,"InvalidIpv6Address","","",13,null],[13,"InvalidDomainCharacter","","",13,null],[13,"RelativeUrlWithoutBase","","",13,null],[13,"RelativeUrlWithCannotBeABaseBase","","",13,null],[13,"SetHostOnCannotBeABaseUrl","","",13,null],[13,"Overflow","","",13,null],[4,"Error","","A set of errors that can occur parsing HTTP streams.",null,null],[13,"Method","","An invalid `Method`, such as `GE,T`.",14,null],[13,"Uri","","An invalid `RequestUri`, such as `exam ple.domain`.",14,null],[13,"Version","","An invalid `HttpVersion`, such as `HTP/1.1`",14,null],[13,"Header","","An invalid `Header`.",14,null],[13,"TooLarge","","A message head is too large to be reasonable.",14,null],[13,"Status","","An invalid `Status`, such as `1337 ELITE`.",14,null],[13,"Io","","An `io::Error` that occurred while trying to read or write to a network stream.",14,null],[13,"Ssl","","An error from a SSL library.",14,null],[13,"Utf8","","Parsing a field as string failed",14,null],[6,"Result","","Result type often returned from methods that can have hyper `Error`s.",null,null],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",14,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"from","","",14,{"inputs":[{"name":"ioerror"}],"output":{"name":"error"}}],[11,"from","","",14,{"inputs":[{"name":"parseerror"}],"output":{"name":"error"}}],[11,"from","","",14,{"inputs":[{"name":"utf8error"}],"output":{"name":"error"}}],[11,"from","","",14,{"inputs":[{"name":"fromutf8error"}],"output":{"name":"error"}}],[11,"from","","",14,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[0,"method","hyper","The HTTP request method",null,null],[4,"Method","hyper::method","The Request Method (VERB)",null,null],[13,"Options","","OPTIONS",15,null],[13,"Get","","GET",15,null],[13,"Post","","POST",15,null],[13,"Put","","PUT",15,null],[13,"Delete","","DELETE",15,null],[13,"Head","","HEAD",15,null],[13,"Trace","","TRACE",15,null],[13,"Connect","","CONNECT",15,null],[13,"Patch","","PATCH",15,null],[13,"Extension","","Method extensions. An example would be `let m = Extension(\"FOO\".to_string())`.",15,null],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"method"}}],[11,"eq","","",15,{"inputs":[{"name":"self"},{"name":"method"}],"output":{"name":"bool"}}],[11,"ne","","",15,{"inputs":[{"name":"self"},{"name":"method"}],"output":{"name":"bool"}}],[11,"hash","","",15,null],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",15,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"safe","","Whether a method is considered \"safe\", meaning the request is essentially read-only.",15,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"idempotent","","Whether a method is considered \"idempotent\", meaning the request has the same result is executed multiple times.",15,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_str","","",15,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"header","hyper","Headers container, and common header fields.",null,null],[3,"EntityTag","hyper::header","An entity tag, defined in RFC7232",null,null],[12,"weak","","Weakness indicator for the tag",16,null],[3,"HttpDate","","A `time::Time` with HTTP formatting and parsing",null,null],[12,"0","","",17,null],[3,"Quality","","Represents a quality used in quality values.",null,null],[12,"0","","",18,null],[3,"QualityItem","","Represents an item with a quality value as defined in RFC7231.",null,null],[12,"item","","The actual contents of the field.",19,null],[12,"quality","","The quality (client or server preference) for the value.",19,null],[3,"Accept","","`Accept` header, defined in RFC7231",null,null],[12,"0","","",20,null],[3,"AccessControlAllowCredentials","","`Access-Control-Allow-Credentials` header, part of CORS",null,null],[3,"AccessControlAllowHeaders","","`Access-Control-Allow-Headers` header, part of CORS",null,null],[12,"0","","",21,null],[3,"AccessControlAllowMethods","","`Access-Control-Allow-Methods` header, part of CORS",null,null],[12,"0","","",22,null],[3,"AccessControlExposeHeaders","","`Access-Control-Expose-Headers` header, part of CORS",null,null],[12,"0","","",23,null],[3,"AccessControlMaxAge","","`Access-Control-Max-Age` header, part of CORS",null,null],[12,"0","","",24,null],[3,"AccessControlRequestHeaders","","`Access-Control-Request-Headers` header, part of CORS",null,null],[12,"0","","",25,null],[3,"AccessControlRequestMethod","","`Access-Control-Request-Method` header, part of CORS",null,null],[12,"0","","",26,null],[3,"AcceptCharset","","`Accept-Charset` header, defined in RFC7231",null,null],[12,"0","","",27,null],[3,"AcceptEncoding","","`Accept-Encoding` header, defined in RFC7231",null,null],[12,"0","","",28,null],[3,"AcceptLanguage","","`Accept-Language` header, defined in RFC7231",null,null],[12,"0","","",29,null],[3,"AcceptRanges","","`Accept-Ranges` header, defined in RFC7233",null,null],[12,"0","","",30,null],[3,"Allow","","`Allow` header, defined in RFC7231",null,null],[12,"0","","",31,null],[3,"Authorization","","`Authorization` header, defined in RFC7235",null,null],[12,"0","","",32,null],[3,"Basic","","Credential holder for Basic Authentication",null,null],[12,"username","","The username as a possibly empty string",33,null],[12,"password","","The password. `None` if the `:` delimiter character was not part of the parsed input.",33,null],[3,"Bearer","","Token holder for Bearer Authentication, most often seen with oauth",null,null],[12,"token","","Actual bearer token as a string",34,null],[3,"CacheControl","","`Cache-Control` header, defined in RFC7234",null,null],[12,"0","","",35,null],[3,"Connection","","`Connection` header, defined in RFC7230",null,null],[12,"0","","",36,null],[3,"ContentDisposition","","A `Content-Disposition` header, (re)defined in RFC6266",null,null],[12,"disposition","","The disposition",37,null],[12,"parameters","","Disposition parameters",37,null],[3,"ContentLength","","`Content-Length` header, defined in RFC7230",null,null],[12,"0","","",38,null],[3,"ContentEncoding","","`Content-Encoding` header, defined in RFC7231",null,null],[12,"0","","",39,null],[3,"ContentLanguage","","`Content-Language` header, defined in RFC7231",null,null],[12,"0","","",40,null],[3,"ContentRange","","`Content-Range` header, defined in RFC7233",null,null],[12,"0","","",41,null],[3,"ContentType","","`Content-Type` header, defined in RFC7231",null,null],[12,"0","","",42,null],[3,"Cookie","","`Cookie` header, defined in RFC6265",null,null],[12,"0","","",43,null],[3,"Date","","`Date` header, defined in RFC7231",null,null],[12,"0","","",44,null],[3,"ETag","","`ETag` header, defined in RFC7232",null,null],[12,"0","","",45,null],[3,"Expires","","`Expires` header, defined in RFC7234",null,null],[12,"0","","",46,null],[3,"From","","`From` header, defined in RFC7231",null,null],[12,"0","","",47,null],[3,"Host","","The `Host` header.",null,null],[12,"hostname","","The hostname, such a example.domain.",48,null],[12,"port","","An optional port number.",48,null],[3,"IfModifiedSince","","`If-Modified-Since` header, defined in RFC7232",null,null],[12,"0","","",49,null],[3,"IfUnmodifiedSince","","`If-Unmodified-Since` header, defined in RFC7232",null,null],[12,"0","","",50,null],[3,"LastModified","","`Last-Modified` header, defined in RFC7232",null,null],[12,"0","","",51,null],[3,"Location","","`Location` header, defined in RFC7231",null,null],[12,"0","","",52,null],[3,"Origin","","The `Origin` header.",null,null],[12,"scheme","","The scheme, such as http or https",53,null],[12,"host","","The host, such as Host{hostname: \"hyper.rs\".to_owned(), port: None}",53,null],[3,"Prefer","","`Prefer` header, defined in RFC7240",null,null],[12,"0","","",54,null],[3,"PreferenceApplied","","`Preference-Applied` header, defined in RFC7240",null,null],[12,"0","","",55,null],[3,"Referer","","`Referer` header, defined in RFC7231",null,null],[12,"0","","",56,null],[3,"Server","","`Server` header, defined in RFC7231",null,null],[12,"0","","",57,null],[3,"SetCookie","","`Set-Cookie` header, defined RFC6265",null,null],[12,"0","","",58,null],[3,"StrictTransportSecurity","","`StrictTransportSecurity` header, defined in RFC6797",null,null],[12,"include_subdomains","","Signals the UA that the HSTS Policy applies to this HSTS Host as well as any subdomains of the host's domain name.",59,null],[12,"max_age","","Specifies the number of seconds, after the reception of the STS header field, during which the UA regards the host (from whom the message was received) as a Known HSTS Host.",59,null],[3,"TransferEncoding","","`Transfer-Encoding` header, defined in RFC7230",null,null],[12,"0","","",60,null],[3,"Upgrade","","`Upgrade` header, defined in RFC7230",null,null],[12,"0","","",61,null],[3,"Protocol","","Protocols that appear in the `Upgrade` header field",null,null],[12,"name","","The protocol identifier",62,null],[12,"version","","The optional version of the protocol, often in the format \"DIGIT.DIGIT\" (e.g.. \"1.2\")",62,null],[3,"UserAgent","","`User-Agent` header, defined in RFC7231",null,null],[12,"0","","",63,null],[3,"Link","","The `Link` header, defined in RFC5988",null,null],[3,"LinkValue","","A single `link-value` of a `Link` header, based on: RFC5988",null,null],[3,"Headers","","A map of header fields on requests and responses.",null,null],[3,"HeadersItems","","An `Iterator` over the fields in a `Headers` map.",null,null],[3,"HeaderView","","Returned with the `HeadersItems` iterator.",null,null],[3,"HeaderFormatter","","A wrapper around any Header with a Display impl that calls fmt_header.",null,null],[12,"0","","",64,null],[4,"Charset","","A Mime charset.",null,null],[13,"Us_Ascii","","US ASCII",65,null],[13,"Iso_8859_1","","ISO-8859-1",65,null],[13,"Iso_8859_2","","ISO-8859-2",65,null],[13,"Iso_8859_3","","ISO-8859-3",65,null],[13,"Iso_8859_4","","ISO-8859-4",65,null],[13,"Iso_8859_5","","ISO-8859-5",65,null],[13,"Iso_8859_6","","ISO-8859-6",65,null],[13,"Iso_8859_7","","ISO-8859-7",65,null],[13,"Iso_8859_8","","ISO-8859-8",65,null],[13,"Iso_8859_9","","ISO-8859-9",65,null],[13,"Iso_8859_10","","ISO-8859-10",65,null],[13,"Shift_Jis","","Shift_JIS",65,null],[13,"Euc_Jp","","EUC-JP",65,null],[13,"Iso_2022_Kr","","ISO-2022-KR",65,null],[13,"Euc_Kr","","EUC-KR",65,null],[13,"Iso_2022_Jp","","ISO-2022-JP",65,null],[13,"Iso_2022_Jp_2","","ISO-2022-JP-2",65,null],[13,"Iso_8859_6_E","","ISO-8859-6-E",65,null],[13,"Iso_8859_6_I","","ISO-8859-6-I",65,null],[13,"Iso_8859_8_E","","ISO-8859-8-E",65,null],[13,"Iso_8859_8_I","","ISO-8859-8-I",65,null],[13,"Gb2312","","GB2312",65,null],[13,"Big5","","Big5",65,null],[13,"Koi8_R","","KOI8-R",65,null],[13,"Ext","","An arbitrary charset specified as a string",65,null],[4,"Encoding","","A value to represent an encoding used in `Transfer-Encoding` or `Accept-Encoding` header.",null,null],[13,"Chunked","","The `chunked` encoding.",66,null],[13,"Gzip","","The `gzip` encoding.",66,null],[13,"Deflate","","The `deflate` encoding.",66,null],[13,"Compress","","The `compress` encoding.",66,null],[13,"Identity","","The `identity` encoding.",66,null],[13,"EncodingExt","","Some other encoding that is less common, can be any String.",66,null],[4,"AccessControlAllowOrigin","","The `Access-Control-Allow-Origin` response header, part of CORS",null,null],[13,"Any","","Allow all origins",67,null],[13,"Null","","A hidden origin",67,null],[13,"Value","","Allow one particular origin",67,null],[4,"RangeUnit","","Range Units, described in RFC7233",null,null],[13,"Bytes","","Indicating byte-range requests are supported.",68,null],[13,"None","","Reserved as keyword, indicating no ranges are supported.",68,null],[13,"Unregistered","","The given range unit is not registered at IANA.",68,null],[4,"CacheDirective","","`CacheControl` contains a list of these directives.",null,null],[13,"NoCache","","\"no-cache\"",69,null],[13,"NoStore","","\"no-store\"",69,null],[13,"NoTransform","","\"no-transform\"",69,null],[13,"OnlyIfCached","","\"only-if-cached\"",69,null],[13,"MaxAge","","\"max-age=delta\"",69,null],[13,"MaxStale","","\"max-stale=delta\"",69,null],[13,"MinFresh","","\"min-fresh=delta\"",69,null],[13,"MustRevalidate","","\"must-revalidate\"",69,null],[13,"Public","","\"public\"",69,null],[13,"Private","","\"private\"",69,null],[13,"ProxyRevalidate","","\"proxy-revalidate\"",69,null],[13,"SMaxAge","","\"s-maxage=delta\"",69,null],[13,"Extension","","Extension directives. Optionally include an argument.",69,null],[4,"ConnectionOption","","Values that can be in the `Connection` header.",null,null],[13,"KeepAlive","","The `keep-alive` connection value.",70,null],[13,"Close","","The `close` connection value.",70,null],[13,"ConnectionHeader","","Values in the Connection header that are supposed to be names of other Headers.",70,null],[4,"DispositionType","","The implied disposition of the content of the HTTP body",null,null],[13,"Inline","","Inline implies default processing",71,null],[13,"Attachment","","Attachment implies that the recipient should prompt the user to save the response locally, rather than process it normally (as per its media type).",71,null],[13,"Ext","","Extension type.  Should be handled by recipients the same way as Attachment",71,null],[4,"DispositionParam","","A parameter to the disposition type",null,null],[13,"Filename","","A Filename consisting of a Charset, an optional LanguageTag, and finally a sequence of bytes representing the filename",72,null],[13,"Ext","","Extension type consisting of token and value.  Recipients should ignore unrecognized parameters.",72,null],[4,"ContentRangeSpec","","Content-Range, described in RFC7233",null,null],[13,"Bytes","","Byte range",73,null],[12,"range","hyper::header::ContentRangeSpec","First and last bytes of the range, omitted if request could not be satisfied",73,null],[12,"instance_length","","Total length of the instance, can be omitted if unknown",73,null],[13,"Unregistered","hyper::header","Custom range, with unit not registered at IANA",73,null],[12,"unit","hyper::header::ContentRangeSpec","other-range-unit",73,null],[12,"resp","","other-range-resp",73,null],[4,"Expect","hyper::header","The `Expect` header.",null,null],[13,"Continue","","The value `100-continue`.",74,null],[4,"IfMatch","","`If-Match` header, defined in RFC7232",null,null],[13,"Any","","Any value is a match",75,null],[13,"Items","","Only the listed items are a match",75,null],[4,"IfNoneMatch","","`If-None-Match` header, defined in RFC7232",null,null],[13,"Any","","Any value is a match",76,null],[13,"Items","","Only the listed items are a match",76,null],[4,"IfRange","","`If-Range` header, defined in RFC7233",null,null],[13,"EntityTag","","The entity-tag the client has of the resource",77,null],[13,"Date","","The date when the client retrieved the resource",77,null],[4,"Pragma","","The `Pragma` header defined by HTTP/1.0.",null,null],[13,"NoCache","","Corresponds to the `no-cache` value.",78,null],[13,"Ext","","Every value other than `no-cache`.",78,null],[4,"Preference","","Prefer contains a list of these preferences.",null,null],[13,"RespondAsync","","\"respond-async\"",79,null],[13,"ReturnRepresentation","","\"return=representation\"",79,null],[13,"ReturnMinimal","","\"return=minimal\"",79,null],[13,"HandlingStrict","","\"handling=strict\"",79,null],[13,"HandlingLeniant","","\"handling=leniant\"",79,null],[13,"Wait","","\"wait=delta\"",79,null],[13,"Extension","","Extension preferences. Always has a value, if none is specified it is just \"\". A preference can also have a list of parameters.",79,null],[4,"Range","","`Range` header, defined in RFC7233",null,null],[13,"Bytes","","Byte range",80,null],[13,"Unregistered","","Custom range, with unit not registered at IANA (`other-range-unit`: String , `other-range-set`: String)",80,null],[4,"ByteRangeSpec","","Each `Range::Bytes` header can contain one or more `ByteRangeSpecs`. Each `ByteRangeSpec` defines a range of bytes to fetch",null,null],[13,"FromTo","","Get all bytes between x and y (\"x-y\")",81,null],[13,"AllFrom","","Get all bytes starting from x (\"x-\")",81,null],[13,"Last","","Get last x bytes (\"-x\")",81,null],[4,"ReferrerPolicy","","`Referrer-Policy` header, part of Referrer Policy",null,null],[13,"NoReferrer","","`no-referrer`",82,null],[13,"NoReferrerWhenDowngrade","","`no-referrer-when-downgrade`",82,null],[13,"SameOrigin","","`same-origin`",82,null],[13,"Origin","","`origin`",82,null],[13,"OriginWhenCrossOrigin","","`origin-when-cross-origin`",82,null],[13,"UnsafeUrl","","`unsafe-url`",82,null],[13,"StrictOrigin","","`strict-origin`",82,null],[13,"StrictOriginWhenCrossOrigin","","`strict-origin-when-cross-origin`",82,null],[4,"ProtocolName","","A protocol name used to identify a spefic protocol. Names are case-sensitive except for the `WebSocket` value.",null,null],[13,"Http","","`HTTP` value, Hypertext Transfer Protocol",83,null],[13,"Tls","","`TLS` value, Transport Layer Security RFC2817",83,null],[13,"WebSocket","","`WebSocket` value, matched case insensitively,Web Socket Protocol RFC6455",83,null],[13,"H2c","","`h2c` value, HTTP/2 over cleartext TCP",83,null],[13,"Unregistered","","Any other protocol name not known to hyper",83,null],[4,"Vary","","`Vary` header, defined in RFC7231",null,null],[13,"Any","","Any value is a match",84,null],[13,"Items","","Only the listed items are a match",84,null],[4,"RelationType","","A Link Relation Type Enum based on: RFC5988",null,null],[13,"Alternate","","alternate.",85,null],[13,"Appendix","","appendix.",85,null],[13,"Bookmark","","bookmark.",85,null],[13,"Chapter","","chapter.",85,null],[13,"Contents","","contents.",85,null],[13,"Copyright","","copyright.",85,null],[13,"Current","","current.",85,null],[13,"DescribedBy","","describedby.",85,null],[13,"Edit","","edit.",85,null],[13,"EditMedia","","edit-media.",85,null],[13,"Enclosure","","enclosure.",85,null],[13,"First","","first.",85,null],[13,"Glossary","","glossary.",85,null],[13,"Help","","help.",85,null],[13,"Hub","","hub.",85,null],[13,"Index","","index.",85,null],[13,"Last","","last.",85,null],[13,"LatestVersion","","latest-version.",85,null],[13,"License","","license.",85,null],[13,"Next","","next.",85,null],[13,"NextArchive","","next-archive.",85,null],[13,"Payment","","payment.",85,null],[13,"Prev","","prev.",85,null],[13,"PredecessorVersion","","predecessor-version.",85,null],[13,"Previous","","previous.",85,null],[13,"PrevArchive","","prev-archive.",85,null],[13,"Related","","related.",85,null],[13,"Replies","","replies.",85,null],[13,"Section","","section.",85,null],[13,"RelationTypeSelf","","self.",85,null],[13,"Service","","service.",85,null],[13,"Start","","start.",85,null],[13,"Stylesheet","","stylesheet.",85,null],[13,"Subsection","","subsection.",85,null],[13,"SuccessorVersion","","successor-version.",85,null],[13,"Up","","up.",85,null],[13,"VersionHistory","","versionHistory.",85,null],[13,"Via","","via.",85,null],[13,"WorkingCopy","","working-copy.",85,null],[13,"WorkingCopyOf","","working-copy-of.",85,null],[13,"ExtRelType","","ext-rel-type.",85,null],[4,"MediaDesc","","A Media Descriptors Enum based on: https://www.w3.org/TR/html401/types.html#h-6.13",null,null],[13,"Screen","","screen.",86,null],[13,"Tty","","tty.",86,null],[13,"Tv","","tv.",86,null],[13,"Projection","","projection.",86,null],[13,"Handheld","","handheld.",86,null],[13,"Print","","print.",86,null],[13,"Braille","","braille.",86,null],[13,"Aural","","aural.",86,null],[13,"All","","all.",86,null],[13,"Extension","","Unrecognized media descriptor extension.",86,null],[5,"qitem","","Convinience function to wrap a value in a `QualityItem` Sets `q` to the default 1.0",null,{"inputs":[{"name":"t"}],"output":{"name":"qualityitem"}}],[5,"q","","Convenience function to create a `Quality` from a float.",null,{"inputs":[{"name":"f32"}],"output":{"name":"quality"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"accept"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",20,{"inputs":[{"name":"self"},{"name":"accept"}],"output":{"name":"bool"}}],[11,"ne","","",20,{"inputs":[{"name":"self"},{"name":"accept"}],"output":{"name":"bool"}}],[11,"deref","","",20,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",20,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"header_name","","",20,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",20,null],[11,"fmt_header","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"star","","A constructor to easily create `Accept: */*`.",20,{"inputs":[],"output":{"name":"accept"}}],[11,"json","","A constructor to easily create `Accept: application/json`.",20,{"inputs":[],"output":{"name":"accept"}}],[11,"text","","A constructor to easily create `Accept: text/*`.",20,{"inputs":[],"output":{"name":"accept"}}],[11,"image","","A constructor to easily create `Accept: image/*`.",20,{"inputs":[],"output":{"name":"accept"}}],[11,"clone","","",87,{"inputs":[{"name":"self"}],"output":{"name":"accesscontrolallowcredentials"}}],[11,"eq","","",87,{"inputs":[{"name":"self"},{"name":"accesscontrolallowcredentials"}],"output":{"name":"bool"}}],[11,"fmt","","",87,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"header_name","","",87,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",87,null],[11,"fmt_header","","",87,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",87,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"accesscontrolallowheaders"}}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",21,{"inputs":[{"name":"self"},{"name":"accesscontrolallowheaders"}],"output":{"name":"bool"}}],[11,"ne","","",21,{"inputs":[{"name":"self"},{"name":"accesscontrolallowheaders"}],"output":{"name":"bool"}}],[11,"deref","","",21,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",21,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"header_name","","",21,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",21,null],[11,"fmt_header","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"accesscontrolallowmethods"}}],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",22,{"inputs":[{"name":"self"},{"name":"accesscontrolallowmethods"}],"output":{"name":"bool"}}],[11,"ne","","",22,{"inputs":[{"name":"self"},{"name":"accesscontrolallowmethods"}],"output":{"name":"bool"}}],[11,"deref","","",22,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",22,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"header_name","","",22,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",22,null],[11,"fmt_header","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",67,{"inputs":[{"name":"self"}],"output":{"name":"accesscontrolalloworigin"}}],[11,"eq","","",67,{"inputs":[{"name":"self"},{"name":"accesscontrolalloworigin"}],"output":{"name":"bool"}}],[11,"ne","","",67,{"inputs":[{"name":"self"},{"name":"accesscontrolalloworigin"}],"output":{"name":"bool"}}],[11,"fmt","","",67,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"header_name","","",67,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",67,null],[11,"fmt_header","","",67,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",67,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"accesscontrolexposeheaders"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",23,{"inputs":[{"name":"self"},{"name":"accesscontrolexposeheaders"}],"output":{"name":"bool"}}],[11,"ne","","",23,{"inputs":[{"name":"self"},{"name":"accesscontrolexposeheaders"}],"output":{"name":"bool"}}],[11,"deref","","",23,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",23,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"header_name","","",23,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",23,null],[11,"fmt_header","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"accesscontrolmaxage"}}],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",24,{"inputs":[{"name":"self"},{"name":"accesscontrolmaxage"}],"output":{"name":"bool"}}],[11,"ne","","",24,{"inputs":[{"name":"self"},{"name":"accesscontrolmaxage"}],"output":{"name":"bool"}}],[11,"deref","","",24,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"deref_mut","","",24,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"header_name","","",24,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",24,null],[11,"fmt_header","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",25,{"inputs":[{"name":"self"}],"output":{"name":"accesscontrolrequestheaders"}}],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",25,{"inputs":[{"name":"self"},{"name":"accesscontrolrequestheaders"}],"output":{"name":"bool"}}],[11,"ne","","",25,{"inputs":[{"name":"self"},{"name":"accesscontrolrequestheaders"}],"output":{"name":"bool"}}],[11,"deref","","",25,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",25,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"header_name","","",25,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",25,null],[11,"fmt_header","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",26,{"inputs":[{"name":"self"}],"output":{"name":"accesscontrolrequestmethod"}}],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",26,{"inputs":[{"name":"self"},{"name":"accesscontrolrequestmethod"}],"output":{"name":"bool"}}],[11,"ne","","",26,{"inputs":[{"name":"self"},{"name":"accesscontrolrequestmethod"}],"output":{"name":"bool"}}],[11,"deref","","",26,{"inputs":[{"name":"self"}],"output":{"name":"method"}}],[11,"deref_mut","","",26,{"inputs":[{"name":"self"}],"output":{"name":"method"}}],[11,"header_name","","",26,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",26,null],[11,"fmt_header","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",27,{"inputs":[{"name":"self"}],"output":{"name":"acceptcharset"}}],[11,"fmt","","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",27,{"inputs":[{"name":"self"},{"name":"acceptcharset"}],"output":{"name":"bool"}}],[11,"ne","","",27,{"inputs":[{"name":"self"},{"name":"acceptcharset"}],"output":{"name":"bool"}}],[11,"deref","","",27,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",27,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"header_name","","",27,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",27,null],[11,"fmt_header","","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",28,{"inputs":[{"name":"self"}],"output":{"name":"acceptencoding"}}],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",28,{"inputs":[{"name":"self"},{"name":"acceptencoding"}],"output":{"name":"bool"}}],[11,"ne","","",28,{"inputs":[{"name":"self"},{"name":"acceptencoding"}],"output":{"name":"bool"}}],[11,"deref","","",28,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",28,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"header_name","","",28,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",28,null],[11,"fmt_header","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",29,{"inputs":[{"name":"self"}],"output":{"name":"acceptlanguage"}}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",29,{"inputs":[{"name":"self"},{"name":"acceptlanguage"}],"output":{"name":"bool"}}],[11,"ne","","",29,{"inputs":[{"name":"self"},{"name":"acceptlanguage"}],"output":{"name":"bool"}}],[11,"deref","","",29,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",29,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"header_name","","",29,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",29,null],[11,"fmt_header","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",30,{"inputs":[{"name":"self"}],"output":{"name":"acceptranges"}}],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",30,{"inputs":[{"name":"self"},{"name":"acceptranges"}],"output":{"name":"bool"}}],[11,"ne","","",30,{"inputs":[{"name":"self"},{"name":"acceptranges"}],"output":{"name":"bool"}}],[11,"deref","","",30,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",30,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"header_name","","",30,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",30,null],[11,"fmt_header","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",68,{"inputs":[{"name":"self"}],"output":{"name":"rangeunit"}}],[11,"fmt","","",68,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",68,{"inputs":[{"name":"self"},{"name":"rangeunit"}],"output":{"name":"bool"}}],[11,"ne","","",68,{"inputs":[{"name":"self"},{"name":"rangeunit"}],"output":{"name":"bool"}}],[11,"from_str","","",68,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",68,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",31,{"inputs":[{"name":"self"}],"output":{"name":"allow"}}],[11,"fmt","","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",31,{"inputs":[{"name":"self"},{"name":"allow"}],"output":{"name":"bool"}}],[11,"ne","","",31,{"inputs":[{"name":"self"},{"name":"allow"}],"output":{"name":"bool"}}],[11,"deref","","",31,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",31,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"header_name","","",31,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",31,null],[11,"fmt_header","","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",32,{"inputs":[{"name":"self"}],"output":{"name":"authorization"}}],[11,"eq","","",32,{"inputs":[{"name":"self"},{"name":"authorization"}],"output":{"name":"bool"}}],[11,"ne","","",32,{"inputs":[{"name":"self"},{"name":"authorization"}],"output":{"name":"bool"}}],[11,"fmt","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",32,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"deref_mut","","",32,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"header_name","","",32,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",32,null],[11,"fmt_header","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",33,{"inputs":[{"name":"self"}],"output":{"name":"basic"}}],[11,"eq","","",33,{"inputs":[{"name":"self"},{"name":"basic"}],"output":{"name":"bool"}}],[11,"ne","","",33,{"inputs":[{"name":"self"},{"name":"basic"}],"output":{"name":"bool"}}],[11,"fmt","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"scheme","","",33,{"inputs":[],"output":{"name":"option"}}],[11,"fmt_scheme","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",33,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"clone","","",34,{"inputs":[{"name":"self"}],"output":{"name":"bearer"}}],[11,"eq","","",34,{"inputs":[{"name":"self"},{"name":"bearer"}],"output":{"name":"bool"}}],[11,"ne","","",34,{"inputs":[{"name":"self"},{"name":"bearer"}],"output":{"name":"bool"}}],[11,"fmt","","",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"scheme","","",34,{"inputs":[],"output":{"name":"option"}}],[11,"fmt_scheme","","",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",34,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"eq","","",35,{"inputs":[{"name":"self"},{"name":"cachecontrol"}],"output":{"name":"bool"}}],[11,"ne","","",35,{"inputs":[{"name":"self"},{"name":"cachecontrol"}],"output":{"name":"bool"}}],[11,"clone","","",35,{"inputs":[{"name":"self"}],"output":{"name":"cachecontrol"}}],[11,"fmt","","",35,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",35,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",35,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"header_name","","",35,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",35,null],[11,"fmt_header","","",35,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",35,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",69,{"inputs":[{"name":"self"},{"name":"cachedirective"}],"output":{"name":"bool"}}],[11,"ne","","",69,{"inputs":[{"name":"self"},{"name":"cachedirective"}],"output":{"name":"bool"}}],[11,"clone","","",69,{"inputs":[{"name":"self"}],"output":{"name":"cachedirective"}}],[11,"fmt","","",69,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",69,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",69,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"clone","","",43,{"inputs":[{"name":"self"}],"output":{"name":"cookie"}}],[11,"eq","","",43,{"inputs":[{"name":"self"},{"name":"cookie"}],"output":{"name":"bool"}}],[11,"ne","","",43,{"inputs":[{"name":"self"},{"name":"cookie"}],"output":{"name":"bool"}}],[11,"fmt","","",43,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",43,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",43,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"header_name","","",43,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",43,null],[11,"fmt_header","","",43,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",70,{"inputs":[{"name":"self"}],"output":{"name":"connectionoption"}}],[11,"eq","","",70,{"inputs":[{"name":"self"},{"name":"connectionoption"}],"output":{"name":"bool"}}],[11,"ne","","",70,{"inputs":[{"name":"self"},{"name":"connectionoption"}],"output":{"name":"bool"}}],[11,"fmt","","",70,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",70,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",70,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",36,{"inputs":[{"name":"self"}],"output":{"name":"connection"}}],[11,"fmt","","",36,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",36,{"inputs":[{"name":"self"},{"name":"connection"}],"output":{"name":"bool"}}],[11,"ne","","",36,{"inputs":[{"name":"self"},{"name":"connection"}],"output":{"name":"bool"}}],[11,"deref","","",36,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",36,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"header_name","","",36,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",36,null],[11,"fmt_header","","",36,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",36,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"close","","A constructor to easily create a `Connection: close` header.",36,{"inputs":[],"output":{"name":"connection"}}],[11,"keep_alive","","A constructor to easily create a `Connection: keep-alive` header.",36,{"inputs":[],"output":{"name":"connection"}}],[11,"clone","","",71,{"inputs":[{"name":"self"}],"output":{"name":"dispositiontype"}}],[11,"fmt","","",71,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",71,{"inputs":[{"name":"self"},{"name":"dispositiontype"}],"output":{"name":"bool"}}],[11,"ne","","",71,{"inputs":[{"name":"self"},{"name":"dispositiontype"}],"output":{"name":"bool"}}],[11,"clone","","",72,{"inputs":[{"name":"self"}],"output":{"name":"dispositionparam"}}],[11,"fmt","","",72,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",72,{"inputs":[{"name":"self"},{"name":"dispositionparam"}],"output":{"name":"bool"}}],[11,"ne","","",72,{"inputs":[{"name":"self"},{"name":"dispositionparam"}],"output":{"name":"bool"}}],[11,"clone","","",37,{"inputs":[{"name":"self"}],"output":{"name":"contentdisposition"}}],[11,"fmt","","",37,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",37,{"inputs":[{"name":"self"},{"name":"contentdisposition"}],"output":{"name":"bool"}}],[11,"ne","","",37,{"inputs":[{"name":"self"},{"name":"contentdisposition"}],"output":{"name":"bool"}}],[11,"header_name","","",37,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",37,null],[11,"fmt_header","","",37,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",37,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",39,{"inputs":[{"name":"self"}],"output":{"name":"contentencoding"}}],[11,"fmt","","",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",39,{"inputs":[{"name":"self"},{"name":"contentencoding"}],"output":{"name":"bool"}}],[11,"ne","","",39,{"inputs":[{"name":"self"},{"name":"contentencoding"}],"output":{"name":"bool"}}],[11,"deref","","",39,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",39,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"header_name","","",39,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",39,null],[11,"fmt_header","","",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",40,{"inputs":[{"name":"self"}],"output":{"name":"contentlanguage"}}],[11,"fmt","","",40,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",40,{"inputs":[{"name":"self"},{"name":"contentlanguage"}],"output":{"name":"bool"}}],[11,"ne","","",40,{"inputs":[{"name":"self"},{"name":"contentlanguage"}],"output":{"name":"bool"}}],[11,"deref","","",40,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",40,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"header_name","","",40,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",40,null],[11,"fmt_header","","",40,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",40,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",38,{"inputs":[{"name":"self"}],"output":{"name":"contentlength"}}],[11,"fmt","","",38,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",38,{"inputs":[{"name":"self"},{"name":"contentlength"}],"output":{"name":"bool"}}],[11,"ne","","",38,{"inputs":[{"name":"self"},{"name":"contentlength"}],"output":{"name":"bool"}}],[11,"header_name","","",38,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",38,null],[11,"fmt_header","","",38,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",38,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",38,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"deref_mut","","",38,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"clone","","",41,{"inputs":[{"name":"self"}],"output":{"name":"contentrange"}}],[11,"fmt","","",41,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",41,{"inputs":[{"name":"self"},{"name":"contentrange"}],"output":{"name":"bool"}}],[11,"ne","","",41,{"inputs":[{"name":"self"},{"name":"contentrange"}],"output":{"name":"bool"}}],[11,"deref","","",41,{"inputs":[{"name":"self"}],"output":{"name":"contentrangespec"}}],[11,"deref_mut","","",41,{"inputs":[{"name":"self"}],"output":{"name":"contentrangespec"}}],[11,"header_name","","",41,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",41,null],[11,"fmt_header","","",41,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",41,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",73,{"inputs":[{"name":"self"},{"name":"contentrangespec"}],"output":{"name":"bool"}}],[11,"ne","","",73,{"inputs":[{"name":"self"},{"name":"contentrangespec"}],"output":{"name":"bool"}}],[11,"clone","","",73,{"inputs":[{"name":"self"}],"output":{"name":"contentrangespec"}}],[11,"fmt","","",73,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",73,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",73,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",42,{"inputs":[{"name":"self"}],"output":{"name":"contenttype"}}],[11,"fmt","","",42,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",42,{"inputs":[{"name":"self"},{"name":"contenttype"}],"output":{"name":"bool"}}],[11,"ne","","",42,{"inputs":[{"name":"self"},{"name":"contenttype"}],"output":{"name":"bool"}}],[11,"deref","","",42,{"inputs":[{"name":"self"}],"output":{"name":"mime"}}],[11,"deref_mut","","",42,{"inputs":[{"name":"self"}],"output":{"name":"mime"}}],[11,"header_name","","",42,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",42,null],[11,"fmt_header","","",42,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",42,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"json","","A constructor  to easily create a `Content-Type: application/json` header.",42,{"inputs":[],"output":{"name":"contenttype"}}],[11,"plaintext","","A constructor  to easily create a `Content-Type: text/plain; charset=utf-8` header.",42,{"inputs":[],"output":{"name":"contenttype"}}],[11,"html","","A constructor  to easily create a `Content-Type: text/html; charset=utf-8` header.",42,{"inputs":[],"output":{"name":"contenttype"}}],[11,"form_url_encoded","","A constructor  to easily create a `Content-Type: application/www-form-url-encoded` header.",42,{"inputs":[],"output":{"name":"contenttype"}}],[11,"jpeg","","A constructor  to easily create a `Content-Type: image/jpeg` header.",42,{"inputs":[],"output":{"name":"contenttype"}}],[11,"png","","A constructor  to easily create a `Content-Type: image/png` header.",42,{"inputs":[],"output":{"name":"contenttype"}}],[11,"clone","","",44,{"inputs":[{"name":"self"}],"output":{"name":"date"}}],[11,"fmt","","",44,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",44,{"inputs":[{"name":"self"},{"name":"date"}],"output":{"name":"bool"}}],[11,"ne","","",44,{"inputs":[{"name":"self"},{"name":"date"}],"output":{"name":"bool"}}],[11,"deref","","",44,{"inputs":[{"name":"self"}],"output":{"name":"httpdate"}}],[11,"deref_mut","","",44,{"inputs":[{"name":"self"}],"output":{"name":"httpdate"}}],[11,"header_name","","",44,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",44,null],[11,"fmt_header","","",44,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",44,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",45,{"inputs":[{"name":"self"}],"output":{"name":"etag"}}],[11,"fmt","","",45,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",45,{"inputs":[{"name":"self"},{"name":"etag"}],"output":{"name":"bool"}}],[11,"ne","","",45,{"inputs":[{"name":"self"},{"name":"etag"}],"output":{"name":"bool"}}],[11,"deref","","",45,{"inputs":[{"name":"self"}],"output":{"name":"entitytag"}}],[11,"deref_mut","","",45,{"inputs":[{"name":"self"}],"output":{"name":"entitytag"}}],[11,"header_name","","",45,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",45,null],[11,"fmt_header","","",45,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",45,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",74,{"inputs":[{"name":"self"}],"output":{"name":"expect"}}],[11,"eq","","",74,{"inputs":[{"name":"self"},{"name":"expect"}],"output":{"name":"bool"}}],[11,"fmt","","",74,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"header_name","","",74,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",74,null],[11,"fmt_header","","",74,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",74,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",46,{"inputs":[{"name":"self"}],"output":{"name":"expires"}}],[11,"fmt","","",46,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",46,{"inputs":[{"name":"self"},{"name":"expires"}],"output":{"name":"bool"}}],[11,"ne","","",46,{"inputs":[{"name":"self"},{"name":"expires"}],"output":{"name":"bool"}}],[11,"deref","","",46,{"inputs":[{"name":"self"}],"output":{"name":"httpdate"}}],[11,"deref_mut","","",46,{"inputs":[{"name":"self"}],"output":{"name":"httpdate"}}],[11,"header_name","","",46,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",46,null],[11,"fmt_header","","",46,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",46,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",47,{"inputs":[{"name":"self"}],"output":{"name":"from"}}],[11,"fmt","","",47,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",47,{"inputs":[{"name":"self"},{"name":"from"}],"output":{"name":"bool"}}],[11,"ne","","",47,{"inputs":[{"name":"self"},{"name":"from"}],"output":{"name":"bool"}}],[11,"deref","","",47,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"deref_mut","","",47,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"header_name","","",47,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",47,null],[11,"fmt_header","","",47,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",47,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",48,{"inputs":[{"name":"self"}],"output":{"name":"host"}}],[11,"eq","","",48,{"inputs":[{"name":"self"},{"name":"host"}],"output":{"name":"bool"}}],[11,"ne","","",48,{"inputs":[{"name":"self"},{"name":"host"}],"output":{"name":"bool"}}],[11,"fmt","","",48,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"header_name","","",48,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",48,null],[11,"fmt_header","","",48,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",48,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",48,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"clone","","",75,{"inputs":[{"name":"self"}],"output":{"name":"ifmatch"}}],[11,"fmt","","",75,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",75,{"inputs":[{"name":"self"},{"name":"ifmatch"}],"output":{"name":"bool"}}],[11,"ne","","",75,{"inputs":[{"name":"self"},{"name":"ifmatch"}],"output":{"name":"bool"}}],[11,"header_name","","",75,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",75,null],[11,"fmt_header","","",75,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",75,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",49,{"inputs":[{"name":"self"}],"output":{"name":"ifmodifiedsince"}}],[11,"fmt","","",49,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",49,{"inputs":[{"name":"self"},{"name":"ifmodifiedsince"}],"output":{"name":"bool"}}],[11,"ne","","",49,{"inputs":[{"name":"self"},{"name":"ifmodifiedsince"}],"output":{"name":"bool"}}],[11,"deref","","",49,{"inputs":[{"name":"self"}],"output":{"name":"httpdate"}}],[11,"deref_mut","","",49,{"inputs":[{"name":"self"}],"output":{"name":"httpdate"}}],[11,"header_name","","",49,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",49,null],[11,"fmt_header","","",49,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",49,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",76,{"inputs":[{"name":"self"}],"output":{"name":"ifnonematch"}}],[11,"fmt","","",76,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",76,{"inputs":[{"name":"self"},{"name":"ifnonematch"}],"output":{"name":"bool"}}],[11,"ne","","",76,{"inputs":[{"name":"self"},{"name":"ifnonematch"}],"output":{"name":"bool"}}],[11,"header_name","","",76,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",76,null],[11,"fmt_header","","",76,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",76,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",77,{"inputs":[{"name":"self"}],"output":{"name":"ifrange"}}],[11,"fmt","","",77,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",77,{"inputs":[{"name":"self"},{"name":"ifrange"}],"output":{"name":"bool"}}],[11,"ne","","",77,{"inputs":[{"name":"self"},{"name":"ifrange"}],"output":{"name":"bool"}}],[11,"header_name","","",77,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",77,null],[11,"fmt_header","","",77,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",77,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",50,{"inputs":[{"name":"self"}],"output":{"name":"ifunmodifiedsince"}}],[11,"fmt","","",50,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",50,{"inputs":[{"name":"self"},{"name":"ifunmodifiedsince"}],"output":{"name":"bool"}}],[11,"ne","","",50,{"inputs":[{"name":"self"},{"name":"ifunmodifiedsince"}],"output":{"name":"bool"}}],[11,"deref","","",50,{"inputs":[{"name":"self"}],"output":{"name":"httpdate"}}],[11,"deref_mut","","",50,{"inputs":[{"name":"self"}],"output":{"name":"httpdate"}}],[11,"header_name","","",50,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",50,null],[11,"fmt_header","","",50,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",50,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",51,{"inputs":[{"name":"self"}],"output":{"name":"lastmodified"}}],[11,"fmt","","",51,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",51,{"inputs":[{"name":"self"},{"name":"lastmodified"}],"output":{"name":"bool"}}],[11,"ne","","",51,{"inputs":[{"name":"self"},{"name":"lastmodified"}],"output":{"name":"bool"}}],[11,"deref","","",51,{"inputs":[{"name":"self"}],"output":{"name":"httpdate"}}],[11,"deref_mut","","",51,{"inputs":[{"name":"self"}],"output":{"name":"httpdate"}}],[11,"header_name","","",51,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",51,null],[11,"fmt_header","","",51,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",51,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",52,{"inputs":[{"name":"self"}],"output":{"name":"location"}}],[11,"fmt","","",52,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",52,{"inputs":[{"name":"self"},{"name":"location"}],"output":{"name":"bool"}}],[11,"ne","","",52,{"inputs":[{"name":"self"},{"name":"location"}],"output":{"name":"bool"}}],[11,"deref","","",52,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"deref_mut","","",52,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"header_name","","",52,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",52,null],[11,"fmt_header","","",52,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",52,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",53,{"inputs":[{"name":"self"}],"output":{"name":"origin"}}],[11,"fmt","","",53,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new `Origin` header.",53,{"inputs":[{"name":"s"},{"name":"h"},{"name":"option"}],"output":{"name":"origin"}}],[11,"header_name","","",53,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",53,null],[11,"from_str","","",53,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt_header","","",53,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",53,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",53,{"inputs":[{"name":"self"},{"name":"origin"}],"output":{"name":"bool"}}],[11,"clone","","",78,{"inputs":[{"name":"self"}],"output":{"name":"pragma"}}],[11,"eq","","",78,{"inputs":[{"name":"self"},{"name":"pragma"}],"output":{"name":"bool"}}],[11,"ne","","",78,{"inputs":[{"name":"self"},{"name":"pragma"}],"output":{"name":"bool"}}],[11,"fmt","","",78,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"header_name","","",78,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",78,null],[11,"fmt_header","","",78,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",78,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",54,{"inputs":[{"name":"self"},{"name":"prefer"}],"output":{"name":"bool"}}],[11,"ne","","",54,{"inputs":[{"name":"self"},{"name":"prefer"}],"output":{"name":"bool"}}],[11,"clone","","",54,{"inputs":[{"name":"self"}],"output":{"name":"prefer"}}],[11,"fmt","","",54,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",54,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",54,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"header_name","","",54,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",54,null],[11,"fmt_header","","",54,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",54,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",79,{"inputs":[{"name":"self"},{"name":"preference"}],"output":{"name":"bool"}}],[11,"ne","","",79,{"inputs":[{"name":"self"},{"name":"preference"}],"output":{"name":"bool"}}],[11,"clone","","",79,{"inputs":[{"name":"self"}],"output":{"name":"preference"}}],[11,"fmt","","",79,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",79,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",79,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"eq","","",55,{"inputs":[{"name":"self"},{"name":"preferenceapplied"}],"output":{"name":"bool"}}],[11,"ne","","",55,{"inputs":[{"name":"self"},{"name":"preferenceapplied"}],"output":{"name":"bool"}}],[11,"clone","","",55,{"inputs":[{"name":"self"}],"output":{"name":"preferenceapplied"}}],[11,"fmt","","",55,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",55,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",55,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"header_name","","",55,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",55,null],[11,"fmt_header","","",55,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",55,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",80,{"inputs":[{"name":"self"},{"name":"range"}],"output":{"name":"bool"}}],[11,"ne","","",80,{"inputs":[{"name":"self"},{"name":"range"}],"output":{"name":"bool"}}],[11,"clone","","",80,{"inputs":[{"name":"self"}],"output":{"name":"range"}}],[11,"fmt","","",80,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",81,{"inputs":[{"name":"self"},{"name":"byterangespec"}],"output":{"name":"bool"}}],[11,"ne","","",81,{"inputs":[{"name":"self"},{"name":"byterangespec"}],"output":{"name":"bool"}}],[11,"clone","","",81,{"inputs":[{"name":"self"}],"output":{"name":"byterangespec"}}],[11,"fmt","","",81,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"bytes","","Get the most common byte range header (\"bytes=from-to\")",80,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"range"}}],[11,"bytes_multi","","Get byte range header with multiple subranges (\"bytes=from1-to1,from2-to2,fromX-toX\")",80,{"inputs":[{"name":"vec"}],"output":{"name":"range"}}],[11,"fmt","","",81,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",80,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",80,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",81,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"header_name","","",80,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",80,null],[11,"fmt_header","","",80,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",56,{"inputs":[{"name":"self"}],"output":{"name":"referer"}}],[11,"fmt","","",56,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",56,{"inputs":[{"name":"self"},{"name":"referer"}],"output":{"name":"bool"}}],[11,"ne","","",56,{"inputs":[{"name":"self"},{"name":"referer"}],"output":{"name":"bool"}}],[11,"deref","","",56,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"deref_mut","","",56,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"header_name","","",56,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",56,null],[11,"fmt_header","","",56,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",56,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",82,{"inputs":[{"name":"self"}],"output":{"name":"referrerpolicy"}}],[11,"eq","","",82,{"inputs":[{"name":"self"},{"name":"referrerpolicy"}],"output":{"name":"bool"}}],[11,"fmt","","",82,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"header_name","","",82,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",82,null],[11,"fmt_header","","",82,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",82,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",57,{"inputs":[{"name":"self"}],"output":{"name":"server"}}],[11,"fmt","","",57,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",57,{"inputs":[{"name":"self"},{"name":"server"}],"output":{"name":"bool"}}],[11,"ne","","",57,{"inputs":[{"name":"self"},{"name":"server"}],"output":{"name":"bool"}}],[11,"deref","","",57,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"deref_mut","","",57,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"header_name","","",57,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",57,null],[11,"fmt_header","","",57,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",57,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",58,{"inputs":[{"name":"self"}],"output":{"name":"setcookie"}}],[11,"eq","","",58,{"inputs":[{"name":"self"},{"name":"setcookie"}],"output":{"name":"bool"}}],[11,"ne","","",58,{"inputs":[{"name":"self"},{"name":"setcookie"}],"output":{"name":"bool"}}],[11,"fmt","","",58,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",58,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",58,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"header_name","","",58,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",58,null],[11,"fmt_header","","",58,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt_multi_header","","",58,{"inputs":[{"name":"self"},{"name":"multilineformatter"}],"output":{"name":"result"}}],[11,"clone","","",59,{"inputs":[{"name":"self"}],"output":{"name":"stricttransportsecurity"}}],[11,"eq","","",59,{"inputs":[{"name":"self"},{"name":"stricttransportsecurity"}],"output":{"name":"bool"}}],[11,"ne","","",59,{"inputs":[{"name":"self"},{"name":"stricttransportsecurity"}],"output":{"name":"bool"}}],[11,"fmt","","",59,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"including_subdomains","","Create an STS header that includes subdomains",59,{"inputs":[{"name":"u64"}],"output":{"name":"stricttransportsecurity"}}],[11,"excluding_subdomains","","Create an STS header that excludes subdomains",59,{"inputs":[{"name":"u64"}],"output":{"name":"stricttransportsecurity"}}],[11,"from_str","","",59,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"header_name","","",59,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",59,null],[11,"fmt_header","","",59,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",59,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",60,{"inputs":[{"name":"self"}],"output":{"name":"transferencoding"}}],[11,"fmt","","",60,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",60,{"inputs":[{"name":"self"},{"name":"transferencoding"}],"output":{"name":"bool"}}],[11,"ne","","",60,{"inputs":[{"name":"self"},{"name":"transferencoding"}],"output":{"name":"bool"}}],[11,"deref","","",60,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",60,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"header_name","","",60,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",60,null],[11,"fmt_header","","",60,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",60,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",61,{"inputs":[{"name":"self"}],"output":{"name":"upgrade"}}],[11,"fmt","","",61,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",61,{"inputs":[{"name":"self"},{"name":"upgrade"}],"output":{"name":"bool"}}],[11,"ne","","",61,{"inputs":[{"name":"self"},{"name":"upgrade"}],"output":{"name":"bool"}}],[11,"deref","","",61,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",61,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"header_name","","",61,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",61,null],[11,"fmt_header","","",61,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",61,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",83,{"inputs":[{"name":"self"}],"output":{"name":"protocolname"}}],[11,"fmt","","",83,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",83,{"inputs":[{"name":"self"},{"name":"protocolname"}],"output":{"name":"bool"}}],[11,"ne","","",83,{"inputs":[{"name":"self"},{"name":"protocolname"}],"output":{"name":"bool"}}],[11,"from_str","","",83,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",83,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",62,{"inputs":[{"name":"self"}],"output":{"name":"protocol"}}],[11,"fmt","","",62,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",62,{"inputs":[{"name":"self"},{"name":"protocol"}],"output":{"name":"bool"}}],[11,"ne","","",62,{"inputs":[{"name":"self"},{"name":"protocol"}],"output":{"name":"bool"}}],[11,"new","","Creates a new Protocol with the given name and version",62,{"inputs":[{"name":"protocolname"},{"name":"option"}],"output":{"name":"protocol"}}],[11,"from_str","","",62,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",62,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",63,{"inputs":[{"name":"self"}],"output":{"name":"useragent"}}],[11,"fmt","","",63,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",63,{"inputs":[{"name":"self"},{"name":"useragent"}],"output":{"name":"bool"}}],[11,"ne","","",63,{"inputs":[{"name":"self"},{"name":"useragent"}],"output":{"name":"bool"}}],[11,"deref","","",63,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"deref_mut","","",63,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"header_name","","",63,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",63,null],[11,"fmt_header","","",63,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",63,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",84,{"inputs":[{"name":"self"}],"output":{"name":"vary"}}],[11,"fmt","","",84,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",84,{"inputs":[{"name":"self"},{"name":"vary"}],"output":{"name":"bool"}}],[11,"ne","","",84,{"inputs":[{"name":"self"},{"name":"vary"}],"output":{"name":"bool"}}],[11,"header_name","","",84,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",84,null],[11,"fmt_header","","",84,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",84,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",88,{"inputs":[{"name":"self"}],"output":{"name":"link"}}],[11,"eq","","",88,{"inputs":[{"name":"self"},{"name":"link"}],"output":{"name":"bool"}}],[11,"ne","","",88,{"inputs":[{"name":"self"},{"name":"link"}],"output":{"name":"bool"}}],[11,"fmt","","",88,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",89,{"inputs":[{"name":"self"}],"output":{"name":"linkvalue"}}],[11,"eq","","",89,{"inputs":[{"name":"self"},{"name":"linkvalue"}],"output":{"name":"bool"}}],[11,"ne","","",89,{"inputs":[{"name":"self"},{"name":"linkvalue"}],"output":{"name":"bool"}}],[11,"fmt","","",89,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",86,{"inputs":[{"name":"self"}],"output":{"name":"mediadesc"}}],[11,"eq","","",86,{"inputs":[{"name":"self"},{"name":"mediadesc"}],"output":{"name":"bool"}}],[11,"ne","","",86,{"inputs":[{"name":"self"},{"name":"mediadesc"}],"output":{"name":"bool"}}],[11,"fmt","","",86,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",85,{"inputs":[{"name":"self"}],"output":{"name":"relationtype"}}],[11,"eq","","",85,{"inputs":[{"name":"self"},{"name":"relationtype"}],"output":{"name":"bool"}}],[11,"ne","","",85,{"inputs":[{"name":"self"},{"name":"relationtype"}],"output":{"name":"bool"}}],[11,"fmt","","",85,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create `Link` from a `Vec<LinkValue>`.",88,{"inputs":[{"name":"vec"}],"output":{"name":"link"}}],[11,"values","","Get the `Link` header's `LinkValue`s.",88,null],[11,"push_value","","Add a `LinkValue` instance to the `Link` header's values.",88,{"inputs":[{"name":"self"},{"name":"linkvalue"}],"output":null}],[11,"new","","Create `LinkValue` from URI-Reference.",89,{"inputs":[{"name":"t"}],"output":{"name":"linkvalue"}}],[11,"link","","Get the `LinkValue`'s value.",89,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"rel","","Get the `LinkValue`'s `rel` parameter(s).",89,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"anchor","","Get the `LinkValue`'s `anchor` parameter.",89,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"rev","","Get the `LinkValue`'s `rev` parameter(s).",89,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"href_lang","","Get the `LinkValue`'s `hreflang` parameter(s).",89,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"media_desc","","Get the `LinkValue`'s `media` parameter(s).",89,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"title","","Get the `LinkValue`'s `title` parameter.",89,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"title_star","","Get the `LinkValue`'s `title*` parameter.",89,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"media_type","","Get the `LinkValue`'s `type` parameter.",89,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"push_rel","","Add a `RelationType` to the `LinkValue`'s `rel` parameter.",89,{"inputs":[{"name":"self"},{"name":"relationtype"}],"output":{"name":"linkvalue"}}],[11,"set_anchor","","Set `LinkValue`'s `anchor` parameter.",89,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"linkvalue"}}],[11,"push_rev","","Add a `RelationType` to the `LinkValue`'s `rev` parameter.",89,{"inputs":[{"name":"self"},{"name":"relationtype"}],"output":{"name":"linkvalue"}}],[11,"push_href_lang","","Add a `LanguageTag` to the `LinkValue`'s `hreflang` parameter.",89,{"inputs":[{"name":"self"},{"name":"languagetag"}],"output":{"name":"linkvalue"}}],[11,"push_media_desc","","Add a `MediaDesc` to the `LinkValue`'s `media_desc` parameter.",89,{"inputs":[{"name":"self"},{"name":"mediadesc"}],"output":{"name":"linkvalue"}}],[11,"set_title","","Set `LinkValue`'s `title` parameter.",89,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"linkvalue"}}],[11,"set_title_star","","Set `LinkValue`'s `title*` parameter.",89,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"linkvalue"}}],[11,"set_media_type","","Set `LinkValue`'s `type` parameter.",89,{"inputs":[{"name":"self"},{"name":"mime"}],"output":{"name":"linkvalue"}}],[11,"header_name","","",88,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",88,null],[11,"fmt_header","","",88,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",88,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",89,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",88,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",86,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",86,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",85,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",85,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"clone","","",65,{"inputs":[{"name":"self"}],"output":{"name":"charset"}}],[11,"fmt","","",65,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",65,{"inputs":[{"name":"self"},{"name":"charset"}],"output":{"name":"bool"}}],[11,"ne","","",65,{"inputs":[{"name":"self"},{"name":"charset"}],"output":{"name":"bool"}}],[11,"fmt","","",65,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",65,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"clone","","",66,{"inputs":[{"name":"self"}],"output":{"name":"encoding"}}],[11,"eq","","",66,{"inputs":[{"name":"self"},{"name":"encoding"}],"output":{"name":"bool"}}],[11,"ne","","",66,{"inputs":[{"name":"self"},{"name":"encoding"}],"output":{"name":"bool"}}],[11,"fmt","","",66,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",66,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",66,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"entitytag"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",16,{"inputs":[{"name":"self"},{"name":"entitytag"}],"output":{"name":"bool"}}],[11,"ne","","",16,{"inputs":[{"name":"self"},{"name":"entitytag"}],"output":{"name":"bool"}}],[11,"new","","Constructs a new EntityTag. # Panics If the tag contains invalid characters.",16,{"inputs":[{"name":"bool"},{"name":"string"}],"output":{"name":"entitytag"}}],[11,"weak","","Constructs a new weak EntityTag. # Panics If the tag contains invalid characters.",16,{"inputs":[{"name":"string"}],"output":{"name":"entitytag"}}],[11,"strong","","Constructs a new strong EntityTag. # Panics If the tag contains invalid characters.",16,{"inputs":[{"name":"string"}],"output":{"name":"entitytag"}}],[11,"tag","","Get the tag.",16,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"set_tag","","Set the tag. # Panics If the tag contains invalid characters.",16,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"strong_eq","","For strong comparison two entity-tags are equivalent if both are not weak and their opaque-tags match character-by-character.",16,{"inputs":[{"name":"self"},{"name":"entitytag"}],"output":{"name":"bool"}}],[11,"weak_eq","","For weak comparison two entity-tags are equivalent if their opaque-tags match character-by-character, regardless of either or both being tagged as \"weak\".",16,{"inputs":[{"name":"self"},{"name":"entitytag"}],"output":{"name":"bool"}}],[11,"strong_ne","","The inverse of `EntityTag.strong_eq()`.",16,{"inputs":[{"name":"self"},{"name":"entitytag"}],"output":{"name":"bool"}}],[11,"weak_ne","","The inverse of `EntityTag.weak_eq()`.",16,{"inputs":[{"name":"self"},{"name":"entitytag"}],"output":{"name":"bool"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",16,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"httpdate"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",17,{"inputs":[{"name":"self"},{"name":"httpdate"}],"output":{"name":"bool"}}],[11,"ne","","",17,{"inputs":[{"name":"self"},{"name":"httpdate"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",17,{"inputs":[{"name":"self"},{"name":"httpdate"}],"output":{"name":"option"}}],[11,"lt","","",17,{"inputs":[{"name":"self"},{"name":"httpdate"}],"output":{"name":"bool"}}],[11,"le","","",17,{"inputs":[{"name":"self"},{"name":"httpdate"}],"output":{"name":"bool"}}],[11,"gt","","",17,{"inputs":[{"name":"self"},{"name":"httpdate"}],"output":{"name":"bool"}}],[11,"ge","","",17,{"inputs":[{"name":"self"},{"name":"httpdate"}],"output":{"name":"bool"}}],[11,"cmp","","",17,{"inputs":[{"name":"self"},{"name":"httpdate"}],"output":{"name":"ordering"}}],[11,"from_str","","",17,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"quality"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",18,{"inputs":[{"name":"self"},{"name":"quality"}],"output":{"name":"ordering"}}],[11,"eq","","",18,{"inputs":[{"name":"self"},{"name":"quality"}],"output":{"name":"bool"}}],[11,"ne","","",18,{"inputs":[{"name":"self"},{"name":"quality"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",18,{"inputs":[{"name":"self"},{"name":"quality"}],"output":{"name":"option"}}],[11,"lt","","",18,{"inputs":[{"name":"self"},{"name":"quality"}],"output":{"name":"bool"}}],[11,"le","","",18,{"inputs":[{"name":"self"},{"name":"quality"}],"output":{"name":"bool"}}],[11,"gt","","",18,{"inputs":[{"name":"self"},{"name":"quality"}],"output":{"name":"bool"}}],[11,"ge","","",18,{"inputs":[{"name":"self"},{"name":"quality"}],"output":{"name":"bool"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",18,{"inputs":[],"output":{"name":"quality"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"qualityitem"}}],[11,"eq","","",19,{"inputs":[{"name":"self"},{"name":"qualityitem"}],"output":{"name":"bool"}}],[11,"ne","","",19,{"inputs":[{"name":"self"},{"name":"qualityitem"}],"output":{"name":"bool"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new `QualityItem` from an item and a quality. The item can be of any type. The quality should be a value in the range [0, 1].",19,{"inputs":[{"name":"t"},{"name":"quality"}],"output":{"name":"qualityitem"}}],[11,"partial_cmp","","",19,{"inputs":[{"name":"self"},{"name":"qualityitem"}],"output":{"name":"option"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",19,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[0,"parsing","","Utility functions for Header implementations.",null,null],[3,"ExtendedValue","hyper::header::parsing","An extended header parameter value (i.e., tagged with a character set and optionally, a language), as defined in RFC 5987.",null,null],[12,"charset","","The character set that is used to encode the `value` to a string.",90,null],[12,"language_tag","","The human language details of the `value`, if available.",90,null],[12,"value","","The parameter value, as expressed in octets.",90,null],[3,"HTTP_VALUE","","This encode set is used for HTTP header values and is defined at https://tools.ietf.org/html/rfc5987#section-3.2",null,null],[5,"from_one_raw_str","","Reads a single raw string when parsing a header.",null,null],[5,"from_raw_str","","Reads a raw string into a value.",null,null],[5,"from_comma_delimited","","Reads a comma-delimited raw header into a Vec.",null,null],[5,"fmt_comma_delimited","","Format an array into a comma-delimited string.",null,null],[5,"parse_extended_value","","Parses extended header parameter values (`ext-value`), as defined in RFC 5987.",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"clone","","",90,{"inputs":[{"name":"self"}],"output":{"name":"extendedvalue"}}],[11,"fmt","","",90,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",90,{"inputs":[{"name":"self"},{"name":"extendedvalue"}],"output":{"name":"bool"}}],[11,"ne","","",90,{"inputs":[{"name":"self"},{"name":"extendedvalue"}],"output":{"name":"bool"}}],[11,"clone","","",91,{"inputs":[{"name":"self"}],"output":{"name":"http_value"}}],[11,"contains","","",91,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bool"}}],[11,"fmt","","",90,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"Scheme","hyper::header","An Authorization scheme to be used in the header.",null,null],[10,"scheme","","An optional Scheme name.",92,{"inputs":[],"output":{"name":"option"}}],[10,"fmt_scheme","","Format the Scheme data into a header value.",92,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"Header","","A trait for any object that will represent a header field and value.",null,null],[10,"header_name","","Returns the name of the header field this belongs to.",93,{"inputs":[],"output":{"name":"str"}}],[10,"parse_header","","Parse a header from a raw stream of bytes.",93,null],[8,"HeaderFormat","","A trait for any object that will represent a header field and value.",null,null],[10,"fmt_header","","Format a header to be output into a TcpStream.",94,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"HeaderClone","","Internal implementation detail.",null,null],[11,"clone","","",95,{"inputs":[{"name":"self"}],"output":{"name":"headers"}}],[11,"new","","Creates a new, empty headers map.",95,{"inputs":[],"output":{"name":"headers"}}],[11,"set","","Set a header field to the corresponding value.",95,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"get_raw","","Access the raw value of a header.",95,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"set_raw","","Set the raw value of a header, bypassing any typed headers.",95,{"inputs":[{"name":"self"},{"name":"k"},{"name":"vec"}],"output":null}],[11,"append_raw","","Append a value to raw value of this header.",95,{"inputs":[{"name":"self"},{"name":"k"},{"name":"vec"}],"output":null}],[11,"remove_raw","","Remove a header set by set_raw",95,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[11,"get","","Get a reference to the header field's value, if it exists.",95,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"get_mut","","Get a mutable reference to the header field's value, if it exists.",95,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"has","","Returns a boolean of whether a certain header is in the map.",95,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"remove","","Removes a header from the map, if one existed. Returns true if a header has been removed.",95,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"iter","","Returns an iterator over the header fields.",95,{"inputs":[{"name":"self"}],"output":{"name":"headersitems"}}],[11,"len","","Returns the number of headers in the map.",95,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clear","","Remove all headers from the map.",95,{"inputs":[{"name":"self"}],"output":null}],[11,"eq","","",95,{"inputs":[{"name":"self"},{"name":"headers"}],"output":{"name":"bool"}}],[11,"fmt","","",95,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",95,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",96,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is","","Check if a HeaderView is a certain Header.",97,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"name","","Get the Header name as a slice.",97,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"value","","Cast the value to a certain Header type.",97,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"value_string","","Get just the header value as a String.",97,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"fmt","","",97,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",97,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"extend","","",95,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"from_iter","","",95,{"inputs":[{"name":"i"}],"output":{"name":"headers"}}],[11,"fmt","","",64,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",64,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"http","hyper","Pieces pertaining to the HTTP message protocol.",null,null],[3,"RawStatus","hyper::http","The raw status code and reason-phrase.",null,null],[12,"0","","",98,null],[12,"1","","",98,null],[5,"should_keep_alive","","Checks if a connection should be kept alive.",null,{"inputs":[{"name":"httpversion"},{"name":"headers"}],"output":{"name":"bool"}}],[0,"h1","","Adapts the HTTP/1.1 implementation into the `HttpMessage` API.",null,null],[3,"Http11Message","hyper::http::h1","An implementation of the `HttpMessage` trait for HTTP/1.1.",null,null],[3,"Http11Protocol","","The `Protocol` implementation provides HTTP/1.1 messages.",null,null],[3,"EndError","","",null,null],[3,"Incoming","","An Incoming Message head. Includes request/status line, and headers.",null,null],[12,"version","","HTTP version of the message.",99,null],[12,"subject","","Subject (request line or status line) of Incoming message.",99,null],[12,"headers","","Headers of the Incoming message.",99,null],[4,"HttpReader","","Readers to handle different Transfer-Encodings.",null,null],[13,"SizedReader","","A Reader used when a Content-Length header is passed with a positive integer.",100,null],[13,"ChunkedReader","","A Reader used when Transfer-Encoding is `chunked`.",100,null],[13,"EofReader","","A Reader used for responses that don't indicate a length or chunked.",100,null],[13,"EmptyReader","","A Reader used for messages that should never have a body.",100,null],[4,"HttpWriter","","Writers to handle different Transfer-Encodings.",null,null],[13,"ThroughWriter","","A no-op Writer, used initially before Transfer-Encoding is determined.",101,null],[13,"ChunkedWriter","","A Writer for when Transfer-Encoding includes `chunked`.",101,null],[13,"SizedWriter","","A Writer for when Content-Length is set.",101,null],[13,"EmptyWriter","","A writer that should not write any body.",101,null],[5,"parse_request","","Parses a request into an Incoming message head.",null,{"inputs":[{"name":"bufreader"}],"output":{"name":"result"}}],[5,"parse_response","","Parses a response into an Incoming message head.",null,{"inputs":[{"name":"bufreader"}],"output":{"name":"result"}}],[17,"CR","","The `\\r` byte.",null,null],[17,"LF","","The `\\n` byte.",null,null],[17,"LINE_ENDING","","The bytes `\\r\\n`.",null,null],[11,"fmt","","",102,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"write","","",102,null],[11,"flush","","",102,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read","","",102,null],[11,"set_outgoing","","",102,{"inputs":[{"name":"self"},{"name":"requesthead"}],"output":{"name":"result"}}],[11,"get_incoming","","",102,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"has_body","","",102,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_read_timeout","","",102,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"set_write_timeout","","",102,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"close_connection","","",102,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"set_proxied","","",102,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"into_inner","","Consumes the `Http11Message` and returns the underlying `NetworkStream`.",102,{"inputs":[{"name":"self"}],"output":{"name":"box"}}],[11,"get_ref","","Gets a borrowed reference to the underlying `NetworkStream`, regardless of the state of the `Http11Message`.",102,{"inputs":[{"name":"self"}],"output":{"name":"networkstream"}}],[11,"get_mut","","Gets a mutable reference to the underlying `NetworkStream`, regardless of the state of the `Http11Message`.",102,{"inputs":[{"name":"self"}],"output":{"name":"networkstream"}}],[11,"with_stream","","Creates a new `Http11Message` that will use the given `NetworkStream` for communicating to the peer.",102,{"inputs":[{"name":"box"}],"output":{"name":"http11message"}}],[11,"flush_outgoing","","Flushes the current outgoing content and moves the stream into the `stream` property.",102,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"new_message","","",103,{"inputs":[{"name":"self"},{"name":"str"},{"name":"u16"},{"name":"str"}],"output":{"name":"result"}}],[11,"with_connector","","Creates a new `Http11Protocol` instance that will use the given `NetworkConnector` for establishing HTTP connections.",103,{"inputs":[{"name":"c"}],"output":{"name":"http11protocol"}}],[11,"into_inner","","Unwraps this HttpReader and returns the underlying Reader.",100,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"get_ref","","Gets a borrowed reference to the underlying Reader.",100,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"get_mut","","Gets a mutable reference to the underlying Reader.",100,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"fmt","","",100,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"read","","",100,null],[11,"into_inner","","Unwraps the HttpWriter and returns the underlying Writer.",101,{"inputs":[{"name":"self"}],"output":{"name":"w"}}],[11,"get_ref","","Access the inner Writer.",101,{"inputs":[{"name":"self"}],"output":{"name":"w"}}],[11,"get_mut","","Access the inner Writer mutably.",101,{"inputs":[{"name":"self"}],"output":{"name":"w"}}],[11,"end","","Ends the HttpWriter, and returns the underlying Writer.",101,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","","",104,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"write","","",101,null],[11,"flush","","",101,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","","",101,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",99,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"message","hyper::http","Defines the `HttpMessage` trait that serves to encapsulate the operations of a single request-response cycle on any HTTP connection.",null,null],[3,"RequestHead","hyper::http::message","Describes a request.",null,null],[12,"headers","","The headers of the request",105,null],[12,"method","","The method of the request",105,null],[12,"url","","The URL of the request",105,null],[3,"ResponseHead","","Describes a response.",null,null],[12,"headers","","The headers of the reponse",106,null],[12,"raw_status","","The raw status line of the response",106,null],[12,"version","","The HTTP/2 version which generated the response",106,null],[8,"Protocol","","The trait provides an API for creating new `HttpMessage`s depending on the underlying HTTP protocol.",null,null],[10,"new_message","","Creates a fresh `HttpMessage` bound to the given host, based on the given protocol scheme.",107,{"inputs":[{"name":"self"},{"name":"str"},{"name":"u16"},{"name":"str"}],"output":{"name":"result"}}],[8,"HttpMessage","","The trait provides an API for sending an receiving HTTP messages.",null,null],[10,"set_outgoing","","Initiates a new outgoing request.",108,{"inputs":[{"name":"self"},{"name":"requesthead"}],"output":{"name":"result"}}],[10,"get_incoming","","Obtains the incoming response and returns its head (i.e. the `ResponseHead` struct)",108,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"set_read_timeout","","Set the read timeout duration for this message.",108,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[10,"set_write_timeout","","Set the write timeout duration for this message.",108,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[10,"close_connection","","Closes the underlying HTTP connection.",108,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"has_body","","Returns whether the incoming message has a body.",108,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_proxied","","Called when the Client wishes to use a Proxy.",108,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"clone","","",105,{"inputs":[{"name":"self"}],"output":{"name":"requesthead"}}],[11,"fmt","","",105,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",106,{"inputs":[{"name":"self"}],"output":{"name":"responsehead"}}],[11,"fmt","","",106,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"is","","Is the underlying type in this trait object a T?",108,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"downcast_ref","","If the underlying type is T, get a reference to the contained data.",108,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"downcast_mut","","If the underlying type is T, get a mutable reference to the contained data.",108,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"downcast","","If the underlying type is T, extract it.",108,{"inputs":[{"name":"box"}],"output":{"name":"result"}}],[11,"clone","hyper::http","",98,{"inputs":[{"name":"self"}],"output":{"name":"rawstatus"}}],[11,"eq","","",98,{"inputs":[{"name":"self"},{"name":"rawstatus"}],"output":{"name":"bool"}}],[11,"ne","","",98,{"inputs":[{"name":"self"},{"name":"rawstatus"}],"output":{"name":"bool"}}],[11,"fmt","","",98,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"net","hyper","A collection of traits abstracting over Listeners and Streams.",null,null],[3,"NetworkConnections","hyper::net","An iterator wrapper over a `NetworkAcceptor`.",null,null],[3,"HttpListener","","A `NetworkListener` for `HttpStream`s.",null,null],[3,"HttpStream","","A wrapper around a `TcpStream`.",null,null],[12,"0","","",109,null],[3,"HttpConnector","","A connector that will produce HttpStreams.",null,null],[3,"HttpsListener","","A Http Listener over SSL.",null,null],[3,"HttpsConnector","","A connector that can protect HTTP streams using SSL.",null,null],[4,"Fresh","","The write-status indicating headers have not been written.",null,null],[4,"Streaming","","The write-status indicating headers have been written.",null,null],[4,"HttpsStream","","A stream over the HTTP protocol, possibly protected by SSL.",null,null],[13,"Http","","A plain text stream.",110,null],[13,"Https","","A stream protected by SSL.",110,null],[8,"NetworkListener","","An abstraction to listen for connections on a certain port.",null,null],[16,"Stream","","The stream produced for each connection.",111,null],[10,"accept","","Returns an iterator of streams.",111,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"local_addr","","Get the address this Listener ended up listening on.",111,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"incoming","","Returns an iterator over incoming connections.",111,{"inputs":[{"name":"self"}],"output":{"name":"networkconnections"}}],[11,"set_read_timeout","","Sets the read timeout for all streams that are accepted",111,{"inputs":[{"name":"self"},{"name":"option"}],"output":null}],[11,"set_write_timeout","","Sets the write timeout for all streams that are accepted",111,{"inputs":[{"name":"self"},{"name":"option"}],"output":null}],[8,"NetworkStream","","An abstraction over streams that a `Server` can utilize.",null,null],[10,"peer_addr","","Get the remote address of the underlying connection.",112,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"set_read_timeout","","Set the maximum time to wait for a read to complete.",112,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[10,"set_write_timeout","","Set the maximum time to wait for a write to complete.",112,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"close","","This will be called when Stream should no longer be kept alive.",112,{"inputs":[{"name":"self"},{"name":"shutdown"}],"output":{"name":"result"}}],[8,"NetworkConnector","","A connector creates a NetworkStream.",null,null],[16,"Stream","","Type of `Stream` to create",113,null],[10,"connect","","Connect to a remote address.",113,{"inputs":[{"name":"self"},{"name":"str"},{"name":"u16"},{"name":"str"}],"output":{"name":"result"}}],[8,"SslClient","","An abstraction to allow any SSL implementation to be used with client-side HttpsStreams.",null,null],[16,"Stream","","The protected stream.",114,null],[10,"wrap_client","","Wrap a client stream with SSL.",114,{"inputs":[{"name":"self"},{"name":"t"},{"name":"str"}],"output":{"name":"result"}}],[8,"SslServer","","An abstraction to allow any SSL implementation to be used with server-side HttpsStreams.",null,null],[16,"Stream","","The protected stream.",115,null],[10,"wrap_server","","Wrap a server stream with SSL.",115,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"next","","",116,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is","","Is the underlying type in this trait object a `T`?",112,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"downcast_ref","","If the underlying type is `T`, get a reference to the contained data.",112,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"downcast_mut","","If the underlying type is `T`, get a mutable reference to the contained data.",112,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"downcast","","If the underlying type is `T`, extract it.",112,{"inputs":[{"name":"box"}],"output":{"name":"result"}}],[11,"is","","Is the underlying type in this trait object a `T`?",112,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"downcast_ref","","If the underlying type is `T`, get a reference to the contained data.",112,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"downcast_mut","","If the underlying type is `T`, get a mutable reference to the contained data.",112,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"downcast","","If the underlying type is `T`, extract it.",112,{"inputs":[{"name":"box"}],"output":{"name":"result"}}],[11,"clone","","",117,{"inputs":[{"name":"self"}],"output":{"name":"httplistener"}}],[11,"from","","",117,{"inputs":[{"name":"tcplistener"}],"output":{"name":"httplistener"}}],[11,"new","","Start listening to an address over HTTP.",117,{"inputs":[{"name":"to"}],"output":{"name":"result"}}],[11,"accept","","",117,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"local_addr","","",117,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"set_read_timeout","","",117,{"inputs":[{"name":"self"},{"name":"option"}],"output":null}],[11,"set_write_timeout","","",117,{"inputs":[{"name":"self"},{"name":"option"}],"output":null}],[11,"as_raw_fd","","",117,{"inputs":[{"name":"self"}],"output":{"name":"rawfd"}}],[11,"from_raw_fd","","",117,{"inputs":[{"name":"rawfd"}],"output":{"name":"httplistener"}}],[11,"clone","","",109,{"inputs":[{"name":"self"}],"output":{"name":"httpstream"}}],[11,"fmt","","",109,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"read","","",109,null],[11,"write","","",109,null],[11,"flush","","",109,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"as_raw_fd","","",109,{"inputs":[{"name":"self"}],"output":{"name":"rawfd"}}],[11,"from_raw_fd","","",109,{"inputs":[{"name":"rawfd"}],"output":{"name":"httpstream"}}],[11,"peer_addr","","",109,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"set_read_timeout","","",109,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"set_write_timeout","","",109,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"close","","",109,{"inputs":[{"name":"self"},{"name":"shutdown"}],"output":{"name":"result"}}],[11,"fmt","","",118,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",118,{"inputs":[{"name":"self"}],"output":{"name":"httpconnector"}}],[11,"default","","",118,{"inputs":[],"output":{"name":"httpconnector"}}],[11,"connect","","",118,{"inputs":[{"name":"self"},{"name":"str"},{"name":"u16"},{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",110,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",110,{"inputs":[{"name":"self"}],"output":{"name":"httpsstream"}}],[11,"read","","",110,null],[11,"write","","",110,null],[11,"flush","","",110,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"peer_addr","","",110,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"set_read_timeout","","",110,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"set_write_timeout","","",110,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"close","","",110,{"inputs":[{"name":"self"},{"name":"shutdown"}],"output":{"name":"result"}}],[11,"clone","","",119,{"inputs":[{"name":"self"}],"output":{"name":"httpslistener"}}],[11,"new","","Start listening to an address over HTTPS.",119,{"inputs":[{"name":"to"},{"name":"s"}],"output":{"name":"result"}}],[11,"with_listener","","Construct an HttpsListener from a bound `TcpListener`.",119,{"inputs":[{"name":"httplistener"},{"name":"s"}],"output":{"name":"httpslistener"}}],[11,"accept","","",119,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"local_addr","","",119,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"set_read_timeout","","",119,{"inputs":[{"name":"self"},{"name":"option"}],"output":null}],[11,"set_write_timeout","","",119,{"inputs":[{"name":"self"},{"name":"option"}],"output":null}],[11,"fmt","","",120,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",120,{"inputs":[],"output":{"name":"httpsconnector"}}],[11,"new","","Create a new connector using the provided SSL implementation.",120,{"inputs":[{"name":"s"}],"output":{"name":"httpsconnector"}}],[11,"with_connector","","Create a new connector using the provided SSL implementation.",120,{"inputs":[{"name":"s"},{"name":"c"}],"output":{"name":"httpsconnector"}}],[11,"connect","","",120,{"inputs":[{"name":"self"},{"name":"str"},{"name":"u16"},{"name":"str"}],"output":{"name":"result"}}],[0,"server","hyper","HTTP Server",null,null],[3,"Server","hyper::server","A server can listen on a TCP socket.",null,null],[3,"Listening","","A listening server, which can later be closed.",null,null],[12,"socket","","The socket addresses that the server is bound to.",121,null],[0,"request","","Server Requests",null,null],[3,"Request","hyper::server::request","A request bundles several parts of an incoming `NetworkStream`, given to a `Handler`.",null,null],[12,"remote_addr","","The IP address of the remote connection.",122,null],[12,"method","","The `Method`, such as `Get`, `Post`, etc.",122,null],[12,"headers","","The headers of the incoming request.",122,null],[12,"uri","","The target request-uri for this request.",122,null],[12,"version","","The version of HTTP for this request.",122,null],[11,"new","","Create a new Request, reading the StartLine and Headers so they are immediately useful.",122,{"inputs":[{"name":"bufreader"},{"name":"socketaddr"}],"output":{"name":"result"}}],[11,"set_read_timeout","","Set the read timeout of the underlying NetworkStream.",122,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"downcast_ref","","Get a reference to the underlying `NetworkStream`.",122,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"ssl","","Get a reference to the underlying Ssl stream, if connected over HTTPS.",122,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"deconstruct","","Deconstruct a Request into its constituent parts.",122,null],[11,"read","","",122,null],[0,"response","hyper::server","Server Responses",null,null],[3,"Response","hyper::server::response","The outgoing half for a Tcp connection, created by a `Server` and given to a `Handler`.",null,null],[12,"version","","The HTTP version of this response.",123,null],[11,"fmt","","",123,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"status","","The status of this response.",123,{"inputs":[{"name":"self"}],"output":{"name":"statuscode"}}],[11,"headers","","The headers of this response.",123,{"inputs":[{"name":"self"}],"output":{"name":"headers"}}],[11,"construct","","Construct a Response from its constituent parts.",123,{"inputs":[{"name":"httpversion"},{"name":"httpwriter"},{"name":"statuscode"},{"name":"headers"}],"output":{"name":"response"}}],[11,"deconstruct","","Deconstruct this Response into its constituent parts.",123,null],[11,"new","","Creates a new Response that can be used to write to a network stream.",123,{"inputs":[{"name":"write"},{"name":"headers"}],"output":{"name":"response"}}],[11,"send","","Writes the body and ends the response.",123,null],[11,"start","","Consume this Response, writing the Headers and Status and creating a Response",123,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"status_mut","","Get a mutable reference to the status.",123,{"inputs":[{"name":"self"}],"output":{"name":"statuscode"}}],[11,"headers_mut","","Get a mutable reference to the Headers.",123,{"inputs":[{"name":"self"}],"output":{"name":"headers"}}],[11,"end","","Flushes all writing of a response to the client.",123,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"write","","",123,null],[11,"flush","","",123,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"drop","","",123,{"inputs":[{"name":"self"}],"output":null}],[8,"Handler","hyper::server","A handler that can handle incoming requests for a server.",null,null],[10,"handle","","Receives a `Request`/`Response` pair, and should perform some action on them.",124,{"inputs":[{"name":"self"},{"name":"request"},{"name":"response"}],"output":null}],[11,"check_continue","","Called when a Request includes a `Expect: 100-continue` header.",124,null],[11,"on_connection_start","","This is run after a connection is received, on a per-connection basis (not a per-request basis, as a connection with keep-alive may handle multiple requests)",124,{"inputs":[{"name":"self"}],"output":null}],[11,"on_connection_end","","This is run before a connection is closed, on a per-connection basis (not a per-request basis, as a connection with keep-alive may handle multiple requests)",124,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",125,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new server with the provided handler.",125,{"inputs":[{"name":"l"}],"output":{"name":"server"}}],[11,"keep_alive","","Controls keep-alive for this server.",125,{"inputs":[{"name":"self"},{"name":"option"}],"output":null}],[11,"set_read_timeout","","Sets the read timeout for all Request reads.",125,{"inputs":[{"name":"self"},{"name":"option"}],"output":null}],[11,"set_write_timeout","","Sets the write timeout for all Response writes.",125,{"inputs":[{"name":"self"},{"name":"option"}],"output":null}],[11,"local_addr","","Get the address that the server is listening on.",125,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"http","","Creates a new server that will handle `HttpStream`s.",125,{"inputs":[{"name":"to"}],"output":{"name":"result"}}],[11,"https","","Creates a new server that will handle `HttpStream`s over SSL.",125,{"inputs":[{"name":"a"},{"name":"s"}],"output":{"name":"result"}}],[11,"handle","","Binds to a socket and starts handling connections.",125,{"inputs":[{"name":"self"},{"name":"h"}],"output":{"name":"result"}}],[11,"handle_threads","","Binds to a socket and starts handling connections with the provided number of threads.",125,{"inputs":[{"name":"self"},{"name":"h"},{"name":"usize"}],"output":{"name":"result"}}],[11,"fmt","","",121,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drop","","",121,{"inputs":[{"name":"self"}],"output":null}],[11,"close","","Warning: This function doesn't work. The server remains listening after you called it. See https://github.com/hyperium/hyper/issues/338 for more details.",121,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[0,"status","hyper","HTTP status codes",null,null],[4,"StatusCode","hyper::status","An HTTP status code (`status-code` in RFC 7230 et al.).",null,null],[13,"Continue","","100 Continue [RFC7231, Section 6.2.1]",126,null],[13,"SwitchingProtocols","","101 Switching Protocols [RFC7231, Section 6.2.2]",126,null],[13,"Processing","","102 Processing [RFC2518]",126,null],[13,"Ok","","200 OK [RFC7231, Section 6.3.1]",126,null],[13,"Created","","201 Created [RFC7231, Section 6.3.2]",126,null],[13,"Accepted","","202 Accepted [RFC7231, Section 6.3.3]",126,null],[13,"NonAuthoritativeInformation","","203 Non-Authoritative Information [RFC7231, Section 6.3.4]",126,null],[13,"NoContent","","204 No Content [RFC7231, Section 6.3.5]",126,null],[13,"ResetContent","","205 Reset Content [RFC7231, Section 6.3.6]",126,null],[13,"PartialContent","","206 Partial Content [RFC7233, Section 4.1]",126,null],[13,"MultiStatus","","207 Multi-Status [RFC4918]",126,null],[13,"AlreadyReported","","208 Already Reported [RFC5842]",126,null],[13,"ImUsed","","226 IM Used [RFC3229]",126,null],[13,"MultipleChoices","","300 Multiple Choices [RFC7231, Section 6.4.1]",126,null],[13,"MovedPermanently","","301 Moved Permanently [RFC7231, Section 6.4.2]",126,null],[13,"Found","","302 Found [RFC7231, Section 6.4.3]",126,null],[13,"SeeOther","","303 See Other [RFC7231, Section 6.4.4]",126,null],[13,"NotModified","","304 Not Modified [RFC7232, Section 4.1]",126,null],[13,"UseProxy","","305 Use Proxy [RFC7231, Section 6.4.5]",126,null],[13,"TemporaryRedirect","","307 Temporary Redirect [RFC7231, Section 6.4.7]",126,null],[13,"PermanentRedirect","","308 Permanent Redirect [RFC7238]",126,null],[13,"BadRequest","","400 Bad Request [RFC7231, Section 6.5.1]",126,null],[13,"Unauthorized","","401 Unauthorized [RFC7235, Section 3.1]",126,null],[13,"PaymentRequired","","402 Payment Required [RFC7231, Section 6.5.2]",126,null],[13,"Forbidden","","403 Forbidden [RFC7231, Section 6.5.3]",126,null],[13,"NotFound","","404 Not Found [RFC7231, Section 6.5.4]",126,null],[13,"MethodNotAllowed","","405 Method Not Allowed [RFC7231, Section 6.5.5]",126,null],[13,"NotAcceptable","","406 Not Acceptable [RFC7231, Section 6.5.6]",126,null],[13,"ProxyAuthenticationRequired","","407 Proxy Authentication Required [RFC7235, Section 3.2]",126,null],[13,"RequestTimeout","","408 Request Timeout [RFC7231, Section 6.5.7]",126,null],[13,"Conflict","","409 Conflict [RFC7231, Section 6.5.8]",126,null],[13,"Gone","","410 Gone [RFC7231, Section 6.5.9]",126,null],[13,"LengthRequired","","411 Length Required [RFC7231, Section 6.5.10]",126,null],[13,"PreconditionFailed","","412 Precondition Failed [RFC7232, Section 4.2]",126,null],[13,"PayloadTooLarge","","413 Payload Too Large [RFC7231, Section 6.5.11]",126,null],[13,"UriTooLong","","414 URI Too Long [RFC7231, Section 6.5.12]",126,null],[13,"UnsupportedMediaType","","415 Unsupported Media Type [RFC7231, Section 6.5.13]",126,null],[13,"RangeNotSatisfiable","","416 Range Not Satisfiable [RFC7233, Section 4.4]",126,null],[13,"ExpectationFailed","","417 Expectation Failed [RFC7231, Section 6.5.14]",126,null],[13,"ImATeapot","","418 I'm a teapot [curiously, not registered by IANA, but RFC2324]",126,null],[13,"MisdirectedRequest","","421 Misdirected Request RFC7540, Section 9.1.2",126,null],[13,"UnprocessableEntity","","422 Unprocessable Entity [RFC4918]",126,null],[13,"Locked","","423 Locked [RFC4918]",126,null],[13,"FailedDependency","","424 Failed Dependency [RFC4918]",126,null],[13,"UpgradeRequired","","426 Upgrade Required [RFC7231, Section 6.5.15]",126,null],[13,"PreconditionRequired","","428 Precondition Required [RFC6585]",126,null],[13,"TooManyRequests","","429 Too Many Requests [RFC6585]",126,null],[13,"RequestHeaderFieldsTooLarge","","431 Request Header Fields Too Large [RFC6585]",126,null],[13,"UnavailableForLegalReasons","","451 Unavailable For Legal Reasons [RFC7725]",126,null],[13,"InternalServerError","","500 Internal Server Error [RFC7231, Section 6.6.1]",126,null],[13,"NotImplemented","","501 Not Implemented [RFC7231, Section 6.6.2]",126,null],[13,"BadGateway","","502 Bad Gateway [RFC7231, Section 6.6.3]",126,null],[13,"ServiceUnavailable","","503 Service Unavailable [RFC7231, Section 6.6.4]",126,null],[13,"GatewayTimeout","","504 Gateway Timeout [RFC7231, Section 6.6.5]",126,null],[13,"HttpVersionNotSupported","","505 HTTP Version Not Supported [RFC7231, Section 6.6.6]",126,null],[13,"VariantAlsoNegotiates","","506 Variant Also Negotiates [RFC2295]",126,null],[13,"InsufficientStorage","","507 Insufficient Storage [RFC4918]",126,null],[13,"LoopDetected","","508 Loop Detected [RFC5842]",126,null],[13,"NotExtended","","510 Not Extended [RFC2774]",126,null],[13,"NetworkAuthenticationRequired","","511 Network Authentication Required [RFC6585]",126,null],[13,"Unregistered","","A status code not in the IANA HTTP status code registry or very well known",126,null],[4,"StatusClass","","The class of an HTTP `status-code`.",null,null],[13,"Informational","","1xx (Informational): The request was received, continuing process",127,null],[13,"Success","","2xx (Success): The request was successfully received, understood, and accepted",127,null],[13,"Redirection","","3xx (Redirection): Further action needs to be taken in order to complete the request",127,null],[13,"ClientError","","4xx (Client Error): The request contains bad syntax or cannot be fulfilled",127,null],[13,"ServerError","","5xx (Server Error): The server failed to fulfill an apparently valid request",127,null],[13,"NoClass","","A status code lower than 100 or higher than 599. These codes do no belong to any class.",127,null],[11,"fmt","","",126,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",126,null],[11,"canonical_reason","","Get the standardised `reason-phrase` for this status code.",126,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"class","","Determine the class of a status code, based on its first digit.",126,{"inputs":[{"name":"self"}],"output":{"name":"statusclass"}}],[11,"is_informational","","Check if class is Informational.",126,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_success","","Check if class is Success.",126,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_redirection","","Check if class is Redirection.",126,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_client_error","","Check if class is ClientError.",126,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_server_error","","Check if class is ServerError.",126,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_strange_status","","Check if class is NoClass",126,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",126,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",126,{"inputs":[{"name":"self"},{"name":"statuscode"}],"output":{"name":"bool"}}],[11,"clone","","",126,{"inputs":[{"name":"self"}],"output":{"name":"statuscode"}}],[11,"partial_cmp","","",126,{"inputs":[{"name":"self"},{"name":"statuscode"}],"output":{"name":"option"}}],[11,"cmp","","",126,{"inputs":[{"name":"self"},{"name":"statuscode"}],"output":{"name":"ordering"}}],[11,"fmt","","",127,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",127,{"inputs":[{"name":"self"}],"output":{"name":"statusclass"}}],[11,"eq","","",127,{"inputs":[{"name":"self"},{"name":"statusclass"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",127,{"inputs":[{"name":"self"},{"name":"statusclass"}],"output":{"name":"option"}}],[11,"cmp","","",127,{"inputs":[{"name":"self"},{"name":"statusclass"}],"output":{"name":"ordering"}}],[11,"default_code","","Get the default status code for the class.",127,{"inputs":[{"name":"self"}],"output":{"name":"statuscode"}}],[0,"uri","hyper","HTTP RequestUris",null,null],[4,"RequestUri","hyper::uri","The Request-URI of a Request's StartLine.",null,null],[13,"AbsolutePath","","The most common request target, an absolute path and optional query.",128,null],[13,"AbsoluteUri","","An absolute URI. Used in conjunction with proxies.",128,null],[13,"Authority","","The authority form is only for use with `CONNECT` requests.",128,null],[13,"Star","","The star is used to target the entire server, instead of a specific resource.",128,null],[11,"fmt","","",128,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",128,{"inputs":[{"name":"self"},{"name":"requesturi"}],"output":{"name":"bool"}}],[11,"ne","","",128,{"inputs":[{"name":"self"},{"name":"requesturi"}],"output":{"name":"bool"}}],[11,"clone","","",128,{"inputs":[{"name":"self"}],"output":{"name":"requesturi"}}],[11,"from_str","","",128,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",128,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"version","hyper","HTTP Versions enum",null,null],[4,"HttpVersion","hyper::version","Represents a version of the HTTP spec.",null,null],[13,"Http09","","`HTTP/0.9`",129,null],[13,"Http10","","`HTTP/1.0`",129,null],[13,"Http11","","`HTTP/1.1`",129,null],[13,"Http20","","`HTTP/2.0`",129,null],[11,"eq","","",129,{"inputs":[{"name":"self"},{"name":"httpversion"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",129,{"inputs":[{"name":"self"},{"name":"httpversion"}],"output":{"name":"option"}}],[11,"clone","","",129,{"inputs":[{"name":"self"}],"output":{"name":"httpversion"}}],[11,"cmp","","",129,{"inputs":[{"name":"self"},{"name":"httpversion"}],"output":{"name":"ordering"}}],[11,"hash","","",129,null],[11,"fmt","","",129,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",129,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",129,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"from_str","","",129,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[0,"mime","hyper","Re-exporting the mime crate, for convenience.",null,null],[14,"mime","hyper::mime","Easily create a Mime without having to import so many enums.",null,null],[14,"header","hyper","",null,null],[11,"parse","","Parse an absolute URL from a string.",11,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"parse_with_params","","Parse an absolute URL from a string and add params to its query string.",11,{"inputs":[{"name":"str"},{"name":"i"}],"output":{"name":"result"}}],[11,"join","","Parse a string as an URL, with this URL as the base URL.",11,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"options","","Return a default `ParseOptions` that can fully configure the URL parser.",11,{"inputs":[],"output":{"name":"parseoptions"}}],[11,"as_str","","Return the serialization of this URL.",11,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"into_string","","Return the serialization of this URL.",11,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"origin","","Return the origin of this URL (https://url.spec.whatwg.org/#origin)",11,{"inputs":[{"name":"self"}],"output":{"name":"origin"}}],[11,"scheme","","Return the scheme of this URL, lower-cased, as an ASCII string without the ':' delimiter.",11,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"has_authority","","Return whether the URL has an 'authority', which can contain a username, password, host, and port number.",11,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"cannot_be_a_base","","Return whether this URL is a cannot-be-a-base URL, meaning that parsing a relative URL string with this URL as the base will return an error.",11,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"username","","Return the username for this URL (typically the empty string) as a percent-encoded ASCII string.",11,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"password","","Return the password for this URL, if any, as a percent-encoded ASCII string.",11,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"has_host","","Equivalent to `url.host().is_some()`.",11,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"host_str","","Return the string representation of the host (domain or IP address) for this URL, if any.",11,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"host","","Return the parsed representation of the host for this URL. Non-ASCII domain labels are punycode-encoded per IDNA.",11,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"domain","","If this URL has a host and it is a domain name (not an IP address), return it.",11,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"port","","Return the port number for this URL, if any.",11,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"port_or_known_default","","Return the port number for this URL, or the default port number if it is known.",11,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"with_default_port","","If the URL has a host, return something that implements `ToSocketAddrs`.",11,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"path","","Return the path for this URL, as a percent-encoded ASCII string. For cannot-be-a-base URLs, this is an arbitrary string that doesn’t start with '/'. For other URLs, this starts with a '/' slash and continues with slash-separated path segments.",11,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"path_segments","","Unless this URL is cannot-be-a-base, return an iterator of '/' slash-separated path segments, each as a percent-encoded ASCII string.",11,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"query","","Return this URL’s query string, if any, as a percent-encoded ASCII string.",11,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"query_pairs","","Parse the URL’s query string, if any, as `application/x-www-form-urlencoded` and return an iterator of (key, value) pairs.",11,{"inputs":[{"name":"self"}],"output":{"name":"parse"}}],[11,"fragment","","Return this URL’s fragment identifier, if any.",11,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"set_fragment","","Change this URL’s fragment identifier.",11,null],[11,"set_query","","Change this URL’s query string.",11,null],[11,"query_pairs_mut","","Manipulate this URL’s query string, viewed as a sequence of name/value pairs in `application/x-www-form-urlencoded` syntax.",11,{"inputs":[{"name":"self"}],"output":{"name":"serializer"}}],[11,"set_path","","Change this URL’s path.",11,null],[11,"path_segments_mut","","Return an object with methods to manipulate this URL’s path segments.",11,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"set_port","","Change this URL’s port number.",11,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"set_host","","Change this URL’s host.",11,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"set_ip_host","","Change this URL’s host to the given IP address.",11,{"inputs":[{"name":"self"},{"name":"ipaddr"}],"output":{"name":"result"}}],[11,"set_password","","Change this URL’s password.",11,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"set_username","","Change this URL’s username.",11,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"set_scheme","","Change this URL’s scheme.",11,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"from_file_path","","Convert a file name as `std::path::Path` into an URL in the `file` scheme.",11,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"from_directory_path","","Convert a directory name as `std::path::Path` into an URL in the `file` scheme.",11,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"to_file_path","","Assuming the URL is in the `file` scheme or similar, convert its path to an absolute `std::path::Path`.",11,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"default","","",0,{"inputs":[],"output":{"name":"languagetag"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",0,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"languagetag"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"languagetag"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","hyper::error","",13,{"inputs":[{"name":"errors"}],"output":{"name":"parseerror"}}],[11,"as_ref","hyper","",11,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"index","","",11,{"inputs":[{"name":"self"},{"name":"range"}],"output":{"name":"str"}}],[11,"index","","",11,{"inputs":[{"name":"self"},{"name":"rangeto"}],"output":{"name":"str"}}],[11,"index","","",11,{"inputs":[{"name":"self"},{"name":"rangefrom"}],"output":{"name":"str"}}],[11,"index","","",11,{"inputs":[{"name":"self"},{"name":"rangefull"}],"output":{"name":"str"}}],[11,"partial_cmp","","",11,{"inputs":[{"name":"self"},{"name":"url"}],"output":{"name":"option"}}],[11,"fmt","hyper::error","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","hyper","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",11,{"inputs":[{"name":"self"},{"name":"url"}],"output":{"name":"ordering"}}],[11,"from_str","","",11,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"url"}}],[11,"clone","hyper::error","",13,{"inputs":[{"name":"self"}],"output":{"name":"parseerror"}}],[11,"to_socket_addrs","hyper","",11,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"eq","hyper::error","",13,{"inputs":[{"name":"self"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"eq","hyper","",11,{"inputs":[{"name":"self"},{"name":"url"}],"output":{"name":"bool"}}],[11,"description","hyper::error","",13,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"hash","hyper","",11,null],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","hyper::error","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"matches","hyper","Matches language tags. The first language acts as a language range, the second one is used as a normal language tag. None fields in the language range are ignored. If the language tag has more extlangs than the range these extlangs are ignored. Matches are case-insensitive. `*` in language ranges are represented using `None` values. The language range `*` that matches language tags is created by the default language tag: `let wildcard: LanguageTag = Default::default();.`",0,{"inputs":[{"name":"self"},{"name":"languagetag"}],"output":{"name":"bool"}}],[11,"is_language_range","","Checks if it is a language range, meaning that there are no extension and privateuse tags.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"canonicalize","","Returns the canonical version of the language tag.",0,{"inputs":[{"name":"self"}],"output":{"name":"languagetag"}}]],"paths":[[3,"LanguageTag"],[4,"Body"],[4,"RedirectPolicy"],[3,"Config"],[3,"Pool"],[3,"PooledStream"],[3,"Request"],[3,"Response"],[8,"IntoUrl"],[3,"Client"],[3,"RequestBuilder"],[3,"Url"],[3,"ProxyConfig"],[4,"ParseError"],[4,"Error"],[4,"Method"],[3,"EntityTag"],[3,"HttpDate"],[3,"Quality"],[3,"QualityItem"],[3,"Accept"],[3,"AccessControlAllowHeaders"],[3,"AccessControlAllowMethods"],[3,"AccessControlExposeHeaders"],[3,"AccessControlMaxAge"],[3,"AccessControlRequestHeaders"],[3,"AccessControlRequestMethod"],[3,"AcceptCharset"],[3,"AcceptEncoding"],[3,"AcceptLanguage"],[3,"AcceptRanges"],[3,"Allow"],[3,"Authorization"],[3,"Basic"],[3,"Bearer"],[3,"CacheControl"],[3,"Connection"],[3,"ContentDisposition"],[3,"ContentLength"],[3,"ContentEncoding"],[3,"ContentLanguage"],[3,"ContentRange"],[3,"ContentType"],[3,"Cookie"],[3,"Date"],[3,"ETag"],[3,"Expires"],[3,"From"],[3,"Host"],[3,"IfModifiedSince"],[3,"IfUnmodifiedSince"],[3,"LastModified"],[3,"Location"],[3,"Origin"],[3,"Prefer"],[3,"PreferenceApplied"],[3,"Referer"],[3,"Server"],[3,"SetCookie"],[3,"StrictTransportSecurity"],[3,"TransferEncoding"],[3,"Upgrade"],[3,"Protocol"],[3,"UserAgent"],[3,"HeaderFormatter"],[4,"Charset"],[4,"Encoding"],[4,"AccessControlAllowOrigin"],[4,"RangeUnit"],[4,"CacheDirective"],[4,"ConnectionOption"],[4,"DispositionType"],[4,"DispositionParam"],[4,"ContentRangeSpec"],[4,"Expect"],[4,"IfMatch"],[4,"IfNoneMatch"],[4,"IfRange"],[4,"Pragma"],[4,"Preference"],[4,"Range"],[4,"ByteRangeSpec"],[4,"ReferrerPolicy"],[4,"ProtocolName"],[4,"Vary"],[4,"RelationType"],[4,"MediaDesc"],[3,"AccessControlAllowCredentials"],[3,"Link"],[3,"LinkValue"],[3,"ExtendedValue"],[3,"HTTP_VALUE"],[8,"Scheme"],[8,"Header"],[8,"HeaderFormat"],[3,"Headers"],[3,"HeadersItems"],[3,"HeaderView"],[3,"RawStatus"],[3,"Incoming"],[4,"HttpReader"],[4,"HttpWriter"],[3,"Http11Message"],[3,"Http11Protocol"],[3,"EndError"],[3,"RequestHead"],[3,"ResponseHead"],[8,"Protocol"],[8,"HttpMessage"],[3,"HttpStream"],[4,"HttpsStream"],[8,"NetworkListener"],[8,"NetworkStream"],[8,"NetworkConnector"],[8,"SslClient"],[8,"SslServer"],[3,"NetworkConnections"],[3,"HttpListener"],[3,"HttpConnector"],[3,"HttpsListener"],[3,"HttpsConnector"],[3,"Listening"],[3,"Request"],[3,"Response"],[8,"Handler"],[3,"Server"],[4,"StatusCode"],[4,"StatusClass"],[4,"RequestUri"],[4,"HttpVersion"]]};
searchIndex["hyper_native_tls"] = {"doc":"SSL support for Hyper via the native-tls crate.","items":[[3,"Certificate","hyper_native_tls","An X509 certificate.",null,null],[3,"TlsStream","","A Hyper stream using native_tls.",null,null],[3,"StreamGuard","","A guard around a locked inner `TlsStream`.",null,null],[3,"NativeTlsClient","","An `SslClient` implementation using native-tls.",null,null],[3,"NativeTlsServer","","An `SslServer` implementation using native-tls.",null,null],[4,"ServerError","","An error creating a `NativeTlsServer`.",null,null],[13,"Io","","An error reading the identity file.",0,null],[13,"Tls","","An error initializing the acceptor.",0,null],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"tlsstream"}}],[11,"lock","","Returns a guard around a locked TLS stream.",1,{"inputs":[{"name":"self"}],"output":{"name":"streamguard"}}],[11,"read","","",1,null],[11,"write","","",1,null],[11,"flush","","",1,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"peer_addr","","",1,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"set_read_timeout","","",1,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"set_write_timeout","","",1,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"deref","","",2,null],[11,"deref_mut","","",2,null],[11,"new","","Returns a `NativeTlsClient` with a default configuration.",3,{"inputs":[],"output":{"name":"result"}}],[11,"danger_disable_hostname_verification","","If set, the `TlsConnector::danger_connect_without_providing_domain_for_certificate_verification_and_server_name_indication` method will be used to connect.",3,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"from","","",3,{"inputs":[{"name":"tlsconnector"}],"output":{"name":"nativetlsclient"}}],[11,"wrap_client","","",3,{"inputs":[{"name":"self"},{"name":"t"},{"name":"str"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"nativetlsserver"}}],[11,"new","","Returns a `NativeTlsServer` with a default configuration.",4,{"inputs":[{"name":"p"},{"name":"str"}],"output":{"name":"result"}}],[11,"from","","",4,{"inputs":[{"name":"tlsacceptor"}],"output":{"name":"nativetlsserver"}}],[11,"wrap_server","","",4,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"from_der","","Parses a DER-formatted X509 certificate.",5,null]],"paths":[[4,"ServerError"],[3,"TlsStream"],[3,"StreamGuard"],[3,"NativeTlsClient"],[3,"NativeTlsServer"],[3,"Certificate"]]};
searchIndex["idna"] = {"doc":"This Rust crate implements IDNA per the WHATWG URL Standard.","items":[[5,"domain_to_ascii","idna","The domain to ASCII algorithm.",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[5,"domain_to_unicode","","The domain to Unicode algorithm.",null,null],[0,"punycode","","Punycode (RFC 3492) implementation.",null,null],[5,"decode_to_string","idna::punycode","Convert Punycode to an Unicode `String`.",null,{"inputs":[{"name":"str"}],"output":{"name":"option"}}],[5,"decode","","Convert Punycode to Unicode.",null,{"inputs":[{"name":"str"}],"output":{"name":"option"}}],[5,"encode_str","","Convert an Unicode `str` to Punycode.",null,{"inputs":[{"name":"str"}],"output":{"name":"option"}}],[5,"encode","","Convert Unicode to Punycode.",null,null],[0,"uts46","idna","Unicode IDNA Compatibility Processing (Unicode Technical Standard #46)",null,null],[3,"Flags","idna::uts46","",null,null],[12,"use_std3_ascii_rules","","",0,null],[12,"transitional_processing","","",0,null],[12,"verify_dns_length","","",0,null],[3,"Errors","","Errors recorded during UTS #46 processing.",null,null],[5,"to_ascii","","http://www.unicode.org/reports/tr46/#ToASCII",null,{"inputs":[{"name":"str"},{"name":"flags"}],"output":{"name":"result"}}],[5,"to_unicode","","http://www.unicode.org/reports/tr46/#ToUnicode",null,null],[7,"PUNYCODE_PREFIX","","",null,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"flags"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"Flags"],[3,"Errors"]]};
searchIndex["itoa"] = {"doc":"","items":[[5,"write","itoa","",null,{"inputs":[{"name":"w"},{"name":"v"}],"output":{"name":"result"}}],[8,"Integer","","",null,null],[10,"write","","",0,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}]],"paths":[[8,"Integer"]]};
searchIndex["language_tags"] = {"doc":"Language tags can be used identify human languages, scripts e.g. Latin script, countries and other regions.","items":[[3,"LanguageTag","language_tags","A language tag as described in BCP47.",null,null],[12,"language","","Language subtags are used to indicate the language, ignoring all other aspects such as script, region or spefic invariants.",0,null],[12,"extlangs","","Extended language subtags are used to identify certain specially selected languages that, for various historical and compatibility reasons, are closely identified with or tagged using an existing primary language subtag.",0,null],[12,"script","","Script subtags are used to indicate the script or writing system variations that distinguish the written forms of a language or its dialects.",0,null],[12,"region","","Region subtags are used to indicate linguistic variations associated with or appropriate to a specific country, territory, or region. Typically, a region subtag is used to indicate variations such as regional dialects or usage, or region-specific spelling conventions. It can also be used to indicate that content is expressed in a way that is appropriate for use throughout a region, for instance, Spanish content tailored to be useful throughout Latin America.",0,null],[12,"variants","","Variant subtags are used to indicate additional, well-recognized variations that define a language or its dialects that are not covered by other available subtags.",0,null],[12,"extensions","","Extensions provide a mechanism for extending language tags for use in various applications.  They are intended to identify information that is commonly used in association with languages or language tags but that is not part of language identification.",0,null],[12,"privateuse","","Private use subtags are used to indicate distinctions in language that are important in a given context by private agreement.",0,null],[4,"Error","","Defines an Error type for langtags.",null,null],[13,"DuplicateExtension","","The same extension subtag is only allowed once in a tag before the private use part.",1,null],[13,"EmptyExtension","","If an extension subtag is present, it must not be empty.",1,null],[13,"EmptyPrivateUse","","If the `x` subtag is present, it must not be empty.",1,null],[13,"ForbiddenChar","","The langtag contains a char that is not A-Z, a-z, 0-9 or the dash.",1,null],[13,"InvalidSubtag","","A subtag fails to parse, it does not match any other subtags.",1,null],[13,"InvalidLanguage","","The given language subtag is invalid.",1,null],[13,"SubtagTooLong","","A subtag may be eight characters in length at maximum.",1,null],[13,"TooManyExtlangs","","At maximum three extlangs are allowed, but zero to one extlangs are preferred.",1,null],[6,"Result","","Result type used for this library.",null,null],[17,"GRANDFATHERED","","Contains all grandfathered tags.",null,null],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"description","","",1,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",0,{"inputs":[],"output":{"name":"languagetag"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"languagetag"}}],[11,"matches","","Matches language tags. The first language acts as a language range, the second one is used as a normal language tag. None fields in the language range are ignored. If the language tag has more extlangs than the range these extlangs are ignored. Matches are case-insensitive. `*` in language ranges are represented using `None` values. The language range `*` that matches language tags is created by the default language tag: `let wildcard: LanguageTag = Default::default();.`",0,{"inputs":[{"name":"self"},{"name":"languagetag"}],"output":{"name":"bool"}}],[11,"is_language_range","","Checks if it is a language range, meaning that there are no extension and privateuse tags.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"canonicalize","","Returns the canonical version of the language tag.",0,{"inputs":[{"name":"self"}],"output":{"name":"languagetag"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"languagetag"}],"output":{"name":"bool"}}],[11,"from_str","","",0,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[14,"langtag","","Utility for creating simple language tags.",null,null]],"paths":[[3,"LanguageTag"],[4,"Error"]]};
searchIndex["lazy_static"] = {"doc":"A macro for declaring lazily evaluated statics.","items":[[5,"initialize","lazy_static","Takes a shared reference to a lazy static and initializes it if it has not been already.",null,{"inputs":[{"name":"t"}],"output":null}],[8,"LazyStatic","","Support trait for enabling a few common operation on lazy static values.",null,null],[14,"lazy_static","","",null,null]],"paths":[]};
searchIndex["libc"] = {"doc":"Crate docs","items":[[3,"group","libc","",null,null],[12,"gr_name","","",0,null],[12,"gr_passwd","","",0,null],[12,"gr_gid","","",0,null],[12,"gr_mem","","",0,null],[3,"utimbuf","","",null,null],[12,"actime","","",1,null],[12,"modtime","","",1,null],[3,"timeval","","",null,null],[12,"tv_sec","","",2,null],[12,"tv_usec","","",2,null],[3,"timespec","","",null,null],[12,"tv_sec","","",3,null],[12,"tv_nsec","","",3,null],[3,"rlimit","","",null,null],[12,"rlim_cur","","",4,null],[12,"rlim_max","","",4,null],[3,"rusage","","",null,null],[12,"ru_utime","","",5,null],[12,"ru_stime","","",5,null],[12,"ru_maxrss","","",5,null],[12,"ru_ixrss","","",5,null],[12,"ru_idrss","","",5,null],[12,"ru_isrss","","",5,null],[12,"ru_minflt","","",5,null],[12,"ru_majflt","","",5,null],[12,"ru_nswap","","",5,null],[12,"ru_inblock","","",5,null],[12,"ru_oublock","","",5,null],[12,"ru_msgsnd","","",5,null],[12,"ru_msgrcv","","",5,null],[12,"ru_nsignals","","",5,null],[12,"ru_nvcsw","","",5,null],[12,"ru_nivcsw","","",5,null],[3,"in_addr","","",null,null],[12,"s_addr","","",6,null],[3,"in6_addr","","",null,null],[12,"s6_addr","","",7,null],[3,"ip_mreq","","",null,null],[12,"imr_multiaddr","","",8,null],[12,"imr_interface","","",8,null],[3,"ipv6_mreq","","",null,null],[12,"ipv6mr_multiaddr","","",9,null],[12,"ipv6mr_interface","","",9,null],[3,"hostent","","",null,null],[12,"h_name","","",10,null],[12,"h_aliases","","",10,null],[12,"h_addrtype","","",10,null],[12,"h_length","","",10,null],[12,"h_addr_list","","",10,null],[3,"iovec","","",null,null],[12,"iov_base","","",11,null],[12,"iov_len","","",11,null],[3,"pollfd","","",null,null],[12,"fd","","",12,null],[12,"events","","",12,null],[12,"revents","","",12,null],[3,"winsize","","",null,null],[12,"ws_row","","",13,null],[12,"ws_col","","",13,null],[12,"ws_xpixel","","",13,null],[12,"ws_ypixel","","",13,null],[3,"linger","","",null,null],[12,"l_onoff","","",14,null],[12,"l_linger","","",14,null],[3,"sigval","","",null,null],[12,"sival_ptr","","",15,null],[3,"itimerval","","",null,null],[12,"it_interval","","",16,null],[12,"it_value","","",16,null],[3,"tms","","",null,null],[12,"tms_utime","","",17,null],[12,"tms_stime","","",17,null],[12,"tms_cutime","","",17,null],[12,"tms_cstime","","",17,null],[3,"sockaddr","","",null,null],[12,"sa_family","","",18,null],[12,"sa_data","","",18,null],[3,"sockaddr_in","","",null,null],[12,"sin_family","","",19,null],[12,"sin_port","","",19,null],[12,"sin_addr","","",19,null],[12,"sin_zero","","",19,null],[3,"sockaddr_in6","","",null,null],[12,"sin6_family","","",20,null],[12,"sin6_port","","",20,null],[12,"sin6_flowinfo","","",20,null],[12,"sin6_addr","","",20,null],[12,"sin6_scope_id","","",20,null],[3,"sockaddr_un","","",null,null],[12,"sun_family","","",21,null],[12,"sun_path","","",21,null],[3,"sockaddr_storage","","",null,null],[12,"ss_family","","",22,null],[3,"addrinfo","","",null,null],[12,"ai_flags","","",23,null],[12,"ai_family","","",23,null],[12,"ai_socktype","","",23,null],[12,"ai_protocol","","",23,null],[12,"ai_addrlen","","",23,null],[12,"ai_addr","","",23,null],[12,"ai_canonname","","",23,null],[12,"ai_next","","",23,null],[3,"sockaddr_nl","","",null,null],[12,"nl_family","","",24,null],[12,"nl_pid","","",24,null],[12,"nl_groups","","",24,null],[3,"sockaddr_ll","","",null,null],[12,"sll_family","","",25,null],[12,"sll_protocol","","",25,null],[12,"sll_ifindex","","",25,null],[12,"sll_hatype","","",25,null],[12,"sll_pkttype","","",25,null],[12,"sll_halen","","",25,null],[12,"sll_addr","","",25,null],[3,"fd_set","","",null,null],[3,"tm","","",null,null],[12,"tm_sec","","",26,null],[12,"tm_min","","",26,null],[12,"tm_hour","","",26,null],[12,"tm_mday","","",26,null],[12,"tm_mon","","",26,null],[12,"tm_year","","",26,null],[12,"tm_wday","","",26,null],[12,"tm_yday","","",26,null],[12,"tm_isdst","","",26,null],[12,"tm_gmtoff","","",26,null],[12,"tm_zone","","",26,null],[3,"sched_param","","",null,null],[12,"sched_priority","","",27,null],[3,"Dl_info","","",null,null],[12,"dli_fname","","",28,null],[12,"dli_fbase","","",28,null],[12,"dli_sname","","",28,null],[12,"dli_saddr","","",28,null],[3,"epoll_event","","",null,null],[12,"events","","",29,null],[12,"u64","","",29,null],[3,"utsname","","",null,null],[12,"sysname","","",30,null],[12,"nodename","","",30,null],[12,"release","","",30,null],[12,"version","","",30,null],[12,"machine","","",30,null],[12,"domainname","","",30,null],[3,"lconv","","",null,null],[12,"decimal_point","","",31,null],[12,"thousands_sep","","",31,null],[12,"grouping","","",31,null],[12,"int_curr_symbol","","",31,null],[12,"currency_symbol","","",31,null],[12,"mon_decimal_point","","",31,null],[12,"mon_thousands_sep","","",31,null],[12,"mon_grouping","","",31,null],[12,"positive_sign","","",31,null],[12,"negative_sign","","",31,null],[12,"int_frac_digits","","",31,null],[12,"frac_digits","","",31,null],[12,"p_cs_precedes","","",31,null],[12,"p_sep_by_space","","",31,null],[12,"n_cs_precedes","","",31,null],[12,"n_sep_by_space","","",31,null],[12,"p_sign_posn","","",31,null],[12,"n_sign_posn","","",31,null],[12,"int_p_cs_precedes","","",31,null],[12,"int_p_sep_by_space","","",31,null],[12,"int_n_cs_precedes","","",31,null],[12,"int_n_sep_by_space","","",31,null],[12,"int_p_sign_posn","","",31,null],[12,"int_n_sign_posn","","",31,null],[3,"sigevent","","",null,null],[12,"sigev_value","","",32,null],[12,"sigev_signo","","",32,null],[12,"sigev_notify","","",32,null],[12,"sigev_notify_thread_id","","",32,null],[3,"dirent","","",null,null],[12,"d_ino","","",33,null],[12,"d_off","","",33,null],[12,"d_reclen","","",33,null],[12,"d_type","","",33,null],[12,"d_name","","",33,null],[3,"dirent64","","",null,null],[12,"d_ino","","",34,null],[12,"d_off","","",34,null],[12,"d_reclen","","",34,null],[12,"d_type","","",34,null],[12,"d_name","","",34,null],[3,"rlimit64","","",null,null],[12,"rlim_cur","","",35,null],[12,"rlim_max","","",35,null],[3,"glob_t","","",null,null],[12,"gl_pathc","","",36,null],[12,"gl_pathv","","",36,null],[12,"gl_offs","","",36,null],[12,"gl_flags","","",36,null],[3,"ifaddrs","","",null,null],[12,"ifa_next","","",37,null],[12,"ifa_name","","",37,null],[12,"ifa_flags","","",37,null],[12,"ifa_addr","","",37,null],[12,"ifa_netmask","","",37,null],[12,"ifa_ifu","","",37,null],[12,"ifa_data","","",37,null],[3,"pthread_mutex_t","","",null,null],[3,"pthread_rwlock_t","","",null,null],[3,"pthread_mutexattr_t","","",null,null],[3,"pthread_rwlockattr_t","","",null,null],[3,"pthread_cond_t","","",null,null],[3,"pthread_condattr_t","","",null,null],[3,"passwd","","",null,null],[12,"pw_name","","",38,null],[12,"pw_passwd","","",38,null],[12,"pw_uid","","",38,null],[12,"pw_gid","","",38,null],[12,"pw_gecos","","",38,null],[12,"pw_dir","","",38,null],[12,"pw_shell","","",38,null],[3,"spwd","","",null,null],[12,"sp_namp","","",39,null],[12,"sp_pwdp","","",39,null],[12,"sp_lstchg","","",39,null],[12,"sp_min","","",39,null],[12,"sp_max","","",39,null],[12,"sp_warn","","",39,null],[12,"sp_inact","","",39,null],[12,"sp_expire","","",39,null],[12,"sp_flag","","",39,null],[3,"statvfs","","",null,null],[12,"f_bsize","","",40,null],[12,"f_frsize","","",40,null],[12,"f_blocks","","",40,null],[12,"f_bfree","","",40,null],[12,"f_bavail","","",40,null],[12,"f_files","","",40,null],[12,"f_ffree","","",40,null],[12,"f_favail","","",40,null],[12,"f_fsid","","",40,null],[12,"f_flag","","",40,null],[12,"f_namemax","","",40,null],[3,"dqblk","","",null,null],[12,"dqb_bhardlimit","","",41,null],[12,"dqb_bsoftlimit","","",41,null],[12,"dqb_curspace","","",41,null],[12,"dqb_ihardlimit","","",41,null],[12,"dqb_isoftlimit","","",41,null],[12,"dqb_curinodes","","",41,null],[12,"dqb_btime","","",41,null],[12,"dqb_itime","","",41,null],[12,"dqb_valid","","",41,null],[3,"signalfd_siginfo","","",null,null],[12,"ssi_signo","","",42,null],[12,"ssi_errno","","",42,null],[12,"ssi_code","","",42,null],[12,"ssi_pid","","",42,null],[12,"ssi_uid","","",42,null],[12,"ssi_fd","","",42,null],[12,"ssi_tid","","",42,null],[12,"ssi_band","","",42,null],[12,"ssi_overrun","","",42,null],[12,"ssi_trapno","","",42,null],[12,"ssi_status","","",42,null],[12,"ssi_int","","",42,null],[12,"ssi_ptr","","",42,null],[12,"ssi_utime","","",42,null],[12,"ssi_stime","","",42,null],[12,"ssi_addr","","",42,null],[3,"itimerspec","","",null,null],[12,"it_interval","","",43,null],[12,"it_value","","",43,null],[3,"fsid_t","","",null,null],[3,"mq_attr","","",null,null],[12,"mq_flags","","",44,null],[12,"mq_maxmsg","","",44,null],[12,"mq_msgsize","","",44,null],[12,"mq_curmsgs","","",44,null],[3,"cpu_set_t","","",null,null],[3,"if_nameindex","","",null,null],[12,"if_index","","",45,null],[12,"if_name","","",45,null],[3,"msginfo","","",null,null],[12,"msgpool","","",46,null],[12,"msgmap","","",46,null],[12,"msgmax","","",46,null],[12,"msgmnb","","",46,null],[12,"msgmni","","",46,null],[12,"msgssz","","",46,null],[12,"msgtql","","",46,null],[12,"msgseg","","",46,null],[3,"mmsghdr","","",null,null],[12,"msg_hdr","","",47,null],[12,"msg_len","","",47,null],[3,"sembuf","","",null,null],[12,"sem_num","","",48,null],[12,"sem_op","","",48,null],[12,"sem_flg","","",48,null],[3,"input_event","","",null,null],[12,"time","","",49,null],[12,"type_","","",49,null],[12,"code","","",49,null],[12,"value","","",49,null],[3,"input_id","","",null,null],[12,"bustype","","",50,null],[12,"vendor","","",50,null],[12,"product","","",50,null],[12,"version","","",50,null],[3,"input_absinfo","","",null,null],[12,"value","","",51,null],[12,"minimum","","",51,null],[12,"maximum","","",51,null],[12,"fuzz","","",51,null],[12,"flat","","",51,null],[12,"resolution","","",51,null],[3,"input_keymap_entry","","",null,null],[12,"flags","","",52,null],[12,"len","","",52,null],[12,"index","","",52,null],[12,"keycode","","",52,null],[12,"scancode","","",52,null],[3,"input_mask","","",null,null],[12,"type_","","",53,null],[12,"codes_size","","",53,null],[12,"codes_ptr","","",53,null],[3,"ff_replay","","",null,null],[12,"length","","",54,null],[12,"delay","","",54,null],[3,"ff_trigger","","",null,null],[12,"button","","",55,null],[12,"interval","","",55,null],[3,"ff_envelope","","",null,null],[12,"attack_length","","",56,null],[12,"attack_level","","",56,null],[12,"fade_length","","",56,null],[12,"fade_level","","",56,null],[3,"ff_constant_effect","","",null,null],[12,"level","","",57,null],[12,"envelope","","",57,null],[3,"ff_ramp_effect","","",null,null],[12,"start_level","","",58,null],[12,"end_level","","",58,null],[12,"envelope","","",58,null],[3,"ff_condition_effect","","",null,null],[12,"right_saturation","","",59,null],[12,"left_saturation","","",59,null],[12,"right_coeff","","",59,null],[12,"left_coeff","","",59,null],[12,"deadband","","",59,null],[12,"center","","",59,null],[3,"ff_periodic_effect","","",null,null],[12,"waveform","","",60,null],[12,"period","","",60,null],[12,"magnitude","","",60,null],[12,"offset","","",60,null],[12,"phase","","",60,null],[12,"envelope","","",60,null],[12,"custom_len","","",60,null],[12,"custom_data","","",60,null],[3,"ff_rumble_effect","","",null,null],[12,"strong_magnitude","","",61,null],[12,"weak_magnitude","","",61,null],[3,"ff_effect","","",null,null],[12,"type_","","",62,null],[12,"id","","",62,null],[12,"direction","","",62,null],[12,"trigger","","",62,null],[12,"replay","","",62,null],[12,"u","","",62,null],[3,"aiocb","","",null,null],[12,"aio_fildes","","",63,null],[12,"aio_lio_opcode","","",63,null],[12,"aio_reqprio","","",63,null],[12,"aio_buf","","",63,null],[12,"aio_nbytes","","",63,null],[12,"aio_sigevent","","",63,null],[12,"aio_offset","","",63,null],[3,"__exit_status","","",null,null],[12,"e_termination","","",64,null],[12,"e_exit","","",64,null],[3,"__timeval","","",null,null],[12,"tv_sec","","",65,null],[12,"tv_usec","","",65,null],[3,"utmpx","","",null,null],[12,"ut_type","","",66,null],[12,"ut_pid","","",66,null],[12,"ut_line","","",66,null],[12,"ut_id","","",66,null],[12,"ut_user","","",66,null],[12,"ut_host","","",66,null],[12,"ut_exit","","",66,null],[12,"ut_session","","",66,null],[12,"ut_tv","","",66,null],[12,"ut_addr_v6","","",66,null],[3,"sigaction","","",null,null],[12,"sa_sigaction","","",67,null],[12,"sa_mask","","",67,null],[12,"sa_flags","","",67,null],[12,"sa_restorer","","",67,null],[3,"stack_t","","",null,null],[12,"ss_sp","","",68,null],[12,"ss_flags","","",68,null],[12,"ss_size","","",68,null],[3,"siginfo_t","","",null,null],[12,"si_signo","","",69,null],[12,"si_errno","","",69,null],[12,"si_code","","",69,null],[12,"_pad","","",69,null],[3,"glob64_t","","",null,null],[12,"gl_pathc","","",70,null],[12,"gl_pathv","","",70,null],[12,"gl_offs","","",70,null],[12,"gl_flags","","",70,null],[3,"ucred","","",null,null],[12,"pid","","",71,null],[12,"uid","","",71,null],[12,"gid","","",71,null],[3,"statfs","","",null,null],[12,"f_type","","",72,null],[12,"f_bsize","","",72,null],[12,"f_blocks","","",72,null],[12,"f_bfree","","",72,null],[12,"f_bavail","","",72,null],[12,"f_files","","",72,null],[12,"f_ffree","","",72,null],[12,"f_fsid","","",72,null],[12,"f_namelen","","",72,null],[12,"f_frsize","","",72,null],[3,"msghdr","","",null,null],[12,"msg_name","","",73,null],[12,"msg_namelen","","",73,null],[12,"msg_iov","","",73,null],[12,"msg_iovlen","","",73,null],[12,"msg_control","","",73,null],[12,"msg_controllen","","",73,null],[12,"msg_flags","","",73,null],[3,"cmsghdr","","",null,null],[12,"cmsg_len","","",74,null],[12,"cmsg_level","","",74,null],[12,"cmsg_type","","",74,null],[3,"termios","","",null,null],[12,"c_iflag","","",75,null],[12,"c_oflag","","",75,null],[12,"c_cflag","","",75,null],[12,"c_lflag","","",75,null],[12,"c_line","","",75,null],[12,"c_cc","","",75,null],[12,"c_ispeed","","",75,null],[12,"c_ospeed","","",75,null],[3,"flock","","",null,null],[12,"l_type","","",76,null],[12,"l_whence","","",76,null],[12,"l_start","","",76,null],[12,"l_len","","",76,null],[12,"l_pid","","",76,null],[3,"sem_t","","",null,null],[3,"sigset_t","","",null,null],[3,"sysinfo","","",null,null],[12,"uptime","","",77,null],[12,"loads","","",77,null],[12,"totalram","","",77,null],[12,"freeram","","",77,null],[12,"sharedram","","",77,null],[12,"bufferram","","",77,null],[12,"totalswap","","",77,null],[12,"freeswap","","",77,null],[12,"procs","","",77,null],[12,"pad","","",77,null],[12,"totalhigh","","",77,null],[12,"freehigh","","",77,null],[12,"mem_unit","","",77,null],[12,"_f","","",77,null],[3,"msqid_ds","","",null,null],[12,"msg_perm","","",78,null],[12,"msg_stime","","",78,null],[12,"msg_rtime","","",78,null],[12,"msg_ctime","","",78,null],[12,"msg_qnum","","",78,null],[12,"msg_qbytes","","",78,null],[12,"msg_lspid","","",78,null],[12,"msg_lrpid","","",78,null],[3,"stat","","",null,null],[12,"st_dev","","",79,null],[12,"st_ino","","",79,null],[12,"st_nlink","","",79,null],[12,"st_mode","","",79,null],[12,"st_uid","","",79,null],[12,"st_gid","","",79,null],[12,"st_rdev","","",79,null],[12,"st_size","","",79,null],[12,"st_blksize","","",79,null],[12,"st_blocks","","",79,null],[12,"st_atime","","",79,null],[12,"st_atime_nsec","","",79,null],[12,"st_mtime","","",79,null],[12,"st_mtime_nsec","","",79,null],[12,"st_ctime","","",79,null],[12,"st_ctime_nsec","","",79,null],[3,"stat64","","",null,null],[12,"st_dev","","",80,null],[12,"st_ino","","",80,null],[12,"st_nlink","","",80,null],[12,"st_mode","","",80,null],[12,"st_uid","","",80,null],[12,"st_gid","","",80,null],[12,"st_rdev","","",80,null],[12,"st_size","","",80,null],[12,"st_blksize","","",80,null],[12,"st_blocks","","",80,null],[12,"st_atime","","",80,null],[12,"st_atime_nsec","","",80,null],[12,"st_mtime","","",80,null],[12,"st_mtime_nsec","","",80,null],[12,"st_ctime","","",80,null],[12,"st_ctime_nsec","","",80,null],[3,"statfs64","","",null,null],[12,"f_type","","",81,null],[12,"f_bsize","","",81,null],[12,"f_blocks","","",81,null],[12,"f_bfree","","",81,null],[12,"f_bavail","","",81,null],[12,"f_files","","",81,null],[12,"f_ffree","","",81,null],[12,"f_fsid","","",81,null],[12,"f_namelen","","",81,null],[12,"f_frsize","","",81,null],[12,"f_flags","","",81,null],[12,"f_spare","","",81,null],[3,"statvfs64","","",null,null],[12,"f_bsize","","",82,null],[12,"f_frsize","","",82,null],[12,"f_blocks","","",82,null],[12,"f_bfree","","",82,null],[12,"f_bavail","","",82,null],[12,"f_files","","",82,null],[12,"f_ffree","","",82,null],[12,"f_favail","","",82,null],[12,"f_fsid","","",82,null],[12,"f_flag","","",82,null],[12,"f_namemax","","",82,null],[3,"pthread_attr_t","","",null,null],[3,"_libc_fpxreg","","",null,null],[12,"significand","","",83,null],[12,"exponent","","",83,null],[3,"_libc_xmmreg","","",null,null],[12,"element","","",84,null],[3,"_libc_fpstate","","",null,null],[12,"cwd","","",85,null],[12,"swd","","",85,null],[12,"ftw","","",85,null],[12,"fop","","",85,null],[12,"rip","","",85,null],[12,"rdp","","",85,null],[12,"mxcsr","","",85,null],[12,"mxcr_mask","","",85,null],[12,"_st","","",85,null],[12,"_xmm","","",85,null],[3,"user_fpregs_struct","","",null,null],[12,"cwd","","",86,null],[12,"swd","","",86,null],[12,"ftw","","",86,null],[12,"fop","","",86,null],[12,"rip","","",86,null],[12,"rdp","","",86,null],[12,"mxcsr","","",86,null],[12,"mxcr_mask","","",86,null],[12,"st_space","","",86,null],[12,"xmm_space","","",86,null],[3,"user_regs_struct","","",null,null],[12,"r15","","",87,null],[12,"r14","","",87,null],[12,"r13","","",87,null],[12,"r12","","",87,null],[12,"rbp","","",87,null],[12,"rbx","","",87,null],[12,"r11","","",87,null],[12,"r10","","",87,null],[12,"r9","","",87,null],[12,"r8","","",87,null],[12,"rax","","",87,null],[12,"rcx","","",87,null],[12,"rdx","","",87,null],[12,"rsi","","",87,null],[12,"rdi","","",87,null],[12,"orig_rax","","",87,null],[12,"rip","","",87,null],[12,"cs","","",87,null],[12,"eflags","","",87,null],[12,"rsp","","",87,null],[12,"ss","","",87,null],[12,"fs_base","","",87,null],[12,"gs_base","","",87,null],[12,"ds","","",87,null],[12,"es","","",87,null],[12,"fs","","",87,null],[12,"gs","","",87,null],[3,"user","","",null,null],[12,"regs","","",88,null],[12,"u_fpvalid","","",88,null],[12,"i387","","",88,null],[12,"u_tsize","","",88,null],[12,"u_dsize","","",88,null],[12,"u_ssize","","",88,null],[12,"start_code","","",88,null],[12,"start_stack","","",88,null],[12,"signal","","",88,null],[12,"u_ar0","","",88,null],[12,"u_fpstate","","",88,null],[12,"magic","","",88,null],[12,"u_comm","","",88,null],[12,"u_debugreg","","",88,null],[3,"mcontext_t","","",null,null],[12,"gregs","","",89,null],[12,"fpregs","","",89,null],[3,"ucontext_t","","",null,null],[12,"uc_flags","","",90,null],[12,"uc_link","","",90,null],[12,"uc_stack","","",90,null],[12,"uc_mcontext","","",90,null],[12,"uc_sigmask","","",90,null],[3,"ipc_perm","","",null,null],[12,"__key","","",91,null],[12,"uid","","",91,null],[12,"gid","","",91,null],[12,"cuid","","",91,null],[12,"cgid","","",91,null],[12,"mode","","",91,null],[12,"__seq","","",91,null],[3,"shmid_ds","","",null,null],[12,"shm_perm","","",92,null],[12,"shm_segsz","","",92,null],[12,"shm_atime","","",92,null],[12,"shm_dtime","","",92,null],[12,"shm_ctime","","",92,null],[12,"shm_cpid","","",92,null],[12,"shm_lpid","","",92,null],[12,"shm_nattch","","",92,null],[4,"c_void","","",null,null],[4,"FILE","","",null,null],[4,"fpos_t","","",null,null],[4,"DIR","","",null,null],[4,"locale_t","","",null,null],[4,"timezone","","",null,null],[4,"fpos64_t","","",null,null],[5,"FD_CLR","","",null,null],[5,"FD_ISSET","","",null,null],[5,"FD_SET","","",null,null],[5,"FD_ZERO","","",null,null],[5,"WIFSTOPPED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"WSTOPSIG","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"WIFCONTINUED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"WIFSIGNALED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"WTERMSIG","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"WIFEXITED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"WEXITSTATUS","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"WCOREDUMP","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"QCMD","","",null,{"inputs":[{"name":"c_int"},{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"CPU_ZERO","","",null,null],[5,"CPU_SET","","",null,null],[5,"CPU_CLR","","",null,null],[5,"CPU_ISSET","","",null,{"inputs":[{"name":"usize"},{"name":"cpu_set_t"}],"output":{"name":"bool"}}],[5,"CPU_EQUAL","","",null,{"inputs":[{"name":"cpu_set_t"},{"name":"cpu_set_t"}],"output":{"name":"bool"}}],[5,"major","","",null,{"inputs":[{"name":"dev_t"}],"output":{"name":"c_uint"}}],[5,"minor","","",null,{"inputs":[{"name":"dev_t"}],"output":{"name":"c_uint"}}],[5,"makedev","","",null,{"inputs":[{"name":"c_uint"},{"name":"c_uint"}],"output":{"name":"dev_t"}}],[5,"isalnum","","",null,null],[5,"isalpha","","",null,null],[5,"iscntrl","","",null,null],[5,"isdigit","","",null,null],[5,"isgraph","","",null,null],[5,"islower","","",null,null],[5,"isprint","","",null,null],[5,"ispunct","","",null,null],[5,"isspace","","",null,null],[5,"isupper","","",null,null],[5,"isxdigit","","",null,null],[5,"tolower","","",null,null],[5,"toupper","","",null,null],[5,"fopen","","",null,null],[5,"freopen","","",null,null],[5,"fflush","","",null,null],[5,"fclose","","",null,null],[5,"remove","","",null,null],[5,"rename","","",null,null],[5,"tmpfile","","",null,null],[5,"setvbuf","","",null,null],[5,"setbuf","","",null,null],[5,"getchar","","",null,null],[5,"putchar","","",null,null],[5,"fgetc","","",null,null],[5,"fgets","","",null,null],[5,"fputc","","",null,null],[5,"fputs","","",null,null],[5,"puts","","",null,null],[5,"ungetc","","",null,null],[5,"fread","","",null,null],[5,"fwrite","","",null,null],[5,"fseek","","",null,null],[5,"ftell","","",null,null],[5,"rewind","","",null,null],[5,"fgetpos","","",null,null],[5,"fsetpos","","",null,null],[5,"feof","","",null,null],[5,"ferror","","",null,null],[5,"perror","","",null,null],[5,"atoi","","",null,null],[5,"strtod","","",null,null],[5,"strtol","","",null,null],[5,"strtoul","","",null,null],[5,"calloc","","",null,null],[5,"malloc","","",null,null],[5,"realloc","","",null,null],[5,"free","","",null,null],[5,"abort","","",null,null],[5,"exit","","",null,null],[5,"_exit","","",null,null],[5,"atexit","","",null,null],[5,"system","","",null,null],[5,"getenv","","",null,null],[5,"strcpy","","",null,null],[5,"strncpy","","",null,null],[5,"strcat","","",null,null],[5,"strncat","","",null,null],[5,"strcmp","","",null,null],[5,"strncmp","","",null,null],[5,"strcoll","","",null,null],[5,"strchr","","",null,null],[5,"strrchr","","",null,null],[5,"strspn","","",null,null],[5,"strcspn","","",null,null],[5,"strdup","","",null,null],[5,"strpbrk","","",null,null],[5,"strstr","","",null,null],[5,"strlen","","",null,null],[5,"strnlen","","",null,null],[5,"strerror","","",null,null],[5,"strtok","","",null,null],[5,"strxfrm","","",null,null],[5,"wcslen","","",null,null],[5,"wcstombs","","",null,null],[5,"memchr","","",null,null],[5,"memcmp","","",null,null],[5,"memcpy","","",null,null],[5,"memmove","","",null,null],[5,"memset","","",null,null],[5,"abs","","",null,null],[5,"atof","","",null,null],[5,"labs","","",null,null],[5,"rand","","",null,null],[5,"srand","","",null,null],[5,"getpwnam","","",null,null],[5,"getpwuid","","",null,null],[5,"fprintf","","",null,null],[5,"printf","","",null,null],[5,"snprintf","","",null,null],[5,"sprintf","","",null,null],[5,"fscanf","","",null,null],[5,"scanf","","",null,null],[5,"sscanf","","",null,null],[5,"getchar_unlocked","","",null,null],[5,"putchar_unlocked","","",null,null],[5,"socket","","",null,null],[5,"connect","","",null,null],[5,"listen","","",null,null],[5,"accept","","",null,null],[5,"getpeername","","",null,null],[5,"getsockname","","",null,null],[5,"setsockopt","","",null,null],[5,"socketpair","","",null,null],[5,"sendto","","",null,null],[5,"shutdown","","",null,null],[5,"chmod","","",null,null],[5,"fchmod","","",null,null],[5,"fstat","","",null,null],[5,"mkdir","","",null,null],[5,"stat","","",null,null],[5,"pclose","","",null,null],[5,"fdopen","","",null,null],[5,"fileno","","",null,null],[5,"open","","",null,null],[5,"creat","","",null,null],[5,"fcntl","","",null,null],[5,"opendir","","",null,null],[5,"readdir","","",null,null],[5,"readdir_r","","",null,null],[5,"closedir","","",null,null],[5,"rewinddir","","",null,null],[5,"openat","","",null,null],[5,"fchmodat","","",null,null],[5,"fchown","","",null,null],[5,"fchownat","","",null,null],[5,"fstatat","","",null,null],[5,"linkat","","",null,null],[5,"mkdirat","","",null,null],[5,"readlinkat","","",null,null],[5,"renameat","","",null,null],[5,"symlinkat","","",null,null],[5,"unlinkat","","",null,null],[5,"access","","",null,null],[5,"alarm","","",null,null],[5,"chdir","","",null,null],[5,"fchdir","","",null,null],[5,"chown","","",null,null],[5,"lchown","","",null,null],[5,"close","","",null,null],[5,"dup","","",null,null],[5,"dup2","","",null,null],[5,"execl","","",null,null],[5,"execle","","",null,null],[5,"execlp","","",null,null],[5,"execv","","",null,null],[5,"execve","","",null,null],[5,"execvp","","",null,null],[5,"fork","","",null,null],[5,"fpathconf","","",null,null],[5,"getcwd","","",null,null],[5,"getegid","","",null,null],[5,"geteuid","","",null,null],[5,"getgid","","",null,null],[5,"getgroups","","",null,null],[5,"getlogin","","",null,null],[5,"getopt","","",null,null],[5,"getpgid","","",null,null],[5,"getpgrp","","",null,null],[5,"getpid","","",null,null],[5,"getppid","","",null,null],[5,"getuid","","",null,null],[5,"isatty","","",null,null],[5,"link","","",null,null],[5,"lseek","","",null,null],[5,"pathconf","","",null,null],[5,"pause","","",null,null],[5,"pipe","","",null,null],[5,"posix_memalign","","",null,null],[5,"read","","",null,null],[5,"rmdir","","",null,null],[5,"seteuid","","",null,null],[5,"setgid","","",null,null],[5,"setpgid","","",null,null],[5,"setsid","","",null,null],[5,"setuid","","",null,null],[5,"sleep","","",null,null],[5,"nanosleep","","",null,null],[5,"tcgetpgrp","","",null,null],[5,"tcsetpgrp","","",null,null],[5,"ttyname","","",null,null],[5,"unlink","","",null,null],[5,"wait","","",null,null],[5,"waitpid","","",null,null],[5,"write","","",null,null],[5,"pread","","",null,null],[5,"pwrite","","",null,null],[5,"umask","","",null,null],[5,"utime","","",null,null],[5,"kill","","",null,null],[5,"mlock","","",null,null],[5,"munlock","","",null,null],[5,"mlockall","","",null,null],[5,"munlockall","","",null,null],[5,"mmap","","",null,null],[5,"munmap","","",null,null],[5,"if_nametoindex","","",null,null],[5,"if_indextoname","","",null,null],[5,"lstat","","",null,null],[5,"fsync","","",null,null],[5,"setenv","","",null,null],[5,"unsetenv","","",null,null],[5,"symlink","","",null,null],[5,"ftruncate","","",null,null],[5,"signal","","",null,null],[5,"getrlimit","","",null,null],[5,"setrlimit","","",null,null],[5,"getrusage","","",null,null],[5,"realpath","","",null,null],[5,"flock","","",null,null],[5,"gettimeofday","","",null,null],[5,"times","","",null,null],[5,"pthread_self","","",null,null],[5,"pthread_join","","",null,null],[5,"pthread_exit","","",null,null],[5,"pthread_attr_init","","",null,null],[5,"pthread_attr_destroy","","",null,null],[5,"pthread_attr_setstacksize","","",null,null],[5,"pthread_attr_setdetachstate","","",null,null],[5,"pthread_detach","","",null,null],[5,"sched_yield","","",null,null],[5,"pthread_key_create","","",null,null],[5,"pthread_key_delete","","",null,null],[5,"pthread_getspecific","","",null,null],[5,"pthread_setspecific","","",null,null],[5,"pthread_mutex_init","","",null,null],[5,"pthread_mutex_destroy","","",null,null],[5,"pthread_mutex_lock","","",null,null],[5,"pthread_mutex_trylock","","",null,null],[5,"pthread_mutex_unlock","","",null,null],[5,"pthread_mutexattr_init","","",null,null],[5,"pthread_mutexattr_destroy","","",null,null],[5,"pthread_mutexattr_settype","","",null,null],[5,"pthread_cond_init","","",null,null],[5,"pthread_cond_wait","","",null,null],[5,"pthread_cond_timedwait","","",null,null],[5,"pthread_cond_signal","","",null,null],[5,"pthread_cond_broadcast","","",null,null],[5,"pthread_cond_destroy","","",null,null],[5,"pthread_condattr_init","","",null,null],[5,"pthread_condattr_destroy","","",null,null],[5,"pthread_rwlock_init","","",null,null],[5,"pthread_rwlock_destroy","","",null,null],[5,"pthread_rwlock_rdlock","","",null,null],[5,"pthread_rwlock_tryrdlock","","",null,null],[5,"pthread_rwlock_wrlock","","",null,null],[5,"pthread_rwlock_trywrlock","","",null,null],[5,"pthread_rwlock_unlock","","",null,null],[5,"pthread_rwlockattr_init","","",null,null],[5,"pthread_rwlockattr_destroy","","",null,null],[5,"strerror_r","","",null,null],[5,"getsockopt","","",null,null],[5,"raise","","",null,null],[5,"sigaction","","",null,null],[5,"utimes","","",null,null],[5,"dlopen","","",null,null],[5,"dlerror","","",null,null],[5,"dlsym","","",null,null],[5,"dlclose","","",null,null],[5,"dladdr","","",null,null],[5,"getaddrinfo","","",null,null],[5,"freeaddrinfo","","",null,null],[5,"gai_strerror","","",null,null],[5,"res_init","","",null,null],[5,"gmtime_r","","",null,null],[5,"localtime_r","","",null,null],[5,"mktime","","",null,null],[5,"time","","",null,null],[5,"gmtime","","",null,null],[5,"localtime","","",null,null],[5,"mknod","","",null,null],[5,"uname","","",null,null],[5,"gethostname","","",null,null],[5,"chroot","","",null,null],[5,"usleep","","",null,null],[5,"send","","",null,null],[5,"recv","","",null,null],[5,"putenv","","",null,null],[5,"poll","","",null,null],[5,"select","","",null,null],[5,"setlocale","","",null,null],[5,"localeconv","","",null,null],[5,"sem_destroy","","",null,null],[5,"sem_wait","","",null,null],[5,"sem_trywait","","",null,null],[5,"sem_post","","",null,null],[5,"sem_init","","",null,null],[5,"statvfs","","",null,null],[5,"fstatvfs","","",null,null],[5,"readlink","","",null,null],[5,"sigemptyset","","",null,null],[5,"sigaddset","","",null,null],[5,"sigfillset","","",null,null],[5,"sigdelset","","",null,null],[5,"sigismember","","",null,null],[5,"sigprocmask","","",null,null],[5,"sigpending","","",null,null],[5,"timegm","","",null,null],[5,"getsid","","",null,null],[5,"sysconf","","",null,null],[5,"mkfifo","","",null,null],[5,"pselect","","",null,null],[5,"fseeko","","",null,null],[5,"ftello","","",null,null],[5,"tcdrain","","",null,null],[5,"cfgetispeed","","",null,null],[5,"cfgetospeed","","",null,null],[5,"cfmakeraw","","",null,null],[5,"cfsetispeed","","",null,null],[5,"cfsetospeed","","",null,null],[5,"cfsetspeed","","",null,null],[5,"tcgetattr","","",null,null],[5,"tcsetattr","","",null,null],[5,"tcflow","","",null,null],[5,"tcflush","","",null,null],[5,"tcgetsid","","",null,null],[5,"tcsendbreak","","",null,null],[5,"mkstemp","","",null,null],[5,"mkdtemp","","",null,null],[5,"tmpnam","","",null,null],[5,"openlog","","",null,null],[5,"closelog","","",null,null],[5,"setlogmask","","",null,null],[5,"syslog","","",null,null],[5,"nice","","",null,null],[5,"grantpt","","",null,null],[5,"posix_openpt","","",null,null],[5,"ptsname","","",null,null],[5,"unlockpt","","",null,null],[5,"fdatasync","","",null,null],[5,"mincore","","",null,null],[5,"clock_getres","","",null,null],[5,"clock_gettime","","",null,null],[5,"clock_settime","","",null,null],[5,"dirfd","","",null,null],[5,"pthread_getattr_np","","",null,null],[5,"pthread_attr_getstack","","",null,null],[5,"memalign","","",null,null],[5,"setgroups","","",null,null],[5,"pipe2","","",null,null],[5,"statfs","","",null,null],[5,"statfs64","","",null,null],[5,"fstatfs","","",null,null],[5,"fstatfs64","","",null,null],[5,"statvfs64","","",null,null],[5,"fstatvfs64","","",null,null],[5,"memrchr","","",null,null],[5,"posix_fadvise","","",null,null],[5,"futimens","","",null,null],[5,"utimensat","","",null,null],[5,"duplocale","","",null,null],[5,"freelocale","","",null,null],[5,"newlocale","","",null,null],[5,"uselocale","","",null,null],[5,"creat64","","",null,null],[5,"fstat64","","",null,null],[5,"fstatat64","","",null,null],[5,"ftruncate64","","",null,null],[5,"getrlimit64","","",null,null],[5,"lseek64","","",null,null],[5,"lstat64","","",null,null],[5,"mmap64","","",null,null],[5,"open64","","",null,null],[5,"openat64","","",null,null],[5,"pread64","","",null,null],[5,"preadv64","","",null,null],[5,"pwrite64","","",null,null],[5,"pwritev64","","",null,null],[5,"readdir64","","",null,null],[5,"readdir64_r","","",null,null],[5,"setrlimit64","","",null,null],[5,"stat64","","",null,null],[5,"truncate64","","",null,null],[5,"fdopendir","","",null,null],[5,"mknodat","","",null,null],[5,"pthread_condattr_getclock","","",null,null],[5,"pthread_condattr_setclock","","",null,null],[5,"pthread_condattr_setpshared","","",null,null],[5,"accept4","","",null,null],[5,"pthread_mutexattr_setpshared","","",null,null],[5,"pthread_rwlockattr_getpshared","","",null,null],[5,"pthread_rwlockattr_setpshared","","",null,null],[5,"ptsname_r","","",null,null],[5,"clearenv","","",null,null],[5,"waitid","","",null,null],[5,"setreuid","","",null,null],[5,"setregid","","",null,null],[5,"getresuid","","",null,null],[5,"getresgid","","",null,null],[5,"acct","","",null,null],[5,"brk","","",null,null],[5,"sbrk","","",null,null],[5,"vfork","","",null,null],[5,"setresgid","","",null,null],[5,"setresuid","","",null,null],[5,"wait4","","",null,null],[5,"openpty","","",null,null],[5,"execvpe","","",null,null],[5,"fexecve","","",null,null],[5,"aio_read","","",null,null],[5,"aio_write","","",null,null],[5,"aio_fsync","","",null,null],[5,"aio_error","","",null,null],[5,"aio_return","","",null,null],[5,"aio_suspend","","",null,null],[5,"aio_cancel","","",null,null],[5,"lio_listio","","",null,null],[5,"lutimes","","",null,null],[5,"setpwent","","",null,null],[5,"endpwent","","",null,null],[5,"getpwent","","",null,null],[5,"setspent","","",null,null],[5,"endspent","","",null,null],[5,"getspent","","",null,null],[5,"getspnam","","",null,null],[5,"shm_open","","",null,null],[5,"shmget","","",null,null],[5,"shmat","","",null,null],[5,"shmdt","","",null,null],[5,"shmctl","","",null,null],[5,"ftok","","",null,null],[5,"semget","","",null,null],[5,"semop","","",null,null],[5,"semctl","","",null,null],[5,"msgctl","","",null,null],[5,"msgget","","",null,null],[5,"msgrcv","","",null,null],[5,"msgsnd","","",null,null],[5,"mprotect","","",null,null],[5,"__errno_location","","",null,null],[5,"fopen64","","",null,null],[5,"freopen64","","",null,null],[5,"tmpfile64","","",null,null],[5,"fgetpos64","","",null,null],[5,"fsetpos64","","",null,null],[5,"fseeko64","","",null,null],[5,"ftello64","","",null,null],[5,"fallocate","","",null,null],[5,"posix_fallocate","","",null,null],[5,"readahead","","",null,null],[5,"getxattr","","",null,null],[5,"lgetxattr","","",null,null],[5,"fgetxattr","","",null,null],[5,"setxattr","","",null,null],[5,"lsetxattr","","",null,null],[5,"fsetxattr","","",null,null],[5,"listxattr","","",null,null],[5,"llistxattr","","",null,null],[5,"flistxattr","","",null,null],[5,"removexattr","","",null,null],[5,"lremovexattr","","",null,null],[5,"fremovexattr","","",null,null],[5,"signalfd","","",null,null],[5,"timerfd_create","","",null,null],[5,"timerfd_gettime","","",null,null],[5,"timerfd_settime","","",null,null],[5,"pwritev","","",null,null],[5,"preadv","","",null,null],[5,"quotactl","","",null,null],[5,"mq_open","","",null,null],[5,"mq_close","","",null,null],[5,"mq_unlink","","",null,null],[5,"mq_receive","","",null,null],[5,"mq_send","","",null,null],[5,"mq_getattr","","",null,null],[5,"mq_setattr","","",null,null],[5,"epoll_pwait","","",null,null],[5,"dup3","","",null,null],[5,"mkostemp","","",null,null],[5,"mkostemps","","",null,null],[5,"sigtimedwait","","",null,null],[5,"sigwaitinfo","","",null,null],[5,"nl_langinfo_l","","",null,null],[5,"getnameinfo","","",null,null],[5,"pthread_setschedprio","","",null,null],[5,"prlimit","","",null,null],[5,"prlimit64","","",null,null],[5,"getloadavg","","",null,null],[5,"process_vm_readv","","",null,null],[5,"process_vm_writev","","",null,null],[5,"reboot","","",null,null],[5,"setfsgid","","",null,null],[5,"setfsuid","","",null,null],[5,"mkfifoat","","",null,null],[5,"if_nameindex","","",null,null],[5,"if_freenameindex","","",null,null],[5,"sync_file_range","","",null,null],[5,"getifaddrs","","",null,null],[5,"freeifaddrs","","",null,null],[5,"mremap","","",null,null],[5,"glob","","",null,null],[5,"globfree","","",null,null],[5,"posix_madvise","","",null,null],[5,"shm_unlink","","",null,null],[5,"seekdir","","",null,null],[5,"telldir","","",null,null],[5,"madvise","","",null,null],[5,"msync","","",null,null],[5,"recvfrom","","",null,null],[5,"mkstemps","","",null,null],[5,"futimes","","",null,null],[5,"nl_langinfo","","",null,null],[5,"bind","","",null,null],[5,"writev","","",null,null],[5,"readv","","",null,null],[5,"sendmsg","","",null,null],[5,"recvmsg","","",null,null],[5,"getdomainname","","",null,null],[5,"setdomainname","","",null,null],[5,"vhangup","","",null,null],[5,"sendmmsg","","",null,null],[5,"recvmmsg","","",null,null],[5,"sync","","",null,null],[5,"syscall","","",null,null],[5,"sched_getaffinity","","",null,null],[5,"sched_setaffinity","","",null,null],[5,"epoll_create","","",null,null],[5,"epoll_create1","","",null,null],[5,"epoll_wait","","",null,null],[5,"epoll_ctl","","",null,null],[5,"pthread_getschedparam","","",null,null],[5,"unshare","","",null,null],[5,"umount","","",null,null],[5,"sched_get_priority_max","","",null,null],[5,"tee","","",null,null],[5,"settimeofday","","",null,null],[5,"splice","","",null,null],[5,"eventfd","","",null,null],[5,"sched_rr_get_interval","","",null,null],[5,"sem_timedwait","","",null,null],[5,"sched_setparam","","",null,null],[5,"setns","","",null,null],[5,"swapoff","","",null,null],[5,"vmsplice","","",null,null],[5,"mount","","",null,null],[5,"personality","","",null,null],[5,"prctl","","",null,null],[5,"sched_getparam","","",null,null],[5,"ppoll","","",null,null],[5,"pthread_mutex_timedlock","","",null,null],[5,"clone","","",null,null],[5,"sched_getscheduler","","",null,null],[5,"clock_nanosleep","","",null,null],[5,"pthread_attr_getguardsize","","",null,null],[5,"sethostname","","",null,null],[5,"sched_get_priority_min","","",null,null],[5,"pthread_condattr_getpshared","","",null,null],[5,"sysinfo","","",null,null],[5,"umount2","","",null,null],[5,"pthread_setschedparam","","",null,null],[5,"swapon","","",null,null],[5,"sched_setscheduler","","",null,null],[5,"sendfile","","",null,null],[5,"sigsuspend","","",null,null],[5,"getgrgid_r","","",null,null],[5,"sigaltstack","","",null,null],[5,"sem_close","","",null,null],[5,"getdtablesize","","",null,null],[5,"getgrnam_r","","",null,null],[5,"initgroups","","",null,null],[5,"pthread_sigmask","","",null,null],[5,"sem_open","","",null,null],[5,"getgrnam","","",null,null],[5,"pthread_kill","","",null,null],[5,"sem_unlink","","",null,null],[5,"daemon","","",null,null],[5,"getpwnam_r","","",null,null],[5,"getpwuid_r","","",null,null],[5,"sigwait","","",null,null],[5,"pthread_atfork","","",null,null],[5,"getgrgid","","",null,null],[5,"getgrouplist","","",null,null],[5,"pthread_mutexattr_getpshared","","",null,null],[5,"popen","","",null,null],[5,"faccessat","","",null,null],[5,"pthread_create","","",null,null],[5,"utmpxname","","",null,null],[5,"getutxent","","",null,null],[5,"getutxid","","",null,null],[5,"getutxline","","",null,null],[5,"pututxline","","",null,null],[5,"setutxent","","",null,null],[5,"endutxent","","",null,null],[5,"getpt","","",null,null],[5,"sysctl","","",null,null],[5,"ioctl","","",null,null],[5,"backtrace","","",null,null],[5,"glob64","","",null,null],[5,"globfree64","","",null,null],[5,"ptrace","","",null,null],[5,"pthread_attr_getaffinity_np","","",null,null],[5,"pthread_attr_setaffinity_np","","",null,null],[5,"getpriority","","",null,null],[5,"setpriority","","",null,null],[5,"pthread_getaffinity_np","","",null,null],[5,"pthread_setaffinity_np","","",null,null],[5,"pthread_rwlockattr_getkind_np","","",null,null],[5,"pthread_rwlockattr_setkind_np","","",null,null],[5,"sched_getcpu","","",null,null],[5,"getcontext","","",null,null],[5,"setcontext","","",null,null],[5,"makecontext","","",null,null],[5,"swapcontext","","",null,null],[5,"iopl","","",null,null],[5,"ioperm","","",null,null],[11,"clone","","",79,{"inputs":[{"name":"self"}],"output":{"name":"stat"}}],[11,"clone","","",80,{"inputs":[{"name":"self"}],"output":{"name":"stat64"}}],[11,"clone","","",81,{"inputs":[{"name":"self"}],"output":{"name":"statfs64"}}],[11,"clone","","",82,{"inputs":[{"name":"self"}],"output":{"name":"statvfs64"}}],[11,"clone","","",93,{"inputs":[{"name":"self"}],"output":{"name":"pthread_attr_t"}}],[11,"clone","","",83,{"inputs":[{"name":"self"}],"output":{"name":"_libc_fpxreg"}}],[11,"clone","","",84,{"inputs":[{"name":"self"}],"output":{"name":"_libc_xmmreg"}}],[11,"clone","","",85,{"inputs":[{"name":"self"}],"output":{"name":"_libc_fpstate"}}],[11,"clone","","",86,{"inputs":[{"name":"self"}],"output":{"name":"user_fpregs_struct"}}],[11,"clone","","",87,{"inputs":[{"name":"self"}],"output":{"name":"user_regs_struct"}}],[11,"clone","","",88,{"inputs":[{"name":"self"}],"output":{"name":"user"}}],[11,"clone","","",89,{"inputs":[{"name":"self"}],"output":{"name":"mcontext_t"}}],[11,"clone","","",90,{"inputs":[{"name":"self"}],"output":{"name":"ucontext_t"}}],[11,"clone","","",91,{"inputs":[{"name":"self"}],"output":{"name":"ipc_perm"}}],[11,"clone","","",92,{"inputs":[{"name":"self"}],"output":{"name":"shmid_ds"}}],[11,"clone","","",94,{"inputs":[{"name":"self"}],"output":{"name":"sigset_t"}}],[11,"clone","","",77,{"inputs":[{"name":"self"}],"output":{"name":"sysinfo"}}],[11,"clone","","",78,{"inputs":[{"name":"self"}],"output":{"name":"msqid_ds"}}],[11,"clone","","",63,{"inputs":[{"name":"self"}],"output":{"name":"aiocb"}}],[11,"clone","","",64,{"inputs":[{"name":"self"}],"output":{"name":"__exit_status"}}],[11,"clone","","",65,{"inputs":[{"name":"self"}],"output":{"name":"__timeval"}}],[11,"clone","","",66,{"inputs":[{"name":"self"}],"output":{"name":"utmpx"}}],[11,"clone","","",67,{"inputs":[{"name":"self"}],"output":{"name":"sigaction"}}],[11,"clone","","",68,{"inputs":[{"name":"self"}],"output":{"name":"stack_t"}}],[11,"clone","","",69,{"inputs":[{"name":"self"}],"output":{"name":"siginfo_t"}}],[11,"clone","","",70,{"inputs":[{"name":"self"}],"output":{"name":"glob64_t"}}],[11,"clone","","",71,{"inputs":[{"name":"self"}],"output":{"name":"ucred"}}],[11,"clone","","",72,{"inputs":[{"name":"self"}],"output":{"name":"statfs"}}],[11,"clone","","",73,{"inputs":[{"name":"self"}],"output":{"name":"msghdr"}}],[11,"clone","","",74,{"inputs":[{"name":"self"}],"output":{"name":"cmsghdr"}}],[11,"clone","","",75,{"inputs":[{"name":"self"}],"output":{"name":"termios"}}],[11,"clone","","",76,{"inputs":[{"name":"self"}],"output":{"name":"flock"}}],[11,"clone","","",95,{"inputs":[{"name":"self"}],"output":{"name":"sem_t"}}],[11,"clone","","",33,{"inputs":[{"name":"self"}],"output":{"name":"dirent"}}],[11,"clone","","",34,{"inputs":[{"name":"self"}],"output":{"name":"dirent64"}}],[11,"clone","","",35,{"inputs":[{"name":"self"}],"output":{"name":"rlimit64"}}],[11,"clone","","",36,{"inputs":[{"name":"self"}],"output":{"name":"glob_t"}}],[11,"clone","","",37,{"inputs":[{"name":"self"}],"output":{"name":"ifaddrs"}}],[11,"clone","","",96,{"inputs":[{"name":"self"}],"output":{"name":"pthread_mutex_t"}}],[11,"clone","","",97,{"inputs":[{"name":"self"}],"output":{"name":"pthread_rwlock_t"}}],[11,"clone","","",98,{"inputs":[{"name":"self"}],"output":{"name":"pthread_mutexattr_t"}}],[11,"clone","","",99,{"inputs":[{"name":"self"}],"output":{"name":"pthread_rwlockattr_t"}}],[11,"clone","","",100,{"inputs":[{"name":"self"}],"output":{"name":"pthread_cond_t"}}],[11,"clone","","",101,{"inputs":[{"name":"self"}],"output":{"name":"pthread_condattr_t"}}],[11,"clone","","",38,{"inputs":[{"name":"self"}],"output":{"name":"passwd"}}],[11,"clone","","",39,{"inputs":[{"name":"self"}],"output":{"name":"spwd"}}],[11,"clone","","",40,{"inputs":[{"name":"self"}],"output":{"name":"statvfs"}}],[11,"clone","","",41,{"inputs":[{"name":"self"}],"output":{"name":"dqblk"}}],[11,"clone","","",42,{"inputs":[{"name":"self"}],"output":{"name":"signalfd_siginfo"}}],[11,"clone","","",43,{"inputs":[{"name":"self"}],"output":{"name":"itimerspec"}}],[11,"clone","","",102,{"inputs":[{"name":"self"}],"output":{"name":"fsid_t"}}],[11,"clone","","",44,{"inputs":[{"name":"self"}],"output":{"name":"mq_attr"}}],[11,"clone","","",103,{"inputs":[{"name":"self"}],"output":{"name":"cpu_set_t"}}],[11,"clone","","",45,{"inputs":[{"name":"self"}],"output":{"name":"if_nameindex"}}],[11,"clone","","",46,{"inputs":[{"name":"self"}],"output":{"name":"msginfo"}}],[11,"clone","","",47,{"inputs":[{"name":"self"}],"output":{"name":"mmsghdr"}}],[11,"clone","","",48,{"inputs":[{"name":"self"}],"output":{"name":"sembuf"}}],[11,"clone","","",49,{"inputs":[{"name":"self"}],"output":{"name":"input_event"}}],[11,"clone","","",50,{"inputs":[{"name":"self"}],"output":{"name":"input_id"}}],[11,"clone","","",51,{"inputs":[{"name":"self"}],"output":{"name":"input_absinfo"}}],[11,"clone","","",52,{"inputs":[{"name":"self"}],"output":{"name":"input_keymap_entry"}}],[11,"clone","","",53,{"inputs":[{"name":"self"}],"output":{"name":"input_mask"}}],[11,"clone","","",54,{"inputs":[{"name":"self"}],"output":{"name":"ff_replay"}}],[11,"clone","","",55,{"inputs":[{"name":"self"}],"output":{"name":"ff_trigger"}}],[11,"clone","","",56,{"inputs":[{"name":"self"}],"output":{"name":"ff_envelope"}}],[11,"clone","","",57,{"inputs":[{"name":"self"}],"output":{"name":"ff_constant_effect"}}],[11,"clone","","",58,{"inputs":[{"name":"self"}],"output":{"name":"ff_ramp_effect"}}],[11,"clone","","",59,{"inputs":[{"name":"self"}],"output":{"name":"ff_condition_effect"}}],[11,"clone","","",60,{"inputs":[{"name":"self"}],"output":{"name":"ff_periodic_effect"}}],[11,"clone","","",61,{"inputs":[{"name":"self"}],"output":{"name":"ff_rumble_effect"}}],[11,"clone","","",62,{"inputs":[{"name":"self"}],"output":{"name":"ff_effect"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_in"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_in6"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_un"}}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_storage"}}],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"addrinfo"}}],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_nl"}}],[11,"clone","","",25,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_ll"}}],[11,"clone","","",104,{"inputs":[{"name":"self"}],"output":{"name":"fd_set"}}],[11,"clone","","",26,{"inputs":[{"name":"self"}],"output":{"name":"tm"}}],[11,"clone","","",27,{"inputs":[{"name":"self"}],"output":{"name":"sched_param"}}],[11,"clone","","",28,{"inputs":[{"name":"self"}],"output":{"name":"dl_info"}}],[11,"clone","","",29,{"inputs":[{"name":"self"}],"output":{"name":"epoll_event"}}],[11,"clone","","",30,{"inputs":[{"name":"self"}],"output":{"name":"utsname"}}],[11,"clone","","",31,{"inputs":[{"name":"self"}],"output":{"name":"lconv"}}],[11,"clone","","",32,{"inputs":[{"name":"self"}],"output":{"name":"sigevent"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"group"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"utimbuf"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"timeval"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"timespec"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"rlimit"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"rusage"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"in_addr"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"in6_addr"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"ip_mreq"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"ipv6_mreq"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"hostent"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"iovec"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"pollfd"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"winsize"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"linger"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"sigval"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"itimerval"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"tms"}}],[6,"int8_t","","",null,null],[6,"int16_t","","",null,null],[6,"int32_t","","",null,null],[6,"int64_t","","",null,null],[6,"uint8_t","","",null,null],[6,"uint16_t","","",null,null],[6,"uint32_t","","",null,null],[6,"uint64_t","","",null,null],[6,"c_schar","","",null,null],[6,"c_uchar","","",null,null],[6,"c_short","","",null,null],[6,"c_ushort","","",null,null],[6,"c_int","","",null,null],[6,"c_uint","","",null,null],[6,"c_float","","",null,null],[6,"c_double","","",null,null],[6,"c_longlong","","",null,null],[6,"c_ulonglong","","",null,null],[6,"intmax_t","","",null,null],[6,"uintmax_t","","",null,null],[6,"size_t","","",null,null],[6,"ptrdiff_t","","",null,null],[6,"intptr_t","","",null,null],[6,"uintptr_t","","",null,null],[6,"ssize_t","","",null,null],[6,"pid_t","","",null,null],[6,"uid_t","","",null,null],[6,"gid_t","","",null,null],[6,"in_addr_t","","",null,null],[6,"in_port_t","","",null,null],[6,"sighandler_t","","",null,null],[6,"cc_t","","",null,null],[6,"sa_family_t","","",null,null],[6,"pthread_key_t","","",null,null],[6,"speed_t","","",null,null],[6,"tcflag_t","","",null,null],[6,"clockid_t","","",null,null],[6,"key_t","","",null,null],[6,"id_t","","",null,null],[6,"useconds_t","","",null,null],[6,"dev_t","","",null,null],[6,"socklen_t","","",null,null],[6,"pthread_t","","",null,null],[6,"mode_t","","",null,null],[6,"ino64_t","","",null,null],[6,"off64_t","","",null,null],[6,"blkcnt64_t","","",null,null],[6,"rlim64_t","","",null,null],[6,"shmatt_t","","",null,null],[6,"mqd_t","","",null,null],[6,"msgqnum_t","","",null,null],[6,"msglen_t","","",null,null],[6,"nfds_t","","",null,null],[6,"nl_item","","",null,null],[6,"idtype_t","","",null,null],[6,"loff_t","","",null,null],[6,"__u8","","",null,null],[6,"__u16","","",null,null],[6,"__s16","","",null,null],[6,"__u32","","",null,null],[6,"__s32","","",null,null],[6,"fsblkcnt_t","","",null,null],[6,"fsfilcnt_t","","",null,null],[6,"rlim_t","","",null,null],[6,"__priority_which_t","","",null,null],[6,"c_long","","",null,null],[6,"c_ulong","","",null,null],[6,"clock_t","","",null,null],[6,"time_t","","",null,null],[6,"ino_t","","",null,null],[6,"off_t","","",null,null],[6,"blkcnt_t","","",null,null],[6,"__fsword_t","","",null,null],[6,"c_char","","",null,null],[6,"wchar_t","","",null,null],[6,"nlink_t","","",null,null],[6,"blksize_t","","",null,null],[6,"greg_t","","",null,null],[6,"suseconds_t","","",null,null],[6,"__u64","","",null,null],[17,"SIG_DFL","","",null,null],[17,"SIG_IGN","","",null,null],[17,"SIG_ERR","","",null,null],[17,"DT_FIFO","","",null,null],[17,"DT_CHR","","",null,null],[17,"DT_DIR","","",null,null],[17,"DT_BLK","","",null,null],[17,"DT_REG","","",null,null],[17,"DT_LNK","","",null,null],[17,"DT_SOCK","","",null,null],[17,"FD_CLOEXEC","","",null,null],[17,"USRQUOTA","","",null,null],[17,"GRPQUOTA","","",null,null],[17,"SIGIOT","","",null,null],[17,"S_ISUID","","",null,null],[17,"S_ISGID","","",null,null],[17,"S_ISVTX","","",null,null],[17,"IF_NAMESIZE","","",null,null],[17,"LOG_EMERG","","",null,null],[17,"LOG_ALERT","","",null,null],[17,"LOG_CRIT","","",null,null],[17,"LOG_ERR","","",null,null],[17,"LOG_WARNING","","",null,null],[17,"LOG_NOTICE","","",null,null],[17,"LOG_INFO","","",null,null],[17,"LOG_DEBUG","","",null,null],[17,"LOG_KERN","","",null,null],[17,"LOG_USER","","",null,null],[17,"LOG_MAIL","","",null,null],[17,"LOG_DAEMON","","",null,null],[17,"LOG_AUTH","","",null,null],[17,"LOG_SYSLOG","","",null,null],[17,"LOG_LPR","","",null,null],[17,"LOG_NEWS","","",null,null],[17,"LOG_UUCP","","",null,null],[17,"LOG_LOCAL0","","",null,null],[17,"LOG_LOCAL1","","",null,null],[17,"LOG_LOCAL2","","",null,null],[17,"LOG_LOCAL3","","",null,null],[17,"LOG_LOCAL4","","",null,null],[17,"LOG_LOCAL5","","",null,null],[17,"LOG_LOCAL6","","",null,null],[17,"LOG_LOCAL7","","",null,null],[17,"LOG_PID","","",null,null],[17,"LOG_CONS","","",null,null],[17,"LOG_ODELAY","","",null,null],[17,"LOG_NDELAY","","",null,null],[17,"LOG_NOWAIT","","",null,null],[17,"LOG_PRIMASK","","",null,null],[17,"LOG_FACMASK","","",null,null],[17,"PRIO_PROCESS","","",null,null],[17,"PRIO_PGRP","","",null,null],[17,"PRIO_USER","","",null,null],[17,"PRIO_MIN","","",null,null],[17,"PRIO_MAX","","",null,null],[17,"IPPROTO_ICMP","","",null,null],[17,"IPPROTO_ICMPV6","","",null,null],[17,"IPPROTO_TCP","","",null,null],[17,"IPPROTO_UDP","","",null,null],[17,"IPPROTO_IP","","",null,null],[17,"IPPROTO_IPV6","","",null,null],[17,"INADDR_LOOPBACK","","",null,null],[17,"INADDR_ANY","","",null,null],[17,"INADDR_BROADCAST","","",null,null],[17,"INADDR_NONE","","",null,null],[17,"EXIT_FAILURE","","",null,null],[17,"EXIT_SUCCESS","","",null,null],[17,"RAND_MAX","","",null,null],[17,"EOF","","",null,null],[17,"SEEK_SET","","",null,null],[17,"SEEK_CUR","","",null,null],[17,"SEEK_END","","",null,null],[17,"_IOFBF","","",null,null],[17,"_IONBF","","",null,null],[17,"_IOLBF","","",null,null],[17,"F_DUPFD","","",null,null],[17,"F_GETFD","","",null,null],[17,"F_SETFD","","",null,null],[17,"F_GETFL","","",null,null],[17,"F_SETFL","","",null,null],[17,"F_SETLEASE","","",null,null],[17,"F_GETLEASE","","",null,null],[17,"F_NOTIFY","","",null,null],[17,"F_CANCELLK","","",null,null],[17,"F_DUPFD_CLOEXEC","","",null,null],[17,"F_SETPIPE_SZ","","",null,null],[17,"F_GETPIPE_SZ","","",null,null],[17,"F_ADD_SEALS","","",null,null],[17,"F_GET_SEALS","","",null,null],[17,"F_SEAL_SEAL","","",null,null],[17,"F_SEAL_SHRINK","","",null,null],[17,"F_SEAL_GROW","","",null,null],[17,"F_SEAL_WRITE","","",null,null],[17,"SIGTRAP","","",null,null],[17,"PTHREAD_CREATE_JOINABLE","","",null,null],[17,"PTHREAD_CREATE_DETACHED","","",null,null],[17,"CLOCK_REALTIME","","",null,null],[17,"CLOCK_MONOTONIC","","",null,null],[17,"CLOCK_PROCESS_CPUTIME_ID","","",null,null],[17,"CLOCK_THREAD_CPUTIME_ID","","",null,null],[17,"CLOCK_MONOTONIC_RAW","","",null,null],[17,"CLOCK_REALTIME_COARSE","","",null,null],[17,"CLOCK_MONOTONIC_COARSE","","",null,null],[17,"CLOCK_BOOTTIME","","",null,null],[17,"CLOCK_REALTIME_ALARM","","",null,null],[17,"CLOCK_BOOTTIME_ALARM","","",null,null],[17,"TIMER_ABSTIME","","",null,null],[17,"RLIMIT_CPU","","",null,null],[17,"RLIMIT_FSIZE","","",null,null],[17,"RLIMIT_DATA","","",null,null],[17,"RLIMIT_STACK","","",null,null],[17,"RLIMIT_CORE","","",null,null],[17,"RLIMIT_LOCKS","","",null,null],[17,"RLIMIT_SIGPENDING","","",null,null],[17,"RLIMIT_MSGQUEUE","","",null,null],[17,"RLIMIT_NICE","","",null,null],[17,"RLIMIT_RTPRIO","","",null,null],[17,"RUSAGE_SELF","","",null,null],[17,"O_RDONLY","","",null,null],[17,"O_WRONLY","","",null,null],[17,"O_RDWR","","",null,null],[17,"SOCK_CLOEXEC","","",null,null],[17,"S_IFIFO","","",null,null],[17,"S_IFCHR","","",null,null],[17,"S_IFBLK","","",null,null],[17,"S_IFDIR","","",null,null],[17,"S_IFREG","","",null,null],[17,"S_IFLNK","","",null,null],[17,"S_IFSOCK","","",null,null],[17,"S_IFMT","","",null,null],[17,"S_IRWXU","","",null,null],[17,"S_IXUSR","","",null,null],[17,"S_IWUSR","","",null,null],[17,"S_IRUSR","","",null,null],[17,"S_IRWXG","","",null,null],[17,"S_IXGRP","","",null,null],[17,"S_IWGRP","","",null,null],[17,"S_IRGRP","","",null,null],[17,"S_IRWXO","","",null,null],[17,"S_IXOTH","","",null,null],[17,"S_IWOTH","","",null,null],[17,"S_IROTH","","",null,null],[17,"F_OK","","",null,null],[17,"R_OK","","",null,null],[17,"W_OK","","",null,null],[17,"X_OK","","",null,null],[17,"STDIN_FILENO","","",null,null],[17,"STDOUT_FILENO","","",null,null],[17,"STDERR_FILENO","","",null,null],[17,"SIGHUP","","",null,null],[17,"SIGINT","","",null,null],[17,"SIGQUIT","","",null,null],[17,"SIGILL","","",null,null],[17,"SIGABRT","","",null,null],[17,"SIGFPE","","",null,null],[17,"SIGKILL","","",null,null],[17,"SIGSEGV","","",null,null],[17,"SIGPIPE","","",null,null],[17,"SIGALRM","","",null,null],[17,"SIGTERM","","",null,null],[17,"PROT_NONE","","",null,null],[17,"PROT_READ","","",null,null],[17,"PROT_WRITE","","",null,null],[17,"PROT_EXEC","","",null,null],[17,"LC_CTYPE","","",null,null],[17,"LC_NUMERIC","","",null,null],[17,"LC_TIME","","",null,null],[17,"LC_COLLATE","","",null,null],[17,"LC_MONETARY","","",null,null],[17,"LC_MESSAGES","","",null,null],[17,"LC_ALL","","",null,null],[17,"LC_CTYPE_MASK","","",null,null],[17,"LC_NUMERIC_MASK","","",null,null],[17,"LC_TIME_MASK","","",null,null],[17,"LC_COLLATE_MASK","","",null,null],[17,"LC_MONETARY_MASK","","",null,null],[17,"LC_MESSAGES_MASK","","",null,null],[17,"MAP_FILE","","",null,null],[17,"MAP_SHARED","","",null,null],[17,"MAP_PRIVATE","","",null,null],[17,"MAP_FIXED","","",null,null],[17,"MAP_FAILED","","",null,null],[17,"MS_ASYNC","","",null,null],[17,"MS_INVALIDATE","","",null,null],[17,"MS_SYNC","","",null,null],[17,"MS_RDONLY","","",null,null],[17,"MS_NOSUID","","",null,null],[17,"MS_NODEV","","",null,null],[17,"MS_NOEXEC","","",null,null],[17,"MS_SYNCHRONOUS","","",null,null],[17,"MS_REMOUNT","","",null,null],[17,"MS_MANDLOCK","","",null,null],[17,"MS_DIRSYNC","","",null,null],[17,"MS_NOATIME","","",null,null],[17,"MS_NODIRATIME","","",null,null],[17,"MS_BIND","","",null,null],[17,"MS_MOVE","","",null,null],[17,"MS_REC","","",null,null],[17,"MS_SILENT","","",null,null],[17,"MS_POSIXACL","","",null,null],[17,"MS_UNBINDABLE","","",null,null],[17,"MS_PRIVATE","","",null,null],[17,"MS_SLAVE","","",null,null],[17,"MS_SHARED","","",null,null],[17,"MS_RELATIME","","",null,null],[17,"MS_KERNMOUNT","","",null,null],[17,"MS_I_VERSION","","",null,null],[17,"MS_STRICTATIME","","",null,null],[17,"MS_ACTIVE","","",null,null],[17,"MS_NOUSER","","",null,null],[17,"MS_MGC_VAL","","",null,null],[17,"MS_MGC_MSK","","",null,null],[17,"MS_RMT_MASK","","",null,null],[17,"EPERM","","",null,null],[17,"ENOENT","","",null,null],[17,"ESRCH","","",null,null],[17,"EINTR","","",null,null],[17,"EIO","","",null,null],[17,"ENXIO","","",null,null],[17,"E2BIG","","",null,null],[17,"ENOEXEC","","",null,null],[17,"EBADF","","",null,null],[17,"ECHILD","","",null,null],[17,"EAGAIN","","",null,null],[17,"ENOMEM","","",null,null],[17,"EACCES","","",null,null],[17,"EFAULT","","",null,null],[17,"ENOTBLK","","",null,null],[17,"EBUSY","","",null,null],[17,"EEXIST","","",null,null],[17,"EXDEV","","",null,null],[17,"ENODEV","","",null,null],[17,"ENOTDIR","","",null,null],[17,"EISDIR","","",null,null],[17,"EINVAL","","",null,null],[17,"ENFILE","","",null,null],[17,"EMFILE","","",null,null],[17,"ENOTTY","","",null,null],[17,"ETXTBSY","","",null,null],[17,"EFBIG","","",null,null],[17,"ENOSPC","","",null,null],[17,"ESPIPE","","",null,null],[17,"EROFS","","",null,null],[17,"EMLINK","","",null,null],[17,"EPIPE","","",null,null],[17,"EDOM","","",null,null],[17,"ERANGE","","",null,null],[17,"EWOULDBLOCK","","",null,null],[17,"SCM_RIGHTS","","",null,null],[17,"SCM_CREDENTIALS","","",null,null],[17,"PROT_GROWSDOWN","","",null,null],[17,"PROT_GROWSUP","","",null,null],[17,"MAP_TYPE","","",null,null],[17,"MADV_NORMAL","","",null,null],[17,"MADV_RANDOM","","",null,null],[17,"MADV_SEQUENTIAL","","",null,null],[17,"MADV_WILLNEED","","",null,null],[17,"MADV_DONTNEED","","",null,null],[17,"MADV_FREE","","",null,null],[17,"MADV_REMOVE","","",null,null],[17,"MADV_DONTFORK","","",null,null],[17,"MADV_DOFORK","","",null,null],[17,"MADV_MERGEABLE","","",null,null],[17,"MADV_UNMERGEABLE","","",null,null],[17,"MADV_HUGEPAGE","","",null,null],[17,"MADV_NOHUGEPAGE","","",null,null],[17,"MADV_DONTDUMP","","",null,null],[17,"MADV_DODUMP","","",null,null],[17,"MADV_HWPOISON","","",null,null],[17,"MADV_SOFT_OFFLINE","","",null,null],[17,"IFF_UP","","",null,null],[17,"IFF_BROADCAST","","",null,null],[17,"IFF_DEBUG","","",null,null],[17,"IFF_LOOPBACK","","",null,null],[17,"IFF_POINTOPOINT","","",null,null],[17,"IFF_NOTRAILERS","","",null,null],[17,"IFF_RUNNING","","",null,null],[17,"IFF_NOARP","","",null,null],[17,"IFF_PROMISC","","",null,null],[17,"IFF_ALLMULTI","","",null,null],[17,"IFF_MASTER","","",null,null],[17,"IFF_SLAVE","","",null,null],[17,"IFF_MULTICAST","","",null,null],[17,"IFF_PORTSEL","","",null,null],[17,"IFF_AUTOMEDIA","","",null,null],[17,"IFF_DYNAMIC","","",null,null],[17,"SOL_IP","","",null,null],[17,"SOL_TCP","","",null,null],[17,"SOL_UDP","","",null,null],[17,"SOL_IPV6","","",null,null],[17,"SOL_ICMPV6","","",null,null],[17,"SOL_RAW","","",null,null],[17,"SOL_DECNET","","",null,null],[17,"SOL_X25","","",null,null],[17,"SOL_PACKET","","",null,null],[17,"SOL_ATM","","",null,null],[17,"SOL_AAL","","",null,null],[17,"SOL_IRDA","","",null,null],[17,"SOL_NETBEUI","","",null,null],[17,"SOL_LLC","","",null,null],[17,"SOL_DCCP","","",null,null],[17,"SOL_NETLINK","","",null,null],[17,"SOL_TIPC","","",null,null],[17,"AF_UNSPEC","","",null,null],[17,"AF_UNIX","","",null,null],[17,"AF_LOCAL","","",null,null],[17,"AF_INET","","",null,null],[17,"AF_AX25","","",null,null],[17,"AF_IPX","","",null,null],[17,"AF_APPLETALK","","",null,null],[17,"AF_NETROM","","",null,null],[17,"AF_BRIDGE","","",null,null],[17,"AF_ATMPVC","","",null,null],[17,"AF_X25","","",null,null],[17,"AF_INET6","","",null,null],[17,"AF_ROSE","","",null,null],[17,"AF_DECnet","","",null,null],[17,"AF_NETBEUI","","",null,null],[17,"AF_SECURITY","","",null,null],[17,"AF_KEY","","",null,null],[17,"AF_NETLINK","","",null,null],[17,"AF_ROUTE","","",null,null],[17,"AF_PACKET","","",null,null],[17,"AF_ASH","","",null,null],[17,"AF_ECONET","","",null,null],[17,"AF_ATMSVC","","",null,null],[17,"AF_RDS","","",null,null],[17,"AF_SNA","","",null,null],[17,"AF_IRDA","","",null,null],[17,"AF_PPPOX","","",null,null],[17,"AF_WANPIPE","","",null,null],[17,"AF_LLC","","",null,null],[17,"AF_CAN","","",null,null],[17,"AF_TIPC","","",null,null],[17,"AF_BLUETOOTH","","",null,null],[17,"AF_IUCV","","",null,null],[17,"AF_RXRPC","","",null,null],[17,"AF_ISDN","","",null,null],[17,"AF_PHONET","","",null,null],[17,"AF_IEEE802154","","",null,null],[17,"AF_CAIF","","",null,null],[17,"AF_ALG","","",null,null],[17,"PF_UNSPEC","","",null,null],[17,"PF_UNIX","","",null,null],[17,"PF_LOCAL","","",null,null],[17,"PF_INET","","",null,null],[17,"PF_AX25","","",null,null],[17,"PF_IPX","","",null,null],[17,"PF_APPLETALK","","",null,null],[17,"PF_NETROM","","",null,null],[17,"PF_BRIDGE","","",null,null],[17,"PF_ATMPVC","","",null,null],[17,"PF_X25","","",null,null],[17,"PF_INET6","","",null,null],[17,"PF_ROSE","","",null,null],[17,"PF_DECnet","","",null,null],[17,"PF_NETBEUI","","",null,null],[17,"PF_SECURITY","","",null,null],[17,"PF_KEY","","",null,null],[17,"PF_NETLINK","","",null,null],[17,"PF_ROUTE","","",null,null],[17,"PF_PACKET","","",null,null],[17,"PF_ASH","","",null,null],[17,"PF_ECONET","","",null,null],[17,"PF_ATMSVC","","",null,null],[17,"PF_RDS","","",null,null],[17,"PF_SNA","","",null,null],[17,"PF_IRDA","","",null,null],[17,"PF_PPPOX","","",null,null],[17,"PF_WANPIPE","","",null,null],[17,"PF_LLC","","",null,null],[17,"PF_CAN","","",null,null],[17,"PF_TIPC","","",null,null],[17,"PF_BLUETOOTH","","",null,null],[17,"PF_IUCV","","",null,null],[17,"PF_RXRPC","","",null,null],[17,"PF_ISDN","","",null,null],[17,"PF_PHONET","","",null,null],[17,"PF_IEEE802154","","",null,null],[17,"PF_CAIF","","",null,null],[17,"PF_ALG","","",null,null],[17,"SOMAXCONN","","",null,null],[17,"MSG_OOB","","",null,null],[17,"MSG_PEEK","","",null,null],[17,"MSG_DONTROUTE","","",null,null],[17,"MSG_CTRUNC","","",null,null],[17,"MSG_TRUNC","","",null,null],[17,"MSG_DONTWAIT","","",null,null],[17,"MSG_EOR","","",null,null],[17,"MSG_WAITALL","","",null,null],[17,"MSG_FIN","","",null,null],[17,"MSG_SYN","","",null,null],[17,"MSG_CONFIRM","","",null,null],[17,"MSG_RST","","",null,null],[17,"MSG_ERRQUEUE","","",null,null],[17,"MSG_NOSIGNAL","","",null,null],[17,"MSG_MORE","","",null,null],[17,"MSG_WAITFORONE","","",null,null],[17,"MSG_FASTOPEN","","",null,null],[17,"MSG_CMSG_CLOEXEC","","",null,null],[17,"SCM_TIMESTAMP","","",null,null],[17,"SOCK_RAW","","",null,null],[17,"SOCK_RDM","","",null,null],[17,"IP_MULTICAST_IF","","",null,null],[17,"IP_MULTICAST_TTL","","",null,null],[17,"IP_MULTICAST_LOOP","","",null,null],[17,"IP_TTL","","",null,null],[17,"IP_HDRINCL","","",null,null],[17,"IP_ADD_MEMBERSHIP","","",null,null],[17,"IP_DROP_MEMBERSHIP","","",null,null],[17,"IP_TRANSPARENT","","",null,null],[17,"IPV6_ADD_MEMBERSHIP","","",null,null],[17,"IPV6_DROP_MEMBERSHIP","","",null,null],[17,"TCP_NODELAY","","",null,null],[17,"TCP_MAXSEG","","",null,null],[17,"TCP_CORK","","",null,null],[17,"TCP_KEEPIDLE","","",null,null],[17,"TCP_KEEPINTVL","","",null,null],[17,"TCP_KEEPCNT","","",null,null],[17,"TCP_SYNCNT","","",null,null],[17,"TCP_LINGER2","","",null,null],[17,"TCP_DEFER_ACCEPT","","",null,null],[17,"TCP_WINDOW_CLAMP","","",null,null],[17,"TCP_INFO","","",null,null],[17,"TCP_QUICKACK","","",null,null],[17,"TCP_CONGESTION","","",null,null],[17,"IPV6_MULTICAST_LOOP","","",null,null],[17,"IPV6_V6ONLY","","",null,null],[17,"SO_DEBUG","","",null,null],[17,"SHUT_RD","","",null,null],[17,"SHUT_WR","","",null,null],[17,"SHUT_RDWR","","",null,null],[17,"LOCK_SH","","",null,null],[17,"LOCK_EX","","",null,null],[17,"LOCK_NB","","",null,null],[17,"LOCK_UN","","",null,null],[17,"SS_ONSTACK","","",null,null],[17,"SS_DISABLE","","",null,null],[17,"PATH_MAX","","",null,null],[17,"FD_SETSIZE","","",null,null],[17,"EPOLLIN","","",null,null],[17,"EPOLLPRI","","",null,null],[17,"EPOLLOUT","","",null,null],[17,"EPOLLRDNORM","","",null,null],[17,"EPOLLRDBAND","","",null,null],[17,"EPOLLWRNORM","","",null,null],[17,"EPOLLWRBAND","","",null,null],[17,"EPOLLMSG","","",null,null],[17,"EPOLLERR","","",null,null],[17,"EPOLLHUP","","",null,null],[17,"EPOLLET","","",null,null],[17,"EPOLL_CTL_ADD","","",null,null],[17,"EPOLL_CTL_MOD","","",null,null],[17,"EPOLL_CTL_DEL","","",null,null],[17,"MNT_DETACH","","",null,null],[17,"MNT_EXPIRE","","",null,null],[17,"Q_GETFMT","","",null,null],[17,"Q_GETINFO","","",null,null],[17,"Q_SETINFO","","",null,null],[17,"QIF_BLIMITS","","",null,null],[17,"QIF_SPACE","","",null,null],[17,"QIF_ILIMITS","","",null,null],[17,"QIF_INODES","","",null,null],[17,"QIF_BTIME","","",null,null],[17,"QIF_ITIME","","",null,null],[17,"QIF_LIMITS","","",null,null],[17,"QIF_USAGE","","",null,null],[17,"QIF_TIMES","","",null,null],[17,"QIF_ALL","","",null,null],[17,"MNT_FORCE","","",null,null],[17,"Q_SYNC","","",null,null],[17,"Q_QUOTAON","","",null,null],[17,"Q_QUOTAOFF","","",null,null],[17,"Q_GETQUOTA","","",null,null],[17,"Q_SETQUOTA","","",null,null],[17,"TCIOFF","","",null,null],[17,"TCION","","",null,null],[17,"TCOOFF","","",null,null],[17,"TCOON","","",null,null],[17,"TCIFLUSH","","",null,null],[17,"TCOFLUSH","","",null,null],[17,"TCIOFLUSH","","",null,null],[17,"NL0","","",null,null],[17,"NL1","","",null,null],[17,"TAB0","","",null,null],[17,"CR0","","",null,null],[17,"FF0","","",null,null],[17,"BS0","","",null,null],[17,"VT0","","",null,null],[17,"VERASE","","",null,null],[17,"VKILL","","",null,null],[17,"VINTR","","",null,null],[17,"VQUIT","","",null,null],[17,"VLNEXT","","",null,null],[17,"IGNBRK","","",null,null],[17,"BRKINT","","",null,null],[17,"IGNPAR","","",null,null],[17,"PARMRK","","",null,null],[17,"INPCK","","",null,null],[17,"ISTRIP","","",null,null],[17,"INLCR","","",null,null],[17,"IGNCR","","",null,null],[17,"ICRNL","","",null,null],[17,"IXANY","","",null,null],[17,"IMAXBEL","","",null,null],[17,"OPOST","","",null,null],[17,"CS5","","",null,null],[17,"CRTSCTS","","",null,null],[17,"ECHO","","",null,null],[17,"OCRNL","","",null,null],[17,"ONOCR","","",null,null],[17,"ONLRET","","",null,null],[17,"OFILL","","",null,null],[17,"OFDEL","","",null,null],[17,"CLONE_VM","","",null,null],[17,"CLONE_FS","","",null,null],[17,"CLONE_FILES","","",null,null],[17,"CLONE_SIGHAND","","",null,null],[17,"CLONE_PTRACE","","",null,null],[17,"CLONE_VFORK","","",null,null],[17,"CLONE_PARENT","","",null,null],[17,"CLONE_THREAD","","",null,null],[17,"CLONE_NEWNS","","",null,null],[17,"CLONE_SYSVSEM","","",null,null],[17,"CLONE_SETTLS","","",null,null],[17,"CLONE_PARENT_SETTID","","",null,null],[17,"CLONE_CHILD_CLEARTID","","",null,null],[17,"CLONE_DETACHED","","",null,null],[17,"CLONE_UNTRACED","","",null,null],[17,"CLONE_CHILD_SETTID","","",null,null],[17,"CLONE_NEWUTS","","",null,null],[17,"CLONE_NEWIPC","","",null,null],[17,"CLONE_NEWUSER","","",null,null],[17,"CLONE_NEWPID","","",null,null],[17,"CLONE_NEWNET","","",null,null],[17,"CLONE_IO","","",null,null],[17,"CLONE_NEWCGROUP","","",null,null],[17,"WNOHANG","","",null,null],[17,"WUNTRACED","","",null,null],[17,"WSTOPPED","","",null,null],[17,"WEXITED","","",null,null],[17,"WCONTINUED","","",null,null],[17,"WNOWAIT","","",null,null],[17,"PTRACE_O_TRACESYSGOOD","","",null,null],[17,"PTRACE_O_TRACEFORK","","",null,null],[17,"PTRACE_O_TRACEVFORK","","",null,null],[17,"PTRACE_O_TRACECLONE","","",null,null],[17,"PTRACE_O_TRACEEXEC","","",null,null],[17,"PTRACE_O_TRACEVFORKDONE","","",null,null],[17,"PTRACE_O_TRACEEXIT","","",null,null],[17,"PTRACE_O_TRACESECCOMP","","",null,null],[17,"PTRACE_O_EXITKILL","","",null,null],[17,"PTRACE_O_SUSPEND_SECCOMP","","",null,null],[17,"PTRACE_O_MASK","","",null,null],[17,"PTRACE_EVENT_FORK","","",null,null],[17,"PTRACE_EVENT_VFORK","","",null,null],[17,"PTRACE_EVENT_CLONE","","",null,null],[17,"PTRACE_EVENT_EXEC","","",null,null],[17,"PTRACE_EVENT_VFORK_DONE","","",null,null],[17,"PTRACE_EVENT_EXIT","","",null,null],[17,"PTRACE_EVENT_SECCOMP","","",null,null],[17,"__WNOTHREAD","","",null,null],[17,"__WALL","","",null,null],[17,"__WCLONE","","",null,null],[17,"SPLICE_F_MOVE","","",null,null],[17,"SPLICE_F_NONBLOCK","","",null,null],[17,"SPLICE_F_MORE","","",null,null],[17,"SPLICE_F_GIFT","","",null,null],[17,"RTLD_LOCAL","","",null,null],[17,"RTLD_LAZY","","",null,null],[17,"POSIX_FADV_NORMAL","","",null,null],[17,"POSIX_FADV_RANDOM","","",null,null],[17,"POSIX_FADV_SEQUENTIAL","","",null,null],[17,"POSIX_FADV_WILLNEED","","",null,null],[17,"AT_FDCWD","","",null,null],[17,"AT_SYMLINK_NOFOLLOW","","",null,null],[17,"AT_REMOVEDIR","","",null,null],[17,"AT_SYMLINK_FOLLOW","","",null,null],[17,"AT_NO_AUTOMOUNT","","",null,null],[17,"AT_EMPTY_PATH","","",null,null],[17,"LOG_CRON","","",null,null],[17,"LOG_AUTHPRIV","","",null,null],[17,"LOG_FTP","","",null,null],[17,"LOG_PERROR","","",null,null],[17,"PIPE_BUF","","",null,null],[17,"SI_LOAD_SHIFT","","",null,null],[17,"SIGEV_SIGNAL","","",null,null],[17,"SIGEV_NONE","","",null,null],[17,"SIGEV_THREAD","","",null,null],[17,"P_ALL","","",null,null],[17,"P_PID","","",null,null],[17,"P_PGID","","",null,null],[17,"UTIME_OMIT","","",null,null],[17,"UTIME_NOW","","",null,null],[17,"POLLIN","","",null,null],[17,"POLLPRI","","",null,null],[17,"POLLOUT","","",null,null],[17,"POLLERR","","",null,null],[17,"POLLHUP","","",null,null],[17,"POLLNVAL","","",null,null],[17,"POLLRDNORM","","",null,null],[17,"POLLRDBAND","","",null,null],[17,"ABDAY_1","","",null,null],[17,"ABDAY_2","","",null,null],[17,"ABDAY_3","","",null,null],[17,"ABDAY_4","","",null,null],[17,"ABDAY_5","","",null,null],[17,"ABDAY_6","","",null,null],[17,"ABDAY_7","","",null,null],[17,"DAY_1","","",null,null],[17,"DAY_2","","",null,null],[17,"DAY_3","","",null,null],[17,"DAY_4","","",null,null],[17,"DAY_5","","",null,null],[17,"DAY_6","","",null,null],[17,"DAY_7","","",null,null],[17,"ABMON_1","","",null,null],[17,"ABMON_2","","",null,null],[17,"ABMON_3","","",null,null],[17,"ABMON_4","","",null,null],[17,"ABMON_5","","",null,null],[17,"ABMON_6","","",null,null],[17,"ABMON_7","","",null,null],[17,"ABMON_8","","",null,null],[17,"ABMON_9","","",null,null],[17,"ABMON_10","","",null,null],[17,"ABMON_11","","",null,null],[17,"ABMON_12","","",null,null],[17,"MON_1","","",null,null],[17,"MON_2","","",null,null],[17,"MON_3","","",null,null],[17,"MON_4","","",null,null],[17,"MON_5","","",null,null],[17,"MON_6","","",null,null],[17,"MON_7","","",null,null],[17,"MON_8","","",null,null],[17,"MON_9","","",null,null],[17,"MON_10","","",null,null],[17,"MON_11","","",null,null],[17,"MON_12","","",null,null],[17,"AM_STR","","",null,null],[17,"PM_STR","","",null,null],[17,"D_T_FMT","","",null,null],[17,"D_FMT","","",null,null],[17,"T_FMT","","",null,null],[17,"T_FMT_AMPM","","",null,null],[17,"ERA","","",null,null],[17,"ERA_D_FMT","","",null,null],[17,"ALT_DIGITS","","",null,null],[17,"ERA_D_T_FMT","","",null,null],[17,"ERA_T_FMT","","",null,null],[17,"CODESET","","",null,null],[17,"CRNCYSTR","","",null,null],[17,"RUSAGE_THREAD","","",null,null],[17,"RUSAGE_CHILDREN","","",null,null],[17,"RADIXCHAR","","",null,null],[17,"THOUSEP","","",null,null],[17,"YESEXPR","","",null,null],[17,"NOEXPR","","",null,null],[17,"YESSTR","","",null,null],[17,"NOSTR","","",null,null],[17,"FILENAME_MAX","","",null,null],[17,"L_tmpnam","","",null,null],[17,"_PC_LINK_MAX","","",null,null],[17,"_PC_MAX_CANON","","",null,null],[17,"_PC_MAX_INPUT","","",null,null],[17,"_PC_NAME_MAX","","",null,null],[17,"_PC_PATH_MAX","","",null,null],[17,"_PC_PIPE_BUF","","",null,null],[17,"_PC_CHOWN_RESTRICTED","","",null,null],[17,"_PC_NO_TRUNC","","",null,null],[17,"_PC_VDISABLE","","",null,null],[17,"_PC_SYNC_IO","","",null,null],[17,"_PC_ASYNC_IO","","",null,null],[17,"_PC_PRIO_IO","","",null,null],[17,"_PC_SOCK_MAXBUF","","",null,null],[17,"_PC_FILESIZEBITS","","",null,null],[17,"_PC_REC_INCR_XFER_SIZE","","",null,null],[17,"_PC_REC_MAX_XFER_SIZE","","",null,null],[17,"_PC_REC_MIN_XFER_SIZE","","",null,null],[17,"_PC_REC_XFER_ALIGN","","",null,null],[17,"_PC_ALLOC_SIZE_MIN","","",null,null],[17,"_PC_SYMLINK_MAX","","",null,null],[17,"_PC_2_SYMLINKS","","",null,null],[17,"_SC_ARG_MAX","","",null,null],[17,"_SC_CHILD_MAX","","",null,null],[17,"_SC_CLK_TCK","","",null,null],[17,"_SC_NGROUPS_MAX","","",null,null],[17,"_SC_OPEN_MAX","","",null,null],[17,"_SC_STREAM_MAX","","",null,null],[17,"_SC_TZNAME_MAX","","",null,null],[17,"_SC_JOB_CONTROL","","",null,null],[17,"_SC_SAVED_IDS","","",null,null],[17,"_SC_REALTIME_SIGNALS","","",null,null],[17,"_SC_PRIORITY_SCHEDULING","","",null,null],[17,"_SC_TIMERS","","",null,null],[17,"_SC_ASYNCHRONOUS_IO","","",null,null],[17,"_SC_PRIORITIZED_IO","","",null,null],[17,"_SC_SYNCHRONIZED_IO","","",null,null],[17,"_SC_FSYNC","","",null,null],[17,"_SC_MAPPED_FILES","","",null,null],[17,"_SC_MEMLOCK","","",null,null],[17,"_SC_MEMLOCK_RANGE","","",null,null],[17,"_SC_MEMORY_PROTECTION","","",null,null],[17,"_SC_MESSAGE_PASSING","","",null,null],[17,"_SC_SEMAPHORES","","",null,null],[17,"_SC_SHARED_MEMORY_OBJECTS","","",null,null],[17,"_SC_AIO_LISTIO_MAX","","",null,null],[17,"_SC_AIO_MAX","","",null,null],[17,"_SC_AIO_PRIO_DELTA_MAX","","",null,null],[17,"_SC_DELAYTIMER_MAX","","",null,null],[17,"_SC_MQ_OPEN_MAX","","",null,null],[17,"_SC_MQ_PRIO_MAX","","",null,null],[17,"_SC_VERSION","","",null,null],[17,"_SC_PAGESIZE","","",null,null],[17,"_SC_PAGE_SIZE","","",null,null],[17,"_SC_RTSIG_MAX","","",null,null],[17,"_SC_SEM_NSEMS_MAX","","",null,null],[17,"_SC_SEM_VALUE_MAX","","",null,null],[17,"_SC_SIGQUEUE_MAX","","",null,null],[17,"_SC_TIMER_MAX","","",null,null],[17,"_SC_BC_BASE_MAX","","",null,null],[17,"_SC_BC_DIM_MAX","","",null,null],[17,"_SC_BC_SCALE_MAX","","",null,null],[17,"_SC_BC_STRING_MAX","","",null,null],[17,"_SC_COLL_WEIGHTS_MAX","","",null,null],[17,"_SC_EXPR_NEST_MAX","","",null,null],[17,"_SC_LINE_MAX","","",null,null],[17,"_SC_RE_DUP_MAX","","",null,null],[17,"_SC_2_VERSION","","",null,null],[17,"_SC_2_C_BIND","","",null,null],[17,"_SC_2_C_DEV","","",null,null],[17,"_SC_2_FORT_DEV","","",null,null],[17,"_SC_2_FORT_RUN","","",null,null],[17,"_SC_2_SW_DEV","","",null,null],[17,"_SC_2_LOCALEDEF","","",null,null],[17,"_SC_UIO_MAXIOV","","",null,null],[17,"_SC_IOV_MAX","","",null,null],[17,"_SC_THREADS","","",null,null],[17,"_SC_THREAD_SAFE_FUNCTIONS","","",null,null],[17,"_SC_GETGR_R_SIZE_MAX","","",null,null],[17,"_SC_GETPW_R_SIZE_MAX","","",null,null],[17,"_SC_LOGIN_NAME_MAX","","",null,null],[17,"_SC_TTY_NAME_MAX","","",null,null],[17,"_SC_THREAD_DESTRUCTOR_ITERATIONS","","",null,null],[17,"_SC_THREAD_KEYS_MAX","","",null,null],[17,"_SC_THREAD_STACK_MIN","","",null,null],[17,"_SC_THREAD_THREADS_MAX","","",null,null],[17,"_SC_THREAD_ATTR_STACKADDR","","",null,null],[17,"_SC_THREAD_ATTR_STACKSIZE","","",null,null],[17,"_SC_THREAD_PRIORITY_SCHEDULING","","",null,null],[17,"_SC_THREAD_PRIO_INHERIT","","",null,null],[17,"_SC_THREAD_PRIO_PROTECT","","",null,null],[17,"_SC_THREAD_PROCESS_SHARED","","",null,null],[17,"_SC_NPROCESSORS_CONF","","",null,null],[17,"_SC_NPROCESSORS_ONLN","","",null,null],[17,"_SC_PHYS_PAGES","","",null,null],[17,"_SC_AVPHYS_PAGES","","",null,null],[17,"_SC_ATEXIT_MAX","","",null,null],[17,"_SC_PASS_MAX","","",null,null],[17,"_SC_XOPEN_VERSION","","",null,null],[17,"_SC_XOPEN_XCU_VERSION","","",null,null],[17,"_SC_XOPEN_UNIX","","",null,null],[17,"_SC_XOPEN_CRYPT","","",null,null],[17,"_SC_XOPEN_ENH_I18N","","",null,null],[17,"_SC_XOPEN_SHM","","",null,null],[17,"_SC_2_CHAR_TERM","","",null,null],[17,"_SC_2_UPE","","",null,null],[17,"_SC_XOPEN_XPG2","","",null,null],[17,"_SC_XOPEN_XPG3","","",null,null],[17,"_SC_XOPEN_XPG4","","",null,null],[17,"_SC_NZERO","","",null,null],[17,"_SC_XBS5_ILP32_OFF32","","",null,null],[17,"_SC_XBS5_ILP32_OFFBIG","","",null,null],[17,"_SC_XBS5_LP64_OFF64","","",null,null],[17,"_SC_XBS5_LPBIG_OFFBIG","","",null,null],[17,"_SC_XOPEN_LEGACY","","",null,null],[17,"_SC_XOPEN_REALTIME","","",null,null],[17,"_SC_XOPEN_REALTIME_THREADS","","",null,null],[17,"_SC_ADVISORY_INFO","","",null,null],[17,"_SC_BARRIERS","","",null,null],[17,"_SC_CLOCK_SELECTION","","",null,null],[17,"_SC_CPUTIME","","",null,null],[17,"_SC_THREAD_CPUTIME","","",null,null],[17,"_SC_MONOTONIC_CLOCK","","",null,null],[17,"_SC_READER_WRITER_LOCKS","","",null,null],[17,"_SC_SPIN_LOCKS","","",null,null],[17,"_SC_REGEXP","","",null,null],[17,"_SC_SHELL","","",null,null],[17,"_SC_SPAWN","","",null,null],[17,"_SC_SPORADIC_SERVER","","",null,null],[17,"_SC_THREAD_SPORADIC_SERVER","","",null,null],[17,"_SC_TIMEOUTS","","",null,null],[17,"_SC_TYPED_MEMORY_OBJECTS","","",null,null],[17,"_SC_2_PBS","","",null,null],[17,"_SC_2_PBS_ACCOUNTING","","",null,null],[17,"_SC_2_PBS_LOCATE","","",null,null],[17,"_SC_2_PBS_MESSAGE","","",null,null],[17,"_SC_2_PBS_TRACK","","",null,null],[17,"_SC_SYMLOOP_MAX","","",null,null],[17,"_SC_STREAMS","","",null,null],[17,"_SC_2_PBS_CHECKPOINT","","",null,null],[17,"_SC_V6_ILP32_OFF32","","",null,null],[17,"_SC_V6_ILP32_OFFBIG","","",null,null],[17,"_SC_V6_LP64_OFF64","","",null,null],[17,"_SC_V6_LPBIG_OFFBIG","","",null,null],[17,"_SC_HOST_NAME_MAX","","",null,null],[17,"_SC_TRACE","","",null,null],[17,"_SC_TRACE_EVENT_FILTER","","",null,null],[17,"_SC_TRACE_INHERIT","","",null,null],[17,"_SC_TRACE_LOG","","",null,null],[17,"_SC_IPV6","","",null,null],[17,"_SC_RAW_SOCKETS","","",null,null],[17,"_SC_V7_ILP32_OFF32","","",null,null],[17,"_SC_V7_ILP32_OFFBIG","","",null,null],[17,"_SC_V7_LP64_OFF64","","",null,null],[17,"_SC_V7_LPBIG_OFFBIG","","",null,null],[17,"_SC_SS_REPL_MAX","","",null,null],[17,"_SC_TRACE_EVENT_NAME_MAX","","",null,null],[17,"_SC_TRACE_NAME_MAX","","",null,null],[17,"_SC_TRACE_SYS_MAX","","",null,null],[17,"_SC_TRACE_USER_EVENT_MAX","","",null,null],[17,"_SC_XOPEN_STREAMS","","",null,null],[17,"_SC_THREAD_ROBUST_PRIO_INHERIT","","",null,null],[17,"_SC_THREAD_ROBUST_PRIO_PROTECT","","",null,null],[17,"RLIM_SAVED_MAX","","",null,null],[17,"RLIM_SAVED_CUR","","",null,null],[17,"GLOB_ERR","","",null,null],[17,"GLOB_MARK","","",null,null],[17,"GLOB_NOSORT","","",null,null],[17,"GLOB_DOOFFS","","",null,null],[17,"GLOB_NOCHECK","","",null,null],[17,"GLOB_APPEND","","",null,null],[17,"GLOB_NOESCAPE","","",null,null],[17,"GLOB_NOSPACE","","",null,null],[17,"GLOB_ABORTED","","",null,null],[17,"GLOB_NOMATCH","","",null,null],[17,"POSIX_MADV_NORMAL","","",null,null],[17,"POSIX_MADV_RANDOM","","",null,null],[17,"POSIX_MADV_SEQUENTIAL","","",null,null],[17,"POSIX_MADV_WILLNEED","","",null,null],[17,"S_IEXEC","","",null,null],[17,"S_IWRITE","","",null,null],[17,"S_IREAD","","",null,null],[17,"F_LOCK","","",null,null],[17,"F_TEST","","",null,null],[17,"F_TLOCK","","",null,null],[17,"F_ULOCK","","",null,null],[17,"IFF_LOWER_UP","","",null,null],[17,"IFF_DORMANT","","",null,null],[17,"IFF_ECHO","","",null,null],[17,"ST_RDONLY","","",null,null],[17,"ST_NOSUID","","",null,null],[17,"ST_NODEV","","",null,null],[17,"ST_NOEXEC","","",null,null],[17,"ST_SYNCHRONOUS","","",null,null],[17,"ST_MANDLOCK","","",null,null],[17,"ST_WRITE","","",null,null],[17,"ST_APPEND","","",null,null],[17,"ST_IMMUTABLE","","",null,null],[17,"ST_NOATIME","","",null,null],[17,"ST_NODIRATIME","","",null,null],[17,"RTLD_NEXT","","",null,null],[17,"RTLD_DEFAULT","","",null,null],[17,"RTLD_NODELETE","","",null,null],[17,"RTLD_NOW","","",null,null],[17,"TCP_MD5SIG","","",null,null],[17,"PTHREAD_MUTEX_INITIALIZER","","",null,null],[17,"PTHREAD_COND_INITIALIZER","","",null,null],[17,"PTHREAD_RWLOCK_INITIALIZER","","",null,null],[17,"PTHREAD_MUTEX_NORMAL","","",null,null],[17,"PTHREAD_MUTEX_RECURSIVE","","",null,null],[17,"PTHREAD_MUTEX_ERRORCHECK","","",null,null],[17,"PTHREAD_MUTEX_DEFAULT","","",null,null],[17,"PTHREAD_PROCESS_PRIVATE","","",null,null],[17,"PTHREAD_PROCESS_SHARED","","",null,null],[17,"__SIZEOF_PTHREAD_COND_T","","",null,null],[17,"SCHED_OTHER","","",null,null],[17,"SCHED_FIFO","","",null,null],[17,"SCHED_RR","","",null,null],[17,"SCHED_BATCH","","",null,null],[17,"SCHED_IDLE","","",null,null],[17,"IPPROTO_HOPOPTS","","Hop-by-hop option header",null,null],[17,"IPPROTO_IGMP","","group mgmt protocol",null,null],[17,"IPPROTO_IPIP","","for compatibility",null,null],[17,"IPPROTO_EGP","","exterior gateway protocol",null,null],[17,"IPPROTO_PUP","","pup",null,null],[17,"IPPROTO_IDP","","xns idp",null,null],[17,"IPPROTO_TP","","tp-4 w/ class negotiation",null,null],[17,"IPPROTO_DCCP","","DCCP",null,null],[17,"IPPROTO_ROUTING","","IP6 routing header",null,null],[17,"IPPROTO_FRAGMENT","","IP6 fragmentation header",null,null],[17,"IPPROTO_RSVP","","resource reservation",null,null],[17,"IPPROTO_GRE","","General Routing Encap.",null,null],[17,"IPPROTO_ESP","","IP6 Encap Sec. Payload",null,null],[17,"IPPROTO_AH","","IP6 Auth Header",null,null],[17,"IPPROTO_NONE","","IP6 no next header",null,null],[17,"IPPROTO_DSTOPTS","","IP6 destination option",null,null],[17,"IPPROTO_MTP","","",null,null],[17,"IPPROTO_BEETPH","","",null,null],[17,"IPPROTO_ENCAP","","encapsulation header",null,null],[17,"IPPROTO_PIM","","Protocol indep. multicast",null,null],[17,"IPPROTO_COMP","","IP Payload Comp. Protocol",null,null],[17,"IPPROTO_SCTP","","SCTP",null,null],[17,"IPPROTO_MH","","",null,null],[17,"IPPROTO_UDPLITE","","",null,null],[17,"IPPROTO_MPLS","","",null,null],[17,"IPPROTO_RAW","","raw IP packet",null,null],[17,"IPPROTO_MAX","","",null,null],[17,"AF_IB","","",null,null],[17,"AF_MPLS","","",null,null],[17,"AF_NFC","","",null,null],[17,"AF_VSOCK","","",null,null],[17,"PF_IB","","",null,null],[17,"PF_MPLS","","",null,null],[17,"PF_NFC","","",null,null],[17,"PF_VSOCK","","",null,null],[17,"IPC_PRIVATE","","",null,null],[17,"IPC_CREAT","","",null,null],[17,"IPC_EXCL","","",null,null],[17,"IPC_NOWAIT","","",null,null],[17,"IPC_RMID","","",null,null],[17,"IPC_SET","","",null,null],[17,"IPC_STAT","","",null,null],[17,"IPC_INFO","","",null,null],[17,"MSG_STAT","","",null,null],[17,"MSG_INFO","","",null,null],[17,"MSG_NOERROR","","",null,null],[17,"MSG_EXCEPT","","",null,null],[17,"MSG_COPY","","",null,null],[17,"SHM_R","","",null,null],[17,"SHM_W","","",null,null],[17,"SHM_RDONLY","","",null,null],[17,"SHM_RND","","",null,null],[17,"SHM_REMAP","","",null,null],[17,"SHM_EXEC","","",null,null],[17,"SHM_LOCK","","",null,null],[17,"SHM_UNLOCK","","",null,null],[17,"SHM_HUGETLB","","",null,null],[17,"SHM_NORESERVE","","",null,null],[17,"EPOLLRDHUP","","",null,null],[17,"EPOLLEXCLUSIVE","","",null,null],[17,"EPOLLONESHOT","","",null,null],[17,"QFMT_VFS_OLD","","",null,null],[17,"QFMT_VFS_V0","","",null,null],[17,"QFMT_VFS_V1","","",null,null],[17,"EFD_SEMAPHORE","","",null,null],[17,"LOG_NFACILITIES","","",null,null],[17,"SEM_FAILED","","",null,null],[17,"RB_AUTOBOOT","","",null,null],[17,"RB_HALT_SYSTEM","","",null,null],[17,"RB_ENABLE_CAD","","",null,null],[17,"RB_DISABLE_CAD","","",null,null],[17,"RB_POWER_OFF","","",null,null],[17,"RB_SW_SUSPEND","","",null,null],[17,"RB_KEXEC","","",null,null],[17,"AI_PASSIVE","","",null,null],[17,"AI_CANONNAME","","",null,null],[17,"AI_NUMERICHOST","","",null,null],[17,"AI_V4MAPPED","","",null,null],[17,"AI_ALL","","",null,null],[17,"AI_ADDRCONFIG","","",null,null],[17,"AI_NUMERICSERV","","",null,null],[17,"EAI_BADFLAGS","","",null,null],[17,"EAI_NONAME","","",null,null],[17,"EAI_AGAIN","","",null,null],[17,"EAI_FAIL","","",null,null],[17,"EAI_FAMILY","","",null,null],[17,"EAI_SOCKTYPE","","",null,null],[17,"EAI_SERVICE","","",null,null],[17,"EAI_MEMORY","","",null,null],[17,"EAI_OVERFLOW","","",null,null],[17,"NI_NUMERICHOST","","",null,null],[17,"NI_NUMERICSERV","","",null,null],[17,"NI_NOFQDN","","",null,null],[17,"NI_NAMEREQD","","",null,null],[17,"NI_DGRAM","","",null,null],[17,"SYNC_FILE_RANGE_WAIT_BEFORE","","",null,null],[17,"SYNC_FILE_RANGE_WRITE","","",null,null],[17,"SYNC_FILE_RANGE_WAIT_AFTER","","",null,null],[17,"EAI_SYSTEM","","",null,null],[17,"AIO_CANCELED","","",null,null],[17,"AIO_NOTCANCELED","","",null,null],[17,"AIO_ALLDONE","","",null,null],[17,"LIO_READ","","",null,null],[17,"LIO_WRITE","","",null,null],[17,"LIO_NOP","","",null,null],[17,"LIO_WAIT","","",null,null],[17,"LIO_NOWAIT","","",null,null],[17,"MREMAP_MAYMOVE","","",null,null],[17,"MREMAP_FIXED","","",null,null],[17,"PR_SET_PDEATHSIG","","",null,null],[17,"PR_GET_PDEATHSIG","","",null,null],[17,"PR_GET_DUMPABLE","","",null,null],[17,"PR_SET_DUMPABLE","","",null,null],[17,"PR_GET_UNALIGN","","",null,null],[17,"PR_SET_UNALIGN","","",null,null],[17,"PR_UNALIGN_NOPRINT","","",null,null],[17,"PR_UNALIGN_SIGBUS","","",null,null],[17,"PR_GET_KEEPCAPS","","",null,null],[17,"PR_SET_KEEPCAPS","","",null,null],[17,"PR_GET_FPEMU","","",null,null],[17,"PR_SET_FPEMU","","",null,null],[17,"PR_FPEMU_NOPRINT","","",null,null],[17,"PR_FPEMU_SIGFPE","","",null,null],[17,"PR_GET_FPEXC","","",null,null],[17,"PR_SET_FPEXC","","",null,null],[17,"PR_FP_EXC_SW_ENABLE","","",null,null],[17,"PR_FP_EXC_DIV","","",null,null],[17,"PR_FP_EXC_OVF","","",null,null],[17,"PR_FP_EXC_UND","","",null,null],[17,"PR_FP_EXC_RES","","",null,null],[17,"PR_FP_EXC_INV","","",null,null],[17,"PR_FP_EXC_DISABLED","","",null,null],[17,"PR_FP_EXC_NONRECOV","","",null,null],[17,"PR_FP_EXC_ASYNC","","",null,null],[17,"PR_FP_EXC_PRECISE","","",null,null],[17,"PR_GET_TIMING","","",null,null],[17,"PR_SET_TIMING","","",null,null],[17,"PR_TIMING_STATISTICAL","","",null,null],[17,"PR_TIMING_TIMESTAMP","","",null,null],[17,"PR_SET_NAME","","",null,null],[17,"PR_GET_NAME","","",null,null],[17,"PR_GET_ENDIAN","","",null,null],[17,"PR_SET_ENDIAN","","",null,null],[17,"PR_ENDIAN_BIG","","",null,null],[17,"PR_ENDIAN_LITTLE","","",null,null],[17,"PR_ENDIAN_PPC_LITTLE","","",null,null],[17,"PR_GET_SECCOMP","","",null,null],[17,"PR_SET_SECCOMP","","",null,null],[17,"PR_CAPBSET_READ","","",null,null],[17,"PR_CAPBSET_DROP","","",null,null],[17,"PR_GET_TSC","","",null,null],[17,"PR_SET_TSC","","",null,null],[17,"PR_TSC_ENABLE","","",null,null],[17,"PR_TSC_SIGSEGV","","",null,null],[17,"PR_GET_SECUREBITS","","",null,null],[17,"PR_SET_SECUREBITS","","",null,null],[17,"PR_SET_TIMERSLACK","","",null,null],[17,"PR_GET_TIMERSLACK","","",null,null],[17,"PR_TASK_PERF_EVENTS_DISABLE","","",null,null],[17,"PR_TASK_PERF_EVENTS_ENABLE","","",null,null],[17,"PR_MCE_KILL","","",null,null],[17,"PR_MCE_KILL_CLEAR","","",null,null],[17,"PR_MCE_KILL_SET","","",null,null],[17,"PR_MCE_KILL_LATE","","",null,null],[17,"PR_MCE_KILL_EARLY","","",null,null],[17,"PR_MCE_KILL_DEFAULT","","",null,null],[17,"PR_MCE_KILL_GET","","",null,null],[17,"PR_SET_MM","","",null,null],[17,"PR_SET_MM_START_CODE","","",null,null],[17,"PR_SET_MM_END_CODE","","",null,null],[17,"PR_SET_MM_START_DATA","","",null,null],[17,"PR_SET_MM_END_DATA","","",null,null],[17,"PR_SET_MM_START_STACK","","",null,null],[17,"PR_SET_MM_START_BRK","","",null,null],[17,"PR_SET_MM_BRK","","",null,null],[17,"PR_SET_MM_ARG_START","","",null,null],[17,"PR_SET_MM_ARG_END","","",null,null],[17,"PR_SET_MM_ENV_START","","",null,null],[17,"PR_SET_MM_ENV_END","","",null,null],[17,"PR_SET_MM_AUXV","","",null,null],[17,"PR_SET_MM_EXE_FILE","","",null,null],[17,"PR_SET_MM_MAP","","",null,null],[17,"PR_SET_MM_MAP_SIZE","","",null,null],[17,"PR_SET_PTRACER","","",null,null],[17,"PR_SET_CHILD_SUBREAPER","","",null,null],[17,"PR_GET_CHILD_SUBREAPER","","",null,null],[17,"PR_SET_NO_NEW_PRIVS","","",null,null],[17,"PR_GET_NO_NEW_PRIVS","","",null,null],[17,"PR_GET_TID_ADDRESS","","",null,null],[17,"PR_SET_THP_DISABLE","","",null,null],[17,"PR_GET_THP_DISABLE","","",null,null],[17,"PR_MPX_ENABLE_MANAGEMENT","","",null,null],[17,"PR_MPX_DISABLE_MANAGEMENT","","",null,null],[17,"PR_SET_FP_MODE","","",null,null],[17,"PR_GET_FP_MODE","","",null,null],[17,"PR_FP_MODE_FR","","",null,null],[17,"PR_FP_MODE_FRE","","",null,null],[17,"PR_CAP_AMBIENT","","",null,null],[17,"PR_CAP_AMBIENT_IS_SET","","",null,null],[17,"PR_CAP_AMBIENT_RAISE","","",null,null],[17,"PR_CAP_AMBIENT_LOWER","","",null,null],[17,"PR_CAP_AMBIENT_CLEAR_ALL","","",null,null],[17,"ITIMER_REAL","","",null,null],[17,"ITIMER_VIRTUAL","","",null,null],[17,"ITIMER_PROF","","",null,null],[17,"TFD_CLOEXEC","","",null,null],[17,"TFD_NONBLOCK","","",null,null],[17,"TFD_TIMER_ABSTIME","","",null,null],[17,"XATTR_CREATE","","",null,null],[17,"XATTR_REPLACE","","",null,null],[17,"_POSIX_VDISABLE","","",null,null],[17,"FALLOC_FL_KEEP_SIZE","","",null,null],[17,"FALLOC_FL_PUNCH_HOLE","","",null,null],[17,"FALLOC_FL_COLLAPSE_RANGE","","",null,null],[17,"FALLOC_FL_ZERO_RANGE","","",null,null],[17,"FALLOC_FL_INSERT_RANGE","","",null,null],[17,"FALLOC_FL_UNSHARE_RANGE","","",null,null],[17,"ENOATTR","","",null,null],[17,"SO_ORIGINAL_DST","","",null,null],[17,"IUTF8","","",null,null],[17,"CMSPAR","","",null,null],[17,"O_TMPFILE","","",null,null],[17,"__UT_LINESIZE","","",null,null],[17,"__UT_NAMESIZE","","",null,null],[17,"__UT_HOSTSIZE","","",null,null],[17,"EMPTY","","",null,null],[17,"RUN_LVL","","",null,null],[17,"BOOT_TIME","","",null,null],[17,"NEW_TIME","","",null,null],[17,"OLD_TIME","","",null,null],[17,"INIT_PROCESS","","",null,null],[17,"LOGIN_PROCESS","","",null,null],[17,"USER_PROCESS","","",null,null],[17,"DEAD_PROCESS","","",null,null],[17,"ACCOUNTING","","",null,null],[17,"RLIMIT_RSS","","",null,null],[17,"RLIMIT_AS","","",null,null],[17,"RLIMIT_MEMLOCK","","",null,null],[17,"RLIM_INFINITY","","",null,null],[17,"RLIMIT_RTTIME","","",null,null],[17,"RLIMIT_NLIMITS","","",null,null],[17,"SOCK_NONBLOCK","","",null,null],[17,"SOL_RXRPC","","",null,null],[17,"SOL_PPPOL2TP","","",null,null],[17,"SOL_BLUETOOTH","","",null,null],[17,"SOL_PNPIPE","","",null,null],[17,"SOL_RDS","","",null,null],[17,"SOL_IUCV","","",null,null],[17,"SOL_CAIF","","",null,null],[17,"SOL_ALG","","",null,null],[17,"SOL_NFC","","",null,null],[17,"MSG_TRYHARD","","",null,null],[17,"LC_PAPER","","",null,null],[17,"LC_NAME","","",null,null],[17,"LC_ADDRESS","","",null,null],[17,"LC_TELEPHONE","","",null,null],[17,"LC_MEASUREMENT","","",null,null],[17,"LC_IDENTIFICATION","","",null,null],[17,"LC_PAPER_MASK","","",null,null],[17,"LC_NAME_MASK","","",null,null],[17,"LC_ADDRESS_MASK","","",null,null],[17,"LC_TELEPHONE_MASK","","",null,null],[17,"LC_MEASUREMENT_MASK","","",null,null],[17,"LC_IDENTIFICATION_MASK","","",null,null],[17,"LC_ALL_MASK","","",null,null],[17,"MAP_ANON","","",null,null],[17,"MAP_ANONYMOUS","","",null,null],[17,"MAP_DENYWRITE","","",null,null],[17,"MAP_EXECUTABLE","","",null,null],[17,"MAP_POPULATE","","",null,null],[17,"MAP_NONBLOCK","","",null,null],[17,"MAP_STACK","","",null,null],[17,"ENOTSUP","","",null,null],[17,"EUCLEAN","","",null,null],[17,"ENOTNAM","","",null,null],[17,"ENAVAIL","","",null,null],[17,"EISNAM","","",null,null],[17,"EREMOTEIO","","",null,null],[17,"SOCK_STREAM","","",null,null],[17,"SOCK_DGRAM","","",null,null],[17,"SOCK_SEQPACKET","","",null,null],[17,"SOCK_DCCP","","",null,null],[17,"SOCK_PACKET","","",null,null],[17,"TCP_COOKIE_TRANSACTIONS","","",null,null],[17,"TCP_THIN_LINEAR_TIMEOUTS","","",null,null],[17,"TCP_THIN_DUPACK","","",null,null],[17,"TCP_USER_TIMEOUT","","",null,null],[17,"TCP_REPAIR","","",null,null],[17,"TCP_REPAIR_QUEUE","","",null,null],[17,"TCP_QUEUE_SEQ","","",null,null],[17,"TCP_REPAIR_OPTIONS","","",null,null],[17,"TCP_FASTOPEN","","",null,null],[17,"TCP_TIMESTAMP","","",null,null],[17,"DCCP_SOCKOPT_PACKET_SIZE","","",null,null],[17,"DCCP_SOCKOPT_SERVICE","","",null,null],[17,"DCCP_SOCKOPT_CHANGE_L","","",null,null],[17,"DCCP_SOCKOPT_CHANGE_R","","",null,null],[17,"DCCP_SOCKOPT_GET_CUR_MPS","","",null,null],[17,"DCCP_SOCKOPT_SERVER_TIMEWAIT","","",null,null],[17,"DCCP_SOCKOPT_SEND_CSCOV","","",null,null],[17,"DCCP_SOCKOPT_RECV_CSCOV","","",null,null],[17,"DCCP_SOCKOPT_AVAILABLE_CCIDS","","",null,null],[17,"DCCP_SOCKOPT_CCID","","",null,null],[17,"DCCP_SOCKOPT_TX_CCID","","",null,null],[17,"DCCP_SOCKOPT_RX_CCID","","",null,null],[17,"DCCP_SOCKOPT_QPOLICY_ID","","",null,null],[17,"DCCP_SOCKOPT_QPOLICY_TXQLEN","","",null,null],[17,"DCCP_SOCKOPT_CCID_RX_INFO","","",null,null],[17,"DCCP_SOCKOPT_CCID_TX_INFO","","",null,null],[17,"DCCP_SERVICE_LIST_MAX_LEN","","maximum number of services provided on the same listening port",null,null],[17,"SIGTTIN","","",null,null],[17,"SIGTTOU","","",null,null],[17,"SIGXCPU","","",null,null],[17,"SIGXFSZ","","",null,null],[17,"SIGVTALRM","","",null,null],[17,"SIGPROF","","",null,null],[17,"SIGWINCH","","",null,null],[17,"SIGEV_THREAD_ID","","",null,null],[17,"BUFSIZ","","",null,null],[17,"TMP_MAX","","",null,null],[17,"FOPEN_MAX","","",null,null],[17,"POSIX_FADV_DONTNEED","","",null,null],[17,"POSIX_FADV_NOREUSE","","",null,null],[17,"POSIX_MADV_DONTNEED","","",null,null],[17,"_SC_EQUIV_CLASS_MAX","","",null,null],[17,"_SC_CHARCLASS_NAME_MAX","","",null,null],[17,"_SC_PII","","",null,null],[17,"_SC_PII_XTI","","",null,null],[17,"_SC_PII_SOCKET","","",null,null],[17,"_SC_PII_INTERNET","","",null,null],[17,"_SC_PII_OSI","","",null,null],[17,"_SC_POLL","","",null,null],[17,"_SC_SELECT","","",null,null],[17,"_SC_PII_INTERNET_STREAM","","",null,null],[17,"_SC_PII_INTERNET_DGRAM","","",null,null],[17,"_SC_PII_OSI_COTS","","",null,null],[17,"_SC_PII_OSI_CLTS","","",null,null],[17,"_SC_PII_OSI_M","","",null,null],[17,"_SC_T_IOV_MAX","","",null,null],[17,"_SC_2_C_VERSION","","",null,null],[17,"_SC_CHAR_BIT","","",null,null],[17,"_SC_CHAR_MAX","","",null,null],[17,"_SC_CHAR_MIN","","",null,null],[17,"_SC_INT_MAX","","",null,null],[17,"_SC_INT_MIN","","",null,null],[17,"_SC_LONG_BIT","","",null,null],[17,"_SC_WORD_BIT","","",null,null],[17,"_SC_MB_LEN_MAX","","",null,null],[17,"_SC_SSIZE_MAX","","",null,null],[17,"_SC_SCHAR_MAX","","",null,null],[17,"_SC_SCHAR_MIN","","",null,null],[17,"_SC_SHRT_MAX","","",null,null],[17,"_SC_SHRT_MIN","","",null,null],[17,"_SC_UCHAR_MAX","","",null,null],[17,"_SC_UINT_MAX","","",null,null],[17,"_SC_ULONG_MAX","","",null,null],[17,"_SC_USHRT_MAX","","",null,null],[17,"_SC_NL_ARGMAX","","",null,null],[17,"_SC_NL_LANGMAX","","",null,null],[17,"_SC_NL_MSGMAX","","",null,null],[17,"_SC_NL_NMAX","","",null,null],[17,"_SC_NL_SETMAX","","",null,null],[17,"_SC_NL_TEXTMAX","","",null,null],[17,"_SC_BASE","","",null,null],[17,"_SC_C_LANG_SUPPORT","","",null,null],[17,"_SC_C_LANG_SUPPORT_R","","",null,null],[17,"_SC_DEVICE_IO","","",null,null],[17,"_SC_DEVICE_SPECIFIC","","",null,null],[17,"_SC_DEVICE_SPECIFIC_R","","",null,null],[17,"_SC_FD_MGMT","","",null,null],[17,"_SC_FIFO","","",null,null],[17,"_SC_PIPE","","",null,null],[17,"_SC_FILE_ATTRIBUTES","","",null,null],[17,"_SC_FILE_LOCKING","","",null,null],[17,"_SC_FILE_SYSTEM","","",null,null],[17,"_SC_MULTI_PROCESS","","",null,null],[17,"_SC_SINGLE_PROCESS","","",null,null],[17,"_SC_NETWORKING","","",null,null],[17,"_SC_REGEX_VERSION","","",null,null],[17,"_SC_SIGNALS","","",null,null],[17,"_SC_SYSTEM_DATABASE","","",null,null],[17,"_SC_SYSTEM_DATABASE_R","","",null,null],[17,"_SC_USER_GROUPS","","",null,null],[17,"_SC_USER_GROUPS_R","","",null,null],[17,"_SC_LEVEL1_ICACHE_SIZE","","",null,null],[17,"_SC_LEVEL1_ICACHE_ASSOC","","",null,null],[17,"_SC_LEVEL1_ICACHE_LINESIZE","","",null,null],[17,"_SC_LEVEL1_DCACHE_SIZE","","",null,null],[17,"_SC_LEVEL1_DCACHE_ASSOC","","",null,null],[17,"_SC_LEVEL1_DCACHE_LINESIZE","","",null,null],[17,"_SC_LEVEL2_CACHE_SIZE","","",null,null],[17,"_SC_LEVEL2_CACHE_ASSOC","","",null,null],[17,"_SC_LEVEL2_CACHE_LINESIZE","","",null,null],[17,"_SC_LEVEL3_CACHE_SIZE","","",null,null],[17,"_SC_LEVEL3_CACHE_ASSOC","","",null,null],[17,"_SC_LEVEL3_CACHE_LINESIZE","","",null,null],[17,"_SC_LEVEL4_CACHE_SIZE","","",null,null],[17,"_SC_LEVEL4_CACHE_ASSOC","","",null,null],[17,"_SC_LEVEL4_CACHE_LINESIZE","","",null,null],[17,"O_ACCMODE","","",null,null],[17,"ST_RELATIME","","",null,null],[17,"NI_MAXHOST","","",null,null],[17,"ADFS_SUPER_MAGIC","","",null,null],[17,"AFFS_SUPER_MAGIC","","",null,null],[17,"CODA_SUPER_MAGIC","","",null,null],[17,"CRAMFS_MAGIC","","",null,null],[17,"EFS_SUPER_MAGIC","","",null,null],[17,"EXT2_SUPER_MAGIC","","",null,null],[17,"EXT3_SUPER_MAGIC","","",null,null],[17,"EXT4_SUPER_MAGIC","","",null,null],[17,"HPFS_SUPER_MAGIC","","",null,null],[17,"HUGETLBFS_MAGIC","","",null,null],[17,"ISOFS_SUPER_MAGIC","","",null,null],[17,"JFFS2_SUPER_MAGIC","","",null,null],[17,"MINIX_SUPER_MAGIC","","",null,null],[17,"MINIX_SUPER_MAGIC2","","",null,null],[17,"MINIX2_SUPER_MAGIC","","",null,null],[17,"MINIX2_SUPER_MAGIC2","","",null,null],[17,"MSDOS_SUPER_MAGIC","","",null,null],[17,"NCP_SUPER_MAGIC","","",null,null],[17,"NFS_SUPER_MAGIC","","",null,null],[17,"OPENPROM_SUPER_MAGIC","","",null,null],[17,"PROC_SUPER_MAGIC","","",null,null],[17,"QNX4_SUPER_MAGIC","","",null,null],[17,"REISERFS_SUPER_MAGIC","","",null,null],[17,"SMB_SUPER_MAGIC","","",null,null],[17,"TMPFS_MAGIC","","",null,null],[17,"USBDEVICE_SUPER_MAGIC","","",null,null],[17,"VEOF","","",null,null],[17,"CPU_SETSIZE","","",null,null],[17,"PTRACE_TRACEME","","",null,null],[17,"PTRACE_PEEKTEXT","","",null,null],[17,"PTRACE_PEEKDATA","","",null,null],[17,"PTRACE_PEEKUSER","","",null,null],[17,"PTRACE_POKETEXT","","",null,null],[17,"PTRACE_POKEDATA","","",null,null],[17,"PTRACE_POKEUSER","","",null,null],[17,"PTRACE_CONT","","",null,null],[17,"PTRACE_KILL","","",null,null],[17,"PTRACE_SINGLESTEP","","",null,null],[17,"PTRACE_ATTACH","","",null,null],[17,"PTRACE_SYSCALL","","",null,null],[17,"PTRACE_SETOPTIONS","","",null,null],[17,"PTRACE_GETEVENTMSG","","",null,null],[17,"PTRACE_GETSIGINFO","","",null,null],[17,"PTRACE_SETSIGINFO","","",null,null],[17,"PTRACE_GETREGSET","","",null,null],[17,"PTRACE_SETREGSET","","",null,null],[17,"PTRACE_SEIZE","","",null,null],[17,"PTRACE_INTERRUPT","","",null,null],[17,"PTRACE_LISTEN","","",null,null],[17,"PTRACE_PEEKSIGINFO","","",null,null],[17,"EPOLLWAKEUP","","",null,null],[17,"MAP_HUGETLB","","",null,null],[17,"SEEK_DATA","","",null,null],[17,"SEEK_HOLE","","",null,null],[17,"TCSANOW","","",null,null],[17,"TCSADRAIN","","",null,null],[17,"TCSAFLUSH","","",null,null],[17,"TIOCLINUX","","",null,null],[17,"TIOCGSERIAL","","",null,null],[17,"RTLD_DEEPBIND","","",null,null],[17,"RTLD_GLOBAL","","",null,null],[17,"RTLD_NOLOAD","","",null,null],[17,"LINUX_REBOOT_MAGIC1","","",null,null],[17,"LINUX_REBOOT_MAGIC2","","",null,null],[17,"LINUX_REBOOT_MAGIC2A","","",null,null],[17,"LINUX_REBOOT_MAGIC2B","","",null,null],[17,"LINUX_REBOOT_MAGIC2C","","",null,null],[17,"LINUX_REBOOT_CMD_RESTART","","",null,null],[17,"LINUX_REBOOT_CMD_HALT","","",null,null],[17,"LINUX_REBOOT_CMD_CAD_ON","","",null,null],[17,"LINUX_REBOOT_CMD_CAD_OFF","","",null,null],[17,"LINUX_REBOOT_CMD_POWER_OFF","","",null,null],[17,"LINUX_REBOOT_CMD_RESTART2","","",null,null],[17,"LINUX_REBOOT_CMD_SW_SUSPEND","","",null,null],[17,"LINUX_REBOOT_CMD_KEXEC","","",null,null],[17,"NETLINK_ROUTE","","",null,null],[17,"NETLINK_UNUSED","","",null,null],[17,"NETLINK_USERSOCK","","",null,null],[17,"NETLINK_FIREWALL","","",null,null],[17,"NETLINK_SOCK_DIAG","","",null,null],[17,"NETLINK_NFLOG","","",null,null],[17,"NETLINK_XFRM","","",null,null],[17,"NETLINK_SELINUX","","",null,null],[17,"NETLINK_ISCSI","","",null,null],[17,"NETLINK_AUDIT","","",null,null],[17,"NETLINK_FIB_LOOKUP","","",null,null],[17,"NETLINK_CONNECTOR","","",null,null],[17,"NETLINK_NETFILTER","","",null,null],[17,"NETLINK_IP6_FW","","",null,null],[17,"NETLINK_DNRTMSG","","",null,null],[17,"NETLINK_KOBJECT_UEVENT","","",null,null],[17,"NETLINK_GENERIC","","",null,null],[17,"NETLINK_SCSITRANSPORT","","",null,null],[17,"NETLINK_ECRYPTFS","","",null,null],[17,"NETLINK_RDMA","","",null,null],[17,"NETLINK_CRYPTO","","",null,null],[17,"NETLINK_INET_DIAG","","",null,null],[17,"MAX_LINKS","","",null,null],[17,"NLM_F_REQUEST","","",null,null],[17,"NLM_F_MULTI","","",null,null],[17,"NLM_F_ACK","","",null,null],[17,"NLM_F_ECHO","","",null,null],[17,"NLM_F_DUMP_INTR","","",null,null],[17,"NLM_F_DUMP_FILTERED","","",null,null],[17,"NLM_F_ROOT","","",null,null],[17,"NLM_F_MATCH","","",null,null],[17,"NLM_F_ATOMIC","","",null,null],[17,"NLM_F_DUMP","","",null,null],[17,"NLM_F_REPLACE","","",null,null],[17,"NLM_F_EXCL","","",null,null],[17,"NLM_F_CREATE","","",null,null],[17,"NLM_F_APPEND","","",null,null],[17,"NLMSG_NOOP","","",null,null],[17,"NLMSG_ERROR","","",null,null],[17,"NLMSG_DONE","","",null,null],[17,"NLMSG_OVERRUN","","",null,null],[17,"NLMSG_MIN_TYPE","","",null,null],[17,"NETLINK_ADD_MEMBERSHIP","","",null,null],[17,"NETLINK_DROP_MEMBERSHIP","","",null,null],[17,"NETLINK_PKTINFO","","",null,null],[17,"NETLINK_BROADCAST_ERROR","","",null,null],[17,"NETLINK_NO_ENOBUFS","","",null,null],[17,"NETLINK_RX_RING","","",null,null],[17,"NETLINK_TX_RING","","",null,null],[17,"NETLINK_LISTEN_ALL_NSID","","",null,null],[17,"NETLINK_LIST_MEMBERSHIPS","","",null,null],[17,"NETLINK_CAP_ACK","","",null,null],[17,"NLA_F_NESTED","","",null,null],[17,"NLA_F_NET_BYTEORDER","","",null,null],[17,"NLA_TYPE_MASK","","",null,null],[17,"TIOCM_LE","","",null,null],[17,"TIOCM_DTR","","",null,null],[17,"TIOCM_RTS","","",null,null],[17,"TIOCM_ST","","",null,null],[17,"TIOCM_SR","","",null,null],[17,"TIOCM_CTS","","",null,null],[17,"TIOCM_CAR","","",null,null],[17,"TIOCM_RNG","","",null,null],[17,"TIOCM_DSR","","",null,null],[17,"TIOCM_CD","","",null,null],[17,"TIOCM_RI","","",null,null],[17,"PTHREAD_STACK_MIN","","",null,null],[17,"__SIZEOF_PTHREAD_RWLOCK_T","","",null,null],[17,"__SIZEOF_PTHREAD_RWLOCKATTR_T","","",null,null],[17,"O_LARGEFILE","","",null,null],[17,"TIOCGSOFTCAR","","",null,null],[17,"TIOCSSOFTCAR","","",null,null],[17,"RLIMIT_NOFILE","","",null,null],[17,"RLIMIT_NPROC","","",null,null],[17,"O_APPEND","","",null,null],[17,"O_CREAT","","",null,null],[17,"O_EXCL","","",null,null],[17,"O_NOCTTY","","",null,null],[17,"O_NONBLOCK","","",null,null],[17,"O_SYNC","","",null,null],[17,"O_RSYNC","","",null,null],[17,"O_DSYNC","","",null,null],[17,"O_FSYNC","","",null,null],[17,"O_NOATIME","","",null,null],[17,"O_PATH","","",null,null],[17,"MAP_GROWSDOWN","","",null,null],[17,"EDEADLK","","",null,null],[17,"ENAMETOOLONG","","",null,null],[17,"ENOLCK","","",null,null],[17,"ENOSYS","","",null,null],[17,"ENOTEMPTY","","",null,null],[17,"ELOOP","","",null,null],[17,"ENOMSG","","",null,null],[17,"EIDRM","","",null,null],[17,"ECHRNG","","",null,null],[17,"EL2NSYNC","","",null,null],[17,"EL3HLT","","",null,null],[17,"EL3RST","","",null,null],[17,"ELNRNG","","",null,null],[17,"EUNATCH","","",null,null],[17,"ENOCSI","","",null,null],[17,"EL2HLT","","",null,null],[17,"EBADE","","",null,null],[17,"EBADR","","",null,null],[17,"EXFULL","","",null,null],[17,"ENOANO","","",null,null],[17,"EBADRQC","","",null,null],[17,"EBADSLT","","",null,null],[17,"EMULTIHOP","","",null,null],[17,"EOVERFLOW","","",null,null],[17,"ENOTUNIQ","","",null,null],[17,"EBADFD","","",null,null],[17,"EBADMSG","","",null,null],[17,"EREMCHG","","",null,null],[17,"ELIBACC","","",null,null],[17,"ELIBBAD","","",null,null],[17,"ELIBSCN","","",null,null],[17,"ELIBMAX","","",null,null],[17,"ELIBEXEC","","",null,null],[17,"EILSEQ","","",null,null],[17,"ERESTART","","",null,null],[17,"ESTRPIPE","","",null,null],[17,"EUSERS","","",null,null],[17,"ENOTSOCK","","",null,null],[17,"EDESTADDRREQ","","",null,null],[17,"EMSGSIZE","","",null,null],[17,"EPROTOTYPE","","",null,null],[17,"ENOPROTOOPT","","",null,null],[17,"EPROTONOSUPPORT","","",null,null],[17,"ESOCKTNOSUPPORT","","",null,null],[17,"EOPNOTSUPP","","",null,null],[17,"EPFNOSUPPORT","","",null,null],[17,"EAFNOSUPPORT","","",null,null],[17,"EADDRINUSE","","",null,null],[17,"EADDRNOTAVAIL","","",null,null],[17,"ENETDOWN","","",null,null],[17,"ENETUNREACH","","",null,null],[17,"ENETRESET","","",null,null],[17,"ECONNABORTED","","",null,null],[17,"ECONNRESET","","",null,null],[17,"ENOBUFS","","",null,null],[17,"EISCONN","","",null,null],[17,"ENOTCONN","","",null,null],[17,"ESHUTDOWN","","",null,null],[17,"ETOOMANYREFS","","",null,null],[17,"ETIMEDOUT","","",null,null],[17,"ECONNREFUSED","","",null,null],[17,"EHOSTDOWN","","",null,null],[17,"EHOSTUNREACH","","",null,null],[17,"EALREADY","","",null,null],[17,"EINPROGRESS","","",null,null],[17,"ESTALE","","",null,null],[17,"EDQUOT","","",null,null],[17,"ENOMEDIUM","","",null,null],[17,"EMEDIUMTYPE","","",null,null],[17,"ECANCELED","","",null,null],[17,"ENOKEY","","",null,null],[17,"EKEYEXPIRED","","",null,null],[17,"EKEYREVOKED","","",null,null],[17,"EKEYREJECTED","","",null,null],[17,"EOWNERDEAD","","",null,null],[17,"ENOTRECOVERABLE","","",null,null],[17,"EHWPOISON","","",null,null],[17,"ERFKILL","","",null,null],[17,"SOL_SOCKET","","",null,null],[17,"SO_REUSEADDR","","",null,null],[17,"SO_TYPE","","",null,null],[17,"SO_ERROR","","",null,null],[17,"SO_DONTROUTE","","",null,null],[17,"SO_BROADCAST","","",null,null],[17,"SO_SNDBUF","","",null,null],[17,"SO_RCVBUF","","",null,null],[17,"SO_SNDBUFFORCE","","",null,null],[17,"SO_RCVBUFFORCE","","",null,null],[17,"SO_KEEPALIVE","","",null,null],[17,"SO_OOBINLINE","","",null,null],[17,"SO_NO_CHECK","","",null,null],[17,"SO_PRIORITY","","",null,null],[17,"SO_LINGER","","",null,null],[17,"SO_BSDCOMPAT","","",null,null],[17,"SO_REUSEPORT","","",null,null],[17,"SO_PASSCRED","","",null,null],[17,"SO_PEERCRED","","",null,null],[17,"SO_RCVLOWAT","","",null,null],[17,"SO_SNDLOWAT","","",null,null],[17,"SO_RCVTIMEO","","",null,null],[17,"SO_SNDTIMEO","","",null,null],[17,"SO_SECURITY_AUTHENTICATION","","",null,null],[17,"SO_SECURITY_ENCRYPTION_TRANSPORT","","",null,null],[17,"SO_SECURITY_ENCRYPTION_NETWORK","","",null,null],[17,"SO_BINDTODEVICE","","",null,null],[17,"SO_ATTACH_FILTER","","",null,null],[17,"SO_DETACH_FILTER","","",null,null],[17,"SO_GET_FILTER","","",null,null],[17,"SO_PEERNAME","","",null,null],[17,"SO_TIMESTAMP","","",null,null],[17,"SO_ACCEPTCONN","","",null,null],[17,"SO_PEERSEC","","",null,null],[17,"SO_PASSSEC","","",null,null],[17,"SO_TIMESTAMPNS","","",null,null],[17,"SCM_TIMESTAMPNS","","",null,null],[17,"SO_MARK","","",null,null],[17,"SO_TIMESTAMPING","","",null,null],[17,"SCM_TIMESTAMPING","","",null,null],[17,"SO_PROTOCOL","","",null,null],[17,"SO_DOMAIN","","",null,null],[17,"SO_RXQ_OVFL","","",null,null],[17,"SO_WIFI_STATUS","","",null,null],[17,"SCM_WIFI_STATUS","","",null,null],[17,"SO_PEEK_OFF","","",null,null],[17,"SO_NOFCS","","",null,null],[17,"SO_LOCK_FILTER","","",null,null],[17,"SO_SELECT_ERR_QUEUE","","",null,null],[17,"SO_BUSY_POLL","","",null,null],[17,"SO_MAX_PACING_RATE","","",null,null],[17,"SO_BPF_EXTENSIONS","","",null,null],[17,"SO_INCOMING_CPU","","",null,null],[17,"SO_ATTACH_BPF","","",null,null],[17,"SO_DETACH_BPF","","",null,null],[17,"SA_ONSTACK","","",null,null],[17,"SA_SIGINFO","","",null,null],[17,"SA_NOCLDWAIT","","",null,null],[17,"SIGCHLD","","",null,null],[17,"SIGBUS","","",null,null],[17,"SIGUSR1","","",null,null],[17,"SIGUSR2","","",null,null],[17,"SIGCONT","","",null,null],[17,"SIGSTOP","","",null,null],[17,"SIGTSTP","","",null,null],[17,"SIGURG","","",null,null],[17,"SIGIO","","",null,null],[17,"SIGSYS","","",null,null],[17,"SIGSTKFLT","","",null,null],[17,"SIGUNUSED","","",null,null],[17,"SIGPOLL","","",null,null],[17,"SIGPWR","","",null,null],[17,"SIG_SETMASK","","",null,null],[17,"SIG_BLOCK","","",null,null],[17,"SIG_UNBLOCK","","",null,null],[17,"POLLWRNORM","","",null,null],[17,"POLLWRBAND","","",null,null],[17,"O_ASYNC","","",null,null],[17,"O_NDELAY","","",null,null],[17,"PTRACE_DETACH","","",null,null],[17,"EFD_NONBLOCK","","",null,null],[17,"F_GETLK","","",null,null],[17,"F_GETOWN","","",null,null],[17,"F_SETOWN","","",null,null],[17,"F_SETLK","","",null,null],[17,"F_SETLKW","","",null,null],[17,"SFD_NONBLOCK","","",null,null],[17,"TIOCEXCL","","",null,null],[17,"TIOCNXCL","","",null,null],[17,"TIOCSCTTY","","",null,null],[17,"TIOCSTI","","",null,null],[17,"TIOCMGET","","",null,null],[17,"TIOCMBIS","","",null,null],[17,"TIOCMBIC","","",null,null],[17,"TIOCMSET","","",null,null],[17,"TIOCCONS","","",null,null],[17,"SFD_CLOEXEC","","",null,null],[17,"NCCS","","",null,null],[17,"O_TRUNC","","",null,null],[17,"O_CLOEXEC","","",null,null],[17,"EBFONT","","",null,null],[17,"ENOSTR","","",null,null],[17,"ENODATA","","",null,null],[17,"ETIME","","",null,null],[17,"ENOSR","","",null,null],[17,"ENONET","","",null,null],[17,"ENOPKG","","",null,null],[17,"EREMOTE","","",null,null],[17,"ENOLINK","","",null,null],[17,"EADV","","",null,null],[17,"ESRMNT","","",null,null],[17,"ECOMM","","",null,null],[17,"EPROTO","","",null,null],[17,"EDOTDOT","","",null,null],[17,"SA_NODEFER","","",null,null],[17,"SA_RESETHAND","","",null,null],[17,"SA_RESTART","","",null,null],[17,"SA_NOCLDSTOP","","",null,null],[17,"EPOLL_CLOEXEC","","",null,null],[17,"EFD_CLOEXEC","","",null,null],[17,"__SIZEOF_PTHREAD_CONDATTR_T","","",null,null],[17,"__SIZEOF_PTHREAD_MUTEX_T","","",null,null],[17,"__SIZEOF_PTHREAD_MUTEXATTR_T","","",null,null],[17,"O_DIRECT","","",null,null],[17,"O_DIRECTORY","","",null,null],[17,"O_NOFOLLOW","","",null,null],[17,"MAP_LOCKED","","",null,null],[17,"MAP_NORESERVE","","",null,null],[17,"MAP_32BIT","","",null,null],[17,"EDEADLOCK","","",null,null],[17,"FIOCLEX","","",null,null],[17,"FIONBIO","","",null,null],[17,"PTRACE_GETFPREGS","","",null,null],[17,"PTRACE_SETFPREGS","","",null,null],[17,"PTRACE_GETFPXREGS","","",null,null],[17,"PTRACE_SETFPXREGS","","",null,null],[17,"PTRACE_GETREGS","","",null,null],[17,"PTRACE_SETREGS","","",null,null],[17,"PTRACE_PEEKSIGINFO_SHARED","","",null,null],[17,"MCL_CURRENT","","",null,null],[17,"MCL_FUTURE","","",null,null],[17,"SIGSTKSZ","","",null,null],[17,"MINSIGSTKSZ","","",null,null],[17,"CBAUD","","",null,null],[17,"TAB1","","",null,null],[17,"TAB2","","",null,null],[17,"TAB3","","",null,null],[17,"CR1","","",null,null],[17,"CR2","","",null,null],[17,"CR3","","",null,null],[17,"FF1","","",null,null],[17,"BS1","","",null,null],[17,"VT1","","",null,null],[17,"VWERASE","","",null,null],[17,"VREPRINT","","",null,null],[17,"VSUSP","","",null,null],[17,"VSTART","","",null,null],[17,"VSTOP","","",null,null],[17,"VDISCARD","","",null,null],[17,"VTIME","","",null,null],[17,"IXON","","",null,null],[17,"IXOFF","","",null,null],[17,"ONLCR","","",null,null],[17,"CSIZE","","",null,null],[17,"CS6","","",null,null],[17,"CS7","","",null,null],[17,"CS8","","",null,null],[17,"CSTOPB","","",null,null],[17,"CREAD","","",null,null],[17,"PARENB","","",null,null],[17,"PARODD","","",null,null],[17,"HUPCL","","",null,null],[17,"CLOCAL","","",null,null],[17,"ECHOKE","","",null,null],[17,"ECHOE","","",null,null],[17,"ECHOK","","",null,null],[17,"ECHONL","","",null,null],[17,"ECHOPRT","","",null,null],[17,"ECHOCTL","","",null,null],[17,"ISIG","","",null,null],[17,"ICANON","","",null,null],[17,"PENDIN","","",null,null],[17,"NOFLSH","","",null,null],[17,"CIBAUD","","",null,null],[17,"CBAUDEX","","",null,null],[17,"VSWTC","","",null,null],[17,"OLCUC","","",null,null],[17,"NLDLY","","",null,null],[17,"CRDLY","","",null,null],[17,"TABDLY","","",null,null],[17,"BSDLY","","",null,null],[17,"FFDLY","","",null,null],[17,"VTDLY","","",null,null],[17,"XTABS","","",null,null],[17,"B0","","",null,null],[17,"B50","","",null,null],[17,"B75","","",null,null],[17,"B110","","",null,null],[17,"B134","","",null,null],[17,"B150","","",null,null],[17,"B200","","",null,null],[17,"B300","","",null,null],[17,"B600","","",null,null],[17,"B1200","","",null,null],[17,"B1800","","",null,null],[17,"B2400","","",null,null],[17,"B4800","","",null,null],[17,"B9600","","",null,null],[17,"B19200","","",null,null],[17,"B38400","","",null,null],[17,"EXTA","","",null,null],[17,"EXTB","","",null,null],[17,"B57600","","",null,null],[17,"B115200","","",null,null],[17,"B230400","","",null,null],[17,"B460800","","",null,null],[17,"B500000","","",null,null],[17,"B576000","","",null,null],[17,"B921600","","",null,null],[17,"B1000000","","",null,null],[17,"B1152000","","",null,null],[17,"B1500000","","",null,null],[17,"B2000000","","",null,null],[17,"B2500000","","",null,null],[17,"B3000000","","",null,null],[17,"B3500000","","",null,null],[17,"B4000000","","",null,null],[17,"VEOL","","",null,null],[17,"VEOL2","","",null,null],[17,"VMIN","","",null,null],[17,"IEXTEN","","",null,null],[17,"TOSTOP","","",null,null],[17,"FLUSHO","","",null,null],[17,"EXTPROC","","",null,null],[17,"TCGETS","","",null,null],[17,"TCSETS","","",null,null],[17,"TCSETSW","","",null,null],[17,"TCSETSF","","",null,null],[17,"TCGETA","","",null,null],[17,"TCSETA","","",null,null],[17,"TCSETAW","","",null,null],[17,"TCSETAF","","",null,null],[17,"TCSBRK","","",null,null],[17,"TCXONC","","",null,null],[17,"TCFLSH","","",null,null],[17,"TIOCINQ","","",null,null],[17,"TIOCGPGRP","","",null,null],[17,"TIOCSPGRP","","",null,null],[17,"TIOCOUTQ","","",null,null],[17,"TIOCGWINSZ","","",null,null],[17,"TIOCSWINSZ","","",null,null],[17,"FIONREAD","","",null,null],[17,"SYS_read","","",null,null],[17,"SYS_write","","",null,null],[17,"SYS_open","","",null,null],[17,"SYS_close","","",null,null],[17,"SYS_stat","","",null,null],[17,"SYS_fstat","","",null,null],[17,"SYS_lstat","","",null,null],[17,"SYS_poll","","",null,null],[17,"SYS_lseek","","",null,null],[17,"SYS_mmap","","",null,null],[17,"SYS_mprotect","","",null,null],[17,"SYS_munmap","","",null,null],[17,"SYS_brk","","",null,null],[17,"SYS_rt_sigaction","","",null,null],[17,"SYS_rt_sigprocmask","","",null,null],[17,"SYS_rt_sigreturn","","",null,null],[17,"SYS_ioctl","","",null,null],[17,"SYS_pread64","","",null,null],[17,"SYS_pwrite64","","",null,null],[17,"SYS_readv","","",null,null],[17,"SYS_writev","","",null,null],[17,"SYS_access","","",null,null],[17,"SYS_pipe","","",null,null],[17,"SYS_select","","",null,null],[17,"SYS_sched_yield","","",null,null],[17,"SYS_mremap","","",null,null],[17,"SYS_msync","","",null,null],[17,"SYS_mincore","","",null,null],[17,"SYS_madvise","","",null,null],[17,"SYS_shmget","","",null,null],[17,"SYS_shmat","","",null,null],[17,"SYS_shmctl","","",null,null],[17,"SYS_dup","","",null,null],[17,"SYS_dup2","","",null,null],[17,"SYS_pause","","",null,null],[17,"SYS_nanosleep","","",null,null],[17,"SYS_getitimer","","",null,null],[17,"SYS_alarm","","",null,null],[17,"SYS_setitimer","","",null,null],[17,"SYS_getpid","","",null,null],[17,"SYS_sendfile","","",null,null],[17,"SYS_socket","","",null,null],[17,"SYS_connect","","",null,null],[17,"SYS_accept","","",null,null],[17,"SYS_sendto","","",null,null],[17,"SYS_recvfrom","","",null,null],[17,"SYS_sendmsg","","",null,null],[17,"SYS_recvmsg","","",null,null],[17,"SYS_shutdown","","",null,null],[17,"SYS_bind","","",null,null],[17,"SYS_listen","","",null,null],[17,"SYS_getsockname","","",null,null],[17,"SYS_getpeername","","",null,null],[17,"SYS_socketpair","","",null,null],[17,"SYS_setsockopt","","",null,null],[17,"SYS_getsockopt","","",null,null],[17,"SYS_clone","","",null,null],[17,"SYS_fork","","",null,null],[17,"SYS_vfork","","",null,null],[17,"SYS_execve","","",null,null],[17,"SYS_exit","","",null,null],[17,"SYS_wait4","","",null,null],[17,"SYS_kill","","",null,null],[17,"SYS_uname","","",null,null],[17,"SYS_semget","","",null,null],[17,"SYS_semop","","",null,null],[17,"SYS_semctl","","",null,null],[17,"SYS_shmdt","","",null,null],[17,"SYS_msgget","","",null,null],[17,"SYS_msgsnd","","",null,null],[17,"SYS_msgrcv","","",null,null],[17,"SYS_msgctl","","",null,null],[17,"SYS_fcntl","","",null,null],[17,"SYS_flock","","",null,null],[17,"SYS_fsync","","",null,null],[17,"SYS_fdatasync","","",null,null],[17,"SYS_truncate","","",null,null],[17,"SYS_ftruncate","","",null,null],[17,"SYS_getdents","","",null,null],[17,"SYS_getcwd","","",null,null],[17,"SYS_chdir","","",null,null],[17,"SYS_fchdir","","",null,null],[17,"SYS_rename","","",null,null],[17,"SYS_mkdir","","",null,null],[17,"SYS_rmdir","","",null,null],[17,"SYS_creat","","",null,null],[17,"SYS_link","","",null,null],[17,"SYS_unlink","","",null,null],[17,"SYS_symlink","","",null,null],[17,"SYS_readlink","","",null,null],[17,"SYS_chmod","","",null,null],[17,"SYS_fchmod","","",null,null],[17,"SYS_chown","","",null,null],[17,"SYS_fchown","","",null,null],[17,"SYS_lchown","","",null,null],[17,"SYS_umask","","",null,null],[17,"SYS_gettimeofday","","",null,null],[17,"SYS_getrlimit","","",null,null],[17,"SYS_getrusage","","",null,null],[17,"SYS_sysinfo","","",null,null],[17,"SYS_times","","",null,null],[17,"SYS_ptrace","","",null,null],[17,"SYS_getuid","","",null,null],[17,"SYS_syslog","","",null,null],[17,"SYS_getgid","","",null,null],[17,"SYS_setuid","","",null,null],[17,"SYS_setgid","","",null,null],[17,"SYS_geteuid","","",null,null],[17,"SYS_getegid","","",null,null],[17,"SYS_setpgid","","",null,null],[17,"SYS_getppid","","",null,null],[17,"SYS_getpgrp","","",null,null],[17,"SYS_setsid","","",null,null],[17,"SYS_setreuid","","",null,null],[17,"SYS_setregid","","",null,null],[17,"SYS_getgroups","","",null,null],[17,"SYS_setgroups","","",null,null],[17,"SYS_setresuid","","",null,null],[17,"SYS_getresuid","","",null,null],[17,"SYS_setresgid","","",null,null],[17,"SYS_getresgid","","",null,null],[17,"SYS_getpgid","","",null,null],[17,"SYS_setfsuid","","",null,null],[17,"SYS_setfsgid","","",null,null],[17,"SYS_getsid","","",null,null],[17,"SYS_capget","","",null,null],[17,"SYS_capset","","",null,null],[17,"SYS_rt_sigpending","","",null,null],[17,"SYS_rt_sigtimedwait","","",null,null],[17,"SYS_rt_sigqueueinfo","","",null,null],[17,"SYS_rt_sigsuspend","","",null,null],[17,"SYS_sigaltstack","","",null,null],[17,"SYS_utime","","",null,null],[17,"SYS_mknod","","",null,null],[17,"SYS_uselib","","",null,null],[17,"SYS_personality","","",null,null],[17,"SYS_ustat","","",null,null],[17,"SYS_statfs","","",null,null],[17,"SYS_fstatfs","","",null,null],[17,"SYS_sysfs","","",null,null],[17,"SYS_getpriority","","",null,null],[17,"SYS_setpriority","","",null,null],[17,"SYS_sched_setparam","","",null,null],[17,"SYS_sched_getparam","","",null,null],[17,"SYS_sched_setscheduler","","",null,null],[17,"SYS_sched_getscheduler","","",null,null],[17,"SYS_sched_get_priority_max","","",null,null],[17,"SYS_sched_get_priority_min","","",null,null],[17,"SYS_sched_rr_get_interval","","",null,null],[17,"SYS_mlock","","",null,null],[17,"SYS_munlock","","",null,null],[17,"SYS_mlockall","","",null,null],[17,"SYS_munlockall","","",null,null],[17,"SYS_vhangup","","",null,null],[17,"SYS_modify_ldt","","",null,null],[17,"SYS_pivot_root","","",null,null],[17,"SYS__sysctl","","",null,null],[17,"SYS_prctl","","",null,null],[17,"SYS_arch_prctl","","",null,null],[17,"SYS_adjtimex","","",null,null],[17,"SYS_setrlimit","","",null,null],[17,"SYS_chroot","","",null,null],[17,"SYS_sync","","",null,null],[17,"SYS_acct","","",null,null],[17,"SYS_settimeofday","","",null,null],[17,"SYS_mount","","",null,null],[17,"SYS_umount2","","",null,null],[17,"SYS_swapon","","",null,null],[17,"SYS_swapoff","","",null,null],[17,"SYS_reboot","","",null,null],[17,"SYS_sethostname","","",null,null],[17,"SYS_setdomainname","","",null,null],[17,"SYS_iopl","","",null,null],[17,"SYS_ioperm","","",null,null],[17,"SYS_create_module","","",null,null],[17,"SYS_init_module","","",null,null],[17,"SYS_delete_module","","",null,null],[17,"SYS_get_kernel_syms","","",null,null],[17,"SYS_query_module","","",null,null],[17,"SYS_quotactl","","",null,null],[17,"SYS_nfsservctl","","",null,null],[17,"SYS_getpmsg","","",null,null],[17,"SYS_putpmsg","","",null,null],[17,"SYS_afs_syscall","","",null,null],[17,"SYS_tuxcall","","",null,null],[17,"SYS_security","","",null,null],[17,"SYS_gettid","","",null,null],[17,"SYS_readahead","","",null,null],[17,"SYS_setxattr","","",null,null],[17,"SYS_lsetxattr","","",null,null],[17,"SYS_fsetxattr","","",null,null],[17,"SYS_getxattr","","",null,null],[17,"SYS_lgetxattr","","",null,null],[17,"SYS_fgetxattr","","",null,null],[17,"SYS_listxattr","","",null,null],[17,"SYS_llistxattr","","",null,null],[17,"SYS_flistxattr","","",null,null],[17,"SYS_removexattr","","",null,null],[17,"SYS_lremovexattr","","",null,null],[17,"SYS_fremovexattr","","",null,null],[17,"SYS_tkill","","",null,null],[17,"SYS_time","","",null,null],[17,"SYS_futex","","",null,null],[17,"SYS_sched_setaffinity","","",null,null],[17,"SYS_sched_getaffinity","","",null,null],[17,"SYS_set_thread_area","","",null,null],[17,"SYS_io_setup","","",null,null],[17,"SYS_io_destroy","","",null,null],[17,"SYS_io_getevents","","",null,null],[17,"SYS_io_submit","","",null,null],[17,"SYS_io_cancel","","",null,null],[17,"SYS_get_thread_area","","",null,null],[17,"SYS_lookup_dcookie","","",null,null],[17,"SYS_epoll_create","","",null,null],[17,"SYS_epoll_ctl_old","","",null,null],[17,"SYS_epoll_wait_old","","",null,null],[17,"SYS_remap_file_pages","","",null,null],[17,"SYS_getdents64","","",null,null],[17,"SYS_set_tid_address","","",null,null],[17,"SYS_restart_syscall","","",null,null],[17,"SYS_semtimedop","","",null,null],[17,"SYS_fadvise64","","",null,null],[17,"SYS_timer_create","","",null,null],[17,"SYS_timer_settime","","",null,null],[17,"SYS_timer_gettime","","",null,null],[17,"SYS_timer_getoverrun","","",null,null],[17,"SYS_timer_delete","","",null,null],[17,"SYS_clock_settime","","",null,null],[17,"SYS_clock_gettime","","",null,null],[17,"SYS_clock_getres","","",null,null],[17,"SYS_clock_nanosleep","","",null,null],[17,"SYS_exit_group","","",null,null],[17,"SYS_epoll_wait","","",null,null],[17,"SYS_epoll_ctl","","",null,null],[17,"SYS_tgkill","","",null,null],[17,"SYS_utimes","","",null,null],[17,"SYS_vserver","","",null,null],[17,"SYS_mbind","","",null,null],[17,"SYS_set_mempolicy","","",null,null],[17,"SYS_get_mempolicy","","",null,null],[17,"SYS_mq_open","","",null,null],[17,"SYS_mq_unlink","","",null,null],[17,"SYS_mq_timedsend","","",null,null],[17,"SYS_mq_timedreceive","","",null,null],[17,"SYS_mq_notify","","",null,null],[17,"SYS_mq_getsetattr","","",null,null],[17,"SYS_kexec_load","","",null,null],[17,"SYS_waitid","","",null,null],[17,"SYS_add_key","","",null,null],[17,"SYS_request_key","","",null,null],[17,"SYS_keyctl","","",null,null],[17,"SYS_ioprio_set","","",null,null],[17,"SYS_ioprio_get","","",null,null],[17,"SYS_inotify_init","","",null,null],[17,"SYS_inotify_add_watch","","",null,null],[17,"SYS_inotify_rm_watch","","",null,null],[17,"SYS_migrate_pages","","",null,null],[17,"SYS_openat","","",null,null],[17,"SYS_mkdirat","","",null,null],[17,"SYS_mknodat","","",null,null],[17,"SYS_fchownat","","",null,null],[17,"SYS_futimesat","","",null,null],[17,"SYS_newfstatat","","",null,null],[17,"SYS_unlinkat","","",null,null],[17,"SYS_renameat","","",null,null],[17,"SYS_linkat","","",null,null],[17,"SYS_symlinkat","","",null,null],[17,"SYS_readlinkat","","",null,null],[17,"SYS_fchmodat","","",null,null],[17,"SYS_faccessat","","",null,null],[17,"SYS_pselect6","","",null,null],[17,"SYS_ppoll","","",null,null],[17,"SYS_unshare","","",null,null],[17,"SYS_set_robust_list","","",null,null],[17,"SYS_get_robust_list","","",null,null],[17,"SYS_splice","","",null,null],[17,"SYS_tee","","",null,null],[17,"SYS_sync_file_range","","",null,null],[17,"SYS_vmsplice","","",null,null],[17,"SYS_move_pages","","",null,null],[17,"SYS_utimensat","","",null,null],[17,"SYS_epoll_pwait","","",null,null],[17,"SYS_signalfd","","",null,null],[17,"SYS_timerfd_create","","",null,null],[17,"SYS_eventfd","","",null,null],[17,"SYS_fallocate","","",null,null],[17,"SYS_timerfd_settime","","",null,null],[17,"SYS_timerfd_gettime","","",null,null],[17,"SYS_accept4","","",null,null],[17,"SYS_signalfd4","","",null,null],[17,"SYS_eventfd2","","",null,null],[17,"SYS_epoll_create1","","",null,null],[17,"SYS_dup3","","",null,null],[17,"SYS_pipe2","","",null,null],[17,"SYS_inotify_init1","","",null,null],[17,"SYS_preadv","","",null,null],[17,"SYS_pwritev","","",null,null],[17,"SYS_rt_tgsigqueueinfo","","",null,null],[17,"SYS_perf_event_open","","",null,null],[17,"SYS_recvmmsg","","",null,null],[17,"SYS_fanotify_init","","",null,null],[17,"SYS_fanotify_mark","","",null,null],[17,"SYS_prlimit64","","",null,null],[17,"SYS_name_to_handle_at","","",null,null],[17,"SYS_open_by_handle_at","","",null,null],[17,"SYS_clock_adjtime","","",null,null],[17,"SYS_syncfs","","",null,null],[17,"SYS_sendmmsg","","",null,null],[17,"SYS_setns","","",null,null],[17,"SYS_getcpu","","",null,null],[17,"SYS_process_vm_readv","","",null,null],[17,"SYS_process_vm_writev","","",null,null],[17,"SYS_kcmp","","",null,null],[17,"SYS_finit_module","","",null,null],[17,"SYS_sched_setattr","","",null,null],[17,"SYS_sched_getattr","","",null,null],[17,"SYS_renameat2","","",null,null],[17,"SYS_seccomp","","",null,null],[17,"SYS_getrandom","","",null,null],[17,"SYS_memfd_create","","",null,null],[17,"SYS_kexec_file_load","","",null,null],[17,"SYS_bpf","","",null,null],[17,"SYS_execveat","","",null,null],[17,"SYS_userfaultfd","","",null,null],[17,"SYS_membarrier","","",null,null],[17,"SYS_mlock2","","",null,null],[17,"SYS_copy_file_range","","",null,null],[17,"SYS_preadv2","","",null,null],[17,"SYS_pwritev2","","",null,null],[17,"SYS_pkey_mprotect","","",null,null],[17,"SYS_pkey_alloc","","",null,null],[17,"SYS_pkey_free","","",null,null],[17,"R15","","",null,null],[17,"R14","","",null,null],[17,"R13","","",null,null],[17,"R12","","",null,null],[17,"RBP","","",null,null],[17,"RBX","","",null,null],[17,"R11","","",null,null],[17,"R10","","",null,null],[17,"R9","","",null,null],[17,"R8","","",null,null],[17,"RAX","","",null,null],[17,"RCX","","",null,null],[17,"RDX","","",null,null],[17,"RSI","","",null,null],[17,"RDI","","",null,null],[17,"ORIG_RAX","","",null,null],[17,"RIP","","",null,null],[17,"CS","","",null,null],[17,"EFLAGS","","",null,null],[17,"RSP","","",null,null],[17,"SS","","",null,null],[17,"FS_BASE","","",null,null],[17,"GS_BASE","","",null,null],[17,"DS","","",null,null],[17,"ES","","",null,null],[17,"FS","","",null,null],[17,"GS","","",null,null]],"paths":[[3,"group"],[3,"utimbuf"],[3,"timeval"],[3,"timespec"],[3,"rlimit"],[3,"rusage"],[3,"in_addr"],[3,"in6_addr"],[3,"ip_mreq"],[3,"ipv6_mreq"],[3,"hostent"],[3,"iovec"],[3,"pollfd"],[3,"winsize"],[3,"linger"],[3,"sigval"],[3,"itimerval"],[3,"tms"],[3,"sockaddr"],[3,"sockaddr_in"],[3,"sockaddr_in6"],[3,"sockaddr_un"],[3,"sockaddr_storage"],[3,"addrinfo"],[3,"sockaddr_nl"],[3,"sockaddr_ll"],[3,"tm"],[3,"sched_param"],[3,"Dl_info"],[3,"epoll_event"],[3,"utsname"],[3,"lconv"],[3,"sigevent"],[3,"dirent"],[3,"dirent64"],[3,"rlimit64"],[3,"glob_t"],[3,"ifaddrs"],[3,"passwd"],[3,"spwd"],[3,"statvfs"],[3,"dqblk"],[3,"signalfd_siginfo"],[3,"itimerspec"],[3,"mq_attr"],[3,"if_nameindex"],[3,"msginfo"],[3,"mmsghdr"],[3,"sembuf"],[3,"input_event"],[3,"input_id"],[3,"input_absinfo"],[3,"input_keymap_entry"],[3,"input_mask"],[3,"ff_replay"],[3,"ff_trigger"],[3,"ff_envelope"],[3,"ff_constant_effect"],[3,"ff_ramp_effect"],[3,"ff_condition_effect"],[3,"ff_periodic_effect"],[3,"ff_rumble_effect"],[3,"ff_effect"],[3,"aiocb"],[3,"__exit_status"],[3,"__timeval"],[3,"utmpx"],[3,"sigaction"],[3,"stack_t"],[3,"siginfo_t"],[3,"glob64_t"],[3,"ucred"],[3,"statfs"],[3,"msghdr"],[3,"cmsghdr"],[3,"termios"],[3,"flock"],[3,"sysinfo"],[3,"msqid_ds"],[3,"stat"],[3,"stat64"],[3,"statfs64"],[3,"statvfs64"],[3,"_libc_fpxreg"],[3,"_libc_xmmreg"],[3,"_libc_fpstate"],[3,"user_fpregs_struct"],[3,"user_regs_struct"],[3,"user"],[3,"mcontext_t"],[3,"ucontext_t"],[3,"ipc_perm"],[3,"shmid_ds"],[3,"pthread_attr_t"],[3,"sigset_t"],[3,"sem_t"],[3,"pthread_mutex_t"],[3,"pthread_rwlock_t"],[3,"pthread_mutexattr_t"],[3,"pthread_rwlockattr_t"],[3,"pthread_cond_t"],[3,"pthread_condattr_t"],[3,"fsid_t"],[3,"cpu_set_t"],[3,"fd_set"]]};
searchIndex["log"] = {"doc":"A lightweight logging facade.","items":[[3,"LogRecord","log","The \"payload\" of a log message. This structure is primarily used as a parameter in the [`log`] method of the [`Log`] trait.",null,null],[3,"LogMetadata","","Metadata about a log message.",null,null],[3,"LogLocation","","The location of a log message.",null,null],[3,"MaxLogLevelFilter","","A token providing read and write access to the global maximum log level filter.",null,null],[3,"SetLoggerError","","The type returned by `set_logger` if `set_logger` has already been called.",null,null],[3,"ShutdownLoggerError","","The type returned by `shutdown_logger_raw` if `shutdown_logger_raw` has already been called or if `set_logger_raw` has not been called yet.",null,null],[4,"LogLevel","","An enum representing the available verbosity levels of the logging framework.",null,null],[13,"Error","","The \"error\" level.",0,null],[13,"Warn","","The \"warn\" level.",0,null],[13,"Info","","The \"info\" level.",0,null],[13,"Debug","","The \"debug\" level.",0,null],[13,"Trace","","The \"trace\" level.",0,null],[4,"LogLevelFilter","","An enum representing the available verbosity level filters of the logging framework.",null,null],[13,"Off","","A level lower than all log levels.",1,null],[13,"Error","","Corresponds to the `Error` log level.",1,null],[13,"Warn","","Corresponds to the `Warn` log level.",1,null],[13,"Info","","Corresponds to the `Info` log level.",1,null],[13,"Debug","","Corresponds to the `Debug` log level.",1,null],[13,"Trace","","Corresponds to the `Trace` log level.",1,null],[5,"max_log_level","","Returns the current maximum log level.",null,{"inputs":[],"output":{"name":"loglevelfilter"}}],[5,"set_logger","","Sets the global logger.",null,{"inputs":[{"name":"m"}],"output":{"name":"result"}}],[5,"set_logger_raw","","Sets the global logger from a raw pointer.",null,{"inputs":[{"name":"m"}],"output":{"name":"result"}}],[5,"shutdown_logger","","Shuts down the global logger.",null,{"inputs":[],"output":{"name":"result"}}],[5,"shutdown_logger_raw","","Shuts down the global logger.",null,{"inputs":[],"output":{"name":"result"}}],[8,"Log","","A trait encapsulating the operations required of a logger",null,null],[10,"enabled","","Determines if a log message with the specified metadata would be logged.",2,{"inputs":[{"name":"self"},{"name":"logmetadata"}],"output":{"name":"bool"}}],[10,"log","","Logs the `LogRecord`.",2,{"inputs":[{"name":"self"},{"name":"logrecord"}],"output":null}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",0,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"loglevel"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"loglevel"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"loglevelfilter"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"loglevel"}],"output":{"name":"option"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"loglevelfilter"}],"output":{"name":"option"}}],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"loglevel"}],"output":{"name":"ordering"}}],[11,"from_str","","",0,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"max","","Returns the most verbose logging level.",0,{"inputs":[],"output":{"name":"loglevel"}}],[11,"to_log_level_filter","","Converts the `LogLevel` to the equivalent `LogLevelFilter`.",0,{"inputs":[{"name":"self"}],"output":{"name":"loglevelfilter"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",1,null],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"loglevelfilter"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"loglevelfilter"}],"output":{"name":"bool"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"loglevel"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"loglevelfilter"}],"output":{"name":"option"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"loglevel"}],"output":{"name":"option"}}],[11,"cmp","","",1,{"inputs":[{"name":"self"},{"name":"loglevelfilter"}],"output":{"name":"ordering"}}],[11,"from_str","","",1,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"max","","Returns the most verbose logging level filter.",1,{"inputs":[],"output":{"name":"loglevelfilter"}}],[11,"to_log_level","","Converts `self` to the equivalent `LogLevel`.",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"args","","The message body.",3,{"inputs":[{"name":"self"}],"output":{"name":"arguments"}}],[11,"metadata","","Metadata about the log directive.",3,{"inputs":[{"name":"self"}],"output":{"name":"logmetadata"}}],[11,"location","","The location of the log directive.",3,{"inputs":[{"name":"self"}],"output":{"name":"loglocation"}}],[11,"level","","The verbosity level of the message.",3,{"inputs":[{"name":"self"}],"output":{"name":"loglevel"}}],[11,"target","","The name of the target of the directive.",3,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"logmetadata"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"logmetadata"}],"output":{"name":"bool"}}],[11,"cmp","","",4,{"inputs":[{"name":"self"},{"name":"logmetadata"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",4,{"inputs":[{"name":"self"},{"name":"logmetadata"}],"output":{"name":"option"}}],[11,"lt","","",4,{"inputs":[{"name":"self"},{"name":"logmetadata"}],"output":{"name":"bool"}}],[11,"le","","",4,{"inputs":[{"name":"self"},{"name":"logmetadata"}],"output":{"name":"bool"}}],[11,"gt","","",4,{"inputs":[{"name":"self"},{"name":"logmetadata"}],"output":{"name":"bool"}}],[11,"ge","","",4,{"inputs":[{"name":"self"},{"name":"logmetadata"}],"output":{"name":"bool"}}],[11,"hash","","",4,null],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"level","","The verbosity level of the message.",4,{"inputs":[{"name":"self"}],"output":{"name":"loglevel"}}],[11,"target","","The name of the target of the directive.",4,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"loglocation"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"loglocation"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"self"},{"name":"loglocation"}],"output":{"name":"bool"}}],[11,"cmp","","",5,{"inputs":[{"name":"self"},{"name":"loglocation"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",5,{"inputs":[{"name":"self"},{"name":"loglocation"}],"output":{"name":"option"}}],[11,"lt","","",5,{"inputs":[{"name":"self"},{"name":"loglocation"}],"output":{"name":"bool"}}],[11,"le","","",5,{"inputs":[{"name":"self"},{"name":"loglocation"}],"output":{"name":"bool"}}],[11,"gt","","",5,{"inputs":[{"name":"self"},{"name":"loglocation"}],"output":{"name":"bool"}}],[11,"ge","","",5,{"inputs":[{"name":"self"},{"name":"loglocation"}],"output":{"name":"bool"}}],[11,"hash","","",5,null],[11,"module_path","","The module path of the message.",5,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"file","","The source file containing the message.",5,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"line","","The line containing the message.",5,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get","","Gets the current maximum log level filter.",6,{"inputs":[{"name":"self"}],"output":{"name":"loglevelfilter"}}],[11,"set","","Sets the maximum log level.",6,{"inputs":[{"name":"self"},{"name":"loglevelfilter"}],"output":null}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",7,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",8,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[14,"log","","The standard logging macro.",null,null],[14,"error","","Logs a message at the error level.",null,null],[14,"warn","","Logs a message at the warn level.",null,null],[14,"info","","Logs a message at the info level.",null,null],[14,"debug","","Logs a message at the debug level.",null,null],[14,"trace","","Logs a message at the trace level.",null,null],[14,"log_enabled","","Determines if a message logged at the specified level in that module will be logged.",null,null]],"paths":[[4,"LogLevel"],[4,"LogLevelFilter"],[8,"Log"],[3,"LogRecord"],[3,"LogMetadata"],[3,"LogLocation"],[3,"MaxLogLevelFilter"],[3,"SetLoggerError"],[3,"ShutdownLoggerError"]]};
searchIndex["matches"] = {"doc":"","items":[[14,"matches","matches","Check if an expression matches a refutable pattern.",null,null],[14,"assert_matches","","Assert that an expression matches a refutable pattern.",null,null],[14,"debug_assert_matches","","Assert that an expression matches a refutable pattern using debug assertions.",null,null]],"paths":[]};
searchIndex["memchr"] = {"doc":"This crate defines two functions, `memchr` and `memrchr`, which expose a safe interface to the corresponding functions in `libc`.","items":[[3,"Memchr","memchr","An iterator for memchr",null,null],[3,"Memchr2","","An iterator for Memchr2",null,null],[3,"Memchr3","","An iterator for Memchr3",null,null],[5,"memchr","","A safe interface to `memchr`.",null,null],[5,"memrchr","","A safe interface to `memrchr`.",null,null],[5,"memchr2","","Like `memchr`, but searches for two bytes instead of one.",null,null],[5,"memchr3","","Like `memchr`, but searches for three bytes instead of one.",null,null],[11,"new","","Creates a new iterator that yields all positions of needle in haystack.",0,null],[11,"next","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"new","","Creates a new iterator that yields all positions of needle in haystack.",1,null],[11,"next","","",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"new","","Create a new Memchr2 that's initalized to zero with a haystack",2,null],[11,"next","","",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}]],"paths":[[3,"Memchr"],[3,"Memchr2"],[3,"Memchr3"]]};
searchIndex["mime"] = {"doc":"Mime","items":[[3,"Mime","mime","Mime, or Media Type. Encapsulates common registers types.",null,null],[12,"0","","",0,null],[12,"1","","",0,null],[12,"2","","",0,null],[4,"TopLevel","","",null,null],[13,"Star","","",1,null],[13,"Text","","",1,null],[13,"Image","","",1,null],[13,"Audio","","",1,null],[13,"Video","","",1,null],[13,"Application","","",1,null],[13,"Multipart","","",1,null],[13,"Message","","",1,null],[13,"Model","","",1,null],[13,"Ext","","",1,null],[4,"SubLevel","","",null,null],[13,"Star","","",2,null],[13,"Plain","","",2,null],[13,"Html","","",2,null],[13,"Xml","","",2,null],[13,"Javascript","","",2,null],[13,"Css","","",2,null],[13,"EventStream","","",2,null],[13,"Json","","",2,null],[13,"WwwFormUrlEncoded","","",2,null],[13,"Msgpack","","",2,null],[13,"OctetStream","","",2,null],[13,"FormData","","",2,null],[13,"Png","","",2,null],[13,"Gif","","",2,null],[13,"Bmp","","",2,null],[13,"Jpeg","","",2,null],[13,"Mpeg","","",2,null],[13,"Mp4","","",2,null],[13,"Ogg","","",2,null],[13,"Ext","","",2,null],[4,"Attr","","",null,null],[13,"Charset","","",3,null],[13,"Boundary","","",3,null],[13,"Q","","",3,null],[13,"Ext","","",3,null],[4,"Value","","",null,null],[13,"Utf8","","",4,null],[13,"Ext","","",4,null],[6,"Param","","",null,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"mime"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",0,null],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"mime"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"mime"}],"output":{"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"self"},{"name":"mime"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"self"},{"name":"mime"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"self"},{"name":"mime"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"self"},{"name":"mime"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"mime"}],"output":{"name":"bool"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"toplevel"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",1,null],[11,"cmp","","",1,{"inputs":[{"name":"self"},{"name":"toplevel"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"toplevel"}],"output":{"name":"option"}}],[11,"lt","","",1,{"inputs":[{"name":"self"},{"name":"toplevel"}],"output":{"name":"bool"}}],[11,"le","","",1,{"inputs":[{"name":"self"},{"name":"toplevel"}],"output":{"name":"bool"}}],[11,"gt","","",1,{"inputs":[{"name":"self"},{"name":"toplevel"}],"output":{"name":"bool"}}],[11,"ge","","",1,{"inputs":[{"name":"self"},{"name":"toplevel"}],"output":{"name":"bool"}}],[11,"as_str","","",1,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"deref","","",1,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"toplevel"}],"output":{"name":"bool"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"bool"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",1,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"sublevel"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",2,null],[11,"cmp","","",2,{"inputs":[{"name":"self"},{"name":"sublevel"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",2,{"inputs":[{"name":"self"},{"name":"sublevel"}],"output":{"name":"option"}}],[11,"lt","","",2,{"inputs":[{"name":"self"},{"name":"sublevel"}],"output":{"name":"bool"}}],[11,"le","","",2,{"inputs":[{"name":"self"},{"name":"sublevel"}],"output":{"name":"bool"}}],[11,"gt","","",2,{"inputs":[{"name":"self"},{"name":"sublevel"}],"output":{"name":"bool"}}],[11,"ge","","",2,{"inputs":[{"name":"self"},{"name":"sublevel"}],"output":{"name":"bool"}}],[11,"as_str","","",2,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"deref","","",2,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"sublevel"}],"output":{"name":"bool"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"bool"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",2,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"attr"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",3,null],[11,"cmp","","",3,{"inputs":[{"name":"self"},{"name":"attr"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",3,{"inputs":[{"name":"self"},{"name":"attr"}],"output":{"name":"option"}}],[11,"lt","","",3,{"inputs":[{"name":"self"},{"name":"attr"}],"output":{"name":"bool"}}],[11,"le","","",3,{"inputs":[{"name":"self"},{"name":"attr"}],"output":{"name":"bool"}}],[11,"gt","","",3,{"inputs":[{"name":"self"},{"name":"attr"}],"output":{"name":"bool"}}],[11,"ge","","",3,{"inputs":[{"name":"self"},{"name":"attr"}],"output":{"name":"bool"}}],[11,"as_str","","",3,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"deref","","",3,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"attr"}],"output":{"name":"bool"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"bool"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",3,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"value"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",4,null],[11,"cmp","","",4,{"inputs":[{"name":"self"},{"name":"value"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",4,{"inputs":[{"name":"self"},{"name":"value"}],"output":{"name":"option"}}],[11,"lt","","",4,{"inputs":[{"name":"self"},{"name":"value"}],"output":{"name":"bool"}}],[11,"le","","",4,{"inputs":[{"name":"self"},{"name":"value"}],"output":{"name":"bool"}}],[11,"gt","","",4,{"inputs":[{"name":"self"},{"name":"value"}],"output":{"name":"bool"}}],[11,"ge","","",4,{"inputs":[{"name":"self"},{"name":"value"}],"output":{"name":"bool"}}],[11,"as_str","","",4,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"deref","","",4,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"value"}],"output":{"name":"bool"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"bool"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",4,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_param","","",0,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"option"}}],[11,"from_str","","",0,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[14,"mime","","Easily create a Mime without having to import so many enums.",null,null]],"paths":[[3,"Mime"],[4,"TopLevel"],[4,"SubLevel"],[4,"Attr"],[4,"Value"]]};
searchIndex["mime_guess"] = {"doc":"Guessing of MIME types by file extension.","items":[[3,"Mime","mime_guess","Mime, or Media Type. Encapsulates common registers types.",null,null],[12,"0","","",0,null],[12,"1","","",0,null],[12,"2","","",0,null],[5,"guess_mime_type","","Guess the MIME type of `path` by its extension (as defined by `Path::extension()`).",null,{"inputs":[{"name":"p"}],"output":{"name":"mime"}}],[5,"guess_mime_type_opt","","Guess the MIME type of `path` by its extension (as defined by `Path::extension()`).",null,{"inputs":[{"name":"p"}],"output":{"name":"option"}}],[5,"get_mime_type","","Get the MIME type associated with a file extension.",null,{"inputs":[{"name":"str"}],"output":{"name":"mime"}}],[5,"get_mime_type_opt","","Get the MIME type associated with a file extension.",null,{"inputs":[{"name":"str"}],"output":{"name":"option"}}],[5,"get_mime_type_str","","Get the MIME type string associated with a file extension. Case-insensitive.",null,{"inputs":[{"name":"str"}],"output":{"name":"option"}}],[5,"get_mime_extensions","","Get a list of known extensions for a given `Mime`. ",null,{"inputs":[{"name":"mime"}],"output":{"name":"option"}}],[5,"get_mime_extensions_str","","Get a list of known extensions for a MIME type string. ",null,{"inputs":[{"name":"str"}],"output":{"name":"option"}}],[5,"get_extensions","","Get the extensions for a given top-level and sub-level of a MIME type (`{toplevel}/{sublevel}`).",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"option"}}],[5,"octet_stream","","Get the MIME type for `application/octet-stream` (generic binary stream)",null,{"inputs":[],"output":{"name":"mime"}}],[11,"get_param","","",0,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"option"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"mime"}],"output":{"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"self"},{"name":"mime"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"self"},{"name":"mime"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"self"},{"name":"mime"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"self"},{"name":"mime"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"mime"}],"output":{"name":"ordering"}}],[11,"from_str","","",0,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"mime"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"mime"}],"output":{"name":"bool"}}],[11,"hash","","",0,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"Mime"]]};
searchIndex["miniz_sys"] = {"doc":"","items":[[3,"mz_stream","miniz_sys","",null,null],[12,"next_in","","",0,null],[12,"avail_in","","",0,null],[12,"total_in","","",0,null],[12,"next_out","","",0,null],[12,"avail_out","","",0,null],[12,"total_out","","",0,null],[12,"msg","","",0,null],[12,"state","","",0,null],[12,"zalloc","","",0,null],[12,"zfree","","",0,null],[12,"opaque","","",0,null],[12,"data_type","","",0,null],[12,"adler","","",0,null],[12,"reserved","","",0,null],[4,"mz_internal_state","","",null,null],[5,"mz_deflateInit2","","",null,null],[5,"mz_deflate","","",null,null],[5,"mz_deflateEnd","","",null,null],[5,"mz_deflateReset","","",null,null],[5,"mz_inflateInit2","","",null,null],[5,"mz_inflate","","",null,null],[5,"mz_inflateEnd","","",null,null],[5,"mz_crc32","","",null,null],[6,"mz_alloc_func","","",null,null],[6,"mz_free_func","","",null,null],[17,"MZ_NO_FLUSH","","",null,null],[17,"MZ_PARTIAL_FLUSH","","",null,null],[17,"MZ_SYNC_FLUSH","","",null,null],[17,"MZ_FULL_FLUSH","","",null,null],[17,"MZ_FINISH","","",null,null],[17,"MZ_BLOCK","","",null,null],[17,"MZ_OK","","",null,null],[17,"MZ_STREAM_END","","",null,null],[17,"MZ_NEED_DICT","","",null,null],[17,"MZ_ERRNO","","",null,null],[17,"MZ_STREAM_ERROR","","",null,null],[17,"MZ_DATA_ERROR","","",null,null],[17,"MZ_MEM_ERROR","","",null,null],[17,"MZ_BUF_ERROR","","",null,null],[17,"MZ_VERSION_ERROR","","",null,null],[17,"MZ_PARAM_ERROR","","",null,null],[17,"MZ_DEFLATED","","",null,null],[17,"MZ_DEFAULT_WINDOW_BITS","","",null,null],[17,"MZ_DEFAULT_STRATEGY","","",null,null]],"paths":[[3,"mz_stream"]]};
searchIndex["multipart"] = {"doc":"Client- and server-side abstractions for HTTP `multipart/form-data` requests.","items":[[0,"client","multipart","The client-side abstraction for multipart requests. Enabled with the `client` feature.",null,null],[3,"SizedRequest","multipart::client","A wrapper around a request object that measures the request body and sets the `Content-Length` header to its size in bytes.",null,null],[3,"Multipart","","The entry point of the client-side multipart API.",null,null],[0,"hyper","","Client-side integration with Hyper.  Enabled with the `hyper` feature (on by default).",null,null],[5,"content_type","multipart::client::hyper","Create a `Content-Type: multipart/form-data;boundary={bound}`",null,{"inputs":[{"name":"str"}],"output":{"name":"contenttype"}}],[0,"lazy","multipart::client","Multipart requests which write out their data in one fell swoop.",null,null],[3,"LazyError","multipart::client::lazy","An error for lazily written multipart requests, including the original error as well as the field which caused the error, if applicable.",null,null],[12,"field_name","","The field that caused the error. If `None`, there was a problem opening the stream to write or finalizing the stream.",0,null],[12,"error","","The inner error.",0,null],[3,"Multipart","","A multipart request which writes all fields at once upon being provided an output stream.",null,null],[3,"PreparedFields","","The result of `Multipart::prepare()`.",null,null],[11,"client_request","","Feature: `hyper` Complete a POST request with the given `hyper::client::Client` and URL.",1,{"inputs":[{"name":"self"},{"name":"client"},{"name":"u"}],"output":{"name":"hyperresult"}}],[11,"client_request_mut","","Feature: `hyper` Complete a POST request with the given `hyper::client::Client` and URL; allows mutating the `hyper::client::RequestBuilder` via the passed closure.",1,{"inputs":[{"name":"self"},{"name":"client"},{"name":"u"},{"name":"f"}],"output":{"name":"hyperresult"}}],[11,"to_body","","Feature: `hyper` Convert `self` to `hyper::client::Body`.",2,{"inputs":[{"name":"self"}],"output":{"name":"body"}}],[6,"LazyIoError","","A `LazyError` wrapping `std::io::Error`.",null,null],[6,"LazyIoResult","","`Result` type for `LazyIoError`.",null,null],[8,"IntoCowPath","","Conversion trait necessary for `Multipart::add_file()` to accept borrowed or owned strings and borrowed or owned paths",null,null],[10,"into_cow_path","","Self-explanatory, hopefully",3,{"inputs":[{"name":"self"}],"output":{"name":"cow"}}],[11,"into","","",0,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"description","","",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",1,{"inputs":[],"output":{"name":"multipart"}}],[11,"new","","Initialize a new lazy dynamic request. ",1,{"inputs":[],"output":{"name":"self"}}],[11,"add_text","","Add a text field to this request. ",1,{"inputs":[{"name":"self"},{"name":"n"},{"name":"t"}],"output":{"name":"self"}}],[11,"add_file","","Add a file field to this request.",1,{"inputs":[{"name":"self"},{"name":"n"},{"name":"p"}],"output":{"name":"self"}}],[11,"add_stream","","Add a generic stream field to this request,",1,{"inputs":[{"name":"self"},{"name":"n"},{"name":"r"},{"name":"option"},{"name":"option"}],"output":{"name":"self"}}],[11,"send","","Convert `req` to `HttpStream`, write out the fields in this request, and finish the request, returning the response if successful, or the first error encountered.",1,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"result"}}],[11,"prepare","","Export the multipart data contained in this lazy request as an adaptor which implements `Read`.",1,{"inputs":[{"name":"self"}],"output":{"name":"lazyioresult"}}],[11,"content_len","","Get the content-length value for this set of fields, if applicable (all fields are sized, i.e. not generic streams).",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"boundary","","Get the boundary that was used to serialize the request.",2,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"read","","",2,null],[11,"write","multipart::client","",4,null],[11,"flush","","",4,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"apply_headers","","`SizedRequest` ignores `_content_len` because it sets its own later.",4,{"inputs":[{"name":"self"},{"name":"str"},{"name":"option"}],"output":{"name":"bool"}}],[11,"open_stream","","",4,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"finish","","",4,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[8,"HttpRequest","","A trait describing an HTTP request that can be used to send multipart data.",null,null],[16,"Stream","","The HTTP stream type that can be opend by this request, to which the multipart data will be written.",5,null],[16,"Error","","The error type for this request.  Must be compatible with `io::Error` as well as `Self::HttpStream::Error`",5,null],[10,"apply_headers","","Set the `Content-Type` header to `multipart/form-data` and supply the `boundary` value. If `content_len` is given, set the `Content-Length` header to its value.",5,{"inputs":[{"name":"self"},{"name":"str"},{"name":"option"}],"output":{"name":"bool"}}],[10,"open_stream","","Open the request stream and return it or any error otherwise. ",5,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[8,"HttpStream","","A trait describing an open HTTP stream that can be written to.",null,null],[16,"Request","","The request type that opened this stream.",6,null],[16,"Response","","The response type that will be returned after the request is completed.",6,null],[16,"Error","","The error type for this stream. Must be compatible with `io::Error` as well as `Self::Request::Error`.",6,null],[10,"finish","","Finalize and close the stream and return the response object, or any error otherwise.",6,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"from_request","","Create a new `Multipart` to wrap a request.",7,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[11,"write_text","","Write a text field to this multipart request. `name` and `val` can be either owned `String` or `&str`.",7,{"inputs":[{"name":"self"},{"name":"n"},{"name":"v"}],"output":{"name":"result"}}],[11,"write_file","","Open a file pointed to by `path` and write its contents to the multipart request,  supplying its filename and guessing its `Content-Type` from its extension.",7,{"inputs":[{"name":"self"},{"name":"n"},{"name":"p"}],"output":{"name":"result"}}],[11,"write_stream","","Write a byte stream to the multipart request as a file field, supplying `filename` if given, and `content_type` if given or `\"application/octet-stream\"` if not.",7,{"inputs":[{"name":"self"},{"name":"n"},{"name":"st"},{"name":"option"},{"name":"option"}],"output":{"name":"result"}}],[11,"send","","Finalize the request and return the response from the server, or the last error if set.",7,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"from_request_sized","","Create a new `Multipart` using the `SizedRequest` wrapper around `req`.",7,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[14,"chain_result","multipart","Chain a series of results together, with or without previous results.",null,null]],"paths":[[3,"LazyError"],[3,"Multipart"],[3,"PreparedFields"],[8,"IntoCowPath"],[3,"SizedRequest"],[8,"HttpRequest"],[8,"HttpStream"],[3,"Multipart"]]};
searchIndex["native_tls"] = {"doc":"An abstraction over platform-specific TLS implementations.","items":[[3,"Error","native_tls","An error returned from the TLS implementation.",null,null],[3,"Pkcs12","","A PKCS #12 archive.",null,null],[3,"Certificate","","An X509 certificate.",null,null],[3,"MidHandshakeTlsStream","","A TLS stream which has been interrupted midway through the handshake process.",null,null],[3,"TlsConnectorBuilder","","A builder for `TlsConnector`s.",null,null],[3,"TlsConnector","","A builder for client-side TLS connections.",null,null],[3,"TlsAcceptorBuilder","","A builder for `TlsAcceptor`s.",null,null],[3,"TlsAcceptor","","A builder for server-side TLS connections.",null,null],[3,"TlsStream","","A stream managing a TLS session.",null,null],[4,"HandshakeError","","An error returned from `ClientBuilder::handshake`.",null,null],[13,"Failure","","A fatal error.",0,null],[13,"Interrupted","","A stream interrupted midway through the handshake process due to a `WouldBlock` error.",0,null],[4,"Protocol","","SSL/TLS protocol versions.",null,null],[13,"Sslv3","","The SSL 3.0 protocol.",1,null],[13,"Tlsv10","","The TLS 1.0 protocol.",1,null],[13,"Tlsv11","","The TLS 1.1 protocol.",1,null],[13,"Tlsv12","","The TLS 1.2 protocol.",1,null],[0,"backend","","TLS backend-specific functionality.",null,null],[0,"openssl","native_tls::backend","OpenSSL-specific functionality.",null,null],[8,"TlsConnectorBuilderExt","native_tls::backend::openssl","OpenSSL-specific extensions to `TlsConnectorBuilder`.",null,null],[10,"from_openssl","","Initialize `TlsAcceptorBuilderExt` from an `SslAcceptorBuilder`.",2,{"inputs":[{"name":"sslconnectorbuilder"}],"output":{"name":"self"}}],[10,"builder","","Returns a shared reference to the inner `SslConnectorBuilder`.",2,{"inputs":[{"name":"self"}],"output":{"name":"sslconnectorbuilder"}}],[10,"builder_mut","","Returns a mutable reference to the inner `SslConnectorBuilder`.",2,{"inputs":[{"name":"self"}],"output":{"name":"sslconnectorbuilder"}}],[8,"TlsAcceptorBuilderExt","","OpenSSL-specific extensions to `TlsAcceptorBuilder`.",null,null],[10,"from_openssl","","Initialize `TlsAcceptorBuilderExt` from an `SslAcceptorBuilder`.",3,{"inputs":[{"name":"sslacceptorbuilder"}],"output":{"name":"self"}}],[10,"builder","","Returns a shared reference to the inner `SslAcceptorBuilder`.",3,{"inputs":[{"name":"self"}],"output":{"name":"sslacceptorbuilder"}}],[10,"builder_mut","","Returns a mutable reference to the inner `SslAcceptorBuilder`.",3,{"inputs":[{"name":"self"}],"output":{"name":"sslacceptorbuilder"}}],[8,"TlsStreamExt","","OpenSSL-specific extensions to `TlsStream`.",null,null],[10,"raw_stream","","Returns a shared reference to the OpenSSL `SslStream`.",4,{"inputs":[{"name":"self"}],"output":{"name":"sslstream"}}],[10,"raw_stream_mut","","Returns a mutable reference to the OpenSSL `SslStream`.",4,{"inputs":[{"name":"self"}],"output":{"name":"sslstream"}}],[8,"ErrorExt","","OpenSSL-specific extensions to `Error`",null,null],[10,"openssl_error","","Extract the underlying OpenSSL error for inspection.",5,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"from_openssl","native_tls","",6,{"inputs":[{"name":"sslconnectorbuilder"}],"output":{"name":"tlsconnectorbuilder"}}],[11,"builder","","",6,{"inputs":[{"name":"self"}],"output":{"name":"sslconnectorbuilder"}}],[11,"builder_mut","","",6,{"inputs":[{"name":"self"}],"output":{"name":"sslconnectorbuilder"}}],[11,"from_openssl","","",7,{"inputs":[{"name":"sslacceptorbuilder"}],"output":{"name":"tlsacceptorbuilder"}}],[11,"builder","","",7,{"inputs":[{"name":"self"}],"output":{"name":"sslacceptorbuilder"}}],[11,"builder_mut","","",7,{"inputs":[{"name":"self"}],"output":{"name":"sslacceptorbuilder"}}],[11,"raw_stream","","",8,{"inputs":[{"name":"self"}],"output":{"name":"sslstream"}}],[11,"raw_stream_mut","","",8,{"inputs":[{"name":"self"}],"output":{"name":"sslstream"}}],[11,"openssl_error","","",9,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[6,"Result","","A typedef of the result type returned by many methods.",null,null],[11,"description","","",9,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",9,{"inputs":[{"name":"t"}],"output":{"name":"error"}}],[11,"from_der","","Parses a DER-formatted PKCS #12 archive, using the specified password to decrypt the key.",10,null],[11,"from_der","","Parses a DER-formatted X509 certificate.",11,null],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_ref","","Returns a shared reference to the inner stream.",12,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Returns a mutable reference to the inner stream.",12,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"handshake","","Restarts the handshake process.",12,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",0,{"inputs":[{"name":"handshakeerror"}],"output":{"name":"handshakeerror"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"protocol"}}],[11,"identity","","Sets the identity to be used for client certificate authentication.",6,{"inputs":[{"name":"self"},{"name":"pkcs12"}],"output":{"name":"result"}}],[11,"supported_protocols","","Sets the protocols which the connector will support.",6,null],[11,"add_root_certificate","","Adds a certificate to the set of roots that the connector will trust.",6,{"inputs":[{"name":"self"},{"name":"certificate"}],"output":{"name":"result"}}],[11,"build","","Consumes the builder, returning a `TlsConnector`.",6,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"tlsconnector"}}],[11,"builder","","Returns a new builder for a `TlsConnector`.",13,{"inputs":[],"output":{"name":"result"}}],[11,"connect","","Initiates a TLS handshake.",13,{"inputs":[{"name":"self"},{"name":"str"},{"name":"s"}],"output":{"name":"result"}}],[11,"danger_connect_without_providing_domain_for_certificate_verification_and_server_name_indication","","Like `connect`, but does not validate the server's domain name against its certificate.",13,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"supported_protocols","","Sets the protocols which the acceptor will support.",7,null],[11,"build","","Consumes the builder, returning a `TlsAcceptor`.",7,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"tlsacceptor"}}],[11,"builder","","Returns a new builder for a `TlsAcceptor`.",14,{"inputs":[{"name":"pkcs12"}],"output":{"name":"result"}}],[11,"accept","","Initiates a TLS handshake.",14,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_ref","","Returns a shared reference to the inner stream.",8,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Returns a mutable reference to the inner stream.",8,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"buffered_read_size","","Returns the number of bytes that can be read without resulting in any network calls.",8,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"shutdown","","Shuts down the TLS session.",8,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read","","",8,null],[11,"write","","",8,null],[11,"flush","","",8,{"inputs":[{"name":"self"}],"output":{"name":"result"}}]],"paths":[[4,"HandshakeError"],[4,"Protocol"],[8,"TlsConnectorBuilderExt"],[8,"TlsAcceptorBuilderExt"],[8,"TlsStreamExt"],[8,"ErrorExt"],[3,"TlsConnectorBuilder"],[3,"TlsAcceptorBuilder"],[3,"TlsStream"],[3,"Error"],[3,"Pkcs12"],[3,"Certificate"],[3,"MidHandshakeTlsStream"],[3,"TlsConnector"],[3,"TlsAcceptor"]]};
searchIndex["num"] = {"doc":"A collection of numeric types and traits for Rust.","items":[[8,"Integer","num","",null,null],[10,"div_floor","","Floored integer division.",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"mod_floor","","Floored integer modulo, satisfying:",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"gcd","","Greatest Common Divisor (GCD).",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"lcm","","Lowest Common Multiple (LCM).",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"divides","","Deprecated, use `is_multiple_of` instead.",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[10,"is_multiple_of","","Returns `true` if `other` is a multiple of `self`.",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[10,"is_even","","Returns `true` if the number is even.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_odd","","Returns `true` if the number is odd.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"div_rem","","Simultaneous truncated integer division and modulus. Returns `(quotient, remainder)`.",0,null],[11,"div_mod_floor","","Simultaneous floored integer division and modulus. Returns `(quotient, remainder)`.",0,null],[5,"range","","Returns an iterator over the given range [start, stop) (that is, starting at start (inclusive), and ending at stop (exclusive)).",null,{"inputs":[{"name":"a"},{"name":"a"}],"output":{"name":"range"}}],[5,"range_inclusive","","Return an iterator over the range [start, stop]",null,{"inputs":[{"name":"a"},{"name":"a"}],"output":{"name":"rangeinclusive"}}],[5,"range_step","","Return an iterator over the range [start, stop) by `step`. It handles overflow by stopping.",null,{"inputs":[{"name":"a"},{"name":"a"},{"name":"a"}],"output":{"name":"rangestep"}}],[5,"range_step_inclusive","","Return an iterator over the range [start, stop] by `step`. It handles overflow by stopping.",null,{"inputs":[{"name":"a"},{"name":"a"},{"name":"a"}],"output":{"name":"rangestepinclusive"}}],[8,"Num","","The base trait for numeric types, covering `0` and `1` values, comparisons, basic numeric operations, and string conversion.",null,null],[16,"FromStrRadixErr","","",1,null],[10,"from_str_radix","","Convert from a string and radix <= 36.",1,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[8,"Zero","","Defines an additive identity element for `Self`.",null,null],[10,"zero","","Returns the additive identity element of `Self`, `0`.",2,{"inputs":[],"output":{"name":"self"}}],[10,"is_zero","","Returns `true` if `self` is equal to the additive identity.",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[8,"One","","Defines a multiplicative identity element for `Self`.",null,null],[10,"one","","Returns the multiplicative identity element of `Self`, `1`.",3,{"inputs":[],"output":{"name":"self"}}],[8,"Signed","","Useful functions for signed numbers (i.e. numbers that can be negative).",null,null],[10,"abs","","Computes the absolute value.",4,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"abs_sub","","The positive difference of two numbers.",4,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"signum","","Returns the sign of the number.",4,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"is_positive","","Returns true if the number is positive and false if the number is zero or negative.",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_negative","","Returns true if the number is negative and false if the number is zero or positive.",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[8,"Unsigned","","A trait for values which cannot be negative",null,null],[8,"Bounded","","Numbers which have upper and lower bounds",null,null],[10,"min_value","","returns the smallest finite number this type can represent",5,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","returns the largest finite number this type can represent",5,{"inputs":[],"output":{"name":"self"}}],[5,"one","","Returns the multiplicative identity, `1`.",null,{"inputs":[],"output":{"name":"t"}}],[5,"zero","","Returns the additive identity, `0`.",null,{"inputs":[],"output":{"name":"t"}}],[5,"abs","","Computes the absolute value.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[5,"abs_sub","","The positive difference of two numbers.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"signum","","Returns the sign of the number.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[8,"Saturating","","Saturating math operations",null,null],[10,"saturating_add","","Saturating addition operator. Returns a+b, saturating at the numeric bounds instead of overflowing.",6,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"saturating_sub","","Saturating subtraction operator. Returns a-b, saturating at the numeric bounds instead of overflowing.",6,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[8,"CheckedAdd","","Performs addition that returns `None` instead of wrapping around on overflow.",null,null],[10,"checked_add","","Adds two numbers, checking for overflow. If overflow happens, `None` is returned.",7,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedSub","","Performs subtraction that returns `None` instead of wrapping around on underflow.",null,null],[10,"checked_sub","","Subtracts two numbers, checking for underflow. If underflow happens, `None` is returned.",8,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedMul","","Performs multiplication that returns `None` instead of wrapping around on underflow or overflow.",null,null],[10,"checked_mul","","Multiplies two numbers, checking for underflow or overflow. If underflow or overflow happens, `None` is returned.",9,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedDiv","","Performs division that returns `None` instead of panicking on division by zero and instead of wrapping around on underflow and overflow.",null,null],[10,"checked_div","","Divides two numbers, checking for underflow, overflow and division by zero. If any of that happens, `None` is returned.",10,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[8,"PrimInt","","",null,null],[10,"count_ones","","Returns the number of ones in the binary representation of `self`.",11,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",11,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"leading_zeros","","Returns the number of leading zeros in the binary representation of `self`.",11,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"trailing_zeros","","Returns the number of trailing zeros in the binary representation of `self`.",11,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"rotate_left","","Shifts the bits to the left by a specified amount amount, `n`, wrapping the truncated bits to the end of the resulting integer.",11,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"rotate_right","","Shifts the bits to the right by a specified amount amount, `n`, wrapping the truncated bits to the beginning of the resulting integer.",11,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"signed_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling zeros in the least significant bits.",11,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"signed_shr","","Shifts the bits to the right by a specified amount amount, `n`, copying the \"sign bit\" in the most significant bits even for unsigned types.",11,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"unsigned_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling zeros in the least significant bits.",11,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"unsigned_shr","","Shifts the bits to the right by a specified amount amount, `n`, filling zeros in the most significant bits.",11,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"swap_bytes","","Reverses the byte order of the integer.",11,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"from_be","","Convert an integer from big endian to the target's endianness.",11,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"from_le","","Convert an integer from little endian to the target's endianness.",11,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"to_be","","Convert `self` to big endian from the target's endianness.",11,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"to_le","","Convert `self` to little endian from the target's endianness.",11,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",11,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[8,"Float","","",null,null],[10,"nan","","Returns the `NaN` value.",12,{"inputs":[],"output":{"name":"self"}}],[10,"infinity","","Returns the infinite value.",12,{"inputs":[],"output":{"name":"self"}}],[10,"neg_infinity","","Returns the negative infinite value.",12,{"inputs":[],"output":{"name":"self"}}],[10,"neg_zero","","Returns `-0.0`.",12,{"inputs":[],"output":{"name":"self"}}],[10,"min_value","","Returns the smallest finite value that this type can represent.",12,{"inputs":[],"output":{"name":"self"}}],[10,"min_positive_value","","Returns the smallest positive, normalized value that this type can represent.",12,{"inputs":[],"output":{"name":"self"}}],[11,"epsilon","","Returns epsilon, a small positive value.",12,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","Returns the largest finite value that this type can represent.",12,{"inputs":[],"output":{"name":"self"}}],[10,"is_nan","","Returns `true` if this value is `NaN` and false otherwise.",12,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_infinite","","Returns `true` if this value is positive infinity or negative infinity and false otherwise.",12,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_finite","","Returns `true` if this number is neither infinite nor `NaN`.",12,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_normal","","Returns `true` if the number is neither zero, infinite, [subnormal][subnormal], or `NaN`.",12,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"classify","","Returns the floating point category of the number. If only one property is going to be tested, it is generally faster to use the specific predicate instead.",12,{"inputs":[{"name":"self"}],"output":{"name":"fpcategory"}}],[10,"floor","","Returns the largest integer less than or equal to a number.",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"ceil","","Returns the smallest integer greater than or equal to a number.",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"round","","Returns the nearest integer to a number. Round half-way cases away from `0.0`.",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"trunc","","Return the integer part of a number.",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"fract","","Returns the fractional part of a number.",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"abs","","Computes the absolute value of `self`. Returns `Float::nan()` if the number is `Float::nan()`.",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"signum","","Returns a number that represents the sign of `self`.",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0`, `Float::infinity()`, and with newer versions of Rust `f64::NAN`.",12,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0`, `Float::neg_infinity()`, and with newer versions of Rust `-f64::NAN`.",12,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only one rounding error. This produces a more accurate result with better performance than a separate multiplication operation followed by an add.",12,{"inputs":[{"name":"self"},{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"powi","","Raise a number to an integer power.",12,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"self"}}],[10,"powf","","Raise a number to a floating point power.",12,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"sqrt","","Take the square root of a number.",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"exp","","Returns `e^(self)`, (the exponential function).",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"exp2","","Returns `2^(self)`.",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"ln","","Returns the natural logarithm of the number.",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"log","","Returns the logarithm of the number with respect to an arbitrary base.",12,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"log2","","Returns the base 2 logarithm of the number.",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"log10","","Returns the base 10 logarithm of the number.",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"to_degrees","","Converts radians to degrees.",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"to_radians","","Converts degrees to radians.",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"max","","Returns the maximum of the two numbers.",12,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"min","","Returns the minimum of the two numbers.",12,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"abs_sub","","The positive difference of two numbers.",12,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"cbrt","","Take the cubic root of a number.",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle triangle given legs of length `x` and `y`.",12,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"sin","","Computes the sine of a number (in radians).",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"cos","","Computes the cosine of a number (in radians).",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"tan","","Computes the tangent of a number (in radians).",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"asin","","Computes the arcsine of a number. Return value is in radians in the range [-pi/2, pi/2] or NaN if the number is outside the range [-1, 1].",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"acos","","Computes the arccosine of a number. Return value is in radians in the range [0, pi] or NaN if the number is outside the range [-1, 1].",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"atan","","Computes the arctangent of a number. Return value is in radians in the range [-pi/2, pi/2];",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and `other` (`x`).",12,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"sin_cos","","Simultaneously computes the sine and cosine of the number, `x`. Returns `(sin(x), cos(x))`.",12,null],[10,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if the number is close to zero.",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than if the operations were performed separately.",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"sinh","","Hyperbolic sine function.",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"cosh","","Hyperbolic cosine function.",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"tanh","","Hyperbolic tangent function.",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"asinh","","Inverse hyperbolic sine function.",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"acosh","","Inverse hyperbolic cosine function.",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"atanh","","Inverse hyperbolic tangent function.",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as integers, respectively. The original number can be recovered by `sign * mantissa * 2 ^ exponent`. The floating point encoding is documented in the [Reference][floating-point].",12,null],[8,"ToPrimitive","","A generic trait for converting a value to a number.",null,null],[11,"to_isize","","Converts the value of `self` to an `isize`.",13,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_i8","","Converts the value of `self` to an `i8`.",13,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_i16","","Converts the value of `self` to an `i16`.",13,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_i32","","Converts the value of `self` to an `i32`.",13,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"to_i64","","Converts the value of `self` to an `i64`.",13,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_usize","","Converts the value of `self` to a `usize`.",13,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_u8","","Converts the value of `self` to an `u8`.",13,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_u16","","Converts the value of `self` to an `u16`.",13,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_u32","","Converts the value of `self` to an `u32`.",13,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"to_u64","","Converts the value of `self` to an `u64`.",13,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_f32","","Converts the value of `self` to an `f32`.",13,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_f64","","Converts the value of `self` to an `f64`.",13,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[8,"FromPrimitive","","A generic trait for converting a number to a value.",null,null],[11,"from_isize","","Convert an `isize` to return an optional value of this type. If the value cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"isize"}],"output":{"name":"option"}}],[11,"from_i8","","Convert an `i8` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"i8"}],"output":{"name":"option"}}],[11,"from_i16","","Convert an `i16` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"i16"}],"output":{"name":"option"}}],[11,"from_i32","","Convert an `i32` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[10,"from_i64","","Convert an `i64` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_usize","","Convert a `usize` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"usize"}],"output":{"name":"option"}}],[11,"from_u8","","Convert an `u8` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_u16","","Convert an `u16` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"u16"}],"output":{"name":"option"}}],[11,"from_u32","","Convert an `u32` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[10,"from_u64","","Convert an `u64` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","Convert a `f32` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","Convert a `f64` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[8,"NumCast","","An interface for casting between machine scalars.",null,null],[10,"from","","Creates a number from another value that can be converted into a primitive via the `ToPrimitive` trait.",15,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[0,"cast","","",null,null],[8,"ToPrimitive","num::cast","A generic trait for converting a value to a number.",null,null],[11,"to_isize","","Converts the value of `self` to an `isize`.",13,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_i8","","Converts the value of `self` to an `i8`.",13,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_i16","","Converts the value of `self` to an `i16`.",13,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_i32","","Converts the value of `self` to an `i32`.",13,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"to_i64","","Converts the value of `self` to an `i64`.",13,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_usize","","Converts the value of `self` to a `usize`.",13,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_u8","","Converts the value of `self` to an `u8`.",13,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_u16","","Converts the value of `self` to an `u16`.",13,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_u32","","Converts the value of `self` to an `u32`.",13,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"to_u64","","Converts the value of `self` to an `u64`.",13,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_f32","","Converts the value of `self` to an `f32`.",13,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_f64","","Converts the value of `self` to an `f64`.",13,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[8,"FromPrimitive","","A generic trait for converting a number to a value.",null,null],[11,"from_isize","","Convert an `isize` to return an optional value of this type. If the value cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"isize"}],"output":{"name":"option"}}],[11,"from_i8","","Convert an `i8` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"i8"}],"output":{"name":"option"}}],[11,"from_i16","","Convert an `i16` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"i16"}],"output":{"name":"option"}}],[11,"from_i32","","Convert an `i32` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[10,"from_i64","","Convert an `i64` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_usize","","Convert a `usize` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"usize"}],"output":{"name":"option"}}],[11,"from_u8","","Convert an `u8` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_u16","","Convert an `u16` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"u16"}],"output":{"name":"option"}}],[11,"from_u32","","Convert an `u32` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[10,"from_u64","","Convert an `u64` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","Convert a `f32` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","Convert a `f64` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[5,"cast","","Cast from one machine scalar to another.",null,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[8,"NumCast","","An interface for casting between machine scalars.",null,null],[10,"from","","Creates a number from another value that can be converted into a primitive via the `ToPrimitive` trait.",15,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[0,"pow","num","",null,null],[5,"pow","num::pow","Raises a value to the power of exp, using exponentiation by squaring.",null,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"t"}}],[5,"checked_pow","","Raises a value to the power of exp, returning `None` if an overflow occurred.",null,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"option"}}],[5,"checked_pow","num","Raises a value to the power of exp, returning `None` if an overflow occurred.",null,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"option"}}],[5,"clamp","","A value bounded by a minimum and a maximum",null,{"inputs":[{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[0,"integer","","",null,null],[0,"iter","","",null,null],[0,"traits","","",null,null]],"paths":[[8,"Integer"],[8,"Num"],[8,"Zero"],[8,"One"],[8,"Signed"],[8,"Bounded"],[8,"Saturating"],[8,"CheckedAdd"],[8,"CheckedSub"],[8,"CheckedMul"],[8,"CheckedDiv"],[8,"PrimInt"],[8,"Float"],[8,"ToPrimitive"],[8,"FromPrimitive"],[8,"NumCast"]]};
searchIndex["num_cpus"] = {"doc":"num_cpus","items":[[5,"get","num_cpus","Returns the number of available CPUs of the current system.",null,{"inputs":[],"output":{"name":"usize"}}],[5,"get_physical","","Returns the number of physical cores of the current system.",null,{"inputs":[],"output":{"name":"usize"}}]],"paths":[]};
searchIndex["num_integer"] = {"doc":"Integer trait and functions.","items":[[3,"IterBinomial","num_integer","An iterator over binomial coefficients.",null,null],[5,"div_rem","","Simultaneous integer division and modulus",null,null],[5,"div_floor","","Floored integer division",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"mod_floor","","Floored integer modulus",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"div_mod_floor","","Simultaneous floored integer division and modulus",null,null],[5,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`. The result is always positive.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"binomial","","Calculate the binomial coefficient.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"multinomial","","Calculate the multinomial coefficient.",null,null],[8,"Integer","","",null,null],[10,"div_floor","","Floored integer division.",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"mod_floor","","Floored integer modulo, satisfying:",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"gcd","","Greatest Common Divisor (GCD).",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"lcm","","Lowest Common Multiple (LCM).",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"divides","","Deprecated, use `is_multiple_of` instead.",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[10,"is_multiple_of","","Returns `true` if `other` is a multiple of `self`.",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[10,"is_even","","Returns `true` if the number is even.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_odd","","Returns `true` if the number is odd.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"div_rem","","Simultaneous truncated integer division and modulus. Returns `(quotient, remainder)`.",0,null],[11,"div_mod_floor","","Simultaneous floored integer division and modulus. Returns `(quotient, remainder)`.",0,null],[11,"new","","For a given n, iterate over all binomial coefficients binomial(n, k), for k=0...n.",1,{"inputs":[{"name":"t"}],"output":{"name":"iterbinomial"}}],[11,"next","","",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}]],"paths":[[8,"Integer"],[3,"IterBinomial"]]};
searchIndex["num_iter"] = {"doc":"External iterators for generic mathematics","items":[[3,"Range","num_iter","An iterator over the range [start, stop)",null,null],[3,"RangeInclusive","","An iterator over the range [start, stop]",null,null],[3,"RangeStep","","An iterator over the range [start, stop) by `step`. It handles overflow by stopping.",null,null],[3,"RangeStepInclusive","","An iterator over the range [start, stop] by `step`. It handles overflow by stopping.",null,null],[5,"range","","Returns an iterator over the given range [start, stop) (that is, starting at start (inclusive), and ending at stop (exclusive)).",null,{"inputs":[{"name":"a"},{"name":"a"}],"output":{"name":"range"}}],[5,"range_inclusive","","Return an iterator over the range [start, stop]",null,{"inputs":[{"name":"a"},{"name":"a"}],"output":{"name":"rangeinclusive"}}],[5,"range_step","","Return an iterator over the range [start, stop) by `step`. It handles overflow by stopping.",null,{"inputs":[{"name":"a"},{"name":"a"},{"name":"a"}],"output":{"name":"rangestep"}}],[5,"range_step_inclusive","","Return an iterator over the range [start, stop] by `step`. It handles overflow by stopping.",null,{"inputs":[{"name":"a"},{"name":"a"},{"name":"a"}],"output":{"name":"rangestepinclusive"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"range"}}],[11,"next","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",0,null],[11,"next_back","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"rangeinclusive"}}],[11,"next","","",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",1,null],[11,"next_back","","",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"rangestep"}}],[11,"next","","",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"rangestepinclusive"}}],[11,"next","","",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}]],"paths":[[3,"Range"],[3,"RangeInclusive"],[3,"RangeStep"],[3,"RangeStepInclusive"]]};
searchIndex["num_traits"] = {"doc":"Numeric traits for generic mathematics","items":[[3,"ParseFloatError","num_traits","",null,null],[12,"kind","","",0,null],[4,"FloatErrorKind","","",null,null],[13,"Empty","","",1,null],[13,"Invalid","","",1,null],[5,"clamp","","A value bounded by a minimum and a maximum",null,{"inputs":[{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[0,"identities","","",null,null],[5,"zero","num_traits::identities","Returns the additive identity, `0`.",null,{"inputs":[],"output":{"name":"t"}}],[5,"one","","Returns the multiplicative identity, `1`.",null,{"inputs":[],"output":{"name":"t"}}],[8,"Zero","","Defines an additive identity element for `Self`.",null,null],[10,"zero","","Returns the additive identity element of `Self`, `0`.",2,{"inputs":[],"output":{"name":"self"}}],[10,"is_zero","","Returns `true` if `self` is equal to the additive identity.",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[8,"One","","Defines a multiplicative identity element for `Self`.",null,null],[10,"one","","Returns the multiplicative identity element of `Self`, `1`.",3,{"inputs":[],"output":{"name":"self"}}],[0,"sign","num_traits","",null,null],[5,"abs","num_traits::sign","Computes the absolute value.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[5,"abs_sub","","The positive difference of two numbers.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"signum","","Returns the sign of the number.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[8,"Signed","","Useful functions for signed numbers (i.e. numbers that can be negative).",null,null],[10,"abs","","Computes the absolute value.",4,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"abs_sub","","The positive difference of two numbers.",4,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"signum","","Returns the sign of the number.",4,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"is_positive","","Returns true if the number is positive and false if the number is zero or negative.",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_negative","","Returns true if the number is negative and false if the number is zero or positive.",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[8,"Unsigned","","A trait for values which cannot be negative",null,null],[0,"ops","num_traits","",null,null],[0,"saturating","num_traits::ops","",null,null],[8,"Saturating","num_traits::ops::saturating","Saturating math operations",null,null],[10,"saturating_add","","Saturating addition operator. Returns a+b, saturating at the numeric bounds instead of overflowing.",5,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"saturating_sub","","Saturating subtraction operator. Returns a-b, saturating at the numeric bounds instead of overflowing.",5,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[0,"checked","num_traits::ops","",null,null],[8,"CheckedAdd","num_traits::ops::checked","Performs addition that returns `None` instead of wrapping around on overflow.",null,null],[10,"checked_add","","Adds two numbers, checking for overflow. If overflow happens, `None` is returned.",6,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedSub","","Performs subtraction that returns `None` instead of wrapping around on underflow.",null,null],[10,"checked_sub","","Subtracts two numbers, checking for underflow. If underflow happens, `None` is returned.",7,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedMul","","Performs multiplication that returns `None` instead of wrapping around on underflow or overflow.",null,null],[10,"checked_mul","","Multiplies two numbers, checking for underflow or overflow. If underflow or overflow happens, `None` is returned.",8,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedDiv","","Performs division that returns `None` instead of panicking on division by zero and instead of wrapping around on underflow and overflow.",null,null],[10,"checked_div","","Divides two numbers, checking for underflow, overflow and division by zero. If any of that happens, `None` is returned.",9,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[0,"wrapping","num_traits::ops","",null,null],[8,"WrappingAdd","num_traits::ops::wrapping","Performs addition that wraps around on overflow.",null,null],[10,"wrapping_add","","Wrapping (modular) addition. Computes `self + other`, wrapping around at the boundary of the type.",10,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[8,"WrappingSub","","Performs subtraction that wraps around on overflow.",null,null],[10,"wrapping_sub","","Wrapping (modular) subtraction. Computes `self - other`, wrapping around at the boundary of the type.",11,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[8,"WrappingMul","","Performs multiplication that wraps around on overflow.",null,null],[10,"wrapping_mul","","Wrapping (modular) multiplication. Computes `self * other`, wrapping around at the boundary of the type.",12,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[0,"bounds","num_traits","",null,null],[8,"Bounded","num_traits::bounds","Numbers which have upper and lower bounds",null,null],[10,"min_value","","returns the smallest finite number this type can represent",13,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","returns the largest finite number this type can represent",13,{"inputs":[],"output":{"name":"self"}}],[0,"float","num_traits","",null,null],[8,"Float","num_traits::float","",null,null],[10,"nan","","Returns the `NaN` value.",14,{"inputs":[],"output":{"name":"self"}}],[10,"infinity","","Returns the infinite value.",14,{"inputs":[],"output":{"name":"self"}}],[10,"neg_infinity","","Returns the negative infinite value.",14,{"inputs":[],"output":{"name":"self"}}],[10,"neg_zero","","Returns `-0.0`.",14,{"inputs":[],"output":{"name":"self"}}],[10,"min_value","","Returns the smallest finite value that this type can represent.",14,{"inputs":[],"output":{"name":"self"}}],[10,"min_positive_value","","Returns the smallest positive, normalized value that this type can represent.",14,{"inputs":[],"output":{"name":"self"}}],[11,"epsilon","","Returns epsilon, a small positive value.",14,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","Returns the largest finite value that this type can represent.",14,{"inputs":[],"output":{"name":"self"}}],[10,"is_nan","","Returns `true` if this value is `NaN` and false otherwise.",14,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_infinite","","Returns `true` if this value is positive infinity or negative infinity and false otherwise.",14,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_finite","","Returns `true` if this number is neither infinite nor `NaN`.",14,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_normal","","Returns `true` if the number is neither zero, infinite, [subnormal][subnormal], or `NaN`.",14,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"classify","","Returns the floating point category of the number. If only one property is going to be tested, it is generally faster to use the specific predicate instead.",14,{"inputs":[{"name":"self"}],"output":{"name":"fpcategory"}}],[10,"floor","","Returns the largest integer less than or equal to a number.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"ceil","","Returns the smallest integer greater than or equal to a number.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"round","","Returns the nearest integer to a number. Round half-way cases away from `0.0`.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"trunc","","Return the integer part of a number.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"fract","","Returns the fractional part of a number.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"abs","","Computes the absolute value of `self`. Returns `Float::nan()` if the number is `Float::nan()`.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"signum","","Returns a number that represents the sign of `self`.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0`, `Float::infinity()`, and with newer versions of Rust `f64::NAN`.",14,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0`, `Float::neg_infinity()`, and with newer versions of Rust `-f64::NAN`.",14,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only one rounding error. This produces a more accurate result with better performance than a separate multiplication operation followed by an add.",14,{"inputs":[{"name":"self"},{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"powi","","Raise a number to an integer power.",14,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"self"}}],[10,"powf","","Raise a number to a floating point power.",14,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"sqrt","","Take the square root of a number.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"exp","","Returns `e^(self)`, (the exponential function).",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"exp2","","Returns `2^(self)`.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"ln","","Returns the natural logarithm of the number.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"log","","Returns the logarithm of the number with respect to an arbitrary base.",14,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"log2","","Returns the base 2 logarithm of the number.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"log10","","Returns the base 10 logarithm of the number.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"to_degrees","","Converts radians to degrees.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"to_radians","","Converts degrees to radians.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"max","","Returns the maximum of the two numbers.",14,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"min","","Returns the minimum of the two numbers.",14,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"abs_sub","","The positive difference of two numbers.",14,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"cbrt","","Take the cubic root of a number.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle triangle given legs of length `x` and `y`.",14,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"sin","","Computes the sine of a number (in radians).",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"cos","","Computes the cosine of a number (in radians).",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"tan","","Computes the tangent of a number (in radians).",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"asin","","Computes the arcsine of a number. Return value is in radians in the range [-pi/2, pi/2] or NaN if the number is outside the range [-1, 1].",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"acos","","Computes the arccosine of a number. Return value is in radians in the range [0, pi] or NaN if the number is outside the range [-1, 1].",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"atan","","Computes the arctangent of a number. Return value is in radians in the range [-pi/2, pi/2];",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and `other` (`x`).",14,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"sin_cos","","Simultaneously computes the sine and cosine of the number, `x`. Returns `(sin(x), cos(x))`.",14,null],[10,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if the number is close to zero.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than if the operations were performed separately.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"sinh","","Hyperbolic sine function.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"cosh","","Hyperbolic cosine function.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"tanh","","Hyperbolic tangent function.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"asinh","","Inverse hyperbolic sine function.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"acosh","","Inverse hyperbolic cosine function.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"atanh","","Inverse hyperbolic tangent function.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as integers, respectively. The original number can be recovered by `sign * mantissa * 2 ^ exponent`. The floating point encoding is documented in the [Reference][floating-point].",14,null],[8,"FloatConst","","",null,null],[10,"E","","Return Euler’s number.",15,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_1_PI","","Return `1.0 / π`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_1_SQRT_2","","Return `1.0 / sqrt(2.0)`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_2_PI","","Return `2.0 / π`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_2_SQRT_PI","","Return `2.0 / sqrt(π)`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_PI_2","","Return `π / 2.0`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_PI_3","","Return `π / 3.0`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_PI_4","","Return `π / 4.0`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_PI_6","","Return `π / 6.0`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_PI_8","","Return `π / 8.0`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"LN_10","","Return `ln(10.0)`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"LN_2","","Return `ln(2.0)`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"LOG10_E","","Return `log10(e)`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"LOG2_E","","Return `log2(e)`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"PI","","Return Archimedes’ constant.",15,{"inputs":[],"output":{"name":"self"}}],[10,"SQRT_2","","Return `sqrt(2.0)`.",15,{"inputs":[],"output":{"name":"self"}}],[0,"cast","num_traits","",null,null],[5,"cast","num_traits::cast","Cast from one machine scalar to another.",null,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[8,"ToPrimitive","","A generic trait for converting a value to a number.",null,null],[11,"to_isize","","Converts the value of `self` to an `isize`.",16,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_i8","","Converts the value of `self` to an `i8`.",16,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_i16","","Converts the value of `self` to an `i16`.",16,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_i32","","Converts the value of `self` to an `i32`.",16,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"to_i64","","Converts the value of `self` to an `i64`.",16,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_usize","","Converts the value of `self` to a `usize`.",16,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_u8","","Converts the value of `self` to an `u8`.",16,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_u16","","Converts the value of `self` to an `u16`.",16,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_u32","","Converts the value of `self` to an `u32`.",16,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"to_u64","","Converts the value of `self` to an `u64`.",16,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_f32","","Converts the value of `self` to an `f32`.",16,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_f64","","Converts the value of `self` to an `f64`.",16,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[8,"FromPrimitive","","A generic trait for converting a number to a value.",null,null],[11,"from_isize","","Convert an `isize` to return an optional value of this type. If the value cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"isize"}],"output":{"name":"option"}}],[11,"from_i8","","Convert an `i8` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"i8"}],"output":{"name":"option"}}],[11,"from_i16","","Convert an `i16` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"i16"}],"output":{"name":"option"}}],[11,"from_i32","","Convert an `i32` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[10,"from_i64","","Convert an `i64` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_usize","","Convert a `usize` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"usize"}],"output":{"name":"option"}}],[11,"from_u8","","Convert an `u8` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_u16","","Convert an `u16` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"u16"}],"output":{"name":"option"}}],[11,"from_u32","","Convert an `u32` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[10,"from_u64","","Convert an `u64` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","Convert a `f32` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","Convert a `f64` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[8,"NumCast","","An interface for casting between machine scalars.",null,null],[10,"from","","Creates a number from another value that can be converted into a primitive via the `ToPrimitive` trait.",18,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[0,"int","num_traits","",null,null],[8,"PrimInt","num_traits::int","",null,null],[10,"count_ones","","Returns the number of ones in the binary representation of `self`.",19,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",19,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"leading_zeros","","Returns the number of leading zeros in the binary representation of `self`.",19,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"trailing_zeros","","Returns the number of trailing zeros in the binary representation of `self`.",19,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"rotate_left","","Shifts the bits to the left by a specified amount amount, `n`, wrapping the truncated bits to the end of the resulting integer.",19,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"rotate_right","","Shifts the bits to the right by a specified amount amount, `n`, wrapping the truncated bits to the beginning of the resulting integer.",19,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"signed_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling zeros in the least significant bits.",19,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"signed_shr","","Shifts the bits to the right by a specified amount amount, `n`, copying the \"sign bit\" in the most significant bits even for unsigned types.",19,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"unsigned_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling zeros in the least significant bits.",19,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"unsigned_shr","","Shifts the bits to the right by a specified amount amount, `n`, filling zeros in the most significant bits.",19,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"swap_bytes","","Reverses the byte order of the integer.",19,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"from_be","","Convert an integer from big endian to the target's endianness.",19,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"from_le","","Convert an integer from little endian to the target's endianness.",19,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"to_be","","Convert `self` to big endian from the target's endianness.",19,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"to_le","","Convert `self` to little endian from the target's endianness.",19,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",19,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[0,"pow","num_traits","",null,null],[5,"pow","num_traits::pow","Raises a value to the power of exp, using exponentiation by squaring.",null,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"t"}}],[5,"checked_pow","","Raises a value to the power of exp, returning `None` if an overflow occurred.",null,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"option"}}],[8,"Num","num_traits","The base trait for numeric types, covering `0` and `1` values, comparisons, basic numeric operations, and string conversion.",null,null],[16,"FromStrRadixErr","","",20,null],[10,"from_str_radix","","Convert from a string and radix <= 36.",20,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[8,"NumOps","","The trait for types implementing basic numeric operations",null,null],[8,"NumRef","","The trait for `Num` types which also implement numeric operations taking the second operand by reference.",null,null],[8,"RefNum","","The trait for references which implement numeric operations, taking the second operand either by value or by reference.",null,null],[8,"NumAssignOps","","The trait for types implementing numeric assignment operators (like `+=`).",null,null],[8,"NumAssign","","The trait for `Num` types which also implement assignment operators.",null,null],[8,"NumAssignRef","","The trait for `NumAssign` types which also implement assignment operations taking the second operand by reference.",null,null],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"ParseFloatError"],[4,"FloatErrorKind"],[8,"Zero"],[8,"One"],[8,"Signed"],[8,"Saturating"],[8,"CheckedAdd"],[8,"CheckedSub"],[8,"CheckedMul"],[8,"CheckedDiv"],[8,"WrappingAdd"],[8,"WrappingSub"],[8,"WrappingMul"],[8,"Bounded"],[8,"Float"],[8,"FloatConst"],[8,"ToPrimitive"],[8,"FromPrimitive"],[8,"NumCast"],[8,"PrimInt"],[8,"Num"]]};
searchIndex["openssl"] = {"doc":"","items":[[5,"init","openssl","",null,null],[0,"aes","","Low level AES functionality",null,null],[3,"KeyError","openssl::aes","",null,null],[3,"AesKey","","",null,null],[5,"aes_ige","","Performs AES IGE encryption or decryption",null,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new_encrypt","","Prepares a key for encryption.",1,null],[11,"new_decrypt","","Prepares a key for decryption.",1,null],[0,"asn1","openssl","",null,null],[3,"Asn1GeneralizedTime","openssl::asn1","",null,null],[3,"Asn1GeneralizedTimeRef","","",null,null],[3,"Asn1Time","","",null,null],[3,"Asn1TimeRef","","",null,null],[3,"Asn1String","","",null,null],[3,"Asn1StringRef","","",null,null],[3,"Asn1Integer","","",null,null],[3,"Asn1IntegerRef","","",null,null],[3,"Asn1BitString","","",null,null],[3,"Asn1BitStringRef","","",null,null],[3,"Asn1Object","","",null,null],[3,"Asn1ObjectRef","","",null,null],[11,"from_ptr","","",2,null],[11,"as_ptr","","",2,null],[11,"drop","","",2,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",2,{"inputs":[{"name":"self"}],"output":{"name":"asn1generalizedtimeref"}}],[11,"deref_mut","","",2,{"inputs":[{"name":"self"}],"output":{"name":"asn1generalizedtimeref"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_ptr","","",4,null],[11,"as_ptr","","",4,null],[11,"drop","","",4,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",4,{"inputs":[{"name":"self"}],"output":{"name":"asn1timeref"}}],[11,"deref_mut","","",4,{"inputs":[{"name":"self"}],"output":{"name":"asn1timeref"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"days_from_now","","Creates a new time on specified interval in days from now",4,{"inputs":[{"name":"u32"}],"output":{"name":"result"}}],[11,"from_ptr","","",6,null],[11,"as_ptr","","",6,null],[11,"drop","","",6,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",6,{"inputs":[{"name":"self"}],"output":{"name":"asn1stringref"}}],[11,"deref_mut","","",6,{"inputs":[{"name":"self"}],"output":{"name":"asn1stringref"}}],[11,"as_utf8","","",7,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"as_slice","","",7,null],[11,"len","","",7,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"from_ptr","","",8,null],[11,"as_ptr","","",8,null],[11,"drop","","",8,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",8,{"inputs":[{"name":"self"}],"output":{"name":"asn1integerref"}}],[11,"deref_mut","","",8,{"inputs":[{"name":"self"}],"output":{"name":"asn1integerref"}}],[11,"get","","",9,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"set","","",9,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"result"}}],[11,"from_ptr","","",10,null],[11,"as_ptr","","",10,null],[11,"drop","","",10,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",10,{"inputs":[{"name":"self"}],"output":{"name":"asn1bitstringref"}}],[11,"deref_mut","","",10,{"inputs":[{"name":"self"}],"output":{"name":"asn1bitstringref"}}],[11,"as_slice","","",11,null],[11,"len","","",11,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"from_ptr","","",12,null],[11,"as_ptr","","",12,null],[11,"drop","","",12,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",12,{"inputs":[{"name":"self"}],"output":{"name":"asn1objectref"}}],[11,"deref_mut","","",12,{"inputs":[{"name":"self"}],"output":{"name":"asn1objectref"}}],[11,"nid","","Returns the NID associated with this OID.",13,{"inputs":[{"name":"self"}],"output":{"name":"nid"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"bn","openssl","",null,null],[3,"MsbOption","openssl::bn","Options for the most significant bits of a randomly generated `BigNum`.",null,null],[3,"BigNumContext","","",null,null],[3,"BigNumContextRef","","",null,null],[3,"BigNum","","",null,null],[3,"BigNumRef","","",null,null],[17,"MSB_MAYBE_ZERO","","The most significant bit of the number may be 0.",null,null],[17,"MSB_ONE","","The most significant bit of the number must be 1.",null,null],[17,"TWO_MSB_ONE","","The most significant two bits of the number must be 1.",null,null],[11,"from_ptr","","",14,null],[11,"as_ptr","","",14,null],[11,"drop","","",14,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",14,{"inputs":[{"name":"self"}],"output":{"name":"bignumcontextref"}}],[11,"deref_mut","","",14,{"inputs":[{"name":"self"}],"output":{"name":"bignumcontextref"}}],[11,"new","","Returns a new `BigNumContext`.",14,{"inputs":[],"output":{"name":"result"}}],[11,"clear","","Erases the memory used by this `BigNum`, resetting its value to 0.",15,{"inputs":[{"name":"self"}],"output":null}],[11,"add_word","","Adds a `u32` to `self`.",15,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"sub_word","","Subtracts a `u32` from `self`.",15,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"mul_word","","Multiplies a `u32` by `self`.",15,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"div_word","","Divides `self` by a `u32`, returning the remainder.",15,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"mod_word","","Returns the result of `self` modulo `w`.",15,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"rand_range","","Places a cryptographically-secure pseudo-random number nonnegative number less than `self` in `rnd`.",15,{"inputs":[{"name":"self"},{"name":"bignumref"}],"output":{"name":"result"}}],[11,"pseudo_rand_range","","The cryptographically weak counterpart to `rand_in_range`.",15,{"inputs":[{"name":"self"},{"name":"bignumref"}],"output":{"name":"result"}}],[11,"set_bit","","Sets bit `n`. Equivalent to `self |= (1 << n)`.",15,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"result"}}],[11,"clear_bit","","Clears bit `n`, setting it to 0. Equivalent to `self &= ~(1 << n)`.",15,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"result"}}],[11,"is_bit_set","","Returns `true` if the `n`th bit of `self` is set to 1, `false` otherwise.",15,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"bool"}}],[11,"mask_bits","","Truncates `self` to the lowest `n` bits.",15,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"result"}}],[11,"lshift1","","Places `a << 1` in `self`.",15,{"inputs":[{"name":"self"},{"name":"bignumref"}],"output":{"name":"result"}}],[11,"rshift1","","Places `a >> 1` in `self`.",15,{"inputs":[{"name":"self"},{"name":"bignumref"}],"output":{"name":"result"}}],[11,"checked_add","","Places `a + b` in `self`.",15,{"inputs":[{"name":"self"},{"name":"bignumref"},{"name":"bignumref"}],"output":{"name":"result"}}],[11,"checked_sub","","Places `a - b` in `self`.",15,{"inputs":[{"name":"self"},{"name":"bignumref"},{"name":"bignumref"}],"output":{"name":"result"}}],[11,"lshift","","Places `a << n` in `self`.",15,{"inputs":[{"name":"self"},{"name":"bignumref"},{"name":"i32"}],"output":{"name":"result"}}],[11,"rshift","","Places `a >> n` in `self`.",15,{"inputs":[{"name":"self"},{"name":"bignumref"},{"name":"i32"}],"output":{"name":"result"}}],[11,"to_owned","","",15,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"set_negative","","Sets the sign of `self`.",15,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"ucmp","","Compare the absolute values of `self` and `oth`.",15,{"inputs":[{"name":"self"},{"name":"bignumref"}],"output":{"name":"ordering"}}],[11,"is_negative","","",15,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"num_bits","","Returns the number of significant bits in `self`.",15,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"num_bytes","","Returns the size of `self` in bytes.",15,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"rand","","Generates a cryptographically strong pseudo-random `BigNum`, placing it in `self`.",15,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"msboption"},{"name":"bool"}],"output":{"name":"result"}}],[11,"pseudo_rand","","The cryptographically weak counterpart to `rand`.",15,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"msboption"},{"name":"bool"}],"output":{"name":"result"}}],[11,"generate_prime","","Generates a prime number, placing it in `self`.",15,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"bool"},{"name":"option"},{"name":"option"}],"output":{"name":"result"}}],[11,"checked_mul","","Places the result of `a * b` in `self`.",15,{"inputs":[{"name":"self"},{"name":"bignumref"},{"name":"bignumref"},{"name":"bignumcontextref"}],"output":{"name":"result"}}],[11,"checked_div","","Places the result of `a / b` in `self`.",15,{"inputs":[{"name":"self"},{"name":"bignumref"},{"name":"bignumref"},{"name":"bignumcontextref"}],"output":{"name":"result"}}],[11,"checked_rem","","Places the result of `a % b` in `self`.",15,{"inputs":[{"name":"self"},{"name":"bignumref"},{"name":"bignumref"},{"name":"bignumcontextref"}],"output":{"name":"result"}}],[11,"div_rem","","Places the result of `a / b` in `self` and `a % b` in `rem`.",15,{"inputs":[{"name":"self"},{"name":"bignumref"},{"name":"bignumref"},{"name":"bignumref"},{"name":"bignumcontextref"}],"output":{"name":"result"}}],[11,"sqr","","Places the result of `a²` in `self`.",15,{"inputs":[{"name":"self"},{"name":"bignumref"},{"name":"bignumcontextref"}],"output":{"name":"result"}}],[11,"nnmod","","Places the result of `a mod m` in `self`.",15,{"inputs":[{"name":"self"},{"name":"bignumref"},{"name":"bignumref"},{"name":"bignumcontextref"}],"output":{"name":"result"}}],[11,"mod_add","","Places the result of `(a + b) mod m` in `self`.",15,{"inputs":[{"name":"self"},{"name":"bignumref"},{"name":"bignumref"},{"name":"bignumref"},{"name":"bignumcontextref"}],"output":{"name":"result"}}],[11,"mod_sub","","Places the result of `(a - b) mod m` in `self`.",15,{"inputs":[{"name":"self"},{"name":"bignumref"},{"name":"bignumref"},{"name":"bignumref"},{"name":"bignumcontextref"}],"output":{"name":"result"}}],[11,"mod_mul","","Places the result of `(a * b) mod m` in `self`.",15,{"inputs":[{"name":"self"},{"name":"bignumref"},{"name":"bignumref"},{"name":"bignumref"},{"name":"bignumcontextref"}],"output":{"name":"result"}}],[11,"mod_sqr","","Places the result of `a² mod m` in `self`.",15,{"inputs":[{"name":"self"},{"name":"bignumref"},{"name":"bignumref"},{"name":"bignumcontextref"}],"output":{"name":"result"}}],[11,"exp","","Places the result of `a^p` in `self`.",15,{"inputs":[{"name":"self"},{"name":"bignumref"},{"name":"bignumref"},{"name":"bignumcontextref"}],"output":{"name":"result"}}],[11,"mod_exp","","Places the result of `a^p mod m` in `self`.",15,{"inputs":[{"name":"self"},{"name":"bignumref"},{"name":"bignumref"},{"name":"bignumref"},{"name":"bignumcontextref"}],"output":{"name":"result"}}],[11,"mod_inverse","","Places the inverse of `a` modulo `n` in `self`.",15,{"inputs":[{"name":"self"},{"name":"bignumref"},{"name":"bignumref"},{"name":"bignumcontextref"}],"output":{"name":"result"}}],[11,"gcd","","Places the greatest common denominator of `a` and `b` in `self`.",15,{"inputs":[{"name":"self"},{"name":"bignumref"},{"name":"bignumref"},{"name":"bignumcontextref"}],"output":{"name":"result"}}],[11,"is_prime","","Checks whether `self` is prime.",15,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"bignumcontextref"}],"output":{"name":"result"}}],[11,"is_prime_fasttest","","Checks whether `self` is prime with optional trial division.",15,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"bignumcontextref"},{"name":"bool"}],"output":{"name":"result"}}],[11,"to_vec","","Returns a big-endian byte vector representation of the absolute value of `self`.",15,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"to_dec_str","","Returns a decimal string representation of `self`.",15,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"to_hex_str","","Returns a hexadecimal string representation of `self`.",15,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"to_asn1_integer","","Returns an `Asn1Integer` containing the value of `self`.",15,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"from_ptr","","",16,null],[11,"as_ptr","","",16,null],[11,"drop","","",16,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",16,{"inputs":[{"name":"self"}],"output":{"name":"bignumref"}}],[11,"deref_mut","","",16,{"inputs":[{"name":"self"}],"output":{"name":"bignumref"}}],[11,"new","","Creates a new `BigNum` with the value 0.",16,{"inputs":[],"output":{"name":"result"}}],[11,"from_u32","","Creates a new `BigNum` with the given value.",16,{"inputs":[{"name":"u32"}],"output":{"name":"result"}}],[11,"from_dec_str","","Creates a `BigNum` from a decimal string.",16,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_hex_str","","Creates a `BigNum` from a hexadecimal string.",16,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"get_rfc2409_prime_768","","",16,{"inputs":[],"output":{"name":"result"}}],[11,"get_rfc2409_prime_1024","","",16,{"inputs":[],"output":{"name":"result"}}],[11,"get_rfc3526_prime_1536","","",16,{"inputs":[],"output":{"name":"result"}}],[11,"get_rfc3526_prime_2048","","",16,{"inputs":[],"output":{"name":"result"}}],[11,"get_rfc3526_prime_3072","","",16,{"inputs":[],"output":{"name":"result"}}],[11,"get_rfc3526_prime_4096","","",16,{"inputs":[],"output":{"name":"result"}}],[11,"get_rfc3526_prime_6144","","",16,{"inputs":[],"output":{"name":"result"}}],[11,"get_rfc3526_prime_8192","","",16,{"inputs":[],"output":{"name":"result"}}],[11,"from_slice","","Creates a new `BigNum` from an unsigned, big-endian encoded number of arbitrary length.",16,null],[11,"as_ref","","",16,{"inputs":[{"name":"self"}],"output":{"name":"bignumref"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",15,{"inputs":[{"name":"self"},{"name":"bignumref"}],"output":{"name":"bool"}}],[11,"eq","","",15,{"inputs":[{"name":"self"},{"name":"bignum"}],"output":{"name":"bool"}}],[11,"eq","","",16,{"inputs":[{"name":"self"},{"name":"bignum"}],"output":{"name":"bool"}}],[11,"eq","","",16,{"inputs":[{"name":"self"},{"name":"bignumref"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",15,{"inputs":[{"name":"self"},{"name":"bignumref"}],"output":{"name":"option"}}],[11,"partial_cmp","","",15,{"inputs":[{"name":"self"},{"name":"bignum"}],"output":{"name":"option"}}],[11,"cmp","","",15,{"inputs":[{"name":"self"},{"name":"bignumref"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",16,{"inputs":[{"name":"self"},{"name":"bignum"}],"output":{"name":"option"}}],[11,"partial_cmp","","",16,{"inputs":[{"name":"self"},{"name":"bignumref"}],"output":{"name":"option"}}],[11,"cmp","","",16,{"inputs":[{"name":"self"},{"name":"bignum"}],"output":{"name":"ordering"}}],[11,"neg","","",16,{"inputs":[{"name":"self"}],"output":{"name":"bignum"}}],[0,"cms","openssl","CMS archive",null,null],[3,"CmsContentInfo","openssl::cms","",null,null],[3,"CmsContentInfoRef","","",null,null],[11,"from_ptr","","",17,null],[11,"as_ptr","","",17,null],[11,"drop","","",17,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",17,{"inputs":[{"name":"self"}],"output":{"name":"cmscontentinforef"}}],[11,"deref_mut","","",17,{"inputs":[{"name":"self"}],"output":{"name":"cmscontentinforef"}}],[11,"decrypt","","",18,{"inputs":[{"name":"self"},{"name":"pkeyref"},{"name":"x509"}],"output":{"name":"result"}}],[11,"smime_read_cms","","",17,null],[0,"conf","openssl","",null,null],[3,"ConfMethod","openssl::conf","",null,null],[3,"Conf","","",null,null],[3,"ConfRef","","",null,null],[11,"default","","",19,{"inputs":[],"output":{"name":"confmethod"}}],[11,"from_ptr","","",19,null],[11,"as_ptr","","",19,null],[11,"from_ptr","","",20,null],[11,"as_ptr","","",20,null],[11,"drop","","",20,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",20,{"inputs":[{"name":"self"}],"output":{"name":"confref"}}],[11,"deref_mut","","",20,{"inputs":[{"name":"self"}],"output":{"name":"confref"}}],[11,"new","","",20,{"inputs":[{"name":"confmethod"}],"output":{"name":"result"}}],[0,"crypto","openssl","",null,null],[6,"CryptoString","openssl::crypto","",null,null],[0,"dh","openssl","",null,null],[3,"Dh","openssl::dh","",null,null],[3,"DhRef","","",null,null],[11,"from_ptr","","",21,null],[11,"as_ptr","","",21,null],[11,"drop","","",21,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",21,{"inputs":[{"name":"self"}],"output":{"name":"dhref"}}],[11,"deref_mut","","",21,{"inputs":[{"name":"self"}],"output":{"name":"dhref"}}],[11,"to_pem","","Serializes this value to PEM.",22,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"to_der","","Serializes this value to DER.",22,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"from_params","","",21,{"inputs":[{"name":"bignum"},{"name":"bignum"},{"name":"bignum"}],"output":{"name":"result"}}],[11,"from_pem","","Deserializes a value from PEM-formatted data.",21,null],[11,"from_der","","Deserializes a value from DER-formatted data.",21,null],[0,"dsa","openssl","",null,null],[3,"Dsa","openssl::dsa","",null,null],[3,"DsaRef","","",null,null],[11,"from_ptr","","",23,null],[11,"as_ptr","","",23,null],[11,"drop","","",23,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",23,{"inputs":[{"name":"self"}],"output":{"name":"dsaref"}}],[11,"deref_mut","","",23,{"inputs":[{"name":"self"}],"output":{"name":"dsaref"}}],[11,"private_key_to_pem","","Serializes the private key to PEM.",24,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"private_key_to_pem_passphrase","","Serializes the private key to PEM, encrypting it with the specified symmetric cipher and passphrase.",24,null],[11,"public_key_to_pem","","Serializes a public key to PEM.",24,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"private_key_to_der","","Serializes the private key to DER.",24,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"public_key_to_der","","Serializes the public key to DER.",24,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"size","","",24,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"p","","",24,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"q","","",24,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"g","","",24,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"has_public_key","","",24,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"has_private_key","","",24,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"generate","","Generate a DSA key pair.",23,{"inputs":[{"name":"u32"}],"output":{"name":"result"}}],[11,"private_key_from_pem","","Deserializes a PEM-formatted private key.",23,null],[11,"private_key_from_pem_passphrase","","Deserializes a PEM-formatted private key, using the supplied password if the key is encrypted.",23,null],[11,"private_key_from_pem_callback","","Deserializes a PEM-formatted private key, using a callback to retrieve a password if the key is encrypted.",23,null],[11,"private_key_from_der","","Deserializes a private key from DER-formatted data.",23,null],[11,"public_key_from_pem","","Deserializes a public key from PEM-formatted data.",23,null],[11,"public_key_from_der","","Deserializes a public key from DER-formatted data.",23,null],[11,"private_key_from_pem_cb","","",23,null],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"ec","openssl","",null,null],[3,"PointConversionForm","openssl::ec","",null,null],[3,"Asn1Flag","","",null,null],[3,"EcGroup","","",null,null],[3,"EcGroupRef","","",null,null],[3,"EcPoint","","",null,null],[3,"EcPointRef","","",null,null],[3,"EcKey","","",null,null],[3,"EcKeyRef","","",null,null],[3,"EcKeyBuilder","","",null,null],[3,"EcKeyBuilderRef","","",null,null],[17,"POINT_CONVERSION_COMPRESSED","","",null,null],[17,"POINT_CONVERSION_UNCOMPRESSED","","",null,null],[17,"POINT_CONVERSION_HYBRID","","",null,null],[17,"EXPLICIT_CURVE","","",null,null],[17,"NAMED_CURVE","","",null,null],[11,"clone","","",25,{"inputs":[{"name":"self"}],"output":{"name":"pointconversionform"}}],[11,"clone","","",26,{"inputs":[{"name":"self"}],"output":{"name":"asn1flag"}}],[11,"from_ptr","","",27,null],[11,"as_ptr","","",27,null],[11,"drop","","",27,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",27,{"inputs":[{"name":"self"}],"output":{"name":"ecgroupref"}}],[11,"deref_mut","","",27,{"inputs":[{"name":"self"}],"output":{"name":"ecgroupref"}}],[11,"from_curve_name","","Returns the group of a standard named curve.",27,{"inputs":[{"name":"nid"}],"output":{"name":"result"}}],[11,"components_gfp","","Places the components of a curve over a prime field in the provided `BigNum`s.",28,{"inputs":[{"name":"self"},{"name":"bignumref"},{"name":"bignumref"},{"name":"bignumref"},{"name":"bignumcontextref"}],"output":{"name":"result"}}],[11,"components_gf2m","","Places the components of a curve over a binary field in the provided `BigNum`s.",28,{"inputs":[{"name":"self"},{"name":"bignumref"},{"name":"bignumref"},{"name":"bignumref"},{"name":"bignumcontextref"}],"output":{"name":"result"}}],[11,"degree","","Returns the degree of the curve.",28,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"order","","Places the order of the curve in the provided `BigNum`.",28,{"inputs":[{"name":"self"},{"name":"bignumref"},{"name":"bignumcontextref"}],"output":{"name":"result"}}],[11,"set_asn1_flag","","Sets the flag determining if the group corresponds to a named curve or must be explicitly parameterized.",28,{"inputs":[{"name":"self"},{"name":"asn1flag"}],"output":null}],[11,"from_ptr","","",29,null],[11,"as_ptr","","",29,null],[11,"drop","","",29,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",29,{"inputs":[{"name":"self"}],"output":{"name":"ecpointref"}}],[11,"deref_mut","","",29,{"inputs":[{"name":"self"}],"output":{"name":"ecpointref"}}],[11,"add","","Computes `a + b`, storing the result in `self`.",30,{"inputs":[{"name":"self"},{"name":"ecgroupref"},{"name":"ecpointref"},{"name":"ecpointref"},{"name":"bignumcontextref"}],"output":{"name":"result"}}],[11,"mul","","Computes `q * m`, storing the result in `self`.",30,{"inputs":[{"name":"self"},{"name":"ecgroupref"},{"name":"ecpointref"},{"name":"bignumref"},{"name":"bignumcontextref"}],"output":{"name":"result"}}],[11,"mul_generator","","Computes `generator * n`, storing the result ing `self`.",30,{"inputs":[{"name":"self"},{"name":"ecgroupref"},{"name":"bignumref"},{"name":"bignumcontextref"}],"output":{"name":"result"}}],[11,"mul_full","","Computes `generator * n + q * m`, storing the result in `self`.",30,{"inputs":[{"name":"self"},{"name":"ecgroupref"},{"name":"bignumref"},{"name":"ecpointref"},{"name":"bignumref"},{"name":"bignumcontextref"}],"output":{"name":"result"}}],[11,"invert","","Inverts `self`.",30,{"inputs":[{"name":"self"},{"name":"ecgroupref"},{"name":"bignumcontextref"}],"output":{"name":"result"}}],[11,"to_bytes","","Serializes the point to a binary representation.",30,{"inputs":[{"name":"self"},{"name":"ecgroupref"},{"name":"pointconversionform"},{"name":"bignumcontextref"}],"output":{"name":"result"}}],[11,"eq","","Determines if this point is equal to another.",30,{"inputs":[{"name":"self"},{"name":"ecgroupref"},{"name":"ecpointref"},{"name":"bignumcontextref"}],"output":{"name":"result"}}],[11,"affine_coordinates_gfp","","Place affine coordinates of a curve over a prime field in the provided x and y BigNum's",30,{"inputs":[{"name":"self"},{"name":"ecgroupref"},{"name":"bignumref"},{"name":"bignumref"},{"name":"bignumcontextref"}],"output":{"name":"result"}}],[11,"affine_coordinates_gf2m","","Place affine coordinates of a curve over a binary field in the provided x and y BigNum's",30,{"inputs":[{"name":"self"},{"name":"ecgroupref"},{"name":"bignumref"},{"name":"bignumref"},{"name":"bignumcontextref"}],"output":{"name":"result"}}],[11,"new","","Creates a new point on the specified curve.",29,{"inputs":[{"name":"ecgroupref"}],"output":{"name":"result"}}],[11,"from_bytes","","",29,null],[11,"from_ptr","","",31,null],[11,"as_ptr","","",31,null],[11,"drop","","",31,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",31,{"inputs":[{"name":"self"}],"output":{"name":"eckeyref"}}],[11,"deref_mut","","",31,{"inputs":[{"name":"self"}],"output":{"name":"eckeyref"}}],[11,"private_key_to_pem","","Serializes the private key to PEM.",32,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"private_key_to_pem_passphrase","","Serializes the private key to PEM, encrypting it with the specified symmetric cipher and passphrase.",32,null],[11,"private_key_to_der","","Serializes the private key to DER.",32,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"group","","",32,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"public_key","","",32,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"private_key","","",32,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"check_key","","Checks the key for validity.",32,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"to_owned","","",32,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"from_curve_name","","Constructs an `EcKey` corresponding to a known curve.",31,{"inputs":[{"name":"nid"}],"output":{"name":"result"}}],[11,"from_public_key","","Constructs an `EcKey` from the specified group with the associated `EcPoint`, public_key.",31,{"inputs":[{"name":"ecgroupref"},{"name":"ecpointref"}],"output":{"name":"result"}}],[11,"generate","","Generates a new public/private key pair on the specified curve.",31,{"inputs":[{"name":"ecgroupref"}],"output":{"name":"result"}}],[11,"new_by_curve_name","","",31,{"inputs":[{"name":"nid"}],"output":{"name":"result"}}],[11,"private_key_from_pem","","Deserializes a PEM-formatted private key.",31,null],[11,"private_key_from_pem_passphrase","","Deserializes a PEM-formatted private key, using the supplied password if the key is encrypted.",31,null],[11,"private_key_from_pem_callback","","Deserializes a PEM-formatted private key, using a callback to retrieve a password if the key is encrypted.",31,null],[11,"private_key_from_der","","Deserializes a private key from DER-formatted data.",31,null],[11,"from_ptr","","",33,null],[11,"as_ptr","","",33,null],[11,"drop","","",33,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",33,{"inputs":[{"name":"self"}],"output":{"name":"eckeybuilderref"}}],[11,"deref_mut","","",33,{"inputs":[{"name":"self"}],"output":{"name":"eckeybuilderref"}}],[11,"new","","",33,{"inputs":[],"output":{"name":"result"}}],[11,"build","","",33,{"inputs":[{"name":"self"}],"output":{"name":"eckey"}}],[11,"set_group","","",34,{"inputs":[{"name":"self"},{"name":"ecgroupref"}],"output":{"name":"result"}}],[11,"set_public_key","","",34,{"inputs":[{"name":"self"},{"name":"ecpointref"}],"output":{"name":"result"}}],[11,"generate_key","","",34,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"set_public_key_affine_coordinates","","Sets the public key based on affine coordinates.",34,{"inputs":[{"name":"self"},{"name":"bignumref"},{"name":"bignumref"}],"output":{"name":"result"}}],[11,"set_private_key","","Sets the private key.",34,{"inputs":[{"name":"self"},{"name":"bignumref"}],"output":{"name":"result"}}],[0,"ec_key","openssl","",null,null],[0,"error","","",null,null],[3,"ErrorStack","openssl::error","",null,null],[3,"Error","","An error reported from OpenSSL.",null,null],[11,"fmt","","",35,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",35,{"inputs":[{"name":"self"}],"output":{"name":"errorstack"}}],[11,"get","","Returns the contents of the OpenSSL error stack.",35,{"inputs":[],"output":{"name":"errorstack"}}],[11,"errors","","Returns the errors in the stack.",35,null],[11,"fmt","","",35,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",35,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clone","","",36,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"get","","Returns the first error on the OpenSSL error stack.",36,{"inputs":[],"output":{"name":"option"}}],[11,"code","","Returns the raw OpenSSL error code for this error.",36,{"inputs":[{"name":"self"}],"output":{"name":"c_ulong"}}],[11,"library","","Returns the name of the library reporting the error, if available.",36,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"function","","Returns the name of the function reporting the error.",36,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"reason","","Returns the reason for the error.",36,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"file","","Returns the name of the source file which encountered the error.",36,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"line","","Returns the line in the source file which encountered the error.",36,{"inputs":[{"name":"self"}],"output":{"name":"c_int"}}],[11,"data","","Returns additional data describing the error.",36,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",36,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",36,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",36,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[0,"ex_data","openssl","",null,null],[3,"Index","openssl::ex_data","A slot in a type's \"extra data\" structure.",null,null],[11,"clone","","",37,{"inputs":[{"name":"self"}],"output":{"name":"index"}}],[11,"from_raw","","",37,{"inputs":[{"name":"c_int"}],"output":{"name":"index"}}],[11,"as_raw","","",37,{"inputs":[{"name":"self"}],"output":{"name":"c_int"}}],[0,"hash","openssl","",null,null],[3,"MessageDigest","openssl::hash","",null,null],[3,"Hasher","","Provides message digest (hash) computation.",null,null],[3,"DigestBytes","","The resulting bytes of a digest.",null,null],[5,"hash","","",null,null],[5,"hash2","","Computes the hash of the `data` with the hash `t`.",null,null],[11,"clone","","",38,{"inputs":[{"name":"self"}],"output":{"name":"messagedigest"}}],[11,"md5","","",38,{"inputs":[],"output":{"name":"messagedigest"}}],[11,"sha1","","",38,{"inputs":[],"output":{"name":"messagedigest"}}],[11,"sha224","","",38,{"inputs":[],"output":{"name":"messagedigest"}}],[11,"sha256","","",38,{"inputs":[],"output":{"name":"messagedigest"}}],[11,"sha384","","",38,{"inputs":[],"output":{"name":"messagedigest"}}],[11,"sha512","","",38,{"inputs":[],"output":{"name":"messagedigest"}}],[11,"ripemd160","","",38,{"inputs":[],"output":{"name":"messagedigest"}}],[11,"as_ptr","","",38,null],[11,"new","","Creates a new `Hasher` with the specified hash type.",39,{"inputs":[{"name":"messagedigest"}],"output":{"name":"result"}}],[11,"update","","Feeds data into the hasher.",39,null],[11,"finish","","",39,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"finish2","","Returns the hash of the data written and resets the hasher.",39,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"write","","",39,null],[11,"flush","","",39,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"clone","","",39,{"inputs":[{"name":"self"}],"output":{"name":"hasher"}}],[11,"drop","","",39,{"inputs":[{"name":"self"}],"output":null}],[11,"clone","","",40,{"inputs":[{"name":"self"}],"output":{"name":"digestbytes"}}],[11,"deref","","",40,null],[11,"deref_mut","","",40,null],[11,"as_ref","","",40,null],[11,"fmt","","",40,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"memcmp","openssl","",null,null],[5,"eq","openssl::memcmp","Returns `true` iff `a` and `b` contain the same bytes.",null,null],[0,"nid","openssl","",null,null],[3,"Nid","openssl::nid","",null,null],[17,"UNDEF","","",null,null],[17,"ITU_T","","",null,null],[17,"CCITT","","",null,null],[17,"ISO","","",null,null],[17,"JOINT_ISO_ITU_T","","",null,null],[17,"JOINT_ISO_CCITT","","",null,null],[17,"MEMBER_BODY","","",null,null],[17,"IDENTIFIED_ORGANIZATION","","",null,null],[17,"HMAC_MD5","","",null,null],[17,"HMAC_SHA1","","",null,null],[17,"CERTICOM_ARC","","",null,null],[17,"INTERNATIONAL_ORGANIZATIONS","","",null,null],[17,"WAP","","",null,null],[17,"WAP_WSG","","",null,null],[17,"SELECTED_ATTRIBUTE_TYPES","","",null,null],[17,"CLEARANCE","","",null,null],[17,"ISO_US","","",null,null],[17,"X9_57","","",null,null],[17,"X9CM","","",null,null],[17,"DSA","","",null,null],[17,"DSAWITHSHA1","","",null,null],[17,"ANSI_X9_62","","",null,null],[17,"X9_62_PRIME_FIELD","","",null,null],[17,"X9_62_CHARACTERISTIC_TWO_FIELD","","",null,null],[17,"X9_62_ID_CHARACTERISTIC_TWO_BASIS","","",null,null],[17,"X9_62_ONBASIS","","",null,null],[17,"X9_62_TPBASIS","","",null,null],[17,"X9_62_PPBASIS","","",null,null],[17,"X9_62_ID_ECPUBLICKEY","","",null,null],[17,"X9_62_C2PNB163V1","","",null,null],[17,"X9_62_C2PNB163V2","","",null,null],[17,"X9_62_C2PNB163V3","","",null,null],[17,"X9_62_C2PNB176V1","","",null,null],[17,"X9_62_C2TNB191V1","","",null,null],[17,"X9_62_C2TNB191V2","","",null,null],[17,"X9_62_C2TNB191V3","","",null,null],[17,"X9_62_C2ONB191V4","","",null,null],[17,"X9_62_C2ONB191V5","","",null,null],[17,"X9_62_C2PNB208W1","","",null,null],[17,"X9_62_C2TNB239V1","","",null,null],[17,"X9_62_C2TNB239V2","","",null,null],[17,"X9_62_C2TNB239V3","","",null,null],[17,"X9_62_C2ONB239V4","","",null,null],[17,"X9_62_C2ONB239V5","","",null,null],[17,"X9_62_C2PNB272W1","","",null,null],[17,"X9_62_C2PNB304W1","","",null,null],[17,"X9_62_C2TNB359V1","","",null,null],[17,"X9_62_C2PNB368W1","","",null,null],[17,"X9_62_C2TNB431R1","","",null,null],[17,"X9_62_PRIME192V1","","",null,null],[17,"X9_62_PRIME192V2","","",null,null],[17,"X9_62_PRIME192V3","","",null,null],[17,"X9_62_PRIME239V1","","",null,null],[17,"X9_62_PRIME239V2","","",null,null],[17,"X9_62_PRIME239V3","","",null,null],[17,"X9_62_PRIME256V1","","",null,null],[17,"ECDSA_WITH_SHA1","","",null,null],[17,"ECDSA_WITH_RECOMMENDED","","",null,null],[17,"ECDSA_WITH_SPECIFIED","","",null,null],[17,"ECDSA_WITH_SHA224","","",null,null],[17,"ECDSA_WITH_SHA256","","",null,null],[17,"ECDSA_WITH_SHA384","","",null,null],[17,"ECDSA_WITH_SHA512","","",null,null],[17,"SECP112R1","","",null,null],[17,"SECP112R2","","",null,null],[17,"SECP128R1","","",null,null],[17,"SECP128R2","","",null,null],[17,"SECP160K1","","",null,null],[17,"SECP160R1","","",null,null],[17,"SECP160R2","","",null,null],[17,"SECP192K1","","",null,null],[17,"SECP224K1","","",null,null],[17,"SECP224R1","","",null,null],[17,"SECP256K1","","",null,null],[17,"SECP384R1","","",null,null],[17,"SECP521R1","","",null,null],[17,"SECT113R1","","",null,null],[17,"SECT113R2","","",null,null],[17,"SECT131R1","","",null,null],[17,"SECT131R2","","",null,null],[17,"SECT163K1","","",null,null],[17,"SECT163R1","","",null,null],[17,"SECT163R2","","",null,null],[17,"SECT193R1","","",null,null],[17,"SECT193R2","","",null,null],[17,"SECT233K1","","",null,null],[17,"SECT233R1","","",null,null],[17,"SECT239K1","","",null,null],[17,"SECT283K1","","",null,null],[17,"SECT283R1","","",null,null],[17,"SECT409K1","","",null,null],[17,"SECT409R1","","",null,null],[17,"SECT571K1","","",null,null],[17,"SECT571R1","","",null,null],[17,"WAP_WSG_IDM_ECID_WTLS1","","",null,null],[17,"WAP_WSG_IDM_ECID_WTLS3","","",null,null],[17,"WAP_WSG_IDM_ECID_WTLS4","","",null,null],[17,"WAP_WSG_IDM_ECID_WTLS5","","",null,null],[17,"WAP_WSG_IDM_ECID_WTLS6","","",null,null],[17,"WAP_WSG_IDM_ECID_WTLS7","","",null,null],[17,"WAP_WSG_IDM_ECID_WTLS8","","",null,null],[17,"WAP_WSG_IDM_ECID_WTLS9","","",null,null],[17,"WAP_WSG_IDM_ECID_WTLS10","","",null,null],[17,"WAP_WSG_IDM_ECID_WTLS11","","",null,null],[17,"WAP_WSG_IDM_ECID_WTLS12","","",null,null],[17,"CAST5_CBC","","",null,null],[17,"CAST5_ECB","","",null,null],[17,"CAST5_CFB64","","",null,null],[17,"CAST5_OFB64","","",null,null],[17,"PBEWITHMD5ANDCAST5_CBC","","",null,null],[17,"ID_PASSWORDBASEDMAC","","",null,null],[17,"ID_DHBASEDMAC","","",null,null],[17,"RSADSI","","",null,null],[17,"PKCS","","",null,null],[17,"PKCS1","","",null,null],[17,"RSAENCRYPTION","","",null,null],[17,"MD2WITHRSAENCRYPTION","","",null,null],[17,"MD4WITHRSAENCRYPTION","","",null,null],[17,"MD5WITHRSAENCRYPTION","","",null,null],[17,"SHA1WITHRSAENCRYPTION","","",null,null],[17,"RSAESOAEP","","",null,null],[17,"MGF1","","",null,null],[17,"RSASSAPSS","","",null,null],[17,"SHA256WITHRSAENCRYPTION","","",null,null],[17,"SHA384WITHRSAENCRYPTION","","",null,null],[17,"SHA512WITHRSAENCRYPTION","","",null,null],[17,"SHA224WITHRSAENCRYPTION","","",null,null],[17,"PKCS3","","",null,null],[17,"DHKEYAGREEMENT","","",null,null],[17,"PKCS5","","",null,null],[17,"PBEWITHMD2ANDDES_CBC","","",null,null],[17,"PBEWITHMD5ANDDES_CBC","","",null,null],[17,"PBEWITHMD2ANDRC2_CBC","","",null,null],[17,"PBEWITHMD5ANDRC2_CBC","","",null,null],[17,"PBEWITHSHA1ANDDES_CBC","","",null,null],[17,"PBEWITHSHA1ANDRC2_CBC","","",null,null],[17,"ID_PBKDF2","","",null,null],[17,"PBES2","","",null,null],[17,"PBMAC1","","",null,null],[17,"PKCS7","","",null,null],[17,"PKCS7_DATA","","",null,null],[17,"PKCS7_SIGNED","","",null,null],[17,"PKCS7_ENVELOPED","","",null,null],[17,"PKCS7_SIGNEDANDENVELOPED","","",null,null],[17,"PKCS7_DIGEST","","",null,null],[17,"PKCS7_ENCRYPTED","","",null,null],[17,"PKCS9","","",null,null],[17,"PKCS9_EMAILADDRESS","","",null,null],[17,"PKCS9_UNSTRUCTUREDNAME","","",null,null],[17,"PKCS9_CONTENTTYPE","","",null,null],[17,"PKCS9_MESSAGEDIGEST","","",null,null],[17,"PKCS9_SIGNINGTIME","","",null,null],[17,"PKCS9_COUNTERSIGNATURE","","",null,null],[17,"PKCS9_CHALLENGEPASSWORD","","",null,null],[17,"PKCS9_UNSTRUCTUREDADDRESS","","",null,null],[17,"PKCS9_EXTCERTATTRIBUTES","","",null,null],[17,"EXT_REQ","","",null,null],[17,"SMIMECAPABILITIES","","",null,null],[17,"SMIME","","",null,null],[17,"ID_SMIME_MOD","","",null,null],[17,"ID_SMIME_CT","","",null,null],[17,"ID_SMIME_AA","","",null,null],[17,"ID_SMIME_ALG","","",null,null],[17,"ID_SMIME_CD","","",null,null],[17,"ID_SMIME_SPQ","","",null,null],[17,"ID_SMIME_CTI","","",null,null],[17,"ID_SMIME_MOD_CMS","","",null,null],[17,"ID_SMIME_MOD_ESS","","",null,null],[17,"ID_SMIME_MOD_OID","","",null,null],[17,"ID_SMIME_MOD_MSG_V3","","",null,null],[17,"ID_SMIME_MOD_ETS_ESIGNATURE_88","","",null,null],[17,"ID_SMIME_MOD_ETS_ESIGNATURE_97","","",null,null],[17,"ID_SMIME_MOD_ETS_ESIGPOLICY_88","","",null,null],[17,"ID_SMIME_MOD_ETS_ESIGPOLICY_97","","",null,null],[17,"ID_SMIME_CT_RECEIPT","","",null,null],[17,"ID_SMIME_CT_AUTHDATA","","",null,null],[17,"ID_SMIME_CT_PUBLISHCERT","","",null,null],[17,"ID_SMIME_CT_TSTINFO","","",null,null],[17,"ID_SMIME_CT_TDTINFO","","",null,null],[17,"ID_SMIME_CT_CONTENTINFO","","",null,null],[17,"ID_SMIME_CT_DVCSREQUESTDATA","","",null,null],[17,"ID_SMIME_CT_DVCSRESPONSEDATA","","",null,null],[17,"ID_SMIME_CT_COMPRESSEDDATA","","",null,null],[17,"ID_CT_ASCIITEXTWITHCRLF","","",null,null],[17,"ID_SMIME_AA_RECEIPTREQUEST","","",null,null],[17,"ID_SMIME_AA_SECURITYLABEL","","",null,null],[17,"ID_SMIME_AA_MLEXPANDHISTORY","","",null,null],[17,"ID_SMIME_AA_CONTENTHINT","","",null,null],[17,"ID_SMIME_AA_MSGSIGDIGEST","","",null,null],[17,"ID_SMIME_AA_ENCAPCONTENTTYPE","","",null,null],[17,"ID_SMIME_AA_CONTENTIDENTIFIER","","",null,null],[17,"ID_SMIME_AA_MACVALUE","","",null,null],[17,"ID_SMIME_AA_EQUIVALENTLABELS","","",null,null],[17,"ID_SMIME_AA_CONTENTREFERENCE","","",null,null],[17,"ID_SMIME_AA_ENCRYPKEYPREF","","",null,null],[17,"ID_SMIME_AA_SIGNINGCERTIFICATE","","",null,null],[17,"ID_SMIME_AA_SMIMEENCRYPTCERTS","","",null,null],[17,"ID_SMIME_AA_TIMESTAMPTOKEN","","",null,null],[17,"ID_SMIME_AA_ETS_SIGPOLICYID","","",null,null],[17,"ID_SMIME_AA_ETS_COMMITMENTTYPE","","",null,null],[17,"ID_SMIME_AA_ETS_SIGNERLOCATION","","",null,null],[17,"ID_SMIME_AA_ETS_SIGNERATTR","","",null,null],[17,"ID_SMIME_AA_ETS_OTHERSIGCERT","","",null,null],[17,"ID_SMIME_AA_ETS_CONTENTTIMESTAMP","","",null,null],[17,"ID_SMIME_AA_ETS_CERTIFICATEREFS","","",null,null],[17,"ID_SMIME_AA_ETS_REVOCATIONREFS","","",null,null],[17,"ID_SMIME_AA_ETS_CERTVALUES","","",null,null],[17,"ID_SMIME_AA_ETS_REVOCATIONVALUES","","",null,null],[17,"ID_SMIME_AA_ETS_ESCTIMESTAMP","","",null,null],[17,"ID_SMIME_AA_ETS_CERTCRLTIMESTAMP","","",null,null],[17,"ID_SMIME_AA_ETS_ARCHIVETIMESTAMP","","",null,null],[17,"ID_SMIME_AA_SIGNATURETYPE","","",null,null],[17,"ID_SMIME_AA_DVCS_DVC","","",null,null],[17,"ID_SMIME_ALG_ESDHWITH3DES","","",null,null],[17,"ID_SMIME_ALG_ESDHWITHRC2","","",null,null],[17,"ID_SMIME_ALG_3DESWRAP","","",null,null],[17,"ID_SMIME_ALG_RC2WRAP","","",null,null],[17,"ID_SMIME_ALG_ESDH","","",null,null],[17,"ID_SMIME_ALG_CMS3DESWRAP","","",null,null],[17,"ID_SMIME_ALG_CMSRC2WRAP","","",null,null],[17,"ID_ALG_PWRI_KEK","","",null,null],[17,"ID_SMIME_CD_LDAP","","",null,null],[17,"ID_SMIME_SPQ_ETS_SQT_URI","","",null,null],[17,"ID_SMIME_SPQ_ETS_SQT_UNOTICE","","",null,null],[17,"ID_SMIME_CTI_ETS_PROOFOFORIGIN","","",null,null],[17,"ID_SMIME_CTI_ETS_PROOFOFRECEIPT","","",null,null],[17,"ID_SMIME_CTI_ETS_PROOFOFDELIVERY","","",null,null],[17,"ID_SMIME_CTI_ETS_PROOFOFSENDER","","",null,null],[17,"ID_SMIME_CTI_ETS_PROOFOFAPPROVAL","","",null,null],[17,"ID_SMIME_CTI_ETS_PROOFOFCREATION","","",null,null],[17,"FRIENDLYNAME","","",null,null],[17,"LOCALKEYID","","",null,null],[17,"MS_CSP_NAME","","",null,null],[17,"LOCALKEYSET","","",null,null],[17,"X509CERTIFICATE","","",null,null],[17,"SDSICERTIFICATE","","",null,null],[17,"X509CRL","","",null,null],[17,"PBE_WITHSHA1AND128BITRC4","","",null,null],[17,"PBE_WITHSHA1AND40BITRC4","","",null,null],[17,"PBE_WITHSHA1AND3_KEY_TRIPLEDES_CBC","","",null,null],[17,"PBE_WITHSHA1AND2_KEY_TRIPLEDES_CBC","","",null,null],[17,"PBE_WITHSHA1AND128BITRC2_CBC","","",null,null],[17,"PBE_WITHSHA1AND40BITRC2_CBC","","",null,null],[17,"KEYBAG","","",null,null],[17,"PKCS8SHROUDEDKEYBAG","","",null,null],[17,"CERTBAG","","",null,null],[17,"CRLBAG","","",null,null],[17,"SECRETBAG","","",null,null],[17,"SAFECONTENTSBAG","","",null,null],[17,"MD2","","",null,null],[17,"MD4","","",null,null],[17,"MD5","","",null,null],[17,"MD5_SHA1","","",null,null],[17,"HMACWITHMD5","","",null,null],[17,"HMACWITHSHA1","","",null,null],[17,"HMACWITHSHA224","","",null,null],[17,"HMACWITHSHA256","","",null,null],[17,"HMACWITHSHA384","","",null,null],[17,"HMACWITHSHA512","","",null,null],[17,"RC2_CBC","","",null,null],[17,"RC2_ECB","","",null,null],[17,"RC2_CFB64","","",null,null],[17,"RC2_OFB64","","",null,null],[17,"RC2_40_CBC","","",null,null],[17,"RC2_64_CBC","","",null,null],[17,"RC4","","",null,null],[17,"RC4_40","","",null,null],[17,"DES_EDE3_CBC","","",null,null],[17,"RC5_CBC","","",null,null],[17,"RC5_ECB","","",null,null],[17,"RC5_CFB64","","",null,null],[17,"RC5_OFB64","","",null,null],[17,"MS_EXT_REQ","","",null,null],[17,"MS_CODE_IND","","",null,null],[17,"MS_CODE_COM","","",null,null],[17,"MS_CTL_SIGN","","",null,null],[17,"MS_SGC","","",null,null],[17,"MS_EFS","","",null,null],[17,"MS_SMARTCARD_LOGIN","","",null,null],[17,"MS_UPN","","",null,null],[17,"IDEA_CBC","","",null,null],[17,"IDEA_ECB","","",null,null],[17,"IDEA_CFB64","","",null,null],[17,"IDEA_OFB64","","",null,null],[17,"BF_CBC","","",null,null],[17,"BF_ECB","","",null,null],[17,"BF_CFB64","","",null,null],[17,"BF_OFB64","","",null,null],[17,"ID_PKIX","","",null,null],[17,"ID_PKIX_MOD","","",null,null],[17,"ID_PE","","",null,null],[17,"ID_QT","","",null,null],[17,"ID_KP","","",null,null],[17,"ID_IT","","",null,null],[17,"ID_PKIP","","",null,null],[17,"ID_ALG","","",null,null],[17,"ID_CMC","","",null,null],[17,"ID_ON","","",null,null],[17,"ID_PDA","","",null,null],[17,"ID_ACA","","",null,null],[17,"ID_QCS","","",null,null],[17,"ID_CCT","","",null,null],[17,"ID_PPL","","",null,null],[17,"ID_AD","","",null,null],[17,"ID_PKIX1_EXPLICIT_88","","",null,null],[17,"ID_PKIX1_IMPLICIT_88","","",null,null],[17,"ID_PKIX1_EXPLICIT_93","","",null,null],[17,"ID_PKIX1_IMPLICIT_93","","",null,null],[17,"ID_MOD_CRMF","","",null,null],[17,"ID_MOD_CMC","","",null,null],[17,"ID_MOD_KEA_PROFILE_88","","",null,null],[17,"ID_MOD_KEA_PROFILE_93","","",null,null],[17,"ID_MOD_CMP","","",null,null],[17,"ID_MOD_QUALIFIED_CERT_88","","",null,null],[17,"ID_MOD_QUALIFIED_CERT_93","","",null,null],[17,"ID_MOD_ATTRIBUTE_CERT","","",null,null],[17,"ID_MOD_TIMESTAMP_PROTOCOL","","",null,null],[17,"ID_MOD_OCSP","","",null,null],[17,"ID_MOD_DVCS","","",null,null],[17,"ID_MOD_CMP2000","","",null,null],[17,"INFO_ACCESS","","",null,null],[17,"BIOMETRICINFO","","",null,null],[17,"QCSTATEMENTS","","",null,null],[17,"AC_AUDITENTITY","","",null,null],[17,"AC_TARGETING","","",null,null],[17,"AACONTROLS","","",null,null],[17,"SBGP_IPADDRBLOCK","","",null,null],[17,"SBGP_AUTONOMOUSSYSNUM","","",null,null],[17,"SBGP_ROUTERIDENTIFIER","","",null,null],[17,"AC_PROXYING","","",null,null],[17,"SINFO_ACCESS","","",null,null],[17,"PROXYCERTINFO","","",null,null],[17,"ID_QT_CPS","","",null,null],[17,"ID_QT_UNOTICE","","",null,null],[17,"TEXTNOTICE","","",null,null],[17,"SERVER_AUTH","","",null,null],[17,"CLIENT_AUTH","","",null,null],[17,"CODE_SIGN","","",null,null],[17,"EMAIL_PROTECT","","",null,null],[17,"IPSECENDSYSTEM","","",null,null],[17,"IPSECTUNNEL","","",null,null],[17,"IPSECUSER","","",null,null],[17,"TIME_STAMP","","",null,null],[17,"OCSP_SIGN","","",null,null],[17,"DVCS","","",null,null],[17,"ID_IT_CAPROTENCCERT","","",null,null],[17,"ID_IT_SIGNKEYPAIRTYPES","","",null,null],[17,"ID_IT_ENCKEYPAIRTYPES","","",null,null],[17,"ID_IT_PREFERREDSYMMALG","","",null,null],[17,"ID_IT_CAKEYUPDATEINFO","","",null,null],[17,"ID_IT_CURRENTCRL","","",null,null],[17,"ID_IT_UNSUPPORTEDOIDS","","",null,null],[17,"ID_IT_SUBSCRIPTIONREQUEST","","",null,null],[17,"ID_IT_SUBSCRIPTIONRESPONSE","","",null,null],[17,"ID_IT_KEYPAIRPARAMREQ","","",null,null],[17,"ID_IT_KEYPAIRPARAMREP","","",null,null],[17,"ID_IT_REVPASSPHRASE","","",null,null],[17,"ID_IT_IMPLICITCONFIRM","","",null,null],[17,"ID_IT_CONFIRMWAITTIME","","",null,null],[17,"ID_IT_ORIGPKIMESSAGE","","",null,null],[17,"ID_IT_SUPPLANGTAGS","","",null,null],[17,"ID_REGCTRL","","",null,null],[17,"ID_REGINFO","","",null,null],[17,"ID_REGCTRL_REGTOKEN","","",null,null],[17,"ID_REGCTRL_AUTHENTICATOR","","",null,null],[17,"ID_REGCTRL_PKIPUBLICATIONINFO","","",null,null],[17,"ID_REGCTRL_PKIARCHIVEOPTIONS","","",null,null],[17,"ID_REGCTRL_OLDCERTID","","",null,null],[17,"ID_REGCTRL_PROTOCOLENCRKEY","","",null,null],[17,"ID_REGINFO_UTF8PAIRS","","",null,null],[17,"ID_REGINFO_CERTREQ","","",null,null],[17,"ID_ALG_DES40","","",null,null],[17,"ID_ALG_NOSIGNATURE","","",null,null],[17,"ID_ALG_DH_SIG_HMAC_SHA1","","",null,null],[17,"ID_ALG_DH_POP","","",null,null],[17,"ID_CMC_STATUSINFO","","",null,null],[17,"ID_CMC_IDENTIFICATION","","",null,null],[17,"ID_CMC_IDENTITYPROOF","","",null,null],[17,"ID_CMC_DATARETURN","","",null,null],[17,"ID_CMC_TRANSACTIONID","","",null,null],[17,"ID_CMC_SENDERNONCE","","",null,null],[17,"ID_CMC_RECIPIENTNONCE","","",null,null],[17,"ID_CMC_ADDEXTENSIONS","","",null,null],[17,"ID_CMC_ENCRYPTEDPOP","","",null,null],[17,"ID_CMC_DECRYPTEDPOP","","",null,null],[17,"ID_CMC_LRAPOPWITNESS","","",null,null],[17,"ID_CMC_GETCERT","","",null,null],[17,"ID_CMC_GETCRL","","",null,null],[17,"ID_CMC_REVOKEREQUEST","","",null,null],[17,"ID_CMC_REGINFO","","",null,null],[17,"ID_CMC_RESPONSEINFO","","",null,null],[17,"ID_CMC_QUERYPENDING","","",null,null],[17,"ID_CMC_POPLINKRANDOM","","",null,null],[17,"ID_CMC_POPLINKWITNESS","","",null,null],[17,"ID_CMC_CONFIRMCERTACCEPTANCE","","",null,null],[17,"ID_ON_PERSONALDATA","","",null,null],[17,"ID_ON_PERMANENTIDENTIFIER","","",null,null],[17,"ID_PDA_DATEOFBIRTH","","",null,null],[17,"ID_PDA_PLACEOFBIRTH","","",null,null],[17,"ID_PDA_GENDER","","",null,null],[17,"ID_PDA_COUNTRYOFCITIZENSHIP","","",null,null],[17,"ID_PDA_COUNTRYOFRESIDENCE","","",null,null],[17,"ID_ACA_AUTHENTICATIONINFO","","",null,null],[17,"ID_ACA_ACCESSIDENTITY","","",null,null],[17,"ID_ACA_CHARGINGIDENTITY","","",null,null],[17,"ID_ACA_GROUP","","",null,null],[17,"ID_ACA_ROLE","","",null,null],[17,"ID_ACA_ENCATTRS","","",null,null],[17,"ID_QCS_PKIXQCSYNTAX_V1","","",null,null],[17,"ID_CCT_CRS","","",null,null],[17,"ID_CCT_PKIDATA","","",null,null],[17,"ID_CCT_PKIRESPONSE","","",null,null],[17,"ID_PPL_ANYLANGUAGE","","",null,null],[17,"ID_PPL_INHERITALL","","",null,null],[17,"INDEPENDENT","","",null,null],[17,"AD_OCSP","","",null,null],[17,"AD_CA_ISSUERS","","",null,null],[17,"AD_TIMESTAMPING","","",null,null],[17,"AD_DVCS","","",null,null],[17,"CAREPOSITORY","","",null,null],[17,"ID_PKIX_OCSP_BASIC","","",null,null],[17,"ID_PKIX_OCSP_NONCE","","",null,null],[17,"ID_PKIX_OCSP_CRLID","","",null,null],[17,"ID_PKIX_OCSP_ACCEPTABLERESPONSES","","",null,null],[17,"ID_PKIX_OCSP_NOCHECK","","",null,null],[17,"ID_PKIX_OCSP_ARCHIVECUTOFF","","",null,null],[17,"ID_PKIX_OCSP_SERVICELOCATOR","","",null,null],[17,"ID_PKIX_OCSP_EXTENDEDSTATUS","","",null,null],[17,"ID_PKIX_OCSP_VALID","","",null,null],[17,"ID_PKIX_OCSP_PATH","","",null,null],[17,"ID_PKIX_OCSP_TRUSTROOT","","",null,null],[17,"ALGORITHM","","",null,null],[17,"MD5WITHRSA","","",null,null],[17,"DES_ECB","","",null,null],[17,"DES_CBC","","",null,null],[17,"DES_OFB64","","",null,null],[17,"DES_CFB64","","",null,null],[17,"RSASIGNATURE","","",null,null],[17,"DSA_2","","",null,null],[17,"DSAWITHSHA","","",null,null],[17,"SHAWITHRSAENCRYPTION","","",null,null],[17,"DES_EDE_ECB","","",null,null],[17,"DES_EDE3_ECB","","",null,null],[17,"DES_EDE_CBC","","",null,null],[17,"DES_EDE_CFB64","","",null,null],[17,"DES_EDE3_CFB64","","",null,null],[17,"DES_EDE_OFB64","","",null,null],[17,"DES_EDE3_OFB64","","",null,null],[17,"DESX_CBC","","",null,null],[17,"SHA","","",null,null],[17,"SHA1","","",null,null],[17,"DSAWITHSHA1_2","","",null,null],[17,"SHA1WITHRSA","","",null,null],[17,"RIPEMD160","","",null,null],[17,"RIPEMD160WITHRSA","","",null,null],[17,"SXNET","","",null,null],[17,"X500","","",null,null],[17,"X509","","",null,null],[17,"COMMONNAME","","",null,null],[17,"SURNAME","","",null,null],[17,"SERIALNUMBER","","",null,null],[17,"COUNTRYNAME","","",null,null],[17,"LOCALITYNAME","","",null,null],[17,"STATEORPROVINCENAME","","",null,null],[17,"STREETADDRESS","","",null,null],[17,"ORGANIZATIONNAME","","",null,null],[17,"ORGANIZATIONALUNITNAME","","",null,null],[17,"TITLE","","",null,null],[17,"DESCRIPTION","","",null,null],[17,"SEARCHGUIDE","","",null,null],[17,"BUSINESSCATEGORY","","",null,null],[17,"POSTALADDRESS","","",null,null],[17,"POSTALCODE","","",null,null],[17,"POSTOFFICEBOX","","",null,null],[17,"PHYSICALDELIVERYOFFICENAME","","",null,null],[17,"TELEPHONENUMBER","","",null,null],[17,"TELEXNUMBER","","",null,null],[17,"TELETEXTERMINALIDENTIFIER","","",null,null],[17,"FACSIMILETELEPHONENUMBER","","",null,null],[17,"X121ADDRESS","","",null,null],[17,"INTERNATIONALISDNNUMBER","","",null,null],[17,"REGISTEREDADDRESS","","",null,null],[17,"DESTINATIONINDICATOR","","",null,null],[17,"PREFERREDDELIVERYMETHOD","","",null,null],[17,"PRESENTATIONADDRESS","","",null,null],[17,"SUPPORTEDAPPLICATIONCONTEXT","","",null,null],[17,"MEMBER","","",null,null],[17,"OWNER","","",null,null],[17,"ROLEOCCUPANT","","",null,null],[17,"SEEALSO","","",null,null],[17,"USERPASSWORD","","",null,null],[17,"USERCERTIFICATE","","",null,null],[17,"CACERTIFICATE","","",null,null],[17,"AUTHORITYREVOCATIONLIST","","",null,null],[17,"CERTIFICATEREVOCATIONLIST","","",null,null],[17,"CROSSCERTIFICATEPAIR","","",null,null],[17,"NAME","","",null,null],[17,"GIVENNAME","","",null,null],[17,"INITIALS","","",null,null],[17,"GENERATIONQUALIFIER","","",null,null],[17,"X500UNIQUEIDENTIFIER","","",null,null],[17,"DNQUALIFIER","","",null,null],[17,"ENHANCEDSEARCHGUIDE","","",null,null],[17,"PROTOCOLINFORMATION","","",null,null],[17,"DISTINGUISHEDNAME","","",null,null],[17,"UNIQUEMEMBER","","",null,null],[17,"HOUSEIDENTIFIER","","",null,null],[17,"SUPPORTEDALGORITHMS","","",null,null],[17,"DELTAREVOCATIONLIST","","",null,null],[17,"DMDNAME","","",null,null],[17,"PSEUDONYM","","",null,null],[17,"ROLE","","",null,null],[17,"X500ALGORITHMS","","",null,null],[17,"RSA","","",null,null],[17,"MDC2WITHRSA","","",null,null],[17,"MDC2","","",null,null],[17,"ID_CE","","",null,null],[17,"SUBJECT_DIRECTORY_ATTRIBUTES","","",null,null],[17,"SUBJECT_KEY_IDENTIFIER","","",null,null],[17,"KEY_USAGE","","",null,null],[17,"PRIVATE_KEY_USAGE_PERIOD","","",null,null],[17,"SUBJECT_ALT_NAME","","",null,null],[17,"ISSUER_ALT_NAME","","",null,null],[17,"BASIC_CONSTRAINTS","","",null,null],[17,"CRL_NUMBER","","",null,null],[17,"CRL_REASON","","",null,null],[17,"INVALIDITY_DATE","","",null,null],[17,"DELTA_CRL","","",null,null],[17,"ISSUING_DISTRIBUTION_POINT","","",null,null],[17,"CERTIFICATE_ISSUER","","",null,null],[17,"NAME_CONSTRAINTS","","",null,null],[17,"CRL_DISTRIBUTION_POINTS","","",null,null],[17,"CERTIFICATE_POLICIES","","",null,null],[17,"ANY_POLICY","","",null,null],[17,"POLICY_MAPPINGS","","",null,null],[17,"AUTHORITY_KEY_IDENTIFIER","","",null,null],[17,"POLICY_CONSTRAINTS","","",null,null],[17,"EXT_KEY_USAGE","","",null,null],[17,"FRESHEST_CRL","","",null,null],[17,"INHIBIT_ANY_POLICY","","",null,null],[17,"TARGET_INFORMATION","","",null,null],[17,"NO_REV_AVAIL","","",null,null],[17,"ANYEXTENDEDKEYUSAGE","","",null,null],[17,"NETSCAPE","","",null,null],[17,"NETSCAPE_CERT_EXTENSION","","",null,null],[17,"NETSCAPE_DATA_TYPE","","",null,null],[17,"NETSCAPE_CERT_TYPE","","",null,null],[17,"NETSCAPE_BASE_URL","","",null,null],[17,"NETSCAPE_REVOCATION_URL","","",null,null],[17,"NETSCAPE_CA_REVOCATION_URL","","",null,null],[17,"NETSCAPE_RENEWAL_URL","","",null,null],[17,"NETSCAPE_CA_POLICY_URL","","",null,null],[17,"NETSCAPE_SSL_SERVER_NAME","","",null,null],[17,"NETSCAPE_COMMENT","","",null,null],[17,"NETSCAPE_CERT_SEQUENCE","","",null,null],[17,"NS_SGC","","",null,null],[17,"ORG","","",null,null],[17,"DOD","","",null,null],[17,"IANA","","",null,null],[17,"DIRECTORY","","",null,null],[17,"MANAGEMENT","","",null,null],[17,"EXPERIMENTAL","","",null,null],[17,"PRIVATE","","",null,null],[17,"SECURITY","","",null,null],[17,"SNMPV2","","",null,null],[17,"MAIL","","",null,null],[17,"ENTERPRISES","","",null,null],[17,"DCOBJECT","","",null,null],[17,"MIME_MHS","","",null,null],[17,"MIME_MHS_HEADINGS","","",null,null],[17,"MIME_MHS_BODIES","","",null,null],[17,"ID_HEX_PARTIAL_MESSAGE","","",null,null],[17,"ID_HEX_MULTIPART_MESSAGE","","",null,null],[17,"ZLIB_COMPRESSION","","",null,null],[17,"AES_128_ECB","","",null,null],[17,"AES_128_CBC","","",null,null],[17,"AES_128_OFB128","","",null,null],[17,"AES_128_CFB128","","",null,null],[17,"ID_AES128_WRAP","","",null,null],[17,"AES_128_GCM","","",null,null],[17,"AES_128_CCM","","",null,null],[17,"ID_AES128_WRAP_PAD","","",null,null],[17,"AES_192_ECB","","",null,null],[17,"AES_192_CBC","","",null,null],[17,"AES_192_OFB128","","",null,null],[17,"AES_192_CFB128","","",null,null],[17,"ID_AES192_WRAP","","",null,null],[17,"AES_192_GCM","","",null,null],[17,"AES_192_CCM","","",null,null],[17,"ID_AES192_WRAP_PAD","","",null,null],[17,"AES_256_ECB","","",null,null],[17,"AES_256_CBC","","",null,null],[17,"AES_256_OFB128","","",null,null],[17,"AES_256_CFB128","","",null,null],[17,"ID_AES256_WRAP","","",null,null],[17,"AES_256_GCM","","",null,null],[17,"AES_256_CCM","","",null,null],[17,"ID_AES256_WRAP_PAD","","",null,null],[17,"AES_128_CFB1","","",null,null],[17,"AES_192_CFB1","","",null,null],[17,"AES_256_CFB1","","",null,null],[17,"AES_128_CFB8","","",null,null],[17,"AES_192_CFB8","","",null,null],[17,"AES_256_CFB8","","",null,null],[17,"AES_128_CTR","","",null,null],[17,"AES_192_CTR","","",null,null],[17,"AES_256_CTR","","",null,null],[17,"AES_128_XTS","","",null,null],[17,"AES_256_XTS","","",null,null],[17,"DES_CFB1","","",null,null],[17,"DES_CFB8","","",null,null],[17,"DES_EDE3_CFB1","","",null,null],[17,"DES_EDE3_CFB8","","",null,null],[17,"SHA256","","",null,null],[17,"SHA384","","",null,null],[17,"SHA512","","",null,null],[17,"SHA224","","",null,null],[17,"DSA_WITH_SHA224","","",null,null],[17,"DSA_WITH_SHA256","","",null,null],[17,"HOLD_INSTRUCTION_CODE","","",null,null],[17,"HOLD_INSTRUCTION_NONE","","",null,null],[17,"HOLD_INSTRUCTION_CALL_ISSUER","","",null,null],[17,"HOLD_INSTRUCTION_REJECT","","",null,null],[17,"DATA","","",null,null],[17,"PSS","","",null,null],[17,"UCL","","",null,null],[17,"PILOT","","",null,null],[17,"PILOTATTRIBUTETYPE","","",null,null],[17,"PILOTATTRIBUTESYNTAX","","",null,null],[17,"PILOTOBJECTCLASS","","",null,null],[17,"PILOTGROUPS","","",null,null],[17,"IA5STRINGSYNTAX","","",null,null],[17,"CASEIGNOREIA5STRINGSYNTAX","","",null,null],[17,"PILOTOBJECT","","",null,null],[17,"PILOTPERSON","","",null,null],[17,"ACCOUNT","","",null,null],[17,"DOCUMENT","","",null,null],[17,"ROOM","","",null,null],[17,"DOCUMENTSERIES","","",null,null],[17,"DOMAIN","","",null,null],[17,"RFC822LOCALPART","","",null,null],[17,"DNSDOMAIN","","",null,null],[17,"DOMAINRELATEDOBJECT","","",null,null],[17,"FRIENDLYCOUNTRY","","",null,null],[17,"SIMPLESECURITYOBJECT","","",null,null],[17,"PILOTORGANIZATION","","",null,null],[17,"PILOTDSA","","",null,null],[17,"QUALITYLABELLEDDATA","","",null,null],[17,"USERID","","",null,null],[17,"TEXTENCODEDORADDRESS","","",null,null],[17,"RFC822MAILBOX","","",null,null],[17,"INFO","","",null,null],[17,"FAVOURITEDRINK","","",null,null],[17,"ROOMNUMBER","","",null,null],[17,"PHOTO","","",null,null],[17,"USERCLASS","","",null,null],[17,"HOST","","",null,null],[17,"MANAGER","","",null,null],[17,"DOCUMENTIDENTIFIER","","",null,null],[17,"DOCUMENTTITLE","","",null,null],[17,"DOCUMENTVERSION","","",null,null],[17,"DOCUMENTAUTHOR","","",null,null],[17,"DOCUMENTLOCATION","","",null,null],[17,"HOMETELEPHONENUMBER","","",null,null],[17,"SECRETARY","","",null,null],[17,"OTHERMAILBOX","","",null,null],[17,"LASTMODIFIEDTIME","","",null,null],[17,"LASTMODIFIEDBY","","",null,null],[17,"DOMAINCOMPONENT","","",null,null],[17,"ARECORD","","",null,null],[17,"PILOTATTRIBUTETYPE27","","",null,null],[17,"MXRECORD","","",null,null],[17,"NSRECORD","","",null,null],[17,"SOARECORD","","",null,null],[17,"CNAMERECORD","","",null,null],[17,"ASSOCIATEDDOMAIN","","",null,null],[17,"ASSOCIATEDNAME","","",null,null],[17,"HOMEPOSTALADDRESS","","",null,null],[17,"PERSONALTITLE","","",null,null],[17,"MOBILETELEPHONENUMBER","","",null,null],[17,"PAGERTELEPHONENUMBER","","",null,null],[17,"FRIENDLYCOUNTRYNAME","","",null,null],[17,"ORGANIZATIONALSTATUS","","",null,null],[17,"JANETMAILBOX","","",null,null],[17,"MAILPREFERENCEOPTION","","",null,null],[17,"BUILDINGNAME","","",null,null],[17,"DSAQUALITY","","",null,null],[17,"SINGLELEVELQUALITY","","",null,null],[17,"SUBTREEMINIMUMQUALITY","","",null,null],[17,"SUBTREEMAXIMUMQUALITY","","",null,null],[17,"PERSONALSIGNATURE","","",null,null],[17,"DITREDIRECT","","",null,null],[17,"AUDIO","","",null,null],[17,"DOCUMENTPUBLISHER","","",null,null],[17,"ID_SET","","",null,null],[17,"SET_CTYPE","","",null,null],[17,"SET_MSGEXT","","",null,null],[17,"SET_ATTR","","",null,null],[17,"SET_POLICY","","",null,null],[17,"SET_CERTEXT","","",null,null],[17,"SET_BRAND","","",null,null],[17,"SETCT_PANDATA","","",null,null],[17,"SETCT_PANTOKEN","","",null,null],[17,"SETCT_PANONLY","","",null,null],[17,"SETCT_OIDATA","","",null,null],[17,"SETCT_PI","","",null,null],[17,"SETCT_PIDATA","","",null,null],[17,"SETCT_PIDATAUNSIGNED","","",null,null],[17,"SETCT_HODINPUT","","",null,null],[17,"SETCT_AUTHRESBAGGAGE","","",null,null],[17,"SETCT_AUTHREVREQBAGGAGE","","",null,null],[17,"SETCT_AUTHREVRESBAGGAGE","","",null,null],[17,"SETCT_CAPTOKENSEQ","","",null,null],[17,"SETCT_PINITRESDATA","","",null,null],[17,"SETCT_PI_TBS","","",null,null],[17,"SETCT_PRESDATA","","",null,null],[17,"SETCT_AUTHREQTBS","","",null,null],[17,"SETCT_AUTHRESTBS","","",null,null],[17,"SETCT_AUTHRESTBSX","","",null,null],[17,"SETCT_AUTHTOKENTBS","","",null,null],[17,"SETCT_CAPTOKENDATA","","",null,null],[17,"SETCT_CAPTOKENTBS","","",null,null],[17,"SETCT_ACQCARDCODEMSG","","",null,null],[17,"SETCT_AUTHREVREQTBS","","",null,null],[17,"SETCT_AUTHREVRESDATA","","",null,null],[17,"SETCT_AUTHREVRESTBS","","",null,null],[17,"SETCT_CAPREQTBS","","",null,null],[17,"SETCT_CAPREQTBSX","","",null,null],[17,"SETCT_CAPRESDATA","","",null,null],[17,"SETCT_CAPREVREQTBS","","",null,null],[17,"SETCT_CAPREVREQTBSX","","",null,null],[17,"SETCT_CAPREVRESDATA","","",null,null],[17,"SETCT_CREDREQTBS","","",null,null],[17,"SETCT_CREDREQTBSX","","",null,null],[17,"SETCT_CREDRESDATA","","",null,null],[17,"SETCT_CREDREVREQTBS","","",null,null],[17,"SETCT_CREDREVREQTBSX","","",null,null],[17,"SETCT_CREDREVRESDATA","","",null,null],[17,"SETCT_PCERTREQDATA","","",null,null],[17,"SETCT_PCERTRESTBS","","",null,null],[17,"SETCT_BATCHADMINREQDATA","","",null,null],[17,"SETCT_BATCHADMINRESDATA","","",null,null],[17,"SETCT_CARDCINITRESTBS","","",null,null],[17,"SETCT_MEAQCINITRESTBS","","",null,null],[17,"SETCT_REGFORMRESTBS","","",null,null],[17,"SETCT_CERTREQDATA","","",null,null],[17,"SETCT_CERTREQTBS","","",null,null],[17,"SETCT_CERTRESDATA","","",null,null],[17,"SETCT_CERTINQREQTBS","","",null,null],[17,"SETCT_ERRORTBS","","",null,null],[17,"SETCT_PIDUALSIGNEDTBE","","",null,null],[17,"SETCT_PIUNSIGNEDTBE","","",null,null],[17,"SETCT_AUTHREQTBE","","",null,null],[17,"SETCT_AUTHRESTBE","","",null,null],[17,"SETCT_AUTHRESTBEX","","",null,null],[17,"SETCT_AUTHTOKENTBE","","",null,null],[17,"SETCT_CAPTOKENTBE","","",null,null],[17,"SETCT_CAPTOKENTBEX","","",null,null],[17,"SETCT_ACQCARDCODEMSGTBE","","",null,null],[17,"SETCT_AUTHREVREQTBE","","",null,null],[17,"SETCT_AUTHREVRESTBE","","",null,null],[17,"SETCT_AUTHREVRESTBEB","","",null,null],[17,"SETCT_CAPREQTBE","","",null,null],[17,"SETCT_CAPREQTBEX","","",null,null],[17,"SETCT_CAPRESTBE","","",null,null],[17,"SETCT_CAPREVREQTBE","","",null,null],[17,"SETCT_CAPREVREQTBEX","","",null,null],[17,"SETCT_CAPREVRESTBE","","",null,null],[17,"SETCT_CREDREQTBE","","",null,null],[17,"SETCT_CREDREQTBEX","","",null,null],[17,"SETCT_CREDRESTBE","","",null,null],[17,"SETCT_CREDREVREQTBE","","",null,null],[17,"SETCT_CREDREVREQTBEX","","",null,null],[17,"SETCT_CREDREVRESTBE","","",null,null],[17,"SETCT_BATCHADMINREQTBE","","",null,null],[17,"SETCT_BATCHADMINRESTBE","","",null,null],[17,"SETCT_REGFORMREQTBE","","",null,null],[17,"SETCT_CERTREQTBE","","",null,null],[17,"SETCT_CERTREQTBEX","","",null,null],[17,"SETCT_CERTRESTBE","","",null,null],[17,"SETCT_CRLNOTIFICATIONTBS","","",null,null],[17,"SETCT_CRLNOTIFICATIONRESTBS","","",null,null],[17,"SETCT_BCIDISTRIBUTIONTBS","","",null,null],[17,"SETEXT_GENCRYPT","","",null,null],[17,"SETEXT_MIAUTH","","",null,null],[17,"SETEXT_PINSECURE","","",null,null],[17,"SETEXT_PINANY","","",null,null],[17,"SETEXT_TRACK2","","",null,null],[17,"SETEXT_CV","","",null,null],[17,"SET_POLICY_ROOT","","",null,null],[17,"SETCEXT_HASHEDROOT","","",null,null],[17,"SETCEXT_CERTTYPE","","",null,null],[17,"SETCEXT_MERCHDATA","","",null,null],[17,"SETCEXT_CCERTREQUIRED","","",null,null],[17,"SETCEXT_TUNNELING","","",null,null],[17,"SETCEXT_SETEXT","","",null,null],[17,"SETCEXT_SETQUALF","","",null,null],[17,"SETCEXT_PGWYCAPABILITIES","","",null,null],[17,"SETCEXT_TOKENIDENTIFIER","","",null,null],[17,"SETCEXT_TRACK2DATA","","",null,null],[17,"SETCEXT_TOKENTYPE","","",null,null],[17,"SETCEXT_ISSUERCAPABILITIES","","",null,null],[17,"SETATTR_CERT","","",null,null],[17,"SETATTR_PGWYCAP","","",null,null],[17,"SETATTR_TOKENTYPE","","",null,null],[17,"SETATTR_ISSCAP","","",null,null],[17,"SET_ROOTKEYTHUMB","","",null,null],[17,"SET_ADDPOLICY","","",null,null],[17,"SETATTR_TOKEN_EMV","","",null,null],[17,"SETATTR_TOKEN_B0PRIME","","",null,null],[17,"SETATTR_ISSCAP_CVM","","",null,null],[17,"SETATTR_ISSCAP_T2","","",null,null],[17,"SETATTR_ISSCAP_SIG","","",null,null],[17,"SETATTR_GENCRYPTGRM","","",null,null],[17,"SETATTR_T2ENC","","",null,null],[17,"SETATTR_T2CLEARTXT","","",null,null],[17,"SETATTR_TOKICCSIG","","",null,null],[17,"SETATTR_SECDEVSIG","","",null,null],[17,"SET_BRAND_IATA_ATA","","",null,null],[17,"SET_BRAND_DINERS","","",null,null],[17,"SET_BRAND_AMERICANEXPRESS","","",null,null],[17,"SET_BRAND_JCB","","",null,null],[17,"SET_BRAND_VISA","","",null,null],[17,"SET_BRAND_MASTERCARD","","",null,null],[17,"SET_BRAND_NOVUS","","",null,null],[17,"DES_CDMF","","",null,null],[17,"RSAOAEPENCRYPTIONSET","","",null,null],[17,"IPSEC3","","",null,null],[17,"IPSEC4","","",null,null],[17,"WHIRLPOOL","","",null,null],[17,"CRYPTOPRO","","",null,null],[17,"CRYPTOCOM","","",null,null],[17,"ID_GOSTR3411_94_WITH_GOSTR3410_2001","","",null,null],[17,"ID_GOSTR3411_94_WITH_GOSTR3410_94","","",null,null],[17,"ID_GOSTR3411_94","","",null,null],[17,"ID_HMACGOSTR3411_94","","",null,null],[17,"ID_GOSTR3410_2001","","",null,null],[17,"ID_GOSTR3410_94","","",null,null],[17,"ID_GOST28147_89","","",null,null],[17,"GOST89_CNT","","",null,null],[17,"ID_GOST28147_89_MAC","","",null,null],[17,"ID_GOSTR3411_94_PRF","","",null,null],[17,"ID_GOSTR3410_2001DH","","",null,null],[17,"ID_GOSTR3410_94DH","","",null,null],[17,"ID_GOST28147_89_CRYPTOPRO_KEYMESHING","","",null,null],[17,"ID_GOST28147_89_NONE_KEYMESHING","","",null,null],[17,"ID_GOSTR3411_94_TESTPARAMSET","","",null,null],[17,"ID_GOSTR3411_94_CRYPTOPROPARAMSET","","",null,null],[17,"ID_GOST28147_89_TESTPARAMSET","","",null,null],[17,"ID_GOST28147_89_CRYPTOPRO_A_PARAMSET","","",null,null],[17,"ID_GOST28147_89_CRYPTOPRO_B_PARAMSET","","",null,null],[17,"ID_GOST28147_89_CRYPTOPRO_C_PARAMSET","","",null,null],[17,"ID_GOST28147_89_CRYPTOPRO_D_PARAMSET","","",null,null],[17,"ID_GOST28147_89_CRYPTOPRO_OSCAR_1_1_PARAMSET","","",null,null],[17,"ID_GOST28147_89_CRYPTOPRO_OSCAR_1_0_PARAMSET","","",null,null],[17,"ID_GOST28147_89_CRYPTOPRO_RIC_1_PARAMSET","","",null,null],[17,"ID_GOSTR3410_94_TESTPARAMSET","","",null,null],[17,"ID_GOSTR3410_94_CRYPTOPRO_A_PARAMSET","","",null,null],[17,"ID_GOSTR3410_94_CRYPTOPRO_B_PARAMSET","","",null,null],[17,"ID_GOSTR3410_94_CRYPTOPRO_C_PARAMSET","","",null,null],[17,"ID_GOSTR3410_94_CRYPTOPRO_D_PARAMSET","","",null,null],[17,"ID_GOSTR3410_94_CRYPTOPRO_XCHA_PARAMSET","","",null,null],[17,"ID_GOSTR3410_94_CRYPTOPRO_XCHB_PARAMSET","","",null,null],[17,"ID_GOSTR3410_94_CRYPTOPRO_XCHC_PARAMSET","","",null,null],[17,"ID_GOSTR3410_2001_TESTPARAMSET","","",null,null],[17,"ID_GOSTR3410_2001_CRYPTOPRO_A_PARAMSET","","",null,null],[17,"ID_GOSTR3410_2001_CRYPTOPRO_B_PARAMSET","","",null,null],[17,"ID_GOSTR3410_2001_CRYPTOPRO_C_PARAMSET","","",null,null],[17,"ID_GOSTR3410_2001_CRYPTOPRO_XCHA_PARAMSET","","",null,null],[17,"ID_GOSTR3410_2001_CRYPTOPRO_XCHB_PARAMSET","","",null,null],[17,"ID_GOSTR3410_94_A","","",null,null],[17,"ID_GOSTR3410_94_ABIS","","",null,null],[17,"ID_GOSTR3410_94_B","","",null,null],[17,"ID_GOSTR3410_94_BBIS","","",null,null],[17,"ID_GOST28147_89_CC","","",null,null],[17,"ID_GOSTR3410_94_CC","","",null,null],[17,"ID_GOSTR3410_2001_CC","","",null,null],[17,"ID_GOSTR3411_94_WITH_GOSTR3410_94_CC","","",null,null],[17,"ID_GOSTR3411_94_WITH_GOSTR3410_2001_CC","","",null,null],[17,"ID_GOSTR3410_2001_PARAMSET_CC","","",null,null],[17,"CAMELLIA_128_CBC","","",null,null],[17,"CAMELLIA_192_CBC","","",null,null],[17,"CAMELLIA_256_CBC","","",null,null],[17,"ID_CAMELLIA128_WRAP","","",null,null],[17,"ID_CAMELLIA192_WRAP","","",null,null],[17,"ID_CAMELLIA256_WRAP","","",null,null],[17,"CAMELLIA_128_ECB","","",null,null],[17,"CAMELLIA_128_OFB128","","",null,null],[17,"CAMELLIA_128_CFB128","","",null,null],[17,"CAMELLIA_192_ECB","","",null,null],[17,"CAMELLIA_192_OFB128","","",null,null],[17,"CAMELLIA_192_CFB128","","",null,null],[17,"CAMELLIA_256_ECB","","",null,null],[17,"CAMELLIA_256_OFB128","","",null,null],[17,"CAMELLIA_256_CFB128","","",null,null],[17,"CAMELLIA_128_CFB1","","",null,null],[17,"CAMELLIA_192_CFB1","","",null,null],[17,"CAMELLIA_256_CFB1","","",null,null],[17,"CAMELLIA_128_CFB8","","",null,null],[17,"CAMELLIA_192_CFB8","","",null,null],[17,"CAMELLIA_256_CFB8","","",null,null],[17,"KISA","","",null,null],[17,"SEED_ECB","","",null,null],[17,"SEED_CBC","","",null,null],[17,"SEED_CFB128","","",null,null],[17,"SEED_OFB128","","",null,null],[17,"HMAC","","",null,null],[17,"CMAC","","",null,null],[17,"RC4_HMAC_MD5","","",null,null],[17,"AES_128_CBC_HMAC_SHA1","","",null,null],[17,"AES_192_CBC_HMAC_SHA1","","",null,null],[17,"AES_256_CBC_HMAC_SHA1","","",null,null],[11,"fmt","","",41,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",41,{"inputs":[{"name":"self"}],"output":{"name":"nid"}}],[11,"eq","","",41,{"inputs":[{"name":"self"},{"name":"nid"}],"output":{"name":"bool"}}],[11,"ne","","",41,{"inputs":[{"name":"self"},{"name":"nid"}],"output":{"name":"bool"}}],[11,"hash","","",41,null],[11,"from_raw","","",41,{"inputs":[{"name":"c_int"}],"output":{"name":"nid"}}],[11,"as_raw","","",41,{"inputs":[{"name":"self"}],"output":{"name":"c_int"}}],[0,"ocsp","openssl","",null,null],[3,"Flag","openssl::ocsp","",null,null],[3,"OcspResponseStatus","","",null,null],[3,"OcspCertStatus","","",null,null],[3,"OcspRevokedStatus","","",null,null],[3,"Status","","",null,null],[12,"status","","The overall status of the response.",42,null],[12,"reason","","If `status` is `CERT_STATUS_REVOKED`, the reason for the revocation.",42,null],[12,"revocation_time","","If `status` is `CERT_STATUS_REVOKED`, the time at which the certificate was revoked.",42,null],[12,"this_update","","The time that this revocation check was performed.",42,null],[12,"next_update","","The time at which this revocation check expires.",42,null],[3,"OcspBasicResponse","","",null,null],[3,"OcspBasicResponseRef","","",null,null],[3,"OcspCertId","","",null,null],[3,"OcspCertIdRef","","",null,null],[3,"OcspResponse","","",null,null],[3,"OcspResponseRef","","",null,null],[3,"OcspRequest","","",null,null],[3,"OcspRequestRef","","",null,null],[3,"OcspOneReq","","",null,null],[3,"OcspOneReqRef","","",null,null],[17,"FLAG_NO_CERTS","","",null,null],[17,"FLAG_NO_INTERN","","",null,null],[17,"FLAG_NO_CHAIN","","",null,null],[17,"FLAG_NO_VERIFY","","",null,null],[17,"FLAG_NO_EXPLICIT","","",null,null],[17,"FLAG_NO_CA_SIGN","","",null,null],[17,"FLAG_NO_DELEGATED","","",null,null],[17,"FLAG_NO_CHECKS","","",null,null],[17,"FLAG_TRUST_OTHER","","",null,null],[17,"FLAG_RESPID_KEY","","",null,null],[17,"FLAG_NO_TIME","","",null,null],[17,"RESPONSE_STATUS_SUCCESSFUL","","",null,null],[17,"RESPONSE_STATUS_MALFORMED_REQUEST","","",null,null],[17,"RESPONSE_STATUS_INTERNAL_ERROR","","",null,null],[17,"RESPONSE_STATUS_TRY_LATER","","",null,null],[17,"RESPONSE_STATUS_SIG_REQUIRED","","",null,null],[17,"RESPONSE_STATUS_UNAUTHORIZED","","",null,null],[17,"CERT_STATUS_GOOD","","",null,null],[17,"CERT_STATUS_REVOKED","","",null,null],[17,"CERT_STATUS_UNKNOWN","","",null,null],[17,"REVOKED_STATUS_NO_STATUS","","",null,null],[17,"REVOKED_STATUS_UNSPECIFIED","","",null,null],[17,"REVOKED_STATUS_KEY_COMPROMISE","","",null,null],[17,"REVOKED_STATUS_CA_COMPROMISE","","",null,null],[17,"REVOKED_STATUS_AFFILIATION_CHANGED","","",null,null],[17,"REVOKED_STATUS_SUPERSEDED","","",null,null],[17,"REVOKED_STATUS_CESSATION_OF_OPERATION","","",null,null],[17,"REVOKED_STATUS_CERTIFICATE_HOLD","","",null,null],[17,"REVOKED_STATUS_REMOVE_FROM_CRL","","",null,null],[11,"eq","","",43,{"inputs":[{"name":"self"},{"name":"flag"}],"output":{"name":"bool"}}],[11,"ne","","",43,{"inputs":[{"name":"self"},{"name":"flag"}],"output":{"name":"bool"}}],[11,"clone","","",43,{"inputs":[{"name":"self"}],"output":{"name":"flag"}}],[11,"partial_cmp","","",43,{"inputs":[{"name":"self"},{"name":"flag"}],"output":{"name":"option"}}],[11,"lt","","",43,{"inputs":[{"name":"self"},{"name":"flag"}],"output":{"name":"bool"}}],[11,"le","","",43,{"inputs":[{"name":"self"},{"name":"flag"}],"output":{"name":"bool"}}],[11,"gt","","",43,{"inputs":[{"name":"self"},{"name":"flag"}],"output":{"name":"bool"}}],[11,"ge","","",43,{"inputs":[{"name":"self"},{"name":"flag"}],"output":{"name":"bool"}}],[11,"cmp","","",43,{"inputs":[{"name":"self"},{"name":"flag"}],"output":{"name":"ordering"}}],[11,"hash","","",43,null],[11,"fmt","","",43,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",43,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",43,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",43,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",43,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",43,{"inputs":[],"output":{"name":"flag"}}],[11,"all","","Returns the set containing all flags.",43,{"inputs":[],"output":{"name":"flag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",43,{"inputs":[{"name":"self"}],"output":{"name":"c_ulong"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",43,{"inputs":[{"name":"c_ulong"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",43,{"inputs":[{"name":"c_ulong"}],"output":{"name":"flag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",43,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",43,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",43,{"inputs":[{"name":"self"},{"name":"flag"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",43,{"inputs":[{"name":"self"},{"name":"flag"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",43,{"inputs":[{"name":"self"},{"name":"flag"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",43,{"inputs":[{"name":"self"},{"name":"flag"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",43,{"inputs":[{"name":"self"},{"name":"flag"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",43,{"inputs":[{"name":"self"},{"name":"flag"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",43,{"inputs":[{"name":"self"},{"name":"flag"}],"output":{"name":"flag"}}],[11,"bitor_assign","","Adds the set of flags.",43,{"inputs":[{"name":"self"},{"name":"flag"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",43,{"inputs":[{"name":"self"},{"name":"flag"}],"output":{"name":"flag"}}],[11,"bitxor_assign","","Toggles the set of flags.",43,{"inputs":[{"name":"self"},{"name":"flag"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",43,{"inputs":[{"name":"self"},{"name":"flag"}],"output":{"name":"flag"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",43,{"inputs":[{"name":"self"},{"name":"flag"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",43,{"inputs":[{"name":"self"},{"name":"flag"}],"output":{"name":"flag"}}],[11,"sub_assign","","Disables all flags enabled in the set.",43,{"inputs":[{"name":"self"},{"name":"flag"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",43,{"inputs":[{"name":"self"}],"output":{"name":"flag"}}],[11,"extend","","",43,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",43,{"inputs":[{"name":"t"}],"output":{"name":"flag"}}],[11,"clone","","",44,{"inputs":[{"name":"self"}],"output":{"name":"ocspresponsestatus"}}],[11,"fmt","","",44,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",44,{"inputs":[{"name":"self"},{"name":"ocspresponsestatus"}],"output":{"name":"bool"}}],[11,"ne","","",44,{"inputs":[{"name":"self"},{"name":"ocspresponsestatus"}],"output":{"name":"bool"}}],[11,"from_raw","","",44,{"inputs":[{"name":"c_int"}],"output":{"name":"ocspresponsestatus"}}],[11,"as_raw","","",44,{"inputs":[{"name":"self"}],"output":{"name":"c_int"}}],[11,"clone","","",45,{"inputs":[{"name":"self"}],"output":{"name":"ocspcertstatus"}}],[11,"fmt","","",45,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",45,{"inputs":[{"name":"self"},{"name":"ocspcertstatus"}],"output":{"name":"bool"}}],[11,"ne","","",45,{"inputs":[{"name":"self"},{"name":"ocspcertstatus"}],"output":{"name":"bool"}}],[11,"from_raw","","",45,{"inputs":[{"name":"c_int"}],"output":{"name":"ocspcertstatus"}}],[11,"as_raw","","",45,{"inputs":[{"name":"self"}],"output":{"name":"c_int"}}],[11,"clone","","",46,{"inputs":[{"name":"self"}],"output":{"name":"ocsprevokedstatus"}}],[11,"fmt","","",46,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",46,{"inputs":[{"name":"self"},{"name":"ocsprevokedstatus"}],"output":{"name":"bool"}}],[11,"ne","","",46,{"inputs":[{"name":"self"},{"name":"ocsprevokedstatus"}],"output":{"name":"bool"}}],[11,"from_raw","","",46,{"inputs":[{"name":"c_int"}],"output":{"name":"ocsprevokedstatus"}}],[11,"as_raw","","",46,{"inputs":[{"name":"self"}],"output":{"name":"c_int"}}],[11,"check_validity","","Checks validity of the `this_update` and `next_update` fields.",42,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"option"}],"output":{"name":"result"}}],[11,"from_ptr","","",47,null],[11,"as_ptr","","",47,null],[11,"drop","","",47,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",47,{"inputs":[{"name":"self"}],"output":{"name":"ocspbasicresponseref"}}],[11,"deref_mut","","",47,{"inputs":[{"name":"self"}],"output":{"name":"ocspbasicresponseref"}}],[11,"verify","","Verifies the validity of the response.",48,{"inputs":[{"name":"self"},{"name":"stackref"},{"name":"x509storeref"},{"name":"flag"}],"output":{"name":"result"}}],[11,"find_status","","Looks up the status for the specified certificate ID.",48,{"inputs":[{"name":"self"},{"name":"ocspcertidref"}],"output":{"name":"option"}}],[11,"from_ptr","","",49,null],[11,"as_ptr","","",49,null],[11,"drop","","",49,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",49,{"inputs":[{"name":"self"}],"output":{"name":"ocspcertidref"}}],[11,"deref_mut","","",49,{"inputs":[{"name":"self"}],"output":{"name":"ocspcertidref"}}],[11,"from_cert","","Constructs a certificate ID for certificate `subject`.",49,{"inputs":[{"name":"messagedigest"},{"name":"x509ref"},{"name":"x509ref"}],"output":{"name":"result"}}],[11,"from_ptr","","",50,null],[11,"as_ptr","","",50,null],[11,"drop","","",50,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",50,{"inputs":[{"name":"self"}],"output":{"name":"ocspresponseref"}}],[11,"deref_mut","","",50,{"inputs":[{"name":"self"}],"output":{"name":"ocspresponseref"}}],[11,"create","","Creates an OCSP response from the status and optional body.",50,{"inputs":[{"name":"ocspresponsestatus"},{"name":"option"}],"output":{"name":"result"}}],[11,"from_der","","Deserializes a value from DER-formatted data.",50,null],[11,"to_der","","Serializes this value to DER.",51,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"status","","Returns the status of the response.",51,{"inputs":[{"name":"self"}],"output":{"name":"ocspresponsestatus"}}],[11,"basic","","Returns the basic response.",51,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"from_ptr","","",52,null],[11,"as_ptr","","",52,null],[11,"drop","","",52,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",52,{"inputs":[{"name":"self"}],"output":{"name":"ocsprequestref"}}],[11,"deref_mut","","",52,{"inputs":[{"name":"self"}],"output":{"name":"ocsprequestref"}}],[11,"new","","",52,{"inputs":[],"output":{"name":"result"}}],[11,"from_der","","Deserializes a value from DER-formatted data.",52,null],[11,"to_der","","Serializes this value to DER.",53,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"add_id","","",53,{"inputs":[{"name":"self"},{"name":"ocspcertid"}],"output":{"name":"result"}}],[11,"from_ptr","","",54,null],[11,"as_ptr","","",54,null],[11,"drop","","",54,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",54,{"inputs":[{"name":"self"}],"output":{"name":"ocsponereqref"}}],[11,"deref_mut","","",54,{"inputs":[{"name":"self"}],"output":{"name":"ocsponereqref"}}],[0,"pkcs12","openssl","PKCS #12 archives.",null,null],[3,"Pkcs12","openssl::pkcs12","",null,null],[3,"Pkcs12Ref","","",null,null],[3,"ParsedPkcs12","","",null,null],[12,"pkey","","",55,null],[12,"cert","","",55,null],[12,"chain","","",55,null],[3,"Pkcs12Builder","","",null,null],[11,"from_ptr","","",56,null],[11,"as_ptr","","",56,null],[11,"drop","","",56,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",56,{"inputs":[{"name":"self"}],"output":{"name":"pkcs12ref"}}],[11,"deref_mut","","",56,{"inputs":[{"name":"self"}],"output":{"name":"pkcs12ref"}}],[11,"to_der","","Serializes this value to DER.",57,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"parse","","Extracts the contents of the `Pkcs12`.",57,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"from_der","","Deserializes a value from DER-formatted data.",56,null],[11,"builder","","Creates a new builder for a protected pkcs12 certificate.",56,{"inputs":[],"output":{"name":"pkcs12builder"}}],[11,"key_algorithm","","The encryption algorithm that should be used for the key",58,{"inputs":[{"name":"self"},{"name":"nid"}],"output":{"name":"self"}}],[11,"cert_algorithm","","The encryption algorithm that should be used for the cert",58,{"inputs":[{"name":"self"},{"name":"nid"}],"output":{"name":"self"}}],[11,"key_iter","","Key iteration count, default is 2048 as of this writing",58,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[11,"mac_iter","","MAC iteration count, default is the same as key_iter.",58,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[11,"ca","","An additional set of certificates to include in the archive beyond the one provided to `build`.",58,{"inputs":[{"name":"self"},{"name":"stack"}],"output":{"name":"self"}}],[11,"build","","Builds the PKCS #12 object",58,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"},{"name":"pkeyref"},{"name":"x509"}],"output":{"name":"result"}}],[0,"pkcs5","openssl","",null,null],[3,"KeyIvPair","openssl::pkcs5","",null,null],[12,"key","","",59,null],[12,"iv","","",59,null],[5,"bytes_to_key","","Derives a key and an IV from various parameters.",null,null],[5,"pbkdf2_hmac","","Derives a key from a password and salt using the PBKDF2-HMAC algorithm with a digest function.",null,null],[11,"clone","","",59,{"inputs":[{"name":"self"}],"output":{"name":"keyivpair"}}],[11,"eq","","",59,{"inputs":[{"name":"self"},{"name":"keyivpair"}],"output":{"name":"bool"}}],[11,"ne","","",59,{"inputs":[{"name":"self"},{"name":"keyivpair"}],"output":{"name":"bool"}}],[11,"hash","","",59,null],[11,"fmt","","",59,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"pkey","openssl","",null,null],[3,"PKey","openssl::pkey","",null,null],[3,"PKeyRef","","",null,null],[3,"PKeyCtx","","",null,null],[3,"PKeyCtxRef","","",null,null],[11,"from_ptr","","",60,null],[11,"as_ptr","","",60,null],[11,"drop","","",60,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",60,{"inputs":[{"name":"self"}],"output":{"name":"pkeyref"}}],[11,"deref_mut","","",60,{"inputs":[{"name":"self"}],"output":{"name":"pkeyref"}}],[11,"rsa","","Returns a copy of the internal RSA key.",61,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"dsa","","Returns a copy of the internal DSA key.",61,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"dh","","Returns a copy of the internal DH key.",61,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"ec_key","","Returns a copy of the internal elliptic curve key.",61,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"public_key_to_pem","","Serializes a public key to PEM.",61,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"private_key_to_pem","","Serializes the private key to PEM.",61,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"private_key_to_pem_passphrase","","Serializes the private key to PEM, encrypting it with the specified symmetric cipher and passphrase.",61,null],[11,"private_key_to_der","","Serializes the private key to DER.",61,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"public_key_to_der","","Serializes the public key to DER.",61,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"bits","","Returns the size of the key.",61,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"public_eq","","Compares the public component of this key with another.",61,{"inputs":[{"name":"self"},{"name":"pkeyref"}],"output":{"name":"bool"}}],[11,"from_rsa","","Creates a new `PKey` containing an RSA key.",60,{"inputs":[{"name":"rsa"}],"output":{"name":"result"}}],[11,"from_dsa","","Creates a new `PKey` containing a DSA key.",60,{"inputs":[{"name":"dsa"}],"output":{"name":"result"}}],[11,"from_dh","","Creates a new `PKey` containing a Diffie-Hellman key.",60,{"inputs":[{"name":"dh"}],"output":{"name":"result"}}],[11,"from_ec_key","","Creates a new `PKey` containing an elliptic curve key.",60,{"inputs":[{"name":"eckey"}],"output":{"name":"result"}}],[11,"hmac","","Creates a new `PKey` containing an HMAC key.",60,null],[11,"private_key_from_pem","","Deserializes a PEM-formatted private key.",60,null],[11,"private_key_from_pem_passphrase","","Deserializes a PEM-formatted private key, using the supplied password if the key is encrypted.",60,null],[11,"private_key_from_pem_callback","","Deserializes a PEM-formatted private key, using a callback to retrieve a password if the key is encrypted.",60,null],[11,"public_key_from_pem","","Deserializes a public key from PEM-formatted data.",60,null],[11,"public_key_from_der","","Deserializes a public key from DER-formatted data.",60,null],[11,"private_key_from_der","","Deserializes a private key from DER-formatted data.",60,null],[11,"private_key_from_pkcs8_callback","","Deserializes a DER-formatted PKCS#8 private key, using a callback to retrieve the password if the key is encrpyted.",60,null],[11,"private_key_from_pkcs8_passphrase","","Deserializes a DER-formatted PKCS#8 private key, using the supplied password if the key is encrypted.",60,null],[11,"private_key_from_pem_cb","","",60,null],[11,"from_ptr","","",62,null],[11,"as_ptr","","",62,null],[11,"drop","","",62,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",62,{"inputs":[{"name":"self"}],"output":{"name":"pkeyctxref"}}],[11,"deref_mut","","",62,{"inputs":[{"name":"self"}],"output":{"name":"pkeyctxref"}}],[11,"from_pkey","","",62,{"inputs":[{"name":"pkeyref"}],"output":{"name":"result"}}],[11,"set_rsa_padding","","",63,{"inputs":[{"name":"self"},{"name":"padding"}],"output":{"name":"result"}}],[11,"rsa_padding","","",63,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"derive_init","","",63,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"derive_set_peer","","",63,{"inputs":[{"name":"self"},{"name":"pkeyref"}],"output":{"name":"result"}}],[11,"derive","","",63,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[0,"rand","openssl","",null,null],[5,"rand_bytes","openssl::rand","",null,null],[0,"rsa","openssl","",null,null],[3,"Padding","openssl::rsa","Type of encryption padding to use.",null,null],[3,"Rsa","","",null,null],[3,"RsaRef","","",null,null],[17,"NO_PADDING","","",null,null],[17,"PKCS1_PADDING","","",null,null],[17,"PKCS1_OAEP_PADDING","","",null,null],[11,"fmt","","",64,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",64,{"inputs":[{"name":"self"}],"output":{"name":"padding"}}],[11,"eq","","",64,{"inputs":[{"name":"self"},{"name":"padding"}],"output":{"name":"bool"}}],[11,"ne","","",64,{"inputs":[{"name":"self"},{"name":"padding"}],"output":{"name":"bool"}}],[11,"from_raw","","",64,{"inputs":[{"name":"c_int"}],"output":{"name":"padding"}}],[11,"as_raw","","",64,{"inputs":[{"name":"self"}],"output":{"name":"c_int"}}],[11,"from_ptr","","",65,null],[11,"as_ptr","","",65,null],[11,"drop","","",65,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",65,{"inputs":[{"name":"self"}],"output":{"name":"rsaref"}}],[11,"deref_mut","","",65,{"inputs":[{"name":"self"}],"output":{"name":"rsaref"}}],[11,"private_key_to_pem","","Serializes the private key to PEM.",66,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"private_key_to_pem_passphrase","","Serializes the private key to PEM, encrypting it with the specified symmetric cipher and passphrase.",66,null],[11,"public_key_to_pem","","Serializes a public key to PEM.",66,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"private_key_to_der","","Serializes the private key to DER.",66,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"public_key_to_der","","Serializes the public key to DER.",66,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"public_key_to_der_pkcs1","","Serializes the public key to DER-encoded PKCS#1.",66,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"size","","",66,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"private_decrypt","","Decrypts data using the private key, returning the number of decrypted bytes.",66,null],[11,"private_encrypt","","Encrypts data using the private key, returning the number of encrypted bytes.",66,null],[11,"public_decrypt","","Decrypts data using the public key, returning the number of decrypted bytes.",66,null],[11,"public_encrypt","","Encrypts data using the public key, returning the number of encrypted bytes.",66,null],[11,"n","","",66,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"d","","",66,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"e","","",66,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"p","","",66,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"q","","",66,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"from_public_components","","only useful for associating the key material directly with the key, it's safer to use the supplied load and save methods for DER formatted keys.",65,{"inputs":[{"name":"bignum"},{"name":"bignum"}],"output":{"name":"result"}}],[11,"from_private_components","","",65,{"inputs":[{"name":"bignum"},{"name":"bignum"},{"name":"bignum"},{"name":"bignum"},{"name":"bignum"},{"name":"bignum"},{"name":"bignum"},{"name":"bignum"}],"output":{"name":"result"}}],[11,"generate","","Generates a public/private key pair with the specified size.",65,{"inputs":[{"name":"u32"}],"output":{"name":"result"}}],[11,"private_key_from_pem","","Deserializes a PEM-formatted private key.",65,null],[11,"private_key_from_pem_passphrase","","Deserializes a PEM-formatted private key, using the supplied password if the key is encrypted.",65,null],[11,"private_key_from_pem_callback","","Deserializes a PEM-formatted private key, using a callback to retrieve a password if the key is encrypted.",65,null],[11,"private_key_from_der","","Deserializes a private key from DER-formatted data.",65,null],[11,"public_key_from_pem","","Deserializes a public key from PEM-formatted data.",65,null],[11,"public_key_from_der","","Deserializes a public key from DER-formatted data.",65,null],[11,"public_key_from_der_pkcs1","","Deserializes a public key from DER-encoded PKCS#1 data.",65,null],[11,"private_key_from_pem_cb","","",65,null],[11,"fmt","","",65,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"sign","openssl","Message signatures.",null,null],[3,"Signer","openssl::sign","",null,null],[3,"Verifier","","",null,null],[11,"drop","","",67,{"inputs":[{"name":"self"}],"output":null}],[11,"new","","",67,{"inputs":[{"name":"messagedigest"},{"name":"pkeyref"}],"output":{"name":"result"}}],[11,"pkey_ctx","","",67,{"inputs":[{"name":"self"}],"output":{"name":"pkeyctxref"}}],[11,"pkey_ctx_mut","","",67,{"inputs":[{"name":"self"}],"output":{"name":"pkeyctxref"}}],[11,"update","","",67,null],[11,"finish","","",67,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"write","","",67,null],[11,"flush","","",67,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"drop","","",68,{"inputs":[{"name":"self"}],"output":null}],[11,"new","","",68,{"inputs":[{"name":"messagedigest"},{"name":"pkeyref"}],"output":{"name":"result"}}],[11,"pkey_ctx","","",68,{"inputs":[{"name":"self"}],"output":{"name":"pkeyctxref"}}],[11,"pkey_ctx_mut","","",68,{"inputs":[{"name":"self"}],"output":{"name":"pkeyctxref"}}],[11,"update","","",68,null],[11,"finish","","",68,null],[11,"write","","",68,null],[11,"flush","","",68,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[0,"sha","openssl","The SHA family of hashes.",null,null],[3,"Sha1","openssl::sha","An object which calculates a SHA1 hash of some data.",null,null],[3,"Sha224","","An object which calculates a SHA224 hash of some data.",null,null],[3,"Sha256","","An object which calculates a SHA256 hash of some data.",null,null],[3,"Sha384","","An object which calculates a SHA384 hash of some data.",null,null],[3,"Sha512","","An object which calculates a SHA512 hash of some data.",null,null],[5,"sha1","","Computes the SHA1 hash of some data.",null,null],[5,"sha224","","Computes the SHA224 hash of some data.",null,null],[5,"sha256","","Computes the SHA256 hash of some data.",null,null],[5,"sha384","","Computes the SHA384 hash of some data.",null,null],[5,"sha512","","Computes the SHA512 hash of some data.",null,null],[11,"new","","Creates a new hasher.",69,{"inputs":[],"output":{"name":"sha1"}}],[11,"update","","Feeds some data into the hasher.",69,null],[11,"finish","","Returns the hash of the data.",69,null],[11,"new","","Creates a new hasher.",70,{"inputs":[],"output":{"name":"sha224"}}],[11,"update","","Feeds some data into the hasher.",70,null],[11,"finish","","Returns the hash of the data.",70,null],[11,"new","","Creates a new hasher.",71,{"inputs":[],"output":{"name":"sha256"}}],[11,"update","","Feeds some data into the hasher.",71,null],[11,"finish","","Returns the hash of the data.",71,null],[11,"new","","Creates a new hasher.",72,{"inputs":[],"output":{"name":"sha384"}}],[11,"update","","Feeds some data into the hasher.",72,null],[11,"finish","","Returns the hash of the data.",72,null],[11,"new","","Creates a new hasher.",73,{"inputs":[],"output":{"name":"sha512"}}],[11,"update","","Feeds some data into the hasher.",73,null],[11,"finish","","Returns the hash of the data.",73,null],[0,"ssl","openssl","SSL/TLS support.",null,null],[3,"SslConnectorBuilder","openssl::ssl","A builder for `SslConnector`s.",null,null],[3,"SslConnector","","A type which wraps client-side streams in a TLS session.",null,null],[3,"SslAcceptorBuilder","","A builder for `SslAcceptor`s.",null,null],[3,"SslAcceptor","","A type which wraps server-side streams in a TLS session.",null,null],[3,"ConnectConfiguration","","A type which allows for configuration of a client-side TLS session before connection.",null,null],[3,"SslOption","","",null,null],[3,"SslMode","","",null,null],[3,"SslMethod","","",null,null],[3,"SslVerifyMode","","",null,null],[3,"StatusType","","",null,null],[3,"SslContextBuilder","","A builder for `SslContext`s.",null,null],[3,"SslContext","","",null,null],[3,"SslContextRef","","",null,null],[3,"CipherBits","","",null,null],[12,"secret","","The number of secret bits used for the cipher.",74,null],[12,"algorithm","","The number of bits processed by the chosen algorithm.",74,null],[3,"SslCipher","","",null,null],[3,"SslCipherRef","","",null,null],[3,"SslSession","","",null,null],[3,"SslSessionRef","","",null,null],[3,"Ssl","","",null,null],[3,"SslRef","","",null,null],[3,"MidHandshakeSslStream","","An SSL stream midway through the handshake process.",null,null],[3,"SslStream","","A stream wrapper which handles SSL encryption for an underlying stream.",null,null],[4,"Error","","An SSL error.",null,null],[13,"ZeroReturn","","The SSL session has been closed by the other end",75,null],[13,"WantRead","","An attempt to read data from the underlying socket returned `WouldBlock`. Wait for read readiness and reattempt the operation.",75,null],[13,"WantWrite","","An attempt to write data from the underlying socket returned `WouldBlock`. Wait for write readiness and reattempt the operation.",75,null],[13,"WantX509Lookup","","The client certificate callback requested to be called again.",75,null],[13,"Stream","","An error reported by the underlying stream.",75,null],[13,"Ssl","","An error in the OpenSSL library.",75,null],[4,"HandshakeError","","An error or intermediate state after a TLS handshake attempt.",null,null],[13,"SetupFailure","","Setup failed.",76,null],[13,"Failure","","The handshake failed.",76,null],[13,"Interrupted","","The handshake was interrupted midway through. This error will never be returned for blocking streams.",76,null],[4,"SniError","","An error returned from an SNI callback.",null,null],[13,"Fatal","","",77,null],[13,"Warning","","",77,null],[13,"NoAck","","",77,null],[4,"ShutdownResult","","The result of a shutdown request.",null,null],[13,"Sent","","A close notify message has been sent to the peer.",78,null],[13,"Received","","A close notify response message has been received from the peer.",78,null],[11,"fmt","","",75,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",75,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",75,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",75,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"from","","",75,{"inputs":[{"name":"errorstack"}],"output":{"name":"error"}}],[11,"fmt","","",76,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",76,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",76,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",76,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",76,{"inputs":[{"name":"errorstack"}],"output":{"name":"handshakeerror"}}],[11,"new","","Creates a new builder for TLS connections.",79,{"inputs":[{"name":"sslmethod"}],"output":{"name":"result"}}],[11,"builder","","Returns a shared reference to the inner `SslContextBuilder`.",79,{"inputs":[{"name":"self"}],"output":{"name":"sslcontextbuilder"}}],[11,"builder_mut","","Returns a mutable reference to the inner `SslContextBuilder`.",79,{"inputs":[{"name":"self"}],"output":{"name":"sslcontextbuilder"}}],[11,"build","","Consumes the builder, returning a `SslConnector`.",79,{"inputs":[{"name":"self"}],"output":{"name":"sslconnector"}}],[11,"clone","","",80,{"inputs":[{"name":"self"}],"output":{"name":"sslconnector"}}],[11,"connect","","Initiates a client-side TLS session on a stream.",80,{"inputs":[{"name":"self"},{"name":"str"},{"name":"s"}],"output":{"name":"result"}}],[11,"danger_connect_without_providing_domain_for_certificate_verification_and_server_name_indication","","Initiates a client-side TLS session on a stream without performing hostname verification.",80,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"configure","","Returns a structure allowing for configuration of a single TLS session before connection.",80,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"ssl","","Returns a shared reference to the inner `Ssl`.",81,{"inputs":[{"name":"self"}],"output":{"name":"ssl"}}],[11,"ssl_mut","","Returns a mutable reference to the inner `Ssl`.",81,{"inputs":[{"name":"self"}],"output":{"name":"ssl"}}],[11,"connect","","Initiates a client-side TLS session on a stream.",81,{"inputs":[{"name":"self"},{"name":"str"},{"name":"s"}],"output":{"name":"result"}}],[11,"danger_connect_without_providing_domain_for_certificate_verification_and_server_name_indication","","Initiates a client-side TLS session on a stream without performing hostname verification.",81,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"mozilla_intermediate","","Creates a new builder configured to connect to non-legacy clients. This should generally be considered a reasonable default choice.",82,{"inputs":[{"name":"sslmethod"},{"name":"pkeyref"},{"name":"x509ref"},{"name":"i"}],"output":{"name":"result"}}],[11,"mozilla_modern","","Creates a new builder configured to connect to modern clients.",82,{"inputs":[{"name":"sslmethod"},{"name":"pkeyref"},{"name":"x509ref"},{"name":"i"}],"output":{"name":"result"}}],[11,"mozilla_intermediate_raw","","Like `mozilla_intermediate`, but does not load the certificate chain and private key.",82,{"inputs":[{"name":"sslmethod"}],"output":{"name":"result"}}],[11,"mozilla_modern_raw","","Like `mozilla_modern`, but does not load the certificate chain and private key.",82,{"inputs":[{"name":"sslmethod"}],"output":{"name":"result"}}],[11,"builder","","Returns a shared reference to the inner `SslContextBuilder`.",82,{"inputs":[{"name":"self"}],"output":{"name":"sslcontextbuilder"}}],[11,"builder_mut","","Returns a mutable reference to the inner `SslContextBuilder`.",82,{"inputs":[{"name":"self"}],"output":{"name":"sslcontextbuilder"}}],[11,"build","","Consumes the builder, returning a `SslAcceptor`.",82,{"inputs":[{"name":"self"}],"output":{"name":"sslacceptor"}}],[11,"clone","","",83,{"inputs":[{"name":"self"}],"output":{"name":"sslacceptor"}}],[11,"accept","","Initiates a server-side TLS session on a stream.",83,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[17,"SSL_OP_MICROSOFT_SESS_ID_BUG","","",null,null],[17,"SSL_OP_NETSCAPE_CHALLENGE_BUG","","",null,null],[17,"SSL_OP_NETSCAPE_REUSE_CIPHER_CHANGE_BUG","","",null,null],[17,"SSL_OP_MICROSOFT_BIG_SSLV3_BUFFER","","",null,null],[17,"SSL_OP_SSLEAY_080_CLIENT_DH_BUG","","",null,null],[17,"SSL_OP_TLS_D5_BUG","","",null,null],[17,"SSL_OP_TLS_BLOCK_PADDING_BUG","","",null,null],[17,"SSL_OP_DONT_INSERT_EMPTY_FRAGMENTS","","",null,null],[17,"SSL_OP_ALL","","",null,null],[17,"SSL_OP_NO_QUERY_MTU","","",null,null],[17,"SSL_OP_COOKIE_EXCHANGE","","",null,null],[17,"SSL_OP_NO_TICKET","","",null,null],[17,"SSL_OP_CISCO_ANYCONNECT","","",null,null],[17,"SSL_OP_NO_SESSION_RESUMPTION_ON_RENEGOTIATION","","",null,null],[17,"SSL_OP_NO_COMPRESSION","","",null,null],[17,"SSL_OP_ALLOW_UNSAFE_LEGACY_RENEGOTIATION","","",null,null],[17,"SSL_OP_SINGLE_ECDH_USE","","",null,null],[17,"SSL_OP_SINGLE_DH_USE","","",null,null],[17,"SSL_OP_CIPHER_SERVER_PREFERENCE","","",null,null],[17,"SSL_OP_TLS_ROLLBACK_BUG","","",null,null],[17,"SSL_OP_NO_SSLV2","","",null,null],[17,"SSL_OP_NO_SSLV3","","",null,null],[17,"SSL_OP_NO_TLSV1","","",null,null],[17,"SSL_OP_NO_TLSV1_2","","",null,null],[17,"SSL_OP_NO_TLSV1_1","","",null,null],[17,"SSL_MODE_ENABLE_PARTIAL_WRITE","","",null,null],[17,"SSL_MODE_ACCEPT_MOVING_WRITE_BUFFER","","",null,null],[17,"SSL_MODE_AUTO_RETRY","","",null,null],[17,"SSL_MODE_NO_AUTO_CHAIN","","",null,null],[17,"SSL_MODE_RELEASE_BUFFERS","","",null,null],[17,"SSL_MODE_SEND_CLIENTHELLO_TIME","","",null,null],[17,"SSL_MODE_SEND_SERVERHELLO_TIME","","",null,null],[17,"SSL_MODE_SEND_FALLBACK_SCSV","","",null,null],[17,"SSL_VERIFY_PEER","","Verify that the server's certificate is trusted",null,null],[17,"SSL_VERIFY_NONE","","Do not verify the server's certificate",null,null],[17,"SSL_VERIFY_FAIL_IF_NO_PEER_CERT","","Terminate handshake if client did not return a certificate. Use together with SSL_VERIFY_PEER.",null,null],[17,"STATUS_TYPE_OCSP","","An OSCP status.",null,null],[11,"eq","","",84,{"inputs":[{"name":"self"},{"name":"ssloption"}],"output":{"name":"bool"}}],[11,"ne","","",84,{"inputs":[{"name":"self"},{"name":"ssloption"}],"output":{"name":"bool"}}],[11,"clone","","",84,{"inputs":[{"name":"self"}],"output":{"name":"ssloption"}}],[11,"partial_cmp","","",84,{"inputs":[{"name":"self"},{"name":"ssloption"}],"output":{"name":"option"}}],[11,"lt","","",84,{"inputs":[{"name":"self"},{"name":"ssloption"}],"output":{"name":"bool"}}],[11,"le","","",84,{"inputs":[{"name":"self"},{"name":"ssloption"}],"output":{"name":"bool"}}],[11,"gt","","",84,{"inputs":[{"name":"self"},{"name":"ssloption"}],"output":{"name":"bool"}}],[11,"ge","","",84,{"inputs":[{"name":"self"},{"name":"ssloption"}],"output":{"name":"bool"}}],[11,"cmp","","",84,{"inputs":[{"name":"self"},{"name":"ssloption"}],"output":{"name":"ordering"}}],[11,"hash","","",84,null],[11,"fmt","","",84,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",84,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",84,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",84,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",84,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",84,{"inputs":[],"output":{"name":"ssloption"}}],[11,"all","","Returns the set containing all flags.",84,{"inputs":[],"output":{"name":"ssloption"}}],[11,"bits","","Returns the raw value of the flags currently stored.",84,{"inputs":[{"name":"self"}],"output":{"name":"c_ulong"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",84,{"inputs":[{"name":"c_ulong"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",84,{"inputs":[{"name":"c_ulong"}],"output":{"name":"ssloption"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",84,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",84,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",84,{"inputs":[{"name":"self"},{"name":"ssloption"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",84,{"inputs":[{"name":"self"},{"name":"ssloption"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",84,{"inputs":[{"name":"self"},{"name":"ssloption"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",84,{"inputs":[{"name":"self"},{"name":"ssloption"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",84,{"inputs":[{"name":"self"},{"name":"ssloption"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",84,{"inputs":[{"name":"self"},{"name":"ssloption"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",84,{"inputs":[{"name":"self"},{"name":"ssloption"}],"output":{"name":"ssloption"}}],[11,"bitor_assign","","Adds the set of flags.",84,{"inputs":[{"name":"self"},{"name":"ssloption"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",84,{"inputs":[{"name":"self"},{"name":"ssloption"}],"output":{"name":"ssloption"}}],[11,"bitxor_assign","","Toggles the set of flags.",84,{"inputs":[{"name":"self"},{"name":"ssloption"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",84,{"inputs":[{"name":"self"},{"name":"ssloption"}],"output":{"name":"ssloption"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",84,{"inputs":[{"name":"self"},{"name":"ssloption"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",84,{"inputs":[{"name":"self"},{"name":"ssloption"}],"output":{"name":"ssloption"}}],[11,"sub_assign","","Disables all flags enabled in the set.",84,{"inputs":[{"name":"self"},{"name":"ssloption"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",84,{"inputs":[{"name":"self"}],"output":{"name":"ssloption"}}],[11,"extend","","",84,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",84,{"inputs":[{"name":"t"}],"output":{"name":"ssloption"}}],[11,"eq","","",85,{"inputs":[{"name":"self"},{"name":"sslmode"}],"output":{"name":"bool"}}],[11,"ne","","",85,{"inputs":[{"name":"self"},{"name":"sslmode"}],"output":{"name":"bool"}}],[11,"clone","","",85,{"inputs":[{"name":"self"}],"output":{"name":"sslmode"}}],[11,"partial_cmp","","",85,{"inputs":[{"name":"self"},{"name":"sslmode"}],"output":{"name":"option"}}],[11,"lt","","",85,{"inputs":[{"name":"self"},{"name":"sslmode"}],"output":{"name":"bool"}}],[11,"le","","",85,{"inputs":[{"name":"self"},{"name":"sslmode"}],"output":{"name":"bool"}}],[11,"gt","","",85,{"inputs":[{"name":"self"},{"name":"sslmode"}],"output":{"name":"bool"}}],[11,"ge","","",85,{"inputs":[{"name":"self"},{"name":"sslmode"}],"output":{"name":"bool"}}],[11,"cmp","","",85,{"inputs":[{"name":"self"},{"name":"sslmode"}],"output":{"name":"ordering"}}],[11,"hash","","",85,null],[11,"fmt","","",85,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",85,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",85,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",85,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",85,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",85,{"inputs":[],"output":{"name":"sslmode"}}],[11,"all","","Returns the set containing all flags.",85,{"inputs":[],"output":{"name":"sslmode"}}],[11,"bits","","Returns the raw value of the flags currently stored.",85,{"inputs":[{"name":"self"}],"output":{"name":"c_long"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",85,{"inputs":[{"name":"c_long"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",85,{"inputs":[{"name":"c_long"}],"output":{"name":"sslmode"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",85,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",85,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",85,{"inputs":[{"name":"self"},{"name":"sslmode"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",85,{"inputs":[{"name":"self"},{"name":"sslmode"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",85,{"inputs":[{"name":"self"},{"name":"sslmode"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",85,{"inputs":[{"name":"self"},{"name":"sslmode"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",85,{"inputs":[{"name":"self"},{"name":"sslmode"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",85,{"inputs":[{"name":"self"},{"name":"sslmode"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",85,{"inputs":[{"name":"self"},{"name":"sslmode"}],"output":{"name":"sslmode"}}],[11,"bitor_assign","","Adds the set of flags.",85,{"inputs":[{"name":"self"},{"name":"sslmode"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",85,{"inputs":[{"name":"self"},{"name":"sslmode"}],"output":{"name":"sslmode"}}],[11,"bitxor_assign","","Toggles the set of flags.",85,{"inputs":[{"name":"self"},{"name":"sslmode"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",85,{"inputs":[{"name":"self"},{"name":"sslmode"}],"output":{"name":"sslmode"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",85,{"inputs":[{"name":"self"},{"name":"sslmode"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",85,{"inputs":[{"name":"self"},{"name":"sslmode"}],"output":{"name":"sslmode"}}],[11,"sub_assign","","Disables all flags enabled in the set.",85,{"inputs":[{"name":"self"},{"name":"sslmode"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",85,{"inputs":[{"name":"self"}],"output":{"name":"sslmode"}}],[11,"extend","","",85,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",85,{"inputs":[{"name":"t"}],"output":{"name":"sslmode"}}],[11,"clone","","",86,{"inputs":[{"name":"self"}],"output":{"name":"sslmethod"}}],[11,"tls","","Support all versions of the TLS protocol.",86,{"inputs":[],"output":{"name":"sslmethod"}}],[11,"dtls","","Support all versions of the DTLS protocol.",86,{"inputs":[],"output":{"name":"sslmethod"}}],[11,"from_ptr","","",86,null],[11,"as_ptr","","",86,null],[11,"eq","","",87,{"inputs":[{"name":"self"},{"name":"sslverifymode"}],"output":{"name":"bool"}}],[11,"ne","","",87,{"inputs":[{"name":"self"},{"name":"sslverifymode"}],"output":{"name":"bool"}}],[11,"clone","","",87,{"inputs":[{"name":"self"}],"output":{"name":"sslverifymode"}}],[11,"partial_cmp","","",87,{"inputs":[{"name":"self"},{"name":"sslverifymode"}],"output":{"name":"option"}}],[11,"lt","","",87,{"inputs":[{"name":"self"},{"name":"sslverifymode"}],"output":{"name":"bool"}}],[11,"le","","",87,{"inputs":[{"name":"self"},{"name":"sslverifymode"}],"output":{"name":"bool"}}],[11,"gt","","",87,{"inputs":[{"name":"self"},{"name":"sslverifymode"}],"output":{"name":"bool"}}],[11,"ge","","",87,{"inputs":[{"name":"self"},{"name":"sslverifymode"}],"output":{"name":"bool"}}],[11,"cmp","","",87,{"inputs":[{"name":"self"},{"name":"sslverifymode"}],"output":{"name":"ordering"}}],[11,"hash","","",87,null],[11,"fmt","","",87,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",87,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",87,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",87,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",87,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",87,{"inputs":[],"output":{"name":"sslverifymode"}}],[11,"all","","Returns the set containing all flags.",87,{"inputs":[],"output":{"name":"sslverifymode"}}],[11,"bits","","Returns the raw value of the flags currently stored.",87,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",87,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",87,{"inputs":[{"name":"i32"}],"output":{"name":"sslverifymode"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",87,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",87,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",87,{"inputs":[{"name":"self"},{"name":"sslverifymode"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",87,{"inputs":[{"name":"self"},{"name":"sslverifymode"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",87,{"inputs":[{"name":"self"},{"name":"sslverifymode"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",87,{"inputs":[{"name":"self"},{"name":"sslverifymode"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",87,{"inputs":[{"name":"self"},{"name":"sslverifymode"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",87,{"inputs":[{"name":"self"},{"name":"sslverifymode"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",87,{"inputs":[{"name":"self"},{"name":"sslverifymode"}],"output":{"name":"sslverifymode"}}],[11,"bitor_assign","","Adds the set of flags.",87,{"inputs":[{"name":"self"},{"name":"sslverifymode"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",87,{"inputs":[{"name":"self"},{"name":"sslverifymode"}],"output":{"name":"sslverifymode"}}],[11,"bitxor_assign","","Toggles the set of flags.",87,{"inputs":[{"name":"self"},{"name":"sslverifymode"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",87,{"inputs":[{"name":"self"},{"name":"sslverifymode"}],"output":{"name":"sslverifymode"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",87,{"inputs":[{"name":"self"},{"name":"sslverifymode"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",87,{"inputs":[{"name":"self"},{"name":"sslverifymode"}],"output":{"name":"sslverifymode"}}],[11,"sub_assign","","Disables all flags enabled in the set.",87,{"inputs":[{"name":"self"},{"name":"sslverifymode"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",87,{"inputs":[{"name":"self"}],"output":{"name":"sslverifymode"}}],[11,"extend","","",87,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",87,{"inputs":[{"name":"t"}],"output":{"name":"sslverifymode"}}],[11,"clone","","",88,{"inputs":[{"name":"self"}],"output":{"name":"statustype"}}],[11,"from_raw","","",88,{"inputs":[{"name":"c_int"}],"output":{"name":"statustype"}}],[11,"as_raw","","",88,{"inputs":[{"name":"self"}],"output":{"name":"c_int"}}],[11,"drop","","",89,{"inputs":[{"name":"self"}],"output":null}],[11,"new","","",89,{"inputs":[{"name":"sslmethod"}],"output":{"name":"result"}}],[11,"from_ptr","","",89,null],[11,"as_ptr","","",89,null],[11,"set_verify","","Configures the certificate verification method for new connections.",89,{"inputs":[{"name":"self"},{"name":"sslverifymode"}],"output":null}],[11,"set_verify_callback","","Configures the certificate verification method for new connections and registers a verification callback.",89,{"inputs":[{"name":"self"},{"name":"sslverifymode"},{"name":"f"}],"output":null}],[11,"set_servername_callback","","Configures the server name indication (SNI) callback for new connections",89,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"set_verify_depth","","Sets verification depth",89,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"set_read_ahead","","",89,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"set_mode","","",89,{"inputs":[{"name":"self"},{"name":"sslmode"}],"output":{"name":"sslmode"}}],[11,"set_tmp_dh","","",89,{"inputs":[{"name":"self"},{"name":"dhref"}],"output":{"name":"result"}}],[11,"set_tmp_dh_callback","","",89,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"set_tmp_ecdh","","",89,{"inputs":[{"name":"self"},{"name":"eckeyref"}],"output":{"name":"result"}}],[11,"set_default_verify_paths","","Use the default locations of trusted certificates for verification.",89,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"set_ca_file","","Specifies the file that contains trusted CA certificates.",89,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"result"}}],[11,"set_client_ca_list","","Sets the list of CAs sent to the client.",89,{"inputs":[{"name":"self"},{"name":"stack"}],"output":null}],[11,"set_session_id_context","","Set the context identifier for sessions",89,null],[11,"set_certificate_file","","Loads a certificate from a file.",89,{"inputs":[{"name":"self"},{"name":"p"},{"name":"x509filetype"}],"output":{"name":"result"}}],[11,"set_certificate_chain_file","","Loads a certificate chain from a file.",89,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"result"}}],[11,"set_certificate","","Sets the certificate.",89,{"inputs":[{"name":"self"},{"name":"x509ref"}],"output":{"name":"result"}}],[11,"add_extra_chain_cert","","Appends a certificate to the certificate chain.",89,{"inputs":[{"name":"self"},{"name":"x509"}],"output":{"name":"result"}}],[11,"set_private_key_file","","Loads the private key from a file.",89,{"inputs":[{"name":"self"},{"name":"p"},{"name":"x509filetype"}],"output":{"name":"result"}}],[11,"set_private_key","","Sets the private key.",89,{"inputs":[{"name":"self"},{"name":"pkeyref"}],"output":{"name":"result"}}],[11,"set_cipher_list","","Sets the cipher configuration.",89,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"set_options","","",89,{"inputs":[{"name":"self"},{"name":"ssloption"}],"output":{"name":"ssloption"}}],[11,"options","","",89,{"inputs":[{"name":"self"}],"output":{"name":"ssloption"}}],[11,"clear_options","","",89,{"inputs":[{"name":"self"},{"name":"ssloption"}],"output":{"name":"ssloption"}}],[11,"set_npn_protocols","","Set the protocols to be used during Next Protocol Negotiation (the protocols supported by the application).",89,null],[11,"check_private_key","","Checks consistency between the private key and certificate.",89,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"cert_store","","Returns a shared reference to the context's certificate store.",89,{"inputs":[{"name":"self"}],"output":{"name":"x509storebuilderref"}}],[11,"cert_store_mut","","Returns a mutable reference to the context's certificate store.",89,{"inputs":[{"name":"self"}],"output":{"name":"x509storebuilderref"}}],[11,"set_status_callback","","Sets the callback dealing with OCSP stapling.",89,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"set_psk_callback","","Sets the callback for providing an identity and pre-shared key for a TLS-PSK client.",89,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"set_ex_data","","Sets the extra data at the specified index.",89,{"inputs":[{"name":"self"},{"name":"index"},{"name":"t"}],"output":null}],[11,"build","","",89,{"inputs":[{"name":"self"}],"output":{"name":"sslcontext"}}],[11,"from_ptr","","",90,null],[11,"as_ptr","","",90,null],[11,"drop","","",90,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",90,{"inputs":[{"name":"self"}],"output":{"name":"sslcontextref"}}],[11,"deref_mut","","",90,{"inputs":[{"name":"self"}],"output":{"name":"sslcontextref"}}],[11,"clone","","",90,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",90,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"builder","","",90,{"inputs":[{"name":"sslmethod"}],"output":{"name":"result"}}],[11,"new_ex_index","","Returns a new extra data index.",90,{"inputs":[],"output":{"name":"result"}}],[11,"cert_store","","Returns the certificate store used for verification.",91,{"inputs":[{"name":"self"}],"output":{"name":"x509storeref"}}],[11,"extra_chain_certs","","",91,{"inputs":[{"name":"self"}],"output":{"name":"stackref"}}],[11,"ex_data","","Returns a reference to the extra data at the specified index.",91,{"inputs":[{"name":"self"},{"name":"index"}],"output":{"name":"option"}}],[11,"from_ptr","","",92,null],[11,"as_ptr","","",92,null],[11,"deref","","",92,{"inputs":[{"name":"self"}],"output":{"name":"sslcipherref"}}],[11,"deref_mut","","",92,{"inputs":[{"name":"self"}],"output":{"name":"sslcipherref"}}],[11,"name","","Returns the name of cipher.",93,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"version","","Returns the SSL/TLS protocol version that first defined the cipher.",93,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"bits","","Returns the number of bits used for the cipher.",93,{"inputs":[{"name":"self"}],"output":{"name":"cipherbits"}}],[11,"description","","Returns a textual description of the cipher used",93,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"from_ptr","","",94,null],[11,"as_ptr","","",94,null],[11,"drop","","",94,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",94,{"inputs":[{"name":"self"}],"output":{"name":"sslsessionref"}}],[11,"deref_mut","","",94,{"inputs":[{"name":"self"}],"output":{"name":"sslsessionref"}}],[11,"clone","","",94,{"inputs":[{"name":"self"}],"output":{"name":"sslsession"}}],[11,"borrow","","",94,{"inputs":[{"name":"self"}],"output":{"name":"sslsessionref"}}],[11,"to_owned","","",95,{"inputs":[{"name":"self"}],"output":{"name":"sslsession"}}],[11,"id","","Returns the SSL session ID.",95,null],[11,"master_key_len","","Returns the length of the master key.",95,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"master_key","","Copies the master key into the provided buffer.",95,null],[11,"from_ptr","","",96,null],[11,"as_ptr","","",96,null],[11,"drop","","",96,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",96,{"inputs":[{"name":"self"}],"output":{"name":"sslref"}}],[11,"deref_mut","","",96,{"inputs":[{"name":"self"}],"output":{"name":"sslref"}}],[11,"new_ex_index","","Returns a new extra data index.",96,{"inputs":[],"output":{"name":"result"}}],[11,"fmt","","",97,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"set_verify","","Sets the verification mode to be used during the handshake process.",97,{"inputs":[{"name":"self"},{"name":"sslverifymode"}],"output":null}],[11,"set_verify_callback","","Sets the certificate verification callback to be used during the handshake process.",97,{"inputs":[{"name":"self"},{"name":"sslverifymode"},{"name":"f"}],"output":null}],[11,"set_tmp_dh","","",97,{"inputs":[{"name":"self"},{"name":"dhref"}],"output":{"name":"result"}}],[11,"set_tmp_dh_callback","","",97,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"set_tmp_ecdh","","",97,{"inputs":[{"name":"self"},{"name":"eckeyref"}],"output":{"name":"result"}}],[11,"current_cipher","","",97,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"state_string","","",97,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"state_string_long","","",97,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"set_hostname","","Sets the host name to be used with SNI (Server Name Indication).",97,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"peer_certificate","","Returns the certificate of the peer, if present.",97,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"peer_cert_chain","","Returns the certificate chain of the peer, if present.",97,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"certificate","","Returns the certificate associated with this `Ssl`, if present.",97,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"private_key","","Returns the private key associated with this `Ssl`, if present.",97,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"version","","Returns the name of the protocol used for the connection, e.g. \"TLSv1.2\", \"SSLv3\", etc.",97,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"selected_npn_protocol","","Returns the protocol selected by performing Next Protocol Negotiation, if any.",97,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"pending","","Returns the number of bytes remaining in the currently processed TLS record.",97,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"compression","","Returns the compression currently in use.",97,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"servername","","Returns the server's name for the current connection",97,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"set_ssl_context","","Changes the context corresponding to the current connection.",97,{"inputs":[{"name":"self"},{"name":"sslcontextref"}],"output":{"name":"result"}}],[11,"ssl_context","","Returns the context corresponding to the current connection",97,{"inputs":[{"name":"self"}],"output":{"name":"sslcontextref"}}],[11,"verify_result","","Returns the result of X509 certificate verification.",97,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"session","","Returns the SSL session.",97,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"set_session","","Sets the session to be used.",97,{"inputs":[{"name":"self"},{"name":"sslsessionref"}],"output":{"name":"result"}}],[11,"session_reused","","Determines if the session provided to `set_session` was successfully reused.",97,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_status_type","","Sets the status response a client wishes the server to reply with.",97,{"inputs":[{"name":"self"},{"name":"statustype"}],"output":{"name":"result"}}],[11,"ocsp_status","","Returns the server's OCSP response, if present.",97,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"set_ocsp_status","","Sets the OCSP response to be returned to the client.",97,null],[11,"is_server","","Determines if this `Ssl` is configured for server-side or client-side use.",97,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_ex_data","","Sets the extra data at the specified index.",97,{"inputs":[{"name":"self"},{"name":"index"},{"name":"t"}],"output":null}],[11,"ex_data","","Returns a reference to the extra data at the specified index.",97,{"inputs":[{"name":"self"},{"name":"index"}],"output":{"name":"option"}}],[11,"fmt","","",96,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",96,{"inputs":[{"name":"sslcontext"}],"output":{"name":"result"}}],[11,"connect","","Creates an SSL/TLS client operating over the provided stream.",96,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"accept","","Creates an SSL/TLS server operating over the provided stream.",96,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"fmt","","",98,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_ref","","Returns a shared reference to the inner stream.",98,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Returns a mutable reference to the inner stream.",98,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"ssl","","Returns a shared reference to the `Ssl` of the stream.",98,{"inputs":[{"name":"self"}],"output":{"name":"sslref"}}],[11,"error","","Returns the underlying error which interrupted this handshake.",98,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"into_error","","Consumes `self`, returning its error.",98,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"handshake","","Restarts the handshake process.",98,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","","",99,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"ssl_read","","Like `read`, but returns an `ssl::Error` rather than an `io::Error`.",99,null],[11,"ssl_write","","Like `write`, but returns an `ssl::Error` rather than an `io::Error`.",99,null],[11,"shutdown","","Shuts down the session.",99,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"get_ref","","Returns a reference to the underlying stream.",99,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Returns a mutable reference to the underlying stream.",99,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"ssl","","Returns the OpenSSL `Ssl` object associated with this stream.",99,{"inputs":[{"name":"self"}],"output":{"name":"sslref"}}],[11,"read","","",99,null],[11,"write","","",99,null],[11,"flush","","",99,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"clone","","",78,{"inputs":[{"name":"self"}],"output":{"name":"shutdownresult"}}],[11,"fmt","","",78,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",78,{"inputs":[{"name":"self"},{"name":"shutdownresult"}],"output":{"name":"bool"}}],[0,"stack","openssl","",null,null],[3,"Stack","openssl::stack","An owned stack of `T`.",null,null],[3,"IntoIter","","",null,null],[3,"StackRef","","",null,null],[3,"Iter","","An iterator over the stack's contents.",null,null],[3,"IterMut","","A mutable iterator over the stack's contents.",null,null],[8,"Stackable","","Trait implemented by types which can be placed in a stack.",null,null],[16,"StackType","","The C stack type for this element.",100,null],[11,"new","","",101,{"inputs":[],"output":{"name":"result"}}],[11,"drop","","",101,{"inputs":[{"name":"self"}],"output":null}],[11,"into_iter","","",101,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"as_ref","","",101,{"inputs":[{"name":"self"}],"output":{"name":"stackref"}}],[11,"borrow","","",101,{"inputs":[{"name":"self"}],"output":{"name":"stackref"}}],[11,"from_ptr","","",101,null],[11,"as_ptr","","",101,null],[11,"deref","","",101,{"inputs":[{"name":"self"}],"output":{"name":"stackref"}}],[11,"deref_mut","","",101,{"inputs":[{"name":"self"}],"output":{"name":"stackref"}}],[11,"drop","","",102,{"inputs":[{"name":"self"}],"output":null}],[11,"next","","",102,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",102,null],[11,"len","","Returns the number of items in the stack",103,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"iter","","",103,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"iter_mut","","",103,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"get","","Returns a reference to the element at the given index in the stack or `None` if the index is out of bounds",103,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"get_mut","","Returns a mutable reference to the element at the given index in the stack or `None` if the index is out of bounds",103,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"push","","Pushes a value onto the top of the stack.",103,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"pop","","Removes the last element from the stack and returns it.",103,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"index","","",103,null],[11,"index_mut","","",103,null],[11,"next","","",104,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",104,null],[11,"next","","",105,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",105,null],[0,"string","openssl","",null,null],[3,"OpensslString","openssl::string","",null,null],[3,"OpensslStringRef","","",null,null],[11,"from_ptr","","",106,null],[11,"as_ptr","","",106,null],[11,"drop","","",106,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",106,{"inputs":[{"name":"self"}],"output":{"name":"opensslstringref"}}],[11,"deref_mut","","",106,{"inputs":[{"name":"self"}],"output":{"name":"opensslstringref"}}],[11,"from_raw_parts","","",106,null],[11,"from_null_terminated","","",106,null],[11,"fmt","","",106,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",106,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",107,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",107,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",107,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"symm","openssl","",null,null],[3,"Cipher","openssl::symm","",null,null],[3,"Crypter","","Represents a symmetric cipher context.",null,null],[4,"Mode","","",null,null],[13,"Encrypt","","",108,null],[13,"Decrypt","","",108,null],[5,"encrypt","","Encrypts data, using the specified crypter type in encrypt mode with the specified key and iv; returns the resulting (encrypted) data.",null,null],[5,"decrypt","","Decrypts data, using the specified crypter type in decrypt mode with the specified key and iv; returns the resulting (decrypted) data.",null,null],[5,"encrypt_aead","","Like `encrypt`, but for AEAD ciphers such as AES GCM.",null,null],[5,"decrypt_aead","","Like `decrypt`, but for AEAD ciphers such as AES GCM.",null,null],[11,"clone","","",108,{"inputs":[{"name":"self"}],"output":{"name":"mode"}}],[11,"clone","","",109,{"inputs":[{"name":"self"}],"output":{"name":"cipher"}}],[11,"aes_128_ecb","","",109,{"inputs":[],"output":{"name":"cipher"}}],[11,"aes_128_cbc","","",109,{"inputs":[],"output":{"name":"cipher"}}],[11,"aes_128_xts","","",109,{"inputs":[],"output":{"name":"cipher"}}],[11,"aes_128_ctr","","",109,{"inputs":[],"output":{"name":"cipher"}}],[11,"aes_128_cfb1","","",109,{"inputs":[],"output":{"name":"cipher"}}],[11,"aes_128_cfb128","","",109,{"inputs":[],"output":{"name":"cipher"}}],[11,"aes_128_cfb8","","",109,{"inputs":[],"output":{"name":"cipher"}}],[11,"aes_128_gcm","","",109,{"inputs":[],"output":{"name":"cipher"}}],[11,"aes_256_ecb","","",109,{"inputs":[],"output":{"name":"cipher"}}],[11,"aes_256_cbc","","",109,{"inputs":[],"output":{"name":"cipher"}}],[11,"aes_256_xts","","",109,{"inputs":[],"output":{"name":"cipher"}}],[11,"aes_256_ctr","","",109,{"inputs":[],"output":{"name":"cipher"}}],[11,"aes_256_cfb1","","",109,{"inputs":[],"output":{"name":"cipher"}}],[11,"aes_256_cfb128","","",109,{"inputs":[],"output":{"name":"cipher"}}],[11,"aes_256_cfb8","","",109,{"inputs":[],"output":{"name":"cipher"}}],[11,"aes_256_gcm","","",109,{"inputs":[],"output":{"name":"cipher"}}],[11,"bf_cbc","","",109,{"inputs":[],"output":{"name":"cipher"}}],[11,"bf_ecb","","",109,{"inputs":[],"output":{"name":"cipher"}}],[11,"bf_cfb64","","",109,{"inputs":[],"output":{"name":"cipher"}}],[11,"bf_ofb","","",109,{"inputs":[],"output":{"name":"cipher"}}],[11,"des_cbc","","",109,{"inputs":[],"output":{"name":"cipher"}}],[11,"des_ecb","","",109,{"inputs":[],"output":{"name":"cipher"}}],[11,"rc4","","",109,{"inputs":[],"output":{"name":"cipher"}}],[11,"from_ptr","","",109,null],[11,"as_ptr","","",109,null],[11,"key_len","","Returns the length of keys used with this cipher.",109,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"iv_len","","Returns the length of the IV used with this cipher, or `None` if the cipher does not use an IV.",109,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"block_size","","Returns the block size of the cipher.",109,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"new","","Creates a new `Crypter`.",110,null],[11,"pad","","Enables or disables padding.",110,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"set_tag","","Sets the tag used to authenticate ciphertext in AEAD ciphers such as AES GCM.",110,null],[11,"aad_update","","Feeds Additional Authenticated Data (AAD) through the cipher.",110,null],[11,"update","","Feeds data from `input` through the cipher, writing encrypted/decrypted bytes into `output`.",110,null],[11,"finalize","","Finishes the encryption/decryption process, writing any remaining data to `output`.",110,null],[11,"get_tag","","Retrieves the authentication tag used to authenticate ciphertext in AEAD ciphers such as AES GCM.",110,null],[11,"drop","","",110,{"inputs":[{"name":"self"}],"output":null}],[0,"types","openssl","",null,null],[8,"OpenSslType","openssl::types","A type implemented by wrappers over foreign types.",null,null],[16,"CType","","The raw C type.",111,null],[16,"Ref","","The type representing a reference to this type.",111,null],[10,"from_ptr","","Constructs an instance of this type from its raw type.",111,null],[10,"as_ptr","","Returns a raw pointer to the wrapped value.",111,null],[8,"OpenSslTypeRef","","A trait implemented by types which reference borrowed foreign types.",null,null],[16,"CType","","The raw C type.",112,null],[11,"from_ptr","","Constructs a shared instance of this type from its raw type.",112,null],[11,"from_ptr_mut","","Constructs a mutable reference of this type from its raw type.",112,null],[11,"as_ptr","","Returns a raw pointer to the wrapped value.",112,null],[0,"version","openssl","",null,null],[5,"number","openssl::version","OPENSSL_VERSION_NUMBER is a numeric release version identifier:",null,{"inputs":[],"output":{"name":"i64"}}],[5,"version","","The text variant of the version number and the release date. For example, \"OpenSSL 0.9.5a 1 Apr 2000\".",null,{"inputs":[],"output":{"name":"str"}}],[5,"c_flags","","The compiler flags set for the compilation process in the form \"compiler: ...\" if available or \"compiler: information not available\" otherwise.",null,{"inputs":[],"output":{"name":"str"}}],[5,"built_on","","The date of the build process in the form \"built on: ...\" if available or \"built on: date not available\" otherwise.",null,{"inputs":[],"output":{"name":"str"}}],[5,"platform","","The \"Configure\" target of the library build in the form \"platform: ...\" if available or \"platform: information not available\" otherwise.",null,{"inputs":[],"output":{"name":"str"}}],[5,"dir","","The \"OPENSSLDIR\" setting of the library build in the form \"OPENSSLDIR: \"...\"\" if available or \"OPENSSLDIR: N/A\" otherwise.",null,{"inputs":[],"output":{"name":"str"}}],[0,"x509","openssl","",null,null],[3,"X509FileType","openssl::x509","",null,null],[3,"X509StoreContext","","",null,null],[3,"X509StoreContextRef","","",null,null],[3,"X509Generator","","",null,null],[3,"X509Builder","","A builder type which can create `X509` objects.",null,null],[3,"X509","","",null,null],[3,"X509Ref","","",null,null],[3,"X509v3Context","","A context object required to construct certain X509 extension values.",null,null],[3,"X509Extension","","",null,null],[3,"X509ExtensionRef","","",null,null],[3,"X509NameBuilder","","",null,null],[3,"X509Name","","",null,null],[3,"X509NameRef","","",null,null],[3,"X509NameEntries","","",null,null],[3,"X509NameEntry","","",null,null],[3,"X509NameEntryRef","","",null,null],[3,"X509ReqBuilder","","",null,null],[3,"X509Req","","",null,null],[3,"X509ReqRef","","",null,null],[3,"X509VerifyError","","",null,null],[3,"GeneralName","","",null,null],[3,"GeneralNameRef","","",null,null],[3,"X509Algorithm","","",null,null],[3,"X509AlgorithmRef","","",null,null],[0,"extension","","",null,null],[3,"BasicConstraints","openssl::x509::extension","",null,null],[3,"KeyUsage","","",null,null],[3,"ExtendedKeyUsage","","",null,null],[3,"SubjectKeyIdentifier","","",null,null],[3,"AuthorityKeyIdentifier","","",null,null],[3,"SubjectAlternativeName","","",null,null],[4,"ExtensionType","","Type-only version of the `Extension` enum.",null,null],[13,"KeyUsage","","",113,null],[13,"ExtKeyUsage","","",113,null],[13,"SubjectAltName","","",113,null],[13,"IssuerAltName","","",113,null],[13,"OtherNid","","",113,null],[13,"OtherStr","","",113,null],[4,"Extension","","A X.509 v3 certificate extension.",null,null],[13,"KeyUsage","","The purposes of the key contained in the certificate",114,null],[13,"ExtKeyUsage","","The extended purposes of the key contained in the certificate",114,null],[13,"SubjectAltName","","Subject Alternative Names",114,null],[13,"IssuerAltName","","Issuer Alternative Names",114,null],[13,"OtherNid","","Arbitrary extensions by NID. See `man x509v3_config` for value syntax.",114,null],[13,"OtherStr","","Arbitrary extensions by OID string. See `man ASN1_generate_nconf` for value syntax.",114,null],[4,"KeyUsageOption","","",null,null],[13,"DigitalSignature","","",115,null],[13,"NonRepudiation","","",115,null],[13,"KeyEncipherment","","",115,null],[13,"DataEncipherment","","",115,null],[13,"KeyAgreement","","",115,null],[13,"KeyCertSign","","",115,null],[13,"CRLSign","","",115,null],[13,"EncipherOnly","","",115,null],[13,"DecipherOnly","","",115,null],[4,"ExtKeyUsageOption","","",null,null],[13,"ServerAuth","","",116,null],[13,"ClientAuth","","",116,null],[13,"CodeSigning","","",116,null],[13,"EmailProtection","","",116,null],[13,"TimeStamping","","",116,null],[13,"MsCodeInd","","",116,null],[13,"MsCodeCom","","",116,null],[13,"MsCtlSign","","",116,null],[13,"MsSgc","","",116,null],[13,"MsEfs","","",116,null],[13,"NsSgc","","",116,null],[13,"Other","","An arbitrary key usage by OID.",116,null],[4,"AltNameOption","","",null,null],[13,"Other","","The value is specified as OID;content. See `man ASN1_generate_nconf` for more information on the content syntax.",117,null],[13,"Email","","",117,null],[13,"DNS","","",117,null],[13,"Directory","","",117,null],[13,"URI","","",117,null],[13,"IPAddress","","",117,null],[13,"RegisteredID","","",117,null],[11,"clone","","",113,{"inputs":[{"name":"self"}],"output":{"name":"extensiontype"}}],[11,"hash","","",113,null],[11,"eq","","",113,{"inputs":[{"name":"self"},{"name":"extensiontype"}],"output":{"name":"bool"}}],[11,"ne","","",113,{"inputs":[{"name":"self"},{"name":"extensiontype"}],"output":{"name":"bool"}}],[11,"clone","","",114,{"inputs":[{"name":"self"}],"output":{"name":"extension"}}],[11,"get_type","","",114,{"inputs":[{"name":"self"}],"output":{"name":"extensiontype"}}],[11,"get_nid","","",113,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"get_name","","",113,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_string","","",114,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"clone","","",115,{"inputs":[{"name":"self"}],"output":{"name":"keyusageoption"}}],[11,"fmt","","",115,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",116,{"inputs":[{"name":"self"}],"output":{"name":"extkeyusageoption"}}],[11,"fmt","","",116,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",117,{"inputs":[{"name":"self"}],"output":{"name":"altnameoption"}}],[11,"fmt","","",117,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",118,{"inputs":[],"output":{"name":"basicconstraints"}}],[11,"critical","","",118,{"inputs":[{"name":"self"}],"output":{"name":"basicconstraints"}}],[11,"ca","","",118,{"inputs":[{"name":"self"}],"output":{"name":"basicconstraints"}}],[11,"pathlen","","",118,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"basicconstraints"}}],[11,"build","","",118,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"new","","",119,{"inputs":[],"output":{"name":"keyusage"}}],[11,"critical","","",119,{"inputs":[{"name":"self"}],"output":{"name":"keyusage"}}],[11,"digital_signature","","",119,{"inputs":[{"name":"self"}],"output":{"name":"keyusage"}}],[11,"non_repudiation","","",119,{"inputs":[{"name":"self"}],"output":{"name":"keyusage"}}],[11,"key_encipherment","","",119,{"inputs":[{"name":"self"}],"output":{"name":"keyusage"}}],[11,"data_encipherment","","",119,{"inputs":[{"name":"self"}],"output":{"name":"keyusage"}}],[11,"key_agreement","","",119,{"inputs":[{"name":"self"}],"output":{"name":"keyusage"}}],[11,"key_cert_sign","","",119,{"inputs":[{"name":"self"}],"output":{"name":"keyusage"}}],[11,"crl_sign","","",119,{"inputs":[{"name":"self"}],"output":{"name":"keyusage"}}],[11,"encipher_only","","",119,{"inputs":[{"name":"self"}],"output":{"name":"keyusage"}}],[11,"decipher_only","","",119,{"inputs":[{"name":"self"}],"output":{"name":"keyusage"}}],[11,"build","","",119,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"new","","",120,{"inputs":[],"output":{"name":"extendedkeyusage"}}],[11,"critical","","",120,{"inputs":[{"name":"self"}],"output":{"name":"extendedkeyusage"}}],[11,"server_auth","","",120,{"inputs":[{"name":"self"}],"output":{"name":"extendedkeyusage"}}],[11,"client_auth","","",120,{"inputs":[{"name":"self"}],"output":{"name":"extendedkeyusage"}}],[11,"code_signing","","",120,{"inputs":[{"name":"self"}],"output":{"name":"extendedkeyusage"}}],[11,"time_stamping","","",120,{"inputs":[{"name":"self"}],"output":{"name":"extendedkeyusage"}}],[11,"ms_code_ind","","",120,{"inputs":[{"name":"self"}],"output":{"name":"extendedkeyusage"}}],[11,"ms_code_com","","",120,{"inputs":[{"name":"self"}],"output":{"name":"extendedkeyusage"}}],[11,"ms_ctl_sign","","",120,{"inputs":[{"name":"self"}],"output":{"name":"extendedkeyusage"}}],[11,"ms_sgc","","",120,{"inputs":[{"name":"self"}],"output":{"name":"extendedkeyusage"}}],[11,"ms_efs","","",120,{"inputs":[{"name":"self"}],"output":{"name":"extendedkeyusage"}}],[11,"ns_sgc","","",120,{"inputs":[{"name":"self"}],"output":{"name":"extendedkeyusage"}}],[11,"other","","",120,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"extendedkeyusage"}}],[11,"build","","",120,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"new","","",121,{"inputs":[],"output":{"name":"subjectkeyidentifier"}}],[11,"critical","","",121,{"inputs":[{"name":"self"}],"output":{"name":"subjectkeyidentifier"}}],[11,"build","","",121,{"inputs":[{"name":"self"},{"name":"x509v3context"}],"output":{"name":"result"}}],[11,"new","","",122,{"inputs":[],"output":{"name":"authoritykeyidentifier"}}],[11,"critical","","",122,{"inputs":[{"name":"self"}],"output":{"name":"authoritykeyidentifier"}}],[11,"keyid","","",122,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"authoritykeyidentifier"}}],[11,"issuer","","",122,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"authoritykeyidentifier"}}],[11,"build","","",122,{"inputs":[{"name":"self"},{"name":"x509v3context"}],"output":{"name":"result"}}],[11,"new","","",123,{"inputs":[],"output":{"name":"subjectalternativename"}}],[11,"critical","","",123,{"inputs":[{"name":"self"}],"output":{"name":"subjectalternativename"}}],[11,"email","","",123,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"subjectalternativename"}}],[11,"uri","","",123,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"subjectalternativename"}}],[11,"dns","","",123,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"subjectalternativename"}}],[11,"rid","","",123,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"subjectalternativename"}}],[11,"ip","","",123,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"subjectalternativename"}}],[11,"dir_name","","",123,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"subjectalternativename"}}],[11,"other_name","","",123,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"subjectalternativename"}}],[11,"build","","",123,{"inputs":[{"name":"self"},{"name":"x509v3context"}],"output":{"name":"result"}}],[0,"store","openssl::x509","",null,null],[3,"X509StoreBuilder","openssl::x509::store","",null,null],[3,"X509StoreBuilderRef","","",null,null],[3,"X509Store","","",null,null],[3,"X509StoreRef","","",null,null],[11,"from_ptr","","",124,null],[11,"as_ptr","","",124,null],[11,"drop","","",124,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",124,{"inputs":[{"name":"self"}],"output":{"name":"x509storebuilderref"}}],[11,"deref_mut","","",124,{"inputs":[{"name":"self"}],"output":{"name":"x509storebuilderref"}}],[11,"new","","Returns a builder for a certificate store.",124,{"inputs":[],"output":{"name":"result"}}],[11,"build","","Constructs the `X509Store`.",124,{"inputs":[{"name":"self"}],"output":{"name":"x509store"}}],[11,"add_cert","","Adds a certificate to the certificate store.",125,{"inputs":[{"name":"self"},{"name":"x509"}],"output":{"name":"result"}}],[11,"set_default_paths","","Load certificates from their default locations.",125,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"from_ptr","","",126,null],[11,"as_ptr","","",126,null],[11,"drop","","",126,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",126,{"inputs":[{"name":"self"}],"output":{"name":"x509storeref"}}],[11,"deref_mut","","",126,{"inputs":[{"name":"self"}],"output":{"name":"x509storeref"}}],[17,"X509_FILETYPE_PEM","openssl::x509","",null,null],[17,"X509_FILETYPE_ASN1","","",null,null],[17,"X509_FILETYPE_DEFAULT","","",null,null],[11,"as_raw","","",127,{"inputs":[{"name":"self"}],"output":{"name":"c_int"}}],[11,"from_ptr","","",128,null],[11,"as_ptr","","",128,null],[11,"drop","","",128,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",128,{"inputs":[{"name":"self"}],"output":{"name":"x509storecontextref"}}],[11,"deref_mut","","",128,{"inputs":[{"name":"self"}],"output":{"name":"x509storecontextref"}}],[11,"error","","",129,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"current_cert","","",129,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"error_depth","","",129,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"chain","","",129,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"ssl","","Returns a reference to the `Ssl` associated with this context.",129,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"new","","Creates a new generator with the following defaults:",130,{"inputs":[],"output":{"name":"x509generator"}}],[11,"set_valid_period","","Sets certificate validity period in days since today",130,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"x509generator"}}],[11,"add_name","","Add attribute to the name of the certificate",130,{"inputs":[{"name":"self"},{"name":"string"},{"name":"string"}],"output":{"name":"x509generator"}}],[11,"add_names","","Add multiple attributes to the name of the certificate",130,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"x509generator"}}],[11,"add_extension","","Add an extension to a certificate",130,{"inputs":[{"name":"self"},{"name":"extension"}],"output":{"name":"x509generator"}}],[11,"add_extensions","","Add multiple extensions to a certificate",130,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"x509generator"}}],[11,"set_sign_hash","","",130,{"inputs":[{"name":"self"},{"name":"messagedigest"}],"output":{"name":"x509generator"}}],[11,"sign","","Sets the certificate public-key, then self-sign and return it",130,{"inputs":[{"name":"self"},{"name":"pkeyref"}],"output":{"name":"result"}}],[11,"request","","Obtain a certificate signing request (CSR)",130,{"inputs":[{"name":"self"},{"name":"pkeyref"}],"output":{"name":"result"}}],[11,"new","","Creates a new builder.",131,{"inputs":[],"output":{"name":"result"}}],[11,"set_not_after","","Sets the notAfter constraint on the certificate.",131,{"inputs":[{"name":"self"},{"name":"asn1timeref"}],"output":{"name":"result"}}],[11,"set_not_before","","Sets the notBefore constraint on the certificate.",131,{"inputs":[{"name":"self"},{"name":"asn1timeref"}],"output":{"name":"result"}}],[11,"set_version","","Sets the version of the certificate.",131,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"result"}}],[11,"set_serial_number","","Sets the serial number of the certificate.",131,{"inputs":[{"name":"self"},{"name":"asn1integerref"}],"output":{"name":"result"}}],[11,"set_issuer_name","","Sets the issuer name of the certificate.",131,{"inputs":[{"name":"self"},{"name":"x509nameref"}],"output":{"name":"result"}}],[11,"set_subject_name","","Sets the subject name of the certificate.",131,{"inputs":[{"name":"self"},{"name":"x509nameref"}],"output":{"name":"result"}}],[11,"set_pubkey","","Sets the public key associated with the certificate.",131,{"inputs":[{"name":"self"},{"name":"pkeyref"}],"output":{"name":"result"}}],[11,"x509v3_context","","Returns a context object which is needed to create certain X509 extension values.",131,{"inputs":[{"name":"self"},{"name":"option"},{"name":"option"}],"output":{"name":"x509v3context"}}],[11,"append_extension","","Adds an X509 extension value to the certificate.",131,{"inputs":[{"name":"self"},{"name":"x509extension"}],"output":{"name":"result"}}],[11,"sign","","Signs the certificate with a private key.",131,{"inputs":[{"name":"self"},{"name":"pkeyref"},{"name":"messagedigest"}],"output":{"name":"result"}}],[11,"build","","Consumes the builder, returning the certificate.",131,{"inputs":[{"name":"self"}],"output":{"name":"x509"}}],[11,"from_ptr","","",132,null],[11,"as_ptr","","",132,null],[11,"drop","","",132,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",132,{"inputs":[{"name":"self"}],"output":{"name":"x509ref"}}],[11,"deref_mut","","",132,{"inputs":[{"name":"self"}],"output":{"name":"x509ref"}}],[11,"subject_name","","",133,{"inputs":[{"name":"self"}],"output":{"name":"x509nameref"}}],[11,"subject_alt_names","","Returns this certificate's SAN entries, if they exist.",133,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"public_key","","",133,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fingerprint","","Returns certificate fingerprint calculated using provided hash",133,{"inputs":[{"name":"self"},{"name":"messagedigest"}],"output":{"name":"result"}}],[11,"not_after","","Returns the certificate's Not After validity period.",133,{"inputs":[{"name":"self"}],"output":{"name":"asn1timeref"}}],[11,"not_before","","Returns the certificate's Not Before validity period.",133,{"inputs":[{"name":"self"}],"output":{"name":"asn1timeref"}}],[11,"signature","","Returns the certificate's signature",133,{"inputs":[{"name":"self"}],"output":{"name":"asn1bitstringref"}}],[11,"signature_algorithm","","Returns the certificate's signature algorithm.",133,{"inputs":[{"name":"self"}],"output":{"name":"x509algorithmref"}}],[11,"ocsp_responders","","Returns the list of OCSP responder URLs specified in the certificate's Authority Information Access field.",133,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"issued","","Checks that this certificate issued `subject`.",133,{"inputs":[{"name":"self"},{"name":"x509ref"}],"output":{"name":"result"}}],[11,"to_pem","","Serializes this value to PEM.",133,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"to_der","","Serializes this value to DER.",133,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"to_owned","","",133,{"inputs":[{"name":"self"}],"output":{"name":"x509"}}],[11,"builder","","Returns a new builder.",132,{"inputs":[],"output":{"name":"result"}}],[11,"from_pem","","Deserializes a value from PEM-formatted data.",132,null],[11,"from_der","","Deserializes a value from DER-formatted data.",132,null],[11,"stack_from_pem","","Deserializes a list of PEM-formatted certificates.",132,null],[11,"clone","","",132,{"inputs":[{"name":"self"}],"output":{"name":"x509"}}],[11,"as_ref","","",132,{"inputs":[{"name":"self"}],"output":{"name":"x509ref"}}],[11,"as_ref","","",133,{"inputs":[{"name":"self"}],"output":{"name":"x509ref"}}],[11,"borrow","","",132,{"inputs":[{"name":"self"}],"output":{"name":"x509ref"}}],[11,"as_ptr","","",134,null],[11,"from_ptr","","",135,null],[11,"as_ptr","","",135,null],[11,"drop","","",135,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",135,{"inputs":[{"name":"self"}],"output":{"name":"x509extensionref"}}],[11,"deref_mut","","",135,{"inputs":[{"name":"self"}],"output":{"name":"x509extensionref"}}],[11,"new","","Constructs an X509 extension value. See `man x509v3_config` for information on supported names and their value formats.",135,{"inputs":[{"name":"option"},{"name":"option"},{"name":"str"},{"name":"str"}],"output":{"name":"result"}}],[11,"new_nid","","Constructs an X509 extension value. See `man x509v3_config` for information on supported extensions and their value formats.",135,{"inputs":[{"name":"option"},{"name":"option"},{"name":"nid"},{"name":"str"}],"output":{"name":"result"}}],[11,"new","","",136,{"inputs":[],"output":{"name":"result"}}],[11,"append_entry_by_text","","",136,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"}],"output":{"name":"result"}}],[11,"append_entry_by_nid","","",136,{"inputs":[{"name":"self"},{"name":"nid"},{"name":"str"}],"output":{"name":"result"}}],[11,"build","","",136,{"inputs":[{"name":"self"}],"output":{"name":"x509name"}}],[11,"from_ptr","","",137,null],[11,"as_ptr","","",137,null],[11,"drop","","",137,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",137,{"inputs":[{"name":"self"}],"output":{"name":"x509nameref"}}],[11,"deref_mut","","",137,{"inputs":[{"name":"self"}],"output":{"name":"x509nameref"}}],[11,"builder","","Returns a new builder.",137,{"inputs":[],"output":{"name":"result"}}],[11,"load_client_ca_file","","Loads subject names from a file containing PEM-formatted certificates.",137,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"entries_by_nid","","",138,{"inputs":[{"name":"self"},{"name":"nid"}],"output":{"name":"x509nameentries"}}],[11,"next","","",139,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"from_ptr","","",140,null],[11,"as_ptr","","",140,null],[11,"drop","","",140,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",140,{"inputs":[{"name":"self"}],"output":{"name":"x509nameentryref"}}],[11,"deref_mut","","",140,{"inputs":[{"name":"self"}],"output":{"name":"x509nameentryref"}}],[11,"data","","",141,{"inputs":[{"name":"self"}],"output":{"name":"asn1stringref"}}],[11,"new","","",142,{"inputs":[],"output":{"name":"result"}}],[11,"set_version","","",142,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"result"}}],[11,"set_subject_name","","",142,{"inputs":[{"name":"self"},{"name":"x509nameref"}],"output":{"name":"result"}}],[11,"set_pubkey","","",142,{"inputs":[{"name":"self"},{"name":"pkeyref"}],"output":{"name":"result"}}],[11,"x509v3_context","","",142,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"x509v3context"}}],[11,"add_extensions","","",142,{"inputs":[{"name":"self"},{"name":"stackref"}],"output":{"name":"result"}}],[11,"sign","","",142,{"inputs":[{"name":"self"},{"name":"pkeyref"},{"name":"messagedigest"}],"output":{"name":"result"}}],[11,"build","","",142,{"inputs":[{"name":"self"}],"output":{"name":"x509req"}}],[11,"from_ptr","","",143,null],[11,"as_ptr","","",143,null],[11,"drop","","",143,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",143,{"inputs":[{"name":"self"}],"output":{"name":"x509reqref"}}],[11,"deref_mut","","",143,{"inputs":[{"name":"self"}],"output":{"name":"x509reqref"}}],[11,"builder","","",143,{"inputs":[],"output":{"name":"result"}}],[11,"from_pem","","Reads CSR from PEM",143,null],[11,"from_der","","Deserializes a value from DER-formatted data.",143,null],[11,"to_pem","","Serializes this value to PEM.",144,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"to_der","","Serializes this value to DER.",144,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"version","","",144,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"subject_name","","",144,{"inputs":[{"name":"self"}],"output":{"name":"x509nameref"}}],[11,"fmt","","",145,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",145,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",145,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"from_raw","","Creates an `X509VerifyError` from a raw error number.",145,{"inputs":[{"name":"c_long"}],"output":{"name":"option"}}],[11,"as_raw","","",145,{"inputs":[{"name":"self"}],"output":{"name":"c_long"}}],[11,"error_string","","",145,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"from_ptr","","",146,null],[11,"as_ptr","","",146,null],[11,"drop","","",146,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",146,{"inputs":[{"name":"self"}],"output":{"name":"generalnameref"}}],[11,"deref_mut","","",146,{"inputs":[{"name":"self"}],"output":{"name":"generalnameref"}}],[11,"dnsname","","Returns the contents of this `GeneralName` if it is a `dNSName`.",147,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"ipaddress","","Returns the contents of this `GeneralName` if it is an `iPAddress`.",147,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"from_ptr","","",148,null],[11,"as_ptr","","",148,null],[11,"drop","","",148,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",148,{"inputs":[{"name":"self"}],"output":{"name":"x509algorithmref"}}],[11,"deref_mut","","",148,{"inputs":[{"name":"self"}],"output":{"name":"x509algorithmref"}}],[11,"object","","Returns the ASN.1 OID of this algorithm.",149,{"inputs":[{"name":"self"}],"output":{"name":"asn1objectref"}}]],"paths":[[3,"KeyError"],[3,"AesKey"],[3,"Asn1GeneralizedTime"],[3,"Asn1GeneralizedTimeRef"],[3,"Asn1Time"],[3,"Asn1TimeRef"],[3,"Asn1String"],[3,"Asn1StringRef"],[3,"Asn1Integer"],[3,"Asn1IntegerRef"],[3,"Asn1BitString"],[3,"Asn1BitStringRef"],[3,"Asn1Object"],[3,"Asn1ObjectRef"],[3,"BigNumContext"],[3,"BigNumRef"],[3,"BigNum"],[3,"CmsContentInfo"],[3,"CmsContentInfoRef"],[3,"ConfMethod"],[3,"Conf"],[3,"Dh"],[3,"DhRef"],[3,"Dsa"],[3,"DsaRef"],[3,"PointConversionForm"],[3,"Asn1Flag"],[3,"EcGroup"],[3,"EcGroupRef"],[3,"EcPoint"],[3,"EcPointRef"],[3,"EcKey"],[3,"EcKeyRef"],[3,"EcKeyBuilder"],[3,"EcKeyBuilderRef"],[3,"ErrorStack"],[3,"Error"],[3,"Index"],[3,"MessageDigest"],[3,"Hasher"],[3,"DigestBytes"],[3,"Nid"],[3,"Status"],[3,"Flag"],[3,"OcspResponseStatus"],[3,"OcspCertStatus"],[3,"OcspRevokedStatus"],[3,"OcspBasicResponse"],[3,"OcspBasicResponseRef"],[3,"OcspCertId"],[3,"OcspResponse"],[3,"OcspResponseRef"],[3,"OcspRequest"],[3,"OcspRequestRef"],[3,"OcspOneReq"],[3,"ParsedPkcs12"],[3,"Pkcs12"],[3,"Pkcs12Ref"],[3,"Pkcs12Builder"],[3,"KeyIvPair"],[3,"PKey"],[3,"PKeyRef"],[3,"PKeyCtx"],[3,"PKeyCtxRef"],[3,"Padding"],[3,"Rsa"],[3,"RsaRef"],[3,"Signer"],[3,"Verifier"],[3,"Sha1"],[3,"Sha224"],[3,"Sha256"],[3,"Sha384"],[3,"Sha512"],[3,"CipherBits"],[4,"Error"],[4,"HandshakeError"],[4,"SniError"],[4,"ShutdownResult"],[3,"SslConnectorBuilder"],[3,"SslConnector"],[3,"ConnectConfiguration"],[3,"SslAcceptorBuilder"],[3,"SslAcceptor"],[3,"SslOption"],[3,"SslMode"],[3,"SslMethod"],[3,"SslVerifyMode"],[3,"StatusType"],[3,"SslContextBuilder"],[3,"SslContext"],[3,"SslContextRef"],[3,"SslCipher"],[3,"SslCipherRef"],[3,"SslSession"],[3,"SslSessionRef"],[3,"Ssl"],[3,"SslRef"],[3,"MidHandshakeSslStream"],[3,"SslStream"],[8,"Stackable"],[3,"Stack"],[3,"IntoIter"],[3,"StackRef"],[3,"Iter"],[3,"IterMut"],[3,"OpensslString"],[3,"OpensslStringRef"],[4,"Mode"],[3,"Cipher"],[3,"Crypter"],[8,"OpenSslType"],[8,"OpenSslTypeRef"],[4,"ExtensionType"],[4,"Extension"],[4,"KeyUsageOption"],[4,"ExtKeyUsageOption"],[4,"AltNameOption"],[3,"BasicConstraints"],[3,"KeyUsage"],[3,"ExtendedKeyUsage"],[3,"SubjectKeyIdentifier"],[3,"AuthorityKeyIdentifier"],[3,"SubjectAlternativeName"],[3,"X509StoreBuilder"],[3,"X509StoreBuilderRef"],[3,"X509Store"],[3,"X509FileType"],[3,"X509StoreContext"],[3,"X509StoreContextRef"],[3,"X509Generator"],[3,"X509Builder"],[3,"X509"],[3,"X509Ref"],[3,"X509v3Context"],[3,"X509Extension"],[3,"X509NameBuilder"],[3,"X509Name"],[3,"X509NameRef"],[3,"X509NameEntries"],[3,"X509NameEntry"],[3,"X509NameEntryRef"],[3,"X509ReqBuilder"],[3,"X509Req"],[3,"X509ReqRef"],[3,"X509VerifyError"],[3,"GeneralName"],[3,"GeneralNameRef"],[3,"X509Algorithm"],[3,"X509AlgorithmRef"]]};
searchIndex["openssl_sys"] = {"doc":"","items":[[3,"stack_st_ASN1_OBJECT","openssl_sys","",null,null],[12,"stack","","",0,null],[3,"stack_st_X509","","",null,null],[12,"stack","","",1,null],[3,"stack_st_X509_NAME","","",null,null],[12,"stack","","",2,null],[3,"stack_st_X509_ATTRIBUTE","","",null,null],[12,"stack","","",3,null],[3,"stack_st_X509_EXTENSION","","",null,null],[12,"stack","","",4,null],[3,"stack_st_GENERAL_NAME","","",null,null],[12,"stack","","",5,null],[3,"stack_st_void","","",null,null],[12,"stack","","",6,null],[3,"stack_st_SSL_CIPHER","","",null,null],[12,"stack","","",7,null],[3,"stack_st_OPENSSL_STRING","","",null,null],[12,"stack","","",8,null],[3,"_STACK","","",null,null],[12,"num","","",9,null],[12,"data","","",9,null],[12,"sorted","","",9,null],[12,"num_alloc","","",9,null],[12,"comp","","",9,null],[3,"BIO_METHOD","","",null,null],[12,"type_","","",10,null],[12,"name","","",10,null],[12,"bwrite","","",10,null],[12,"bread","","",10,null],[12,"bputs","","",10,null],[12,"bgets","","",10,null],[12,"ctrl","","",10,null],[12,"create","","",10,null],[12,"destroy","","",10,null],[12,"callback_ctrl","","",10,null],[3,"RSA","","",null,null],[12,"pad","","",11,null],[12,"version","","",11,null],[12,"meth","","",11,null],[12,"engine","","",11,null],[12,"n","","",11,null],[12,"e","","",11,null],[12,"d","","",11,null],[12,"p","","",11,null],[12,"q","","",11,null],[12,"dmp1","","",11,null],[12,"dmq1","","",11,null],[12,"iqmp","","",11,null],[12,"ex_data","","",11,null],[12,"references","","",11,null],[12,"flags","","",11,null],[12,"_method_mod_n","","",11,null],[12,"_method_mod_p","","",11,null],[12,"_method_mod_q","","",11,null],[12,"bignum_data","","",11,null],[12,"blinding","","",11,null],[12,"mt_blinding","","",11,null],[3,"DSA","","",null,null],[12,"pad","","",12,null],[12,"version","","",12,null],[12,"write_params","","",12,null],[12,"p","","",12,null],[12,"q","","",12,null],[12,"g","","",12,null],[12,"pub_key","","",12,null],[12,"priv_key","","",12,null],[12,"kinv","","",12,null],[12,"r","","",12,null],[12,"flags","","",12,null],[12,"method_mont_p","","",12,null],[12,"references","","",12,null],[12,"ex_data","","",12,null],[12,"meth","","",12,null],[12,"engine","","",12,null],[3,"EVP_PKEY","","",null,null],[12,"type_","","",13,null],[12,"save_type","","",13,null],[12,"references","","",13,null],[12,"ameth","","",13,null],[12,"engine","","",13,null],[12,"pkey","","",13,null],[12,"save_parameters","","",13,null],[12,"attributes","","",13,null],[3,"BIO","","",null,null],[12,"method","","",14,null],[12,"callback","","",14,null],[12,"cb_arg","","",14,null],[12,"init","","",14,null],[12,"shutdown","","",14,null],[12,"flags","","",14,null],[12,"retry_reason","","",14,null],[12,"num","","",14,null],[12,"ptr","","",14,null],[12,"next_bio","","",14,null],[12,"prev_bio","","",14,null],[12,"references","","",14,null],[12,"num_read","","",14,null],[12,"num_write","","",14,null],[12,"ex_data","","",14,null],[3,"CRYPTO_EX_DATA","","",null,null],[12,"sk","","",15,null],[12,"dummy","","",15,null],[3,"EVP_MD_CTX","","",null,null],[3,"EVP_CIPHER","","",null,null],[12,"nid","","",16,null],[12,"block_size","","",16,null],[12,"key_len","","",16,null],[12,"iv_len","","",16,null],[12,"flags","","",16,null],[12,"init","","",16,null],[12,"do_cipher","","",16,null],[12,"cleanup","","",16,null],[12,"ctx_size","","",16,null],[12,"set_asn1_parameters","","",16,null],[12,"get_asn1_parameters","","",16,null],[12,"ctrl","","",16,null],[12,"app_data","","",16,null],[3,"HMAC_CTX","","",null,null],[3,"BIGNUM","","",null,null],[12,"d","","",17,null],[12,"top","","",17,null],[12,"dmax","","",17,null],[12,"neg","","",17,null],[12,"flags","","",17,null],[3,"DH","","",null,null],[12,"pad","","",18,null],[12,"version","","",18,null],[12,"p","","",18,null],[12,"g","","",18,null],[12,"length","","",18,null],[12,"pub_key","","",18,null],[12,"priv_key","","",18,null],[12,"flags","","",18,null],[12,"method_mont_p","","",18,null],[12,"q","","",18,null],[12,"j","","",18,null],[12,"seed","","",18,null],[12,"seedlen","","",18,null],[12,"counter","","",18,null],[12,"references","","",18,null],[12,"ex_data","","",18,null],[12,"meth","","",18,null],[12,"engine","","",18,null],[3,"X509","","",null,null],[12,"cert_info","","",19,null],[12,"sig_alg","","",19,null],[12,"signature","","",19,null],[12,"valid","","",19,null],[12,"references","","",19,null],[12,"name","","",19,null],[12,"ex_data","","",19,null],[12,"ex_pathlen","","",19,null],[12,"ex_pcpathlen","","",19,null],[12,"ex_flags","","",19,null],[12,"ex_kusage","","",19,null],[12,"ex_xkusage","","",19,null],[12,"ex_nscert","","",19,null],[3,"X509_CINF","","",null,null],[12,"validity","","",20,null],[12,"extensions","","",20,null],[3,"X509_ALGOR","","",null,null],[12,"algorithm","","",21,null],[3,"ASN1_ENCODING","","",null,null],[12,"enc","","",22,null],[12,"len","","",22,null],[12,"modified","","",22,null],[3,"X509_VAL","","",null,null],[12,"notBefore","","",23,null],[12,"notAfter","","",23,null],[3,"X509_REQ_INFO","","",null,null],[12,"enc","","",24,null],[12,"version","","",24,null],[12,"subject","","",24,null],[12,"attributes","","",24,null],[3,"X509_REQ","","",null,null],[12,"req_info","","",25,null],[3,"SSL","","",null,null],[12,"server","","",26,null],[3,"SSL_CTX","","",null,null],[12,"references","","",27,null],[3,"SSL_SESSION","","",null,null],[12,"master_key_length","","",28,null],[12,"master_key","","",28,null],[12,"references","","",28,null],[3,"SRP_CTX","","",null,null],[3,"AES_KEY","","",null,null],[3,"GENERAL_NAME","","",null,null],[12,"type_","","",29,null],[12,"d","","",29,null],[3,"X509V3_CTX","","",null,null],[3,"SHA_CTX","","",null,null],[12,"h0","","",30,null],[12,"h1","","",30,null],[12,"h2","","",30,null],[12,"h3","","",30,null],[12,"h4","","",30,null],[12,"Nl","","",30,null],[12,"Nh","","",30,null],[12,"data","","",30,null],[12,"num","","",30,null],[3,"SHA256_CTX","","",null,null],[12,"h","","",31,null],[12,"Nl","","",31,null],[12,"Nh","","",31,null],[12,"data","","",31,null],[12,"num","","",31,null],[12,"md_len","","",31,null],[3,"SHA512_CTX","","",null,null],[12,"h","","",32,null],[12,"Nl","","",32,null],[12,"Nh","","",32,null],[12,"num","","",32,null],[12,"md_len","","",32,null],[4,"PKCS12","","",null,null],[4,"ASN1_INTEGER","","",null,null],[4,"ASN1_GENERALIZEDTIME","","",null,null],[4,"ASN1_STRING","","",null,null],[4,"ASN1_BIT_STRING","","",null,null],[4,"ASN1_TIME","","",null,null],[4,"ASN1_TYPE","","",null,null],[4,"ASN1_OBJECT","","",null,null],[4,"BN_CTX","","",null,null],[4,"BN_GENCB","","",null,null],[4,"CMS_ContentInfo","","",null,null],[4,"CONF","","",null,null],[4,"CONF_METHOD","","",null,null],[4,"COMP_METHOD","","",null,null],[4,"EC_KEY","","",null,null],[4,"EC_GROUP","","",null,null],[4,"EC_METHOD","","",null,null],[4,"EC_POINT","","",null,null],[4,"ENGINE","","",null,null],[4,"EVP_CIPHER_CTX","","",null,null],[4,"EVP_MD","","",null,null],[4,"EVP_PKEY_CTX","","",null,null],[4,"OCSP_BASICRESP","","",null,null],[4,"OCSP_CERTID","","",null,null],[4,"OCSP_RESPONSE","","",null,null],[4,"OCSP_REQUEST","","",null,null],[4,"OCSP_ONEREQ","","",null,null],[4,"SSL_CIPHER","","",null,null],[4,"SSL_METHOD","","",null,null],[4,"X509_CRL","","",null,null],[4,"X509_EXTENSION","","",null,null],[4,"X509_NAME","","",null,null],[4,"X509_NAME_ENTRY","","",null,null],[4,"X509_STORE","","",null,null],[4,"X509_STORE_CTX","","",null,null],[4,"bio_st","","",null,null],[4,"DH_METHOD","","",null,null],[4,"RSA_METHOD","","",null,null],[4,"BN_MONT_CTX","","",null,null],[4,"BN_BLINDING","","",null,null],[4,"DSA_METHOD","","",null,null],[4,"EVP_PKEY_ASN1_METHOD","","",null,null],[4,"point_conversion_form_t","","",null,null],[13,"POINT_CONVERSION_COMPRESSED","","",33,null],[13,"POINT_CONVERSION_UNCOMPRESSED","","",33,null],[13,"POINT_CONVERSION_HYBRID","","",33,null],[5,"init","","",null,{"inputs":[],"output":null}],[5,"SSL_session_reused","","",null,null],[5,"BIO_get_mem_data","","",null,null],[5,"BIO_clear_retry_flags","","",null,null],[5,"BIO_set_retry_read","","",null,null],[5,"BIO_set_retry_write","","",null,null],[5,"EVP_PKEY_CTX_set_rsa_padding","","",null,null],[5,"EVP_PKEY_CTX_get_rsa_padding","","",null,null],[5,"SSL_CTX_set_mode","","",null,null],[5,"SSL_CTX_set_read_ahead","","",null,null],[5,"SSL_CTX_set_tmp_dh","","",null,null],[5,"SSL_CTX_set_tmp_ecdh","","",null,null],[5,"SSL_set_tmp_dh","","",null,null],[5,"SSL_set_tmp_ecdh","","",null,null],[5,"SSL_CTX_add_extra_chain_cert","","",null,null],[5,"SSL_CTX_set_tlsext_servername_callback","","",null,null],[5,"SSL_set_tlsext_host_name","","",null,null],[5,"SSL_set_tlsext_status_type","","",null,null],[5,"SSL_CTX_set_tlsext_status_cb","","",null,null],[5,"SSL_CTX_set_tlsext_status_arg","","",null,null],[5,"SSL_CTX_get_extra_chain_certs","","",null,null],[5,"SSL_get_tlsext_status_ocsp_resp","","",null,null],[5,"SSL_set_tlsext_status_ocsp_resp","","",null,null],[5,"ERR_GET_LIB","","",null,{"inputs":[{"name":"c_ulong"}],"output":{"name":"c_int"}}],[5,"ERR_GET_FUNC","","",null,{"inputs":[{"name":"c_ulong"}],"output":{"name":"c_int"}}],[5,"ERR_GET_REASON","","",null,{"inputs":[{"name":"c_ulong"}],"output":{"name":"c_int"}}],[5,"BIO_new","","",null,null],[5,"BIO_s_file","","",null,null],[5,"BIO_s_mem","","",null,null],[5,"get_rfc2409_prime_768","","",null,null],[5,"get_rfc2409_prime_1024","","",null,null],[5,"get_rfc3526_prime_1536","","",null,null],[5,"get_rfc3526_prime_2048","","",null,null],[5,"get_rfc3526_prime_3072","","",null,null],[5,"get_rfc3526_prime_4096","","",null,null],[5,"get_rfc3526_prime_6144","","",null,null],[5,"get_rfc3526_prime_8192","","",null,null],[5,"CRYPTO_malloc","","",null,null],[5,"CRYPTO_free","","",null,null],[5,"CRYPTO_num_locks","","",null,null],[5,"CRYPTO_set_locking_callback","","",null,null],[5,"CRYPTO_set_id_callback","","",null,null],[5,"ERR_load_crypto_strings","","",null,null],[5,"RSA_generate_key","","",null,null],[5,"OCSP_cert_to_id","","",null,null],[5,"PKCS12_create","","",null,null],[5,"SSL_library_init","","",null,null],[5,"SSL_load_error_strings","","",null,null],[5,"OPENSSL_add_all_algorithms_noconf","","",null,null],[5,"HMAC_CTX_init","","",null,null],[5,"HMAC_CTX_cleanup","","",null,null],[5,"SSLv3_method","","",null,null],[5,"TLSv1_method","","",null,null],[5,"SSLv23_method","","",null,null],[5,"TLSv1_1_method","","",null,null],[5,"TLSv1_2_method","","",null,null],[5,"DTLSv1_method","","",null,null],[5,"SSL_get_ex_new_index","","",null,null],[5,"SSL_set_tmp_ecdh_callback","","",null,null],[5,"SSL_CIPHER_get_version","","",null,null],[5,"SSL_CTX_get_ex_new_index","","",null,null],[5,"SSL_CTX_set_tmp_ecdh_callback","","",null,null],[5,"X509_get_subject_name","","",null,null],[5,"X509_set_notAfter","","",null,null],[5,"X509_set_notBefore","","",null,null],[5,"X509_get_ext_d2i","","",null,null],[5,"X509_NAME_add_entry_by_NID","","",null,null],[5,"X509_NAME_get_entry","","",null,null],[5,"X509_NAME_ENTRY_get_data","","",null,null],[5,"X509_STORE_CTX_get_chain","","",null,null],[5,"X509V3_EXT_nconf_nid","","",null,null],[5,"X509V3_EXT_nconf","","",null,null],[5,"ASN1_STRING_to_UTF8","","",null,null],[5,"ASN1_STRING_data","","",null,null],[5,"CRYPTO_add_lock","","",null,null],[5,"EVP_MD_CTX_create","","",null,null],[5,"EVP_MD_CTX_destroy","","",null,null],[5,"EVP_PKEY_bits","","",null,null],[5,"sk_new_null","","",null,null],[5,"sk_num","","",null,null],[5,"sk_value","","",null,null],[5,"sk_free","","",null,null],[5,"sk_push","","",null,null],[5,"sk_pop_free","","",null,null],[5,"sk_pop","","",null,null],[5,"SSLeay","","",null,null],[5,"SSLeay_version","","",null,null],[5,"AES_set_encrypt_key","","",null,null],[5,"AES_set_decrypt_key","","",null,null],[5,"AES_ige_encrypt","","",null,null],[5,"ASN1_INTEGER_get","","",null,null],[5,"ASN1_INTEGER_set","","",null,null],[5,"ASN1_GENERALIZEDTIME_free","","",null,null],[5,"ASN1_GENERALIZEDTIME_print","","",null,null],[5,"ASN1_STRING_type_new","","",null,null],[5,"ASN1_TIME_free","","",null,null],[5,"ASN1_TIME_print","","",null,null],[5,"ASN1_BIT_STRING_free","","",null,null],[5,"ASN1_OBJECT_free","","",null,null],[5,"BIO_ctrl","","",null,null],[5,"BIO_free_all","","",null,null],[5,"BIO_new_fp","","",null,null],[5,"BIO_new_socket","","",null,null],[5,"BIO_read","","",null,null],[5,"BIO_write","","",null,null],[5,"BIO_new_mem_buf","","",null,null],[5,"BIO_set_flags","","",null,null],[5,"BIO_clear_flags","","",null,null],[5,"BN_CTX_new","","",null,null],[5,"BN_CTX_free","","",null,null],[5,"BN_new","","",null,null],[5,"BN_dup","","",null,null],[5,"BN_clear","","",null,null],[5,"BN_free","","",null,null],[5,"BN_clear_free","","",null,null],[5,"BN_num_bits","","",null,null],[5,"BN_set_negative","","",null,null],[5,"BN_set_word","","",null,null],[5,"BN_add","","",null,null],[5,"BN_div","","",null,null],[5,"BN_exp","","",null,null],[5,"BN_gcd","","",null,null],[5,"BN_mod_add","","",null,null],[5,"BN_mod_exp","","",null,null],[5,"BN_mod_inverse","","",null,null],[5,"BN_mod_mul","","",null,null],[5,"BN_mod_sqr","","",null,null],[5,"BN_mod_sub","","",null,null],[5,"BN_mul","","",null,null],[5,"BN_nnmod","","",null,null],[5,"BN_add_word","","",null,null],[5,"BN_sub_word","","",null,null],[5,"BN_mul_word","","",null,null],[5,"BN_div_word","","",null,null],[5,"BN_mod_word","","",null,null],[5,"BN_sqr","","",null,null],[5,"BN_sub","","",null,null],[5,"BN_clear_bit","","",null,null],[5,"BN_is_bit_set","","",null,null],[5,"BN_lshift","","",null,null],[5,"BN_lshift1","","",null,null],[5,"BN_mask_bits","","",null,null],[5,"BN_rshift","","",null,null],[5,"BN_set_bit","","",null,null],[5,"BN_rshift1","","",null,null],[5,"BN_cmp","","",null,null],[5,"BN_ucmp","","",null,null],[5,"BN_generate_prime_ex","","",null,null],[5,"BN_is_prime_ex","","",null,null],[5,"BN_is_prime_fasttest_ex","","",null,null],[5,"BN_rand","","",null,null],[5,"BN_pseudo_rand","","",null,null],[5,"BN_rand_range","","",null,null],[5,"BN_pseudo_rand_range","","",null,null],[5,"BN_bin2bn","","",null,null],[5,"BN_bn2bin","","",null,null],[5,"BN_dec2bn","","",null,null],[5,"BN_bn2dec","","",null,null],[5,"BN_hex2bn","","",null,null],[5,"BN_bn2hex","","",null,null],[5,"BN_to_ASN1_INTEGER","","",null,null],[5,"NCONF_default","","",null,null],[5,"NCONF_new","","",null,null],[5,"NCONF_free","","",null,null],[5,"CRYPTO_memcmp","","",null,null],[5,"DH_new","","",null,null],[5,"DH_free","","",null,null],[5,"EC_KEY_new","","",null,null],[5,"EC_KEY_new_by_curve_name","","",null,null],[5,"EC_KEY_dup","","",null,null],[5,"EC_KEY_set_group","","",null,null],[5,"EC_KEY_get0_group","","",null,null],[5,"EC_KEY_set_public_key","","",null,null],[5,"EC_KEY_get0_public_key","","",null,null],[5,"EC_KEY_set_private_key","","",null,null],[5,"EC_KEY_get0_private_key","","",null,null],[5,"EC_KEY_generate_key","","",null,null],[5,"EC_KEY_check_key","","",null,null],[5,"EC_KEY_free","","",null,null],[5,"EC_KEY_set_public_key_affine_coordinates","","",null,null],[5,"EC_GF2m_simple_method","","",null,null],[5,"EC_GROUP_new","","",null,null],[5,"EC_GROUP_new_curve_GFp","","",null,null],[5,"EC_GROUP_new_curve_GF2m","","",null,null],[5,"EC_GROUP_new_by_curve_name","","",null,null],[5,"EC_GROUP_get_curve_GFp","","",null,null],[5,"EC_GROUP_get_curve_GF2m","","",null,null],[5,"EC_GROUP_get_degree","","",null,null],[5,"EC_GROUP_get_order","","",null,null],[5,"EC_GROUP_set_asn1_flag","","",null,null],[5,"EC_GROUP_free","","",null,null],[5,"EC_POINT_new","","",null,null],[5,"EC_POINT_add","","",null,null],[5,"EC_POINT_mul","","",null,null],[5,"EC_POINT_invert","","",null,null],[5,"EC_POINT_point2oct","","",null,null],[5,"EC_POINT_oct2point","","",null,null],[5,"EC_POINT_cmp","","",null,null],[5,"EC_POINT_free","","",null,null],[5,"EC_POINT_get_affine_coordinates_GFp","","",null,null],[5,"EC_POINT_get_affine_coordinates_GF2m","","",null,null],[5,"ERR_peek_last_error","","",null,null],[5,"ERR_get_error","","",null,null],[5,"ERR_get_error_line_data","","",null,null],[5,"ERR_lib_error_string","","",null,null],[5,"ERR_func_error_string","","",null,null],[5,"ERR_reason_error_string","","",null,null],[5,"ERR_clear_error","","",null,null],[5,"EVP_md5","","",null,null],[5,"EVP_ripemd160","","",null,null],[5,"EVP_sha1","","",null,null],[5,"EVP_sha224","","",null,null],[5,"EVP_sha256","","",null,null],[5,"EVP_sha384","","",null,null],[5,"EVP_sha512","","",null,null],[5,"EVP_aes_128_cbc","","",null,null],[5,"EVP_aes_128_ecb","","",null,null],[5,"EVP_aes_128_xts","","",null,null],[5,"EVP_aes_128_ctr","","",null,null],[5,"EVP_aes_128_gcm","","",null,null],[5,"EVP_aes_128_cfb1","","",null,null],[5,"EVP_aes_128_cfb128","","",null,null],[5,"EVP_aes_128_cfb8","","",null,null],[5,"EVP_aes_256_cbc","","",null,null],[5,"EVP_aes_256_ecb","","",null,null],[5,"EVP_aes_256_xts","","",null,null],[5,"EVP_aes_256_ctr","","",null,null],[5,"EVP_aes_256_gcm","","",null,null],[5,"EVP_aes_256_cfb1","","",null,null],[5,"EVP_aes_256_cfb128","","",null,null],[5,"EVP_aes_256_cfb8","","",null,null],[5,"EVP_bf_cbc","","",null,null],[5,"EVP_bf_ecb","","",null,null],[5,"EVP_bf_cfb64","","",null,null],[5,"EVP_bf_ofb","","",null,null],[5,"EVP_rc4","","",null,null],[5,"EVP_des_cbc","","",null,null],[5,"EVP_des_ecb","","",null,null],[5,"EVP_BytesToKey","","",null,null],[5,"EVP_CIPHER_CTX_new","","",null,null],[5,"EVP_CIPHER_CTX_set_padding","","",null,null],[5,"EVP_CIPHER_CTX_set_key_length","","",null,null],[5,"EVP_CIPHER_CTX_ctrl","","",null,null],[5,"EVP_CIPHER_CTX_free","","",null,null],[5,"EVP_CipherInit","","",null,null],[5,"EVP_CipherInit_ex","","",null,null],[5,"EVP_CipherUpdate","","",null,null],[5,"EVP_CipherFinal","","",null,null],[5,"EVP_DigestInit","","",null,null],[5,"EVP_DigestInit_ex","","",null,null],[5,"EVP_DigestUpdate","","",null,null],[5,"EVP_DigestFinal","","",null,null],[5,"EVP_DigestFinal_ex","","",null,null],[5,"EVP_DigestSignInit","","",null,null],[5,"EVP_DigestSignFinal","","",null,null],[5,"EVP_DigestVerifyInit","","",null,null],[5,"EVP_DigestVerifyFinal","","",null,null],[5,"EVP_MD_CTX_copy_ex","","",null,null],[5,"EVP_PKEY_new","","",null,null],[5,"EVP_PKEY_free","","",null,null],[5,"EVP_PKEY_assign","","",null,null],[5,"EVP_PKEY_copy_parameters","","",null,null],[5,"EVP_PKEY_get1_RSA","","",null,null],[5,"EVP_PKEY_set1_RSA","","",null,null],[5,"EVP_PKEY_get1_DSA","","",null,null],[5,"EVP_PKEY_get1_DH","","",null,null],[5,"EVP_PKEY_get1_EC_KEY","","",null,null],[5,"EVP_PKEY_cmp","","",null,null],[5,"EVP_PKEY_new_mac_key","","",null,null],[5,"EVP_PKEY_derive_init","","",null,null],[5,"EVP_PKEY_derive_set_peer","","",null,null],[5,"EVP_PKEY_derive","","",null,null],[5,"d2i_PKCS8PrivateKey_bio","","",null,null],[5,"EVP_PKEY_CTX_new","","",null,null],[5,"EVP_PKEY_CTX_free","","",null,null],[5,"EVP_PKEY_CTX_ctrl","","",null,null],[5,"HMAC_CTX_copy","","",null,null],[5,"OBJ_obj2nid","","",null,null],[5,"OBJ_obj2txt","","",null,null],[5,"OCSP_BASICRESP_new","","",null,null],[5,"OCSP_BASICRESP_free","","",null,null],[5,"OCSP_basic_verify","","",null,null],[5,"OCSP_resp_find_status","","",null,null],[5,"OCSP_check_validity","","",null,null],[5,"OCSP_CERTID_free","","",null,null],[5,"OCSP_RESPONSE_new","","",null,null],[5,"OCSP_RESPONSE_free","","",null,null],[5,"i2d_OCSP_RESPONSE","","",null,null],[5,"d2i_OCSP_RESPONSE","","",null,null],[5,"OCSP_response_create","","",null,null],[5,"OCSP_response_status","","",null,null],[5,"OCSP_response_get1_basic","","",null,null],[5,"OCSP_REQUEST_new","","",null,null],[5,"OCSP_REQUEST_free","","",null,null],[5,"i2d_OCSP_REQUEST","","",null,null],[5,"d2i_OCSP_REQUEST","","",null,null],[5,"OCSP_request_add0_id","","",null,null],[5,"OCSP_ONEREQ_free","","",null,null],[5,"PEM_read_bio_DHparams","","",null,null],[5,"PEM_read_bio_X509","","",null,null],[5,"PEM_read_bio_X509_REQ","","",null,null],[5,"PEM_read_bio_PrivateKey","","",null,null],[5,"PEM_read_bio_PUBKEY","","",null,null],[5,"PEM_read_bio_RSAPrivateKey","","",null,null],[5,"PEM_read_bio_RSA_PUBKEY","","",null,null],[5,"PEM_write_bio_DHparams","","",null,null],[5,"PEM_write_bio_PrivateKey","","",null,null],[5,"PEM_write_bio_PKCS8PrivateKey","","",null,null],[5,"PEM_write_bio_PUBKEY","","",null,null],[5,"PEM_write_bio_RSAPrivateKey","","",null,null],[5,"PEM_write_bio_RSAPublicKey","","",null,null],[5,"PEM_write_bio_RSA_PUBKEY","","",null,null],[5,"PEM_read_bio_DSAPrivateKey","","",null,null],[5,"PEM_read_bio_DSA_PUBKEY","","",null,null],[5,"PEM_write_bio_DSAPrivateKey","","",null,null],[5,"PEM_write_bio_DSA_PUBKEY","","",null,null],[5,"PEM_write_bio_X509","","",null,null],[5,"PEM_write_bio_X509_REQ","","",null,null],[5,"PEM_write_bio_ECPrivateKey","","",null,null],[5,"PEM_read_bio_ECPrivateKey","","",null,null],[5,"PKCS5_PBKDF2_HMAC_SHA1","","",null,null],[5,"PKCS5_PBKDF2_HMAC","","",null,null],[5,"RAND_bytes","","",null,null],[5,"RAND_status","","",null,null],[5,"RSA_new","","",null,null],[5,"RSA_free","","",null,null],[5,"RSA_generate_key_ex","","",null,null],[5,"RSA_private_decrypt","","",null,null],[5,"RSA_public_decrypt","","",null,null],[5,"RSA_private_encrypt","","",null,null],[5,"RSA_public_encrypt","","",null,null],[5,"RSA_sign","","",null,null],[5,"RSA_size","","",null,null],[5,"RSA_verify","","",null,null],[5,"DSA_new","","",null,null],[5,"DSA_free","","",null,null],[5,"DSA_size","","",null,null],[5,"DSA_generate_parameters_ex","","",null,null],[5,"DSA_generate_key","","",null,null],[5,"DSA_sign","","",null,null],[5,"DSA_verify","","",null,null],[5,"SHA1","","",null,null],[5,"SHA224","","",null,null],[5,"SHA256","","",null,null],[5,"SHA384","","",null,null],[5,"SHA512","","",null,null],[5,"SHA1_Init","","",null,null],[5,"SHA1_Update","","",null,null],[5,"SHA1_Final","","",null,null],[5,"SHA256_Init","","",null,null],[5,"SHA256_Update","","",null,null],[5,"SHA256_Final","","",null,null],[5,"SHA224_Init","","",null,null],[5,"SHA224_Update","","",null,null],[5,"SHA224_Final","","",null,null],[5,"SHA384_Init","","",null,null],[5,"SHA384_Update","","",null,null],[5,"SHA384_Final","","",null,null],[5,"SHA512_Init","","",null,null],[5,"SHA512_Update","","",null,null],[5,"SHA512_Final","","",null,null],[5,"SSL_new","","",null,null],[5,"SSL_pending","","",null,null],[5,"SSL_free","","",null,null],[5,"SSL_set_bio","","",null,null],[5,"SSL_get_rbio","","",null,null],[5,"SSL_get_wbio","","",null,null],[5,"SSL_accept","","",null,null],[5,"SSL_connect","","",null,null],[5,"SSL_do_handshake","","",null,null],[5,"SSL_ctrl","","",null,null],[5,"SSL_get_error","","",null,null],[5,"SSL_read","","",null,null],[5,"SSL_write","","",null,null],[5,"SSL_get_ex_data_X509_STORE_CTX_idx","","",null,null],[5,"SSL_get_SSL_CTX","","",null,null],[5,"SSL_set_SSL_CTX","","",null,null],[5,"SSL_get_current_compression","","",null,null],[5,"SSL_get_peer_certificate","","",null,null],[5,"SSL_get_peer_cert_chain","","",null,null],[5,"SSL_get_ssl_method","","",null,null],[5,"SSL_get_version","","",null,null],[5,"SSL_state_string","","",null,null],[5,"SSL_state_string_long","","",null,null],[5,"SSL_set_verify","","",null,null],[5,"SSL_set_ex_data","","",null,null],[5,"SSL_get_ex_data","","",null,null],[5,"SSL_get_servername","","",null,null],[5,"SSL_get_current_cipher","","",null,null],[5,"SSL_get_verify_result","","",null,null],[5,"SSL_shutdown","","",null,null],[5,"SSL_get_certificate","","",null,null],[5,"SSL_get_privatekey","","",null,null],[5,"SSL_load_client_CA_file","","",null,null],[5,"SSL_set_tmp_dh_callback","","",null,null],[5,"SSL_COMP_get_name","","",null,null],[5,"SSL_CIPHER_get_name","","",null,null],[5,"SSL_CIPHER_get_bits","","",null,null],[5,"SSL_CIPHER_description","","",null,null],[5,"SSL_CTX_new","","",null,null],[5,"SSL_CTX_free","","",null,null],[5,"SSL_CTX_ctrl","","",null,null],[5,"SSL_CTX_callback_ctrl","","",null,null],[5,"SSL_CTX_set_verify","","",null,null],[5,"SSL_CTX_set_verify_depth","","",null,null],[5,"SSL_CTX_load_verify_locations","","",null,null],[5,"SSL_CTX_set_default_verify_paths","","",null,null],[5,"SSL_CTX_set_ex_data","","",null,null],[5,"SSL_CTX_get_ex_data","","",null,null],[5,"SSL_CTX_set_session_id_context","","",null,null],[5,"SSL_CTX_use_certificate_file","","",null,null],[5,"SSL_CTX_use_certificate_chain_file","","",null,null],[5,"SSL_CTX_use_certificate","","",null,null],[5,"SSL_CTX_use_PrivateKey_file","","",null,null],[5,"SSL_CTX_use_PrivateKey","","",null,null],[5,"SSL_CTX_check_private_key","","",null,null],[5,"SSL_CTX_set_client_CA_list","","",null,null],[5,"SSL_CTX_get_cert_store","","",null,null],[5,"SSL_CTX_set_tmp_dh_callback","","",null,null],[5,"SSL_CTX_set_cipher_list","","",null,null],[5,"SSL_CTX_set_next_protos_advertised_cb","","",null,null],[5,"SSL_CTX_set_next_proto_select_cb","","",null,null],[5,"SSL_CTX_set_psk_client_callback","","",null,null],[5,"SSL_select_next_proto","","",null,null],[5,"SSL_get0_next_proto_negotiated","","",null,null],[5,"SSL_get_session","","",null,null],[5,"SSL_set_session","","",null,null],[5,"SSL_SESSION_free","","",null,null],[5,"SSL_SESSION_get_id","","",null,null],[5,"X509_add_ext","","",null,null],[5,"X509_digest","","",null,null],[5,"X509_free","","",null,null],[5,"X509_REQ_free","","",null,null],[5,"X509_get_serialNumber","","",null,null],[5,"X509_gmtime_adj","","",null,null],[5,"X509_new","","",null,null],[5,"X509_set_issuer_name","","",null,null],[5,"X509_set_subject_name","","",null,null],[5,"X509_set_serialNumber","","",null,null],[5,"X509_set_version","","",null,null],[5,"X509_set_pubkey","","",null,null],[5,"X509_sign","","",null,null],[5,"X509_get_pubkey","","",null,null],[5,"X509_to_X509_REQ","","",null,null],[5,"X509_verify_cert_error_string","","",null,null],[5,"X509_get1_ocsp","","",null,null],[5,"X509_check_issued","","",null,null],[5,"X509_ALGOR_free","","",null,null],[5,"X509_EXTENSION_free","","",null,null],[5,"X509_NAME_new","","",null,null],[5,"X509_NAME_free","","",null,null],[5,"X509_NAME_add_entry_by_txt","","",null,null],[5,"X509_NAME_get_index_by_NID","","",null,null],[5,"X509_NAME_ENTRY_free","","",null,null],[5,"ASN1_STRING_free","","",null,null],[5,"ASN1_STRING_length","","",null,null],[5,"ASN1_INTEGER_free","","",null,null],[5,"X509_STORE_new","","",null,null],[5,"X509_STORE_free","","",null,null],[5,"X509_STORE_add_cert","","",null,null],[5,"X509_STORE_set_default_paths","","",null,null],[5,"X509_STORE_CTX_free","","",null,null],[5,"X509_STORE_CTX_get_current_cert","","",null,null],[5,"X509_STORE_CTX_get_error","","",null,null],[5,"X509_STORE_CTX_get_ex_data","","",null,null],[5,"X509_STORE_CTX_get_error_depth","","",null,null],[5,"X509V3_set_ctx","","",null,null],[5,"X509V3_set_nconf","","",null,null],[5,"X509_REQ_new","","",null,null],[5,"X509_REQ_set_version","","",null,null],[5,"X509_REQ_set_subject_name","","",null,null],[5,"X509_REQ_set_pubkey","","",null,null],[5,"X509_REQ_add_extensions","","",null,null],[5,"X509_REQ_sign","","",null,null],[5,"d2i_DHparams","","",null,null],[5,"i2d_DHparams","","",null,null],[5,"d2i_DSAPublicKey","","",null,null],[5,"i2d_DSAPublicKey","","",null,null],[5,"d2i_DSAPrivateKey","","",null,null],[5,"i2d_DSAPrivateKey","","",null,null],[5,"d2i_ECPrivateKey","","",null,null],[5,"i2d_ECPrivateKey","","",null,null],[5,"d2i_X509","","",null,null],[5,"d2i_X509_REQ","","",null,null],[5,"i2d_X509_bio","","",null,null],[5,"i2d_X509","","",null,null],[5,"i2d_X509_REQ_bio","","",null,null],[5,"i2d_X509_REQ","","",null,null],[5,"d2i_AutoPrivateKey","","",null,null],[5,"d2i_PUBKEY","","",null,null],[5,"i2d_PUBKEY_bio","","",null,null],[5,"i2d_PrivateKey_bio","","",null,null],[5,"i2d_PUBKEY","","",null,null],[5,"i2d_PrivateKey","","",null,null],[5,"i2d_RSA_PUBKEY","","",null,null],[5,"d2i_RSA_PUBKEY","","",null,null],[5,"i2d_RSAPublicKey","","",null,null],[5,"d2i_RSAPublicKey","","",null,null],[5,"i2d_RSAPrivateKey","","",null,null],[5,"d2i_RSAPrivateKey","","",null,null],[5,"i2d_PKCS12_bio","","",null,null],[5,"i2d_PKCS12","","",null,null],[5,"d2i_PKCS12","","",null,null],[5,"PKCS12_parse","","",null,null],[5,"PKCS12_free","","",null,null],[5,"GENERAL_NAME_free","","",null,null],[5,"HMAC_Init_ex","","",null,null],[5,"HMAC_Update","","",null,null],[5,"HMAC_Final","","",null,null],[5,"CMS_decrypt","","",null,null],[5,"SMIME_read_CMS","","",null,null],[5,"CMS_ContentInfo_free","","",null,null],[6,"bio_info_cb","","",null,null],[6,"GEN_SESSION_CB","","",null,null],[6,"tls_session_ticket_ext_cb_fn","","",null,null],[6,"tls_session_secret_cb_fn","","",null,null],[6,"BN_ULONG","","",null,null],[6,"CRYPTO_EX_new","","",null,null],[6,"CRYPTO_EX_dup","","",null,null],[6,"CRYPTO_EX_free","","",null,null],[6,"PasswordCallback","","",null,null],[6,"SHA_LONG","","",null,null],[6,"SHA_LONG64","","",null,null],[17,"SSL_CTRL_GET_SESSION_REUSED","","",null,null],[17,"SSL_CTRL_OPTIONS","","",null,null],[17,"SSL_CTRL_CLEAR_OPTIONS","","",null,null],[17,"SSL_OP_MICROSOFT_SESS_ID_BUG","","",null,null],[17,"SSL_OP_NETSCAPE_CHALLENGE_BUG","","",null,null],[17,"SSL_OP_NETSCAPE_REUSE_CIPHER_CHANGE_BUG","","",null,null],[17,"SSL_OP_MICROSOFT_BIG_SSLV3_BUFFER","","",null,null],[17,"SSL_OP_SSLEAY_080_CLIENT_DH_BUG","","",null,null],[17,"SSL_OP_TLS_D5_BUG","","",null,null],[17,"SSL_OP_TLS_BLOCK_PADDING_BUG","","",null,null],[17,"SSL_OP_SINGLE_ECDH_USE","","",null,null],[17,"SSL_OP_SINGLE_DH_USE","","",null,null],[17,"SSL_OP_NO_SSLv2","","",null,null],[17,"SSL_MAX_SSL_SESSION_ID_LENGTH","","",null,null],[17,"SSL_MAX_SID_CTX_LENGTH","","",null,null],[17,"SSL_MAX_KEY_ARG_LENGTH","","",null,null],[17,"SSL_MAX_MASTER_KEY_LENGTH","","",null,null],[17,"SSL_MAX_KRB5_PRINCIPAL_LENGTH","","",null,null],[17,"SSLEAY_VERSION","","",null,null],[17,"SSLEAY_CFLAGS","","",null,null],[17,"SSLEAY_BUILT_ON","","",null,null],[17,"SSLEAY_PLATFORM","","",null,null],[17,"SSLEAY_DIR","","",null,null],[17,"CRYPTO_LOCK_X509","","",null,null],[17,"CRYPTO_LOCK_SSL_CTX","","",null,null],[17,"CRYPTO_LOCK_SSL_SESSION","","",null,null],[17,"AES_ENCRYPT","","",null,null],[17,"AES_DECRYPT","","",null,null],[17,"AES_MAXNR","","",null,null],[17,"AES_BLOCK_SIZE","","",null,null],[17,"BIO_TYPE_NONE","","",null,null],[17,"BIO_CTRL_EOF","","",null,null],[17,"BIO_CTRL_INFO","","",null,null],[17,"BIO_CTRL_FLUSH","","",null,null],[17,"BIO_C_SET_BUF_MEM_EOF_RETURN","","",null,null],[17,"BIO_FLAGS_READ","","",null,null],[17,"BIO_FLAGS_WRITE","","",null,null],[17,"BIO_FLAGS_IO_SPECIAL","","",null,null],[17,"BIO_FLAGS_RWS","","",null,null],[17,"BIO_FLAGS_SHOULD_RETRY","","",null,null],[17,"CRYPTO_LOCK","","",null,null],[17,"ERR_TXT_MALLOCED","","",null,null],[17,"ERR_TXT_STRING","","",null,null],[17,"ERR_LIB_PEM","","",null,null],[17,"PEM_R_NO_START_LINE","","",null,null],[17,"EVP_MAX_MD_SIZE","","",null,null],[17,"EVP_PKEY_RSA","","",null,null],[17,"EVP_PKEY_HMAC","","",null,null],[17,"EVP_PKEY_DSA","","",null,null],[17,"EVP_PKEY_DH","","",null,null],[17,"EVP_PKEY_EC","","",null,null],[17,"EVP_PKEY_ALG_CTRL","","",null,null],[17,"EVP_PKEY_CTRL_RSA_PADDING","","",null,null],[17,"EVP_PKEY_CTRL_GET_RSA_PADDING","","",null,null],[17,"EVP_CTRL_GCM_SET_IVLEN","","",null,null],[17,"EVP_CTRL_GCM_GET_TAG","","",null,null],[17,"EVP_CTRL_GCM_SET_TAG","","",null,null],[17,"MBSTRING_ASC","","",null,null],[17,"MBSTRING_BMP","","",null,null],[17,"MBSTRING_FLAG","","",null,null],[17,"MBSTRING_UNIV","","",null,null],[17,"MBSTRING_UTF8","","",null,null],[17,"NID_undef","","",null,null],[17,"NID_itu_t","","",null,null],[17,"NID_ccitt","","",null,null],[17,"NID_iso","","",null,null],[17,"NID_joint_iso_itu_t","","",null,null],[17,"NID_joint_iso_ccitt","","",null,null],[17,"NID_member_body","","",null,null],[17,"NID_identified_organization","","",null,null],[17,"NID_hmac_md5","","",null,null],[17,"NID_hmac_sha1","","",null,null],[17,"NID_certicom_arc","","",null,null],[17,"NID_international_organizations","","",null,null],[17,"NID_wap","","",null,null],[17,"NID_wap_wsg","","",null,null],[17,"NID_selected_attribute_types","","",null,null],[17,"NID_clearance","","",null,null],[17,"NID_ISO_US","","",null,null],[17,"NID_X9_57","","",null,null],[17,"NID_X9cm","","",null,null],[17,"NID_dsa","","",null,null],[17,"NID_dsaWithSHA1","","",null,null],[17,"NID_ansi_X9_62","","",null,null],[17,"NID_X9_62_prime_field","","",null,null],[17,"NID_X9_62_characteristic_two_field","","",null,null],[17,"NID_X9_62_id_characteristic_two_basis","","",null,null],[17,"NID_X9_62_onBasis","","",null,null],[17,"NID_X9_62_tpBasis","","",null,null],[17,"NID_X9_62_ppBasis","","",null,null],[17,"NID_X9_62_id_ecPublicKey","","",null,null],[17,"NID_X9_62_c2pnb163v1","","",null,null],[17,"NID_X9_62_c2pnb163v2","","",null,null],[17,"NID_X9_62_c2pnb163v3","","",null,null],[17,"NID_X9_62_c2pnb176v1","","",null,null],[17,"NID_X9_62_c2tnb191v1","","",null,null],[17,"NID_X9_62_c2tnb191v2","","",null,null],[17,"NID_X9_62_c2tnb191v3","","",null,null],[17,"NID_X9_62_c2onb191v4","","",null,null],[17,"NID_X9_62_c2onb191v5","","",null,null],[17,"NID_X9_62_c2pnb208w1","","",null,null],[17,"NID_X9_62_c2tnb239v1","","",null,null],[17,"NID_X9_62_c2tnb239v2","","",null,null],[17,"NID_X9_62_c2tnb239v3","","",null,null],[17,"NID_X9_62_c2onb239v4","","",null,null],[17,"NID_X9_62_c2onb239v5","","",null,null],[17,"NID_X9_62_c2pnb272w1","","",null,null],[17,"NID_X9_62_c2pnb304w1","","",null,null],[17,"NID_X9_62_c2tnb359v1","","",null,null],[17,"NID_X9_62_c2pnb368w1","","",null,null],[17,"NID_X9_62_c2tnb431r1","","",null,null],[17,"NID_X9_62_prime192v1","","",null,null],[17,"NID_X9_62_prime192v2","","",null,null],[17,"NID_X9_62_prime192v3","","",null,null],[17,"NID_X9_62_prime239v1","","",null,null],[17,"NID_X9_62_prime239v2","","",null,null],[17,"NID_X9_62_prime239v3","","",null,null],[17,"NID_X9_62_prime256v1","","",null,null],[17,"NID_ecdsa_with_SHA1","","",null,null],[17,"NID_ecdsa_with_Recommended","","",null,null],[17,"NID_ecdsa_with_Specified","","",null,null],[17,"NID_ecdsa_with_SHA224","","",null,null],[17,"NID_ecdsa_with_SHA256","","",null,null],[17,"NID_ecdsa_with_SHA384","","",null,null],[17,"NID_ecdsa_with_SHA512","","",null,null],[17,"NID_secp112r1","","",null,null],[17,"NID_secp112r2","","",null,null],[17,"NID_secp128r1","","",null,null],[17,"NID_secp128r2","","",null,null],[17,"NID_secp160k1","","",null,null],[17,"NID_secp160r1","","",null,null],[17,"NID_secp160r2","","",null,null],[17,"NID_secp192k1","","",null,null],[17,"NID_secp224k1","","",null,null],[17,"NID_secp224r1","","",null,null],[17,"NID_secp256k1","","",null,null],[17,"NID_secp384r1","","",null,null],[17,"NID_secp521r1","","",null,null],[17,"NID_sect113r1","","",null,null],[17,"NID_sect113r2","","",null,null],[17,"NID_sect131r1","","",null,null],[17,"NID_sect131r2","","",null,null],[17,"NID_sect163k1","","",null,null],[17,"NID_sect163r1","","",null,null],[17,"NID_sect163r2","","",null,null],[17,"NID_sect193r1","","",null,null],[17,"NID_sect193r2","","",null,null],[17,"NID_sect233k1","","",null,null],[17,"NID_sect233r1","","",null,null],[17,"NID_sect239k1","","",null,null],[17,"NID_sect283k1","","",null,null],[17,"NID_sect283r1","","",null,null],[17,"NID_sect409k1","","",null,null],[17,"NID_sect409r1","","",null,null],[17,"NID_sect571k1","","",null,null],[17,"NID_sect571r1","","",null,null],[17,"NID_wap_wsg_idm_ecid_wtls1","","",null,null],[17,"NID_wap_wsg_idm_ecid_wtls3","","",null,null],[17,"NID_wap_wsg_idm_ecid_wtls4","","",null,null],[17,"NID_wap_wsg_idm_ecid_wtls5","","",null,null],[17,"NID_wap_wsg_idm_ecid_wtls6","","",null,null],[17,"NID_wap_wsg_idm_ecid_wtls7","","",null,null],[17,"NID_wap_wsg_idm_ecid_wtls8","","",null,null],[17,"NID_wap_wsg_idm_ecid_wtls9","","",null,null],[17,"NID_wap_wsg_idm_ecid_wtls10","","",null,null],[17,"NID_wap_wsg_idm_ecid_wtls11","","",null,null],[17,"NID_wap_wsg_idm_ecid_wtls12","","",null,null],[17,"NID_cast5_cbc","","",null,null],[17,"NID_cast5_ecb","","",null,null],[17,"NID_cast5_cfb64","","",null,null],[17,"NID_cast5_ofb64","","",null,null],[17,"NID_pbeWithMD5AndCast5_CBC","","",null,null],[17,"NID_id_PasswordBasedMAC","","",null,null],[17,"NID_id_DHBasedMac","","",null,null],[17,"NID_rsadsi","","",null,null],[17,"NID_pkcs","","",null,null],[17,"NID_pkcs1","","",null,null],[17,"NID_rsaEncryption","","",null,null],[17,"NID_md2WithRSAEncryption","","",null,null],[17,"NID_md4WithRSAEncryption","","",null,null],[17,"NID_md5WithRSAEncryption","","",null,null],[17,"NID_sha1WithRSAEncryption","","",null,null],[17,"NID_rsaesOaep","","",null,null],[17,"NID_mgf1","","",null,null],[17,"NID_rsassaPss","","",null,null],[17,"NID_sha256WithRSAEncryption","","",null,null],[17,"NID_sha384WithRSAEncryption","","",null,null],[17,"NID_sha512WithRSAEncryption","","",null,null],[17,"NID_sha224WithRSAEncryption","","",null,null],[17,"NID_pkcs3","","",null,null],[17,"NID_dhKeyAgreement","","",null,null],[17,"NID_pkcs5","","",null,null],[17,"NID_pbeWithMD2AndDES_CBC","","",null,null],[17,"NID_pbeWithMD5AndDES_CBC","","",null,null],[17,"NID_pbeWithMD2AndRC2_CBC","","",null,null],[17,"NID_pbeWithMD5AndRC2_CBC","","",null,null],[17,"NID_pbeWithSHA1AndDES_CBC","","",null,null],[17,"NID_pbeWithSHA1AndRC2_CBC","","",null,null],[17,"NID_id_pbkdf2","","",null,null],[17,"NID_pbes2","","",null,null],[17,"NID_pbmac1","","",null,null],[17,"NID_pkcs7","","",null,null],[17,"NID_pkcs7_data","","",null,null],[17,"NID_pkcs7_signed","","",null,null],[17,"NID_pkcs7_enveloped","","",null,null],[17,"NID_pkcs7_signedAndEnveloped","","",null,null],[17,"NID_pkcs7_digest","","",null,null],[17,"NID_pkcs7_encrypted","","",null,null],[17,"NID_pkcs9","","",null,null],[17,"NID_pkcs9_emailAddress","","",null,null],[17,"NID_pkcs9_unstructuredName","","",null,null],[17,"NID_pkcs9_contentType","","",null,null],[17,"NID_pkcs9_messageDigest","","",null,null],[17,"NID_pkcs9_signingTime","","",null,null],[17,"NID_pkcs9_countersignature","","",null,null],[17,"NID_pkcs9_challengePassword","","",null,null],[17,"NID_pkcs9_unstructuredAddress","","",null,null],[17,"NID_pkcs9_extCertAttributes","","",null,null],[17,"NID_ext_req","","",null,null],[17,"NID_SMIMECapabilities","","",null,null],[17,"NID_SMIME","","",null,null],[17,"NID_id_smime_mod","","",null,null],[17,"NID_id_smime_ct","","",null,null],[17,"NID_id_smime_aa","","",null,null],[17,"NID_id_smime_alg","","",null,null],[17,"NID_id_smime_cd","","",null,null],[17,"NID_id_smime_spq","","",null,null],[17,"NID_id_smime_cti","","",null,null],[17,"NID_id_smime_mod_cms","","",null,null],[17,"NID_id_smime_mod_ess","","",null,null],[17,"NID_id_smime_mod_oid","","",null,null],[17,"NID_id_smime_mod_msg_v3","","",null,null],[17,"NID_id_smime_mod_ets_eSignature_88","","",null,null],[17,"NID_id_smime_mod_ets_eSignature_97","","",null,null],[17,"NID_id_smime_mod_ets_eSigPolicy_88","","",null,null],[17,"NID_id_smime_mod_ets_eSigPolicy_97","","",null,null],[17,"NID_id_smime_ct_receipt","","",null,null],[17,"NID_id_smime_ct_authData","","",null,null],[17,"NID_id_smime_ct_publishCert","","",null,null],[17,"NID_id_smime_ct_TSTInfo","","",null,null],[17,"NID_id_smime_ct_TDTInfo","","",null,null],[17,"NID_id_smime_ct_contentInfo","","",null,null],[17,"NID_id_smime_ct_DVCSRequestData","","",null,null],[17,"NID_id_smime_ct_DVCSResponseData","","",null,null],[17,"NID_id_smime_ct_compressedData","","",null,null],[17,"NID_id_ct_asciiTextWithCRLF","","",null,null],[17,"NID_id_smime_aa_receiptRequest","","",null,null],[17,"NID_id_smime_aa_securityLabel","","",null,null],[17,"NID_id_smime_aa_mlExpandHistory","","",null,null],[17,"NID_id_smime_aa_contentHint","","",null,null],[17,"NID_id_smime_aa_msgSigDigest","","",null,null],[17,"NID_id_smime_aa_encapContentType","","",null,null],[17,"NID_id_smime_aa_contentIdentifier","","",null,null],[17,"NID_id_smime_aa_macValue","","",null,null],[17,"NID_id_smime_aa_equivalentLabels","","",null,null],[17,"NID_id_smime_aa_contentReference","","",null,null],[17,"NID_id_smime_aa_encrypKeyPref","","",null,null],[17,"NID_id_smime_aa_signingCertificate","","",null,null],[17,"NID_id_smime_aa_smimeEncryptCerts","","",null,null],[17,"NID_id_smime_aa_timeStampToken","","",null,null],[17,"NID_id_smime_aa_ets_sigPolicyId","","",null,null],[17,"NID_id_smime_aa_ets_commitmentType","","",null,null],[17,"NID_id_smime_aa_ets_signerLocation","","",null,null],[17,"NID_id_smime_aa_ets_signerAttr","","",null,null],[17,"NID_id_smime_aa_ets_otherSigCert","","",null,null],[17,"NID_id_smime_aa_ets_contentTimestamp","","",null,null],[17,"NID_id_smime_aa_ets_CertificateRefs","","",null,null],[17,"NID_id_smime_aa_ets_RevocationRefs","","",null,null],[17,"NID_id_smime_aa_ets_certValues","","",null,null],[17,"NID_id_smime_aa_ets_revocationValues","","",null,null],[17,"NID_id_smime_aa_ets_escTimeStamp","","",null,null],[17,"NID_id_smime_aa_ets_certCRLTimestamp","","",null,null],[17,"NID_id_smime_aa_ets_archiveTimeStamp","","",null,null],[17,"NID_id_smime_aa_signatureType","","",null,null],[17,"NID_id_smime_aa_dvcs_dvc","","",null,null],[17,"NID_id_smime_alg_ESDHwith3DES","","",null,null],[17,"NID_id_smime_alg_ESDHwithRC2","","",null,null],[17,"NID_id_smime_alg_3DESwrap","","",null,null],[17,"NID_id_smime_alg_RC2wrap","","",null,null],[17,"NID_id_smime_alg_ESDH","","",null,null],[17,"NID_id_smime_alg_CMS3DESwrap","","",null,null],[17,"NID_id_smime_alg_CMSRC2wrap","","",null,null],[17,"NID_id_alg_PWRI_KEK","","",null,null],[17,"NID_id_smime_cd_ldap","","",null,null],[17,"NID_id_smime_spq_ets_sqt_uri","","",null,null],[17,"NID_id_smime_spq_ets_sqt_unotice","","",null,null],[17,"NID_id_smime_cti_ets_proofOfOrigin","","",null,null],[17,"NID_id_smime_cti_ets_proofOfReceipt","","",null,null],[17,"NID_id_smime_cti_ets_proofOfDelivery","","",null,null],[17,"NID_id_smime_cti_ets_proofOfSender","","",null,null],[17,"NID_id_smime_cti_ets_proofOfApproval","","",null,null],[17,"NID_id_smime_cti_ets_proofOfCreation","","",null,null],[17,"NID_friendlyName","","",null,null],[17,"NID_localKeyID","","",null,null],[17,"NID_ms_csp_name","","",null,null],[17,"NID_LocalKeySet","","",null,null],[17,"NID_x509Certificate","","",null,null],[17,"NID_sdsiCertificate","","",null,null],[17,"NID_x509Crl","","",null,null],[17,"NID_pbe_WithSHA1And128BitRC4","","",null,null],[17,"NID_pbe_WithSHA1And40BitRC4","","",null,null],[17,"NID_pbe_WithSHA1And3_Key_TripleDES_CBC","","",null,null],[17,"NID_pbe_WithSHA1And2_Key_TripleDES_CBC","","",null,null],[17,"NID_pbe_WithSHA1And128BitRC2_CBC","","",null,null],[17,"NID_pbe_WithSHA1And40BitRC2_CBC","","",null,null],[17,"NID_keyBag","","",null,null],[17,"NID_pkcs8ShroudedKeyBag","","",null,null],[17,"NID_certBag","","",null,null],[17,"NID_crlBag","","",null,null],[17,"NID_secretBag","","",null,null],[17,"NID_safeContentsBag","","",null,null],[17,"NID_md2","","",null,null],[17,"NID_md4","","",null,null],[17,"NID_md5","","",null,null],[17,"NID_md5_sha1","","",null,null],[17,"NID_hmacWithMD5","","",null,null],[17,"NID_hmacWithSHA1","","",null,null],[17,"NID_hmacWithSHA224","","",null,null],[17,"NID_hmacWithSHA256","","",null,null],[17,"NID_hmacWithSHA384","","",null,null],[17,"NID_hmacWithSHA512","","",null,null],[17,"NID_rc2_cbc","","",null,null],[17,"NID_rc2_ecb","","",null,null],[17,"NID_rc2_cfb64","","",null,null],[17,"NID_rc2_ofb64","","",null,null],[17,"NID_rc2_40_cbc","","",null,null],[17,"NID_rc2_64_cbc","","",null,null],[17,"NID_rc4","","",null,null],[17,"NID_rc4_40","","",null,null],[17,"NID_des_ede3_cbc","","",null,null],[17,"NID_rc5_cbc","","",null,null],[17,"NID_rc5_ecb","","",null,null],[17,"NID_rc5_cfb64","","",null,null],[17,"NID_rc5_ofb64","","",null,null],[17,"NID_ms_ext_req","","",null,null],[17,"NID_ms_code_ind","","",null,null],[17,"NID_ms_code_com","","",null,null],[17,"NID_ms_ctl_sign","","",null,null],[17,"NID_ms_sgc","","",null,null],[17,"NID_ms_efs","","",null,null],[17,"NID_ms_smartcard_login","","",null,null],[17,"NID_ms_upn","","",null,null],[17,"NID_idea_cbc","","",null,null],[17,"NID_idea_ecb","","",null,null],[17,"NID_idea_cfb64","","",null,null],[17,"NID_idea_ofb64","","",null,null],[17,"NID_bf_cbc","","",null,null],[17,"NID_bf_ecb","","",null,null],[17,"NID_bf_cfb64","","",null,null],[17,"NID_bf_ofb64","","",null,null],[17,"NID_id_pkix","","",null,null],[17,"NID_id_pkix_mod","","",null,null],[17,"NID_id_pe","","",null,null],[17,"NID_id_qt","","",null,null],[17,"NID_id_kp","","",null,null],[17,"NID_id_it","","",null,null],[17,"NID_id_pkip","","",null,null],[17,"NID_id_alg","","",null,null],[17,"NID_id_cmc","","",null,null],[17,"NID_id_on","","",null,null],[17,"NID_id_pda","","",null,null],[17,"NID_id_aca","","",null,null],[17,"NID_id_qcs","","",null,null],[17,"NID_id_cct","","",null,null],[17,"NID_id_ppl","","",null,null],[17,"NID_id_ad","","",null,null],[17,"NID_id_pkix1_explicit_88","","",null,null],[17,"NID_id_pkix1_implicit_88","","",null,null],[17,"NID_id_pkix1_explicit_93","","",null,null],[17,"NID_id_pkix1_implicit_93","","",null,null],[17,"NID_id_mod_crmf","","",null,null],[17,"NID_id_mod_cmc","","",null,null],[17,"NID_id_mod_kea_profile_88","","",null,null],[17,"NID_id_mod_kea_profile_93","","",null,null],[17,"NID_id_mod_cmp","","",null,null],[17,"NID_id_mod_qualified_cert_88","","",null,null],[17,"NID_id_mod_qualified_cert_93","","",null,null],[17,"NID_id_mod_attribute_cert","","",null,null],[17,"NID_id_mod_timestamp_protocol","","",null,null],[17,"NID_id_mod_ocsp","","",null,null],[17,"NID_id_mod_dvcs","","",null,null],[17,"NID_id_mod_cmp2000","","",null,null],[17,"NID_info_access","","",null,null],[17,"NID_biometricInfo","","",null,null],[17,"NID_qcStatements","","",null,null],[17,"NID_ac_auditEntity","","",null,null],[17,"NID_ac_targeting","","",null,null],[17,"NID_aaControls","","",null,null],[17,"NID_sbgp_ipAddrBlock","","",null,null],[17,"NID_sbgp_autonomousSysNum","","",null,null],[17,"NID_sbgp_routerIdentifier","","",null,null],[17,"NID_ac_proxying","","",null,null],[17,"NID_sinfo_access","","",null,null],[17,"NID_proxyCertInfo","","",null,null],[17,"NID_id_qt_cps","","",null,null],[17,"NID_id_qt_unotice","","",null,null],[17,"NID_textNotice","","",null,null],[17,"NID_server_auth","","",null,null],[17,"NID_client_auth","","",null,null],[17,"NID_code_sign","","",null,null],[17,"NID_email_protect","","",null,null],[17,"NID_ipsecEndSystem","","",null,null],[17,"NID_ipsecTunnel","","",null,null],[17,"NID_ipsecUser","","",null,null],[17,"NID_time_stamp","","",null,null],[17,"NID_OCSP_sign","","",null,null],[17,"NID_dvcs","","",null,null],[17,"NID_id_it_caProtEncCert","","",null,null],[17,"NID_id_it_signKeyPairTypes","","",null,null],[17,"NID_id_it_encKeyPairTypes","","",null,null],[17,"NID_id_it_preferredSymmAlg","","",null,null],[17,"NID_id_it_caKeyUpdateInfo","","",null,null],[17,"NID_id_it_currentCRL","","",null,null],[17,"NID_id_it_unsupportedOIDs","","",null,null],[17,"NID_id_it_subscriptionRequest","","",null,null],[17,"NID_id_it_subscriptionResponse","","",null,null],[17,"NID_id_it_keyPairParamReq","","",null,null],[17,"NID_id_it_keyPairParamRep","","",null,null],[17,"NID_id_it_revPassphrase","","",null,null],[17,"NID_id_it_implicitConfirm","","",null,null],[17,"NID_id_it_confirmWaitTime","","",null,null],[17,"NID_id_it_origPKIMessage","","",null,null],[17,"NID_id_it_suppLangTags","","",null,null],[17,"NID_id_regCtrl","","",null,null],[17,"NID_id_regInfo","","",null,null],[17,"NID_id_regCtrl_regToken","","",null,null],[17,"NID_id_regCtrl_authenticator","","",null,null],[17,"NID_id_regCtrl_pkiPublicationInfo","","",null,null],[17,"NID_id_regCtrl_pkiArchiveOptions","","",null,null],[17,"NID_id_regCtrl_oldCertID","","",null,null],[17,"NID_id_regCtrl_protocolEncrKey","","",null,null],[17,"NID_id_regInfo_utf8Pairs","","",null,null],[17,"NID_id_regInfo_certReq","","",null,null],[17,"NID_id_alg_des40","","",null,null],[17,"NID_id_alg_noSignature","","",null,null],[17,"NID_id_alg_dh_sig_hmac_sha1","","",null,null],[17,"NID_id_alg_dh_pop","","",null,null],[17,"NID_id_cmc_statusInfo","","",null,null],[17,"NID_id_cmc_identification","","",null,null],[17,"NID_id_cmc_identityProof","","",null,null],[17,"NID_id_cmc_dataReturn","","",null,null],[17,"NID_id_cmc_transactionId","","",null,null],[17,"NID_id_cmc_senderNonce","","",null,null],[17,"NID_id_cmc_recipientNonce","","",null,null],[17,"NID_id_cmc_addExtensions","","",null,null],[17,"NID_id_cmc_encryptedPOP","","",null,null],[17,"NID_id_cmc_decryptedPOP","","",null,null],[17,"NID_id_cmc_lraPOPWitness","","",null,null],[17,"NID_id_cmc_getCert","","",null,null],[17,"NID_id_cmc_getCRL","","",null,null],[17,"NID_id_cmc_revokeRequest","","",null,null],[17,"NID_id_cmc_regInfo","","",null,null],[17,"NID_id_cmc_responseInfo","","",null,null],[17,"NID_id_cmc_queryPending","","",null,null],[17,"NID_id_cmc_popLinkRandom","","",null,null],[17,"NID_id_cmc_popLinkWitness","","",null,null],[17,"NID_id_cmc_confirmCertAcceptance","","",null,null],[17,"NID_id_on_personalData","","",null,null],[17,"NID_id_on_permanentIdentifier","","",null,null],[17,"NID_id_pda_dateOfBirth","","",null,null],[17,"NID_id_pda_placeOfBirth","","",null,null],[17,"NID_id_pda_gender","","",null,null],[17,"NID_id_pda_countryOfCitizenship","","",null,null],[17,"NID_id_pda_countryOfResidence","","",null,null],[17,"NID_id_aca_authenticationInfo","","",null,null],[17,"NID_id_aca_accessIdentity","","",null,null],[17,"NID_id_aca_chargingIdentity","","",null,null],[17,"NID_id_aca_group","","",null,null],[17,"NID_id_aca_role","","",null,null],[17,"NID_id_aca_encAttrs","","",null,null],[17,"NID_id_qcs_pkixQCSyntax_v1","","",null,null],[17,"NID_id_cct_crs","","",null,null],[17,"NID_id_cct_PKIData","","",null,null],[17,"NID_id_cct_PKIResponse","","",null,null],[17,"NID_id_ppl_anyLanguage","","",null,null],[17,"NID_id_ppl_inheritAll","","",null,null],[17,"NID_Independent","","",null,null],[17,"NID_ad_OCSP","","",null,null],[17,"NID_ad_ca_issuers","","",null,null],[17,"NID_ad_timeStamping","","",null,null],[17,"NID_ad_dvcs","","",null,null],[17,"NID_caRepository","","",null,null],[17,"NID_id_pkix_OCSP_basic","","",null,null],[17,"NID_id_pkix_OCSP_Nonce","","",null,null],[17,"NID_id_pkix_OCSP_CrlID","","",null,null],[17,"NID_id_pkix_OCSP_acceptableResponses","","",null,null],[17,"NID_id_pkix_OCSP_noCheck","","",null,null],[17,"NID_id_pkix_OCSP_archiveCutoff","","",null,null],[17,"NID_id_pkix_OCSP_serviceLocator","","",null,null],[17,"NID_id_pkix_OCSP_extendedStatus","","",null,null],[17,"NID_id_pkix_OCSP_valid","","",null,null],[17,"NID_id_pkix_OCSP_path","","",null,null],[17,"NID_id_pkix_OCSP_trustRoot","","",null,null],[17,"NID_algorithm","","",null,null],[17,"NID_md5WithRSA","","",null,null],[17,"NID_des_ecb","","",null,null],[17,"NID_des_cbc","","",null,null],[17,"NID_des_ofb64","","",null,null],[17,"NID_des_cfb64","","",null,null],[17,"NID_rsaSignature","","",null,null],[17,"NID_dsa_2","","",null,null],[17,"NID_dsaWithSHA","","",null,null],[17,"NID_shaWithRSAEncryption","","",null,null],[17,"NID_des_ede_ecb","","",null,null],[17,"NID_des_ede3_ecb","","",null,null],[17,"NID_des_ede_cbc","","",null,null],[17,"NID_des_ede_cfb64","","",null,null],[17,"NID_des_ede3_cfb64","","",null,null],[17,"NID_des_ede_ofb64","","",null,null],[17,"NID_des_ede3_ofb64","","",null,null],[17,"NID_desx_cbc","","",null,null],[17,"NID_sha","","",null,null],[17,"NID_sha1","","",null,null],[17,"NID_dsaWithSHA1_2","","",null,null],[17,"NID_sha1WithRSA","","",null,null],[17,"NID_ripemd160","","",null,null],[17,"NID_ripemd160WithRSA","","",null,null],[17,"NID_sxnet","","",null,null],[17,"NID_X500","","",null,null],[17,"NID_X509","","",null,null],[17,"NID_commonName","","",null,null],[17,"NID_surname","","",null,null],[17,"NID_serialNumber","","",null,null],[17,"NID_countryName","","",null,null],[17,"NID_localityName","","",null,null],[17,"NID_stateOrProvinceName","","",null,null],[17,"NID_streetAddress","","",null,null],[17,"NID_organizationName","","",null,null],[17,"NID_organizationalUnitName","","",null,null],[17,"NID_title","","",null,null],[17,"NID_description","","",null,null],[17,"NID_searchGuide","","",null,null],[17,"NID_businessCategory","","",null,null],[17,"NID_postalAddress","","",null,null],[17,"NID_postalCode","","",null,null],[17,"NID_postOfficeBox","","",null,null],[17,"NID_physicalDeliveryOfficeName","","",null,null],[17,"NID_telephoneNumber","","",null,null],[17,"NID_telexNumber","","",null,null],[17,"NID_teletexTerminalIdentifier","","",null,null],[17,"NID_facsimileTelephoneNumber","","",null,null],[17,"NID_x121Address","","",null,null],[17,"NID_internationaliSDNNumber","","",null,null],[17,"NID_registeredAddress","","",null,null],[17,"NID_destinationIndicator","","",null,null],[17,"NID_preferredDeliveryMethod","","",null,null],[17,"NID_presentationAddress","","",null,null],[17,"NID_supportedApplicationContext","","",null,null],[17,"NID_member","","",null,null],[17,"NID_owner","","",null,null],[17,"NID_roleOccupant","","",null,null],[17,"NID_seeAlso","","",null,null],[17,"NID_userPassword","","",null,null],[17,"NID_userCertificate","","",null,null],[17,"NID_cACertificate","","",null,null],[17,"NID_authorityRevocationList","","",null,null],[17,"NID_certificateRevocationList","","",null,null],[17,"NID_crossCertificatePair","","",null,null],[17,"NID_name","","",null,null],[17,"NID_givenName","","",null,null],[17,"NID_initials","","",null,null],[17,"NID_generationQualifier","","",null,null],[17,"NID_x500UniqueIdentifier","","",null,null],[17,"NID_dnQualifier","","",null,null],[17,"NID_enhancedSearchGuide","","",null,null],[17,"NID_protocolInformation","","",null,null],[17,"NID_distinguishedName","","",null,null],[17,"NID_uniqueMember","","",null,null],[17,"NID_houseIdentifier","","",null,null],[17,"NID_supportedAlgorithms","","",null,null],[17,"NID_deltaRevocationList","","",null,null],[17,"NID_dmdName","","",null,null],[17,"NID_pseudonym","","",null,null],[17,"NID_role","","",null,null],[17,"NID_X500algorithms","","",null,null],[17,"NID_rsa","","",null,null],[17,"NID_mdc2WithRSA","","",null,null],[17,"NID_mdc2","","",null,null],[17,"NID_id_ce","","",null,null],[17,"NID_subject_directory_attributes","","",null,null],[17,"NID_subject_key_identifier","","",null,null],[17,"NID_key_usage","","",null,null],[17,"NID_private_key_usage_period","","",null,null],[17,"NID_subject_alt_name","","",null,null],[17,"NID_issuer_alt_name","","",null,null],[17,"NID_basic_constraints","","",null,null],[17,"NID_crl_number","","",null,null],[17,"NID_crl_reason","","",null,null],[17,"NID_invalidity_date","","",null,null],[17,"NID_delta_crl","","",null,null],[17,"NID_issuing_distribution_point","","",null,null],[17,"NID_certificate_issuer","","",null,null],[17,"NID_name_constraints","","",null,null],[17,"NID_crl_distribution_points","","",null,null],[17,"NID_certificate_policies","","",null,null],[17,"NID_any_policy","","",null,null],[17,"NID_policy_mappings","","",null,null],[17,"NID_authority_key_identifier","","",null,null],[17,"NID_policy_constraints","","",null,null],[17,"NID_ext_key_usage","","",null,null],[17,"NID_freshest_crl","","",null,null],[17,"NID_inhibit_any_policy","","",null,null],[17,"NID_target_information","","",null,null],[17,"NID_no_rev_avail","","",null,null],[17,"NID_anyExtendedKeyUsage","","",null,null],[17,"NID_netscape","","",null,null],[17,"NID_netscape_cert_extension","","",null,null],[17,"NID_netscape_data_type","","",null,null],[17,"NID_netscape_cert_type","","",null,null],[17,"NID_netscape_base_url","","",null,null],[17,"NID_netscape_revocation_url","","",null,null],[17,"NID_netscape_ca_revocation_url","","",null,null],[17,"NID_netscape_renewal_url","","",null,null],[17,"NID_netscape_ca_policy_url","","",null,null],[17,"NID_netscape_ssl_server_name","","",null,null],[17,"NID_netscape_comment","","",null,null],[17,"NID_netscape_cert_sequence","","",null,null],[17,"NID_ns_sgc","","",null,null],[17,"NID_org","","",null,null],[17,"NID_dod","","",null,null],[17,"NID_iana","","",null,null],[17,"NID_Directory","","",null,null],[17,"NID_Management","","",null,null],[17,"NID_Experimental","","",null,null],[17,"NID_Private","","",null,null],[17,"NID_Security","","",null,null],[17,"NID_SNMPv2","","",null,null],[17,"NID_Mail","","",null,null],[17,"NID_Enterprises","","",null,null],[17,"NID_dcObject","","",null,null],[17,"NID_mime_mhs","","",null,null],[17,"NID_mime_mhs_headings","","",null,null],[17,"NID_mime_mhs_bodies","","",null,null],[17,"NID_id_hex_partial_message","","",null,null],[17,"NID_id_hex_multipart_message","","",null,null],[17,"NID_zlib_compression","","",null,null],[17,"NID_aes_128_ecb","","",null,null],[17,"NID_aes_128_cbc","","",null,null],[17,"NID_aes_128_ofb128","","",null,null],[17,"NID_aes_128_cfb128","","",null,null],[17,"NID_id_aes128_wrap","","",null,null],[17,"NID_aes_128_gcm","","",null,null],[17,"NID_aes_128_ccm","","",null,null],[17,"NID_id_aes128_wrap_pad","","",null,null],[17,"NID_aes_192_ecb","","",null,null],[17,"NID_aes_192_cbc","","",null,null],[17,"NID_aes_192_ofb128","","",null,null],[17,"NID_aes_192_cfb128","","",null,null],[17,"NID_id_aes192_wrap","","",null,null],[17,"NID_aes_192_gcm","","",null,null],[17,"NID_aes_192_ccm","","",null,null],[17,"NID_id_aes192_wrap_pad","","",null,null],[17,"NID_aes_256_ecb","","",null,null],[17,"NID_aes_256_cbc","","",null,null],[17,"NID_aes_256_ofb128","","",null,null],[17,"NID_aes_256_cfb128","","",null,null],[17,"NID_id_aes256_wrap","","",null,null],[17,"NID_aes_256_gcm","","",null,null],[17,"NID_aes_256_ccm","","",null,null],[17,"NID_id_aes256_wrap_pad","","",null,null],[17,"NID_aes_128_cfb1","","",null,null],[17,"NID_aes_192_cfb1","","",null,null],[17,"NID_aes_256_cfb1","","",null,null],[17,"NID_aes_128_cfb8","","",null,null],[17,"NID_aes_192_cfb8","","",null,null],[17,"NID_aes_256_cfb8","","",null,null],[17,"NID_aes_128_ctr","","",null,null],[17,"NID_aes_192_ctr","","",null,null],[17,"NID_aes_256_ctr","","",null,null],[17,"NID_aes_128_xts","","",null,null],[17,"NID_aes_256_xts","","",null,null],[17,"NID_des_cfb1","","",null,null],[17,"NID_des_cfb8","","",null,null],[17,"NID_des_ede3_cfb1","","",null,null],[17,"NID_des_ede3_cfb8","","",null,null],[17,"NID_sha256","","",null,null],[17,"NID_sha384","","",null,null],[17,"NID_sha512","","",null,null],[17,"NID_sha224","","",null,null],[17,"NID_dsa_with_SHA224","","",null,null],[17,"NID_dsa_with_SHA256","","",null,null],[17,"NID_hold_instruction_code","","",null,null],[17,"NID_hold_instruction_none","","",null,null],[17,"NID_hold_instruction_call_issuer","","",null,null],[17,"NID_hold_instruction_reject","","",null,null],[17,"NID_data","","",null,null],[17,"NID_pss","","",null,null],[17,"NID_ucl","","",null,null],[17,"NID_pilot","","",null,null],[17,"NID_pilotAttributeType","","",null,null],[17,"NID_pilotAttributeSyntax","","",null,null],[17,"NID_pilotObjectClass","","",null,null],[17,"NID_pilotGroups","","",null,null],[17,"NID_iA5StringSyntax","","",null,null],[17,"NID_caseIgnoreIA5StringSyntax","","",null,null],[17,"NID_pilotObject","","",null,null],[17,"NID_pilotPerson","","",null,null],[17,"NID_account","","",null,null],[17,"NID_document","","",null,null],[17,"NID_room","","",null,null],[17,"NID_documentSeries","","",null,null],[17,"NID_Domain","","",null,null],[17,"NID_rFC822localPart","","",null,null],[17,"NID_dNSDomain","","",null,null],[17,"NID_domainRelatedObject","","",null,null],[17,"NID_friendlyCountry","","",null,null],[17,"NID_simpleSecurityObject","","",null,null],[17,"NID_pilotOrganization","","",null,null],[17,"NID_pilotDSA","","",null,null],[17,"NID_qualityLabelledData","","",null,null],[17,"NID_userId","","",null,null],[17,"NID_textEncodedORAddress","","",null,null],[17,"NID_rfc822Mailbox","","",null,null],[17,"NID_info","","",null,null],[17,"NID_favouriteDrink","","",null,null],[17,"NID_roomNumber","","",null,null],[17,"NID_photo","","",null,null],[17,"NID_userClass","","",null,null],[17,"NID_host","","",null,null],[17,"NID_manager","","",null,null],[17,"NID_documentIdentifier","","",null,null],[17,"NID_documentTitle","","",null,null],[17,"NID_documentVersion","","",null,null],[17,"NID_documentAuthor","","",null,null],[17,"NID_documentLocation","","",null,null],[17,"NID_homeTelephoneNumber","","",null,null],[17,"NID_secretary","","",null,null],[17,"NID_otherMailbox","","",null,null],[17,"NID_lastModifiedTime","","",null,null],[17,"NID_lastModifiedBy","","",null,null],[17,"NID_domainComponent","","",null,null],[17,"NID_aRecord","","",null,null],[17,"NID_pilotAttributeType27","","",null,null],[17,"NID_mXRecord","","",null,null],[17,"NID_nSRecord","","",null,null],[17,"NID_sOARecord","","",null,null],[17,"NID_cNAMERecord","","",null,null],[17,"NID_associatedDomain","","",null,null],[17,"NID_associatedName","","",null,null],[17,"NID_homePostalAddress","","",null,null],[17,"NID_personalTitle","","",null,null],[17,"NID_mobileTelephoneNumber","","",null,null],[17,"NID_pagerTelephoneNumber","","",null,null],[17,"NID_friendlyCountryName","","",null,null],[17,"NID_organizationalStatus","","",null,null],[17,"NID_janetMailbox","","",null,null],[17,"NID_mailPreferenceOption","","",null,null],[17,"NID_buildingName","","",null,null],[17,"NID_dSAQuality","","",null,null],[17,"NID_singleLevelQuality","","",null,null],[17,"NID_subtreeMinimumQuality","","",null,null],[17,"NID_subtreeMaximumQuality","","",null,null],[17,"NID_personalSignature","","",null,null],[17,"NID_dITRedirect","","",null,null],[17,"NID_audio","","",null,null],[17,"NID_documentPublisher","","",null,null],[17,"NID_id_set","","",null,null],[17,"NID_set_ctype","","",null,null],[17,"NID_set_msgExt","","",null,null],[17,"NID_set_attr","","",null,null],[17,"NID_set_policy","","",null,null],[17,"NID_set_certExt","","",null,null],[17,"NID_set_brand","","",null,null],[17,"NID_setct_PANData","","",null,null],[17,"NID_setct_PANToken","","",null,null],[17,"NID_setct_PANOnly","","",null,null],[17,"NID_setct_OIData","","",null,null],[17,"NID_setct_PI","","",null,null],[17,"NID_setct_PIData","","",null,null],[17,"NID_setct_PIDataUnsigned","","",null,null],[17,"NID_setct_HODInput","","",null,null],[17,"NID_setct_AuthResBaggage","","",null,null],[17,"NID_setct_AuthRevReqBaggage","","",null,null],[17,"NID_setct_AuthRevResBaggage","","",null,null],[17,"NID_setct_CapTokenSeq","","",null,null],[17,"NID_setct_PInitResData","","",null,null],[17,"NID_setct_PI_TBS","","",null,null],[17,"NID_setct_PResData","","",null,null],[17,"NID_setct_AuthReqTBS","","",null,null],[17,"NID_setct_AuthResTBS","","",null,null],[17,"NID_setct_AuthResTBSX","","",null,null],[17,"NID_setct_AuthTokenTBS","","",null,null],[17,"NID_setct_CapTokenData","","",null,null],[17,"NID_setct_CapTokenTBS","","",null,null],[17,"NID_setct_AcqCardCodeMsg","","",null,null],[17,"NID_setct_AuthRevReqTBS","","",null,null],[17,"NID_setct_AuthRevResData","","",null,null],[17,"NID_setct_AuthRevResTBS","","",null,null],[17,"NID_setct_CapReqTBS","","",null,null],[17,"NID_setct_CapReqTBSX","","",null,null],[17,"NID_setct_CapResData","","",null,null],[17,"NID_setct_CapRevReqTBS","","",null,null],[17,"NID_setct_CapRevReqTBSX","","",null,null],[17,"NID_setct_CapRevResData","","",null,null],[17,"NID_setct_CredReqTBS","","",null,null],[17,"NID_setct_CredReqTBSX","","",null,null],[17,"NID_setct_CredResData","","",null,null],[17,"NID_setct_CredRevReqTBS","","",null,null],[17,"NID_setct_CredRevReqTBSX","","",null,null],[17,"NID_setct_CredRevResData","","",null,null],[17,"NID_setct_PCertReqData","","",null,null],[17,"NID_setct_PCertResTBS","","",null,null],[17,"NID_setct_BatchAdminReqData","","",null,null],[17,"NID_setct_BatchAdminResData","","",null,null],[17,"NID_setct_CardCInitResTBS","","",null,null],[17,"NID_setct_MeAqCInitResTBS","","",null,null],[17,"NID_setct_RegFormResTBS","","",null,null],[17,"NID_setct_CertReqData","","",null,null],[17,"NID_setct_CertReqTBS","","",null,null],[17,"NID_setct_CertResData","","",null,null],[17,"NID_setct_CertInqReqTBS","","",null,null],[17,"NID_setct_ErrorTBS","","",null,null],[17,"NID_setct_PIDualSignedTBE","","",null,null],[17,"NID_setct_PIUnsignedTBE","","",null,null],[17,"NID_setct_AuthReqTBE","","",null,null],[17,"NID_setct_AuthResTBE","","",null,null],[17,"NID_setct_AuthResTBEX","","",null,null],[17,"NID_setct_AuthTokenTBE","","",null,null],[17,"NID_setct_CapTokenTBE","","",null,null],[17,"NID_setct_CapTokenTBEX","","",null,null],[17,"NID_setct_AcqCardCodeMsgTBE","","",null,null],[17,"NID_setct_AuthRevReqTBE","","",null,null],[17,"NID_setct_AuthRevResTBE","","",null,null],[17,"NID_setct_AuthRevResTBEB","","",null,null],[17,"NID_setct_CapReqTBE","","",null,null],[17,"NID_setct_CapReqTBEX","","",null,null],[17,"NID_setct_CapResTBE","","",null,null],[17,"NID_setct_CapRevReqTBE","","",null,null],[17,"NID_setct_CapRevReqTBEX","","",null,null],[17,"NID_setct_CapRevResTBE","","",null,null],[17,"NID_setct_CredReqTBE","","",null,null],[17,"NID_setct_CredReqTBEX","","",null,null],[17,"NID_setct_CredResTBE","","",null,null],[17,"NID_setct_CredRevReqTBE","","",null,null],[17,"NID_setct_CredRevReqTBEX","","",null,null],[17,"NID_setct_CredRevResTBE","","",null,null],[17,"NID_setct_BatchAdminReqTBE","","",null,null],[17,"NID_setct_BatchAdminResTBE","","",null,null],[17,"NID_setct_RegFormReqTBE","","",null,null],[17,"NID_setct_CertReqTBE","","",null,null],[17,"NID_setct_CertReqTBEX","","",null,null],[17,"NID_setct_CertResTBE","","",null,null],[17,"NID_setct_CRLNotificationTBS","","",null,null],[17,"NID_setct_CRLNotificationResTBS","","",null,null],[17,"NID_setct_BCIDistributionTBS","","",null,null],[17,"NID_setext_genCrypt","","",null,null],[17,"NID_setext_miAuth","","",null,null],[17,"NID_setext_pinSecure","","",null,null],[17,"NID_setext_pinAny","","",null,null],[17,"NID_setext_track2","","",null,null],[17,"NID_setext_cv","","",null,null],[17,"NID_set_policy_root","","",null,null],[17,"NID_setCext_hashedRoot","","",null,null],[17,"NID_setCext_certType","","",null,null],[17,"NID_setCext_merchData","","",null,null],[17,"NID_setCext_cCertRequired","","",null,null],[17,"NID_setCext_tunneling","","",null,null],[17,"NID_setCext_setExt","","",null,null],[17,"NID_setCext_setQualf","","",null,null],[17,"NID_setCext_PGWYcapabilities","","",null,null],[17,"NID_setCext_TokenIdentifier","","",null,null],[17,"NID_setCext_Track2Data","","",null,null],[17,"NID_setCext_TokenType","","",null,null],[17,"NID_setCext_IssuerCapabilities","","",null,null],[17,"NID_setAttr_Cert","","",null,null],[17,"NID_setAttr_PGWYcap","","",null,null],[17,"NID_setAttr_TokenType","","",null,null],[17,"NID_setAttr_IssCap","","",null,null],[17,"NID_set_rootKeyThumb","","",null,null],[17,"NID_set_addPolicy","","",null,null],[17,"NID_setAttr_Token_EMV","","",null,null],[17,"NID_setAttr_Token_B0Prime","","",null,null],[17,"NID_setAttr_IssCap_CVM","","",null,null],[17,"NID_setAttr_IssCap_T2","","",null,null],[17,"NID_setAttr_IssCap_Sig","","",null,null],[17,"NID_setAttr_GenCryptgrm","","",null,null],[17,"NID_setAttr_T2Enc","","",null,null],[17,"NID_setAttr_T2cleartxt","","",null,null],[17,"NID_setAttr_TokICCsig","","",null,null],[17,"NID_setAttr_SecDevSig","","",null,null],[17,"NID_set_brand_IATA_ATA","","",null,null],[17,"NID_set_brand_Diners","","",null,null],[17,"NID_set_brand_AmericanExpress","","",null,null],[17,"NID_set_brand_JCB","","",null,null],[17,"NID_set_brand_Visa","","",null,null],[17,"NID_set_brand_MasterCard","","",null,null],[17,"NID_set_brand_Novus","","",null,null],[17,"NID_des_cdmf","","",null,null],[17,"NID_rsaOAEPEncryptionSET","","",null,null],[17,"NID_ipsec3","","",null,null],[17,"NID_ipsec4","","",null,null],[17,"NID_whirlpool","","",null,null],[17,"NID_cryptopro","","",null,null],[17,"NID_cryptocom","","",null,null],[17,"NID_id_GostR3411_94_with_GostR3410_2001","","",null,null],[17,"NID_id_GostR3411_94_with_GostR3410_94","","",null,null],[17,"NID_id_GostR3411_94","","",null,null],[17,"NID_id_HMACGostR3411_94","","",null,null],[17,"NID_id_GostR3410_2001","","",null,null],[17,"NID_id_GostR3410_94","","",null,null],[17,"NID_id_Gost28147_89","","",null,null],[17,"NID_gost89_cnt","","",null,null],[17,"NID_id_Gost28147_89_MAC","","",null,null],[17,"NID_id_GostR3411_94_prf","","",null,null],[17,"NID_id_GostR3410_2001DH","","",null,null],[17,"NID_id_GostR3410_94DH","","",null,null],[17,"NID_id_Gost28147_89_CryptoPro_KeyMeshing","","",null,null],[17,"NID_id_Gost28147_89_None_KeyMeshing","","",null,null],[17,"NID_id_GostR3411_94_TestParamSet","","",null,null],[17,"NID_id_GostR3411_94_CryptoProParamSet","","",null,null],[17,"NID_id_Gost28147_89_TestParamSet","","",null,null],[17,"NID_id_Gost28147_89_CryptoPro_A_ParamSet","","",null,null],[17,"NID_id_Gost28147_89_CryptoPro_B_ParamSet","","",null,null],[17,"NID_id_Gost28147_89_CryptoPro_C_ParamSet","","",null,null],[17,"NID_id_Gost28147_89_CryptoPro_D_ParamSet","","",null,null],[17,"NID_id_Gost28147_89_CryptoPro_Oscar_1_1_ParamSet","","",null,null],[17,"NID_id_Gost28147_89_CryptoPro_Oscar_1_0_ParamSet","","",null,null],[17,"NID_id_Gost28147_89_CryptoPro_RIC_1_ParamSet","","",null,null],[17,"NID_id_GostR3410_94_TestParamSet","","",null,null],[17,"NID_id_GostR3410_94_CryptoPro_A_ParamSet","","",null,null],[17,"NID_id_GostR3410_94_CryptoPro_B_ParamSet","","",null,null],[17,"NID_id_GostR3410_94_CryptoPro_C_ParamSet","","",null,null],[17,"NID_id_GostR3410_94_CryptoPro_D_ParamSet","","",null,null],[17,"NID_id_GostR3410_94_CryptoPro_XchA_ParamSet","","",null,null],[17,"NID_id_GostR3410_94_CryptoPro_XchB_ParamSet","","",null,null],[17,"NID_id_GostR3410_94_CryptoPro_XchC_ParamSet","","",null,null],[17,"NID_id_GostR3410_2001_TestParamSet","","",null,null],[17,"NID_id_GostR3410_2001_CryptoPro_A_ParamSet","","",null,null],[17,"NID_id_GostR3410_2001_CryptoPro_B_ParamSet","","",null,null],[17,"NID_id_GostR3410_2001_CryptoPro_C_ParamSet","","",null,null],[17,"NID_id_GostR3410_2001_CryptoPro_XchA_ParamSet","","",null,null],[17,"NID_id_GostR3410_2001_CryptoPro_XchB_ParamSet","","",null,null],[17,"NID_id_GostR3410_94_a","","",null,null],[17,"NID_id_GostR3410_94_aBis","","",null,null],[17,"NID_id_GostR3410_94_b","","",null,null],[17,"NID_id_GostR3410_94_bBis","","",null,null],[17,"NID_id_Gost28147_89_cc","","",null,null],[17,"NID_id_GostR3410_94_cc","","",null,null],[17,"NID_id_GostR3410_2001_cc","","",null,null],[17,"NID_id_GostR3411_94_with_GostR3410_94_cc","","",null,null],[17,"NID_id_GostR3411_94_with_GostR3410_2001_cc","","",null,null],[17,"NID_id_GostR3410_2001_ParamSet_cc","","",null,null],[17,"NID_camellia_128_cbc","","",null,null],[17,"NID_camellia_192_cbc","","",null,null],[17,"NID_camellia_256_cbc","","",null,null],[17,"NID_id_camellia128_wrap","","",null,null],[17,"NID_id_camellia192_wrap","","",null,null],[17,"NID_id_camellia256_wrap","","",null,null],[17,"NID_camellia_128_ecb","","",null,null],[17,"NID_camellia_128_ofb128","","",null,null],[17,"NID_camellia_128_cfb128","","",null,null],[17,"NID_camellia_192_ecb","","",null,null],[17,"NID_camellia_192_ofb128","","",null,null],[17,"NID_camellia_192_cfb128","","",null,null],[17,"NID_camellia_256_ecb","","",null,null],[17,"NID_camellia_256_ofb128","","",null,null],[17,"NID_camellia_256_cfb128","","",null,null],[17,"NID_camellia_128_cfb1","","",null,null],[17,"NID_camellia_192_cfb1","","",null,null],[17,"NID_camellia_256_cfb1","","",null,null],[17,"NID_camellia_128_cfb8","","",null,null],[17,"NID_camellia_192_cfb8","","",null,null],[17,"NID_camellia_256_cfb8","","",null,null],[17,"NID_kisa","","",null,null],[17,"NID_seed_ecb","","",null,null],[17,"NID_seed_cbc","","",null,null],[17,"NID_seed_cfb128","","",null,null],[17,"NID_seed_ofb128","","",null,null],[17,"NID_hmac","","",null,null],[17,"NID_cmac","","",null,null],[17,"NID_rc4_hmac_md5","","",null,null],[17,"NID_aes_128_cbc_hmac_sha1","","",null,null],[17,"NID_aes_192_cbc_hmac_sha1","","",null,null],[17,"NID_aes_256_cbc_hmac_sha1","","",null,null],[17,"OCSP_NOCERTS","","",null,null],[17,"OCSP_NOINTERN","","",null,null],[17,"OCSP_NOSIGS","","",null,null],[17,"OCSP_NOCHAIN","","",null,null],[17,"OCSP_NOVERIFY","","",null,null],[17,"OCSP_NOEXPLICIT","","",null,null],[17,"OCSP_NOCASIGN","","",null,null],[17,"OCSP_NODELEGATED","","",null,null],[17,"OCSP_NOCHECKS","","",null,null],[17,"OCSP_TRUSTOTHER","","",null,null],[17,"OCSP_RESPID_KEY","","",null,null],[17,"OCSP_NOTIME","","",null,null],[17,"V_OCSP_CERTSTATUS_GOOD","","",null,null],[17,"V_OCSP_CERTSTATUS_REVOKED","","",null,null],[17,"V_OCSP_CERTSTATUS_UNKNOWN","","",null,null],[17,"OCSP_REVOKED_STATUS_NOSTATUS","","",null,null],[17,"OCSP_REVOKED_STATUS_UNSPECIFIED","","",null,null],[17,"OCSP_REVOKED_STATUS_KEYCOMPROMISE","","",null,null],[17,"OCSP_REVOKED_STATUS_CACOMPROMISE","","",null,null],[17,"OCSP_REVOKED_STATUS_AFFILIATIONCHANGED","","",null,null],[17,"OCSP_REVOKED_STATUS_SUPERSEDED","","",null,null],[17,"OCSP_REVOKED_STATUS_CESSATIONOFOPERATION","","",null,null],[17,"OCSP_REVOKED_STATUS_CERTIFICATEHOLD","","",null,null],[17,"OCSP_REVOKED_STATUS_REMOVEFROMCRL","","",null,null],[17,"OCSP_RESPONSE_STATUS_SUCCESSFUL","","",null,null],[17,"OCSP_RESPONSE_STATUS_MALFORMEDREQUEST","","",null,null],[17,"OCSP_RESPONSE_STATUS_INTERNALERROR","","",null,null],[17,"OCSP_RESPONSE_STATUS_TRYLATER","","",null,null],[17,"OCSP_RESPONSE_STATUS_SIGREQUIRED","","",null,null],[17,"OCSP_RESPONSE_STATUS_UNAUTHORIZED","","",null,null],[17,"OPENSSL_EC_NAMED_CURVE","","",null,null],[17,"PKCS5_SALT_LEN","","",null,null],[17,"PKCS12_DEFAULT_ITER","","",null,null],[17,"RSA_F4","","",null,null],[17,"RSA_PKCS1_PADDING","","",null,null],[17,"RSA_SSLV23_PADDING","","",null,null],[17,"RSA_NO_PADDING","","",null,null],[17,"RSA_PKCS1_OAEP_PADDING","","",null,null],[17,"RSA_X931_PADDING","","",null,null],[17,"SHA_LBLOCK","","",null,null],[17,"SSL_CTRL_SET_TMP_DH","","",null,null],[17,"SSL_CTRL_SET_TMP_ECDH","","",null,null],[17,"SSL_CTRL_EXTRA_CHAIN_CERT","","",null,null],[17,"SSL_CTRL_MODE","","",null,null],[17,"SSL_CTRL_SET_READ_AHEAD","","",null,null],[17,"SSL_CTRL_SET_TLSEXT_SERVERNAME_CB","","",null,null],[17,"SSL_CTRL_SET_TLSEXT_SERVERNAME_ARG","","",null,null],[17,"SSL_CTRL_SET_TLSEXT_HOSTNAME","","",null,null],[17,"SSL_CTRL_SET_TLSEXT_STATUS_REQ_CB","","",null,null],[17,"SSL_CTRL_SET_TLSEXT_STATUS_REQ_CB_ARG","","",null,null],[17,"SSL_CTRL_SET_TLSEXT_STATUS_REQ_TYPE","","",null,null],[17,"SSL_CTRL_GET_TLSEXT_STATUS_REQ_OCSP_RESP","","",null,null],[17,"SSL_CTRL_SET_TLSEXT_STATUS_REQ_OCSP_RESP","","",null,null],[17,"SSL_CTRL_GET_EXTRA_CHAIN_CERTS","","",null,null],[17,"SSL_MODE_ENABLE_PARTIAL_WRITE","","",null,null],[17,"SSL_MODE_ACCEPT_MOVING_WRITE_BUFFER","","",null,null],[17,"SSL_MODE_AUTO_RETRY","","",null,null],[17,"SSL_MODE_NO_AUTO_CHAIN","","",null,null],[17,"SSL_MODE_RELEASE_BUFFERS","","",null,null],[17,"SSL_MODE_SEND_CLIENTHELLO_TIME","","",null,null],[17,"SSL_MODE_SEND_SERVERHELLO_TIME","","",null,null],[17,"SSL_MODE_SEND_FALLBACK_SCSV","","",null,null],[17,"SSL_ERROR_NONE","","",null,null],[17,"SSL_ERROR_SSL","","",null,null],[17,"SSL_ERROR_SYSCALL","","",null,null],[17,"SSL_ERROR_WANT_ACCEPT","","",null,null],[17,"SSL_ERROR_WANT_CONNECT","","",null,null],[17,"SSL_ERROR_WANT_READ","","",null,null],[17,"SSL_ERROR_WANT_WRITE","","",null,null],[17,"SSL_ERROR_WANT_X509_LOOKUP","","",null,null],[17,"SSL_ERROR_ZERO_RETURN","","",null,null],[17,"SSL_VERIFY_NONE","","",null,null],[17,"SSL_VERIFY_PEER","","",null,null],[17,"SSL_VERIFY_FAIL_IF_NO_PEER_CERT","","",null,null],[17,"SSL_OP_DONT_INSERT_EMPTY_FRAGMENTS","","",null,null],[17,"SSL_OP_CRYPTOPRO_TLSEXT_BUG","","",null,null],[17,"SSL_OP_LEGACY_SERVER_CONNECT","","",null,null],[17,"SSL_OP_SAFARI_ECDHE_ECDSA_BUG","","",null,null],[17,"SSL_OP_ALL","","",null,null],[17,"SSL_OP_NO_QUERY_MTU","","",null,null],[17,"SSL_OP_COOKIE_EXCHANGE","","",null,null],[17,"SSL_OP_NO_TICKET","","",null,null],[17,"SSL_OP_CISCO_ANYCONNECT","","",null,null],[17,"SSL_OP_NO_SESSION_RESUMPTION_ON_RENEGOTIATION","","",null,null],[17,"SSL_OP_NO_COMPRESSION","","",null,null],[17,"SSL_OP_ALLOW_UNSAFE_LEGACY_RENEGOTIATION","","",null,null],[17,"SSL_OP_CIPHER_SERVER_PREFERENCE","","",null,null],[17,"SSL_OP_TLS_ROLLBACK_BUG","","",null,null],[17,"SSL_OP_NO_SSLv3","","",null,null],[17,"SSL_OP_NO_TLSv1","","",null,null],[17,"SSL_OP_NO_TLSv1_2","","",null,null],[17,"SSL_OP_NO_TLSv1_1","","",null,null],[17,"TLSEXT_NAMETYPE_host_name","","",null,null],[17,"TLSEXT_STATUSTYPE_ocsp","","",null,null],[17,"SSL_TLSEXT_ERR_OK","","",null,null],[17,"SSL_TLSEXT_ERR_ALERT_WARNING","","",null,null],[17,"SSL_TLSEXT_ERR_ALERT_FATAL","","",null,null],[17,"SSL_TLSEXT_ERR_NOACK","","",null,null],[17,"OPENSSL_NPN_UNSUPPORTED","","",null,null],[17,"OPENSSL_NPN_NEGOTIATED","","",null,null],[17,"OPENSSL_NPN_NO_OVERLAP","","",null,null],[17,"V_ASN1_GENERALIZEDTIME","","",null,null],[17,"V_ASN1_UTCTIME","","",null,null],[17,"X509_FILETYPE_ASN1","","",null,null],[17,"X509_FILETYPE_DEFAULT","","",null,null],[17,"X509_FILETYPE_PEM","","",null,null],[17,"X509_V_ERR_AKID_ISSUER_SERIAL_MISMATCH","","",null,null],[17,"X509_V_ERR_AKID_SKID_MISMATCH","","",null,null],[17,"X509_V_ERR_APPLICATION_VERIFICATION","","",null,null],[17,"X509_V_ERR_CERT_CHAIN_TOO_LONG","","",null,null],[17,"X509_V_ERR_CERT_HAS_EXPIRED","","",null,null],[17,"X509_V_ERR_CERT_NOT_YET_VALID","","",null,null],[17,"X509_V_ERR_CERT_REJECTED","","",null,null],[17,"X509_V_ERR_CERT_REVOKED","","",null,null],[17,"X509_V_ERR_CERT_SIGNATURE_FAILURE","","",null,null],[17,"X509_V_ERR_CERT_UNTRUSTED","","",null,null],[17,"X509_V_ERR_CRL_HAS_EXPIRED","","",null,null],[17,"X509_V_ERR_CRL_NOT_YET_VALID","","",null,null],[17,"X509_V_ERR_CRL_PATH_VALIDATION_ERROR","","",null,null],[17,"X509_V_ERR_CRL_SIGNATURE_FAILURE","","",null,null],[17,"X509_V_ERR_DEPTH_ZERO_SELF_SIGNED_CERT","","",null,null],[17,"X509_V_ERR_DIFFERENT_CRL_SCOPE","","",null,null],[17,"X509_V_ERR_ERROR_IN_CERT_NOT_AFTER_FIELD","","",null,null],[17,"X509_V_ERR_ERROR_IN_CERT_NOT_BEFORE_FIELD","","",null,null],[17,"X509_V_ERR_ERROR_IN_CRL_LAST_UPDATE_FIELD","","",null,null],[17,"X509_V_ERR_ERROR_IN_CRL_NEXT_UPDATE_FIELD","","",null,null],[17,"X509_V_ERR_EXCLUDED_VIOLATION","","",null,null],[17,"X509_V_ERR_INVALID_CA","","",null,null],[17,"X509_V_ERR_INVALID_EXTENSION","","",null,null],[17,"X509_V_ERR_INVALID_NON_CA","","",null,null],[17,"X509_V_ERR_INVALID_POLICY_EXTENSION","","",null,null],[17,"X509_V_ERR_INVALID_PURPOSE","","",null,null],[17,"X509_V_ERR_KEYUSAGE_NO_CERTSIGN","","",null,null],[17,"X509_V_ERR_KEYUSAGE_NO_CRL_SIGN","","",null,null],[17,"X509_V_ERR_KEYUSAGE_NO_DIGITAL_SIGNATURE","","",null,null],[17,"X509_V_ERR_NO_EXPLICIT_POLICY","","",null,null],[17,"X509_V_ERR_OUT_OF_MEM","","",null,null],[17,"X509_V_ERR_PATH_LENGTH_EXCEEDED","","",null,null],[17,"X509_V_ERR_PERMITTED_VIOLATION","","",null,null],[17,"X509_V_ERR_PROXY_CERTIFICATES_NOT_ALLOWED","","",null,null],[17,"X509_V_ERR_PROXY_PATH_LENGTH_EXCEEDED","","",null,null],[17,"X509_V_ERR_SELF_SIGNED_CERT_IN_CHAIN","","",null,null],[17,"X509_V_ERR_SUBJECT_ISSUER_MISMATCH","","",null,null],[17,"X509_V_ERR_SUBTREE_MINMAX","","",null,null],[17,"X509_V_ERR_UNABLE_TO_DECODE_ISSUER_PUBLIC_KEY","","",null,null],[17,"X509_V_ERR_UNABLE_TO_DECRYPT_CERT_SIGNATURE","","",null,null],[17,"X509_V_ERR_UNABLE_TO_DECRYPT_CRL_SIGNATURE","","",null,null],[17,"X509_V_ERR_UNABLE_TO_GET_CRL","","",null,null],[17,"X509_V_ERR_UNABLE_TO_GET_CRL_ISSUER","","",null,null],[17,"X509_V_ERR_UNABLE_TO_GET_ISSUER_CERT","","",null,null],[17,"X509_V_ERR_UNABLE_TO_GET_ISSUER_CERT_LOCALLY","","",null,null],[17,"X509_V_ERR_UNABLE_TO_VERIFY_LEAF_SIGNATURE","","",null,null],[17,"X509_V_ERR_UNHANDLED_CRITICAL_CRL_EXTENSION","","",null,null],[17,"X509_V_ERR_UNHANDLED_CRITICAL_EXTENSION","","",null,null],[17,"X509_V_ERR_UNNESTED_RESOURCE","","",null,null],[17,"X509_V_ERR_UNSUPPORTED_CONSTRAINT_SYNTAX","","",null,null],[17,"X509_V_ERR_UNSUPPORTED_CONSTRAINT_TYPE","","",null,null],[17,"X509_V_ERR_UNSUPPORTED_EXTENSION_FEATURE","","",null,null],[17,"X509_V_ERR_UNSUPPORTED_NAME_SYNTAX","","",null,null],[17,"X509_V_OK","","",null,null],[17,"GEN_OTHERNAME","","",null,null],[17,"GEN_EMAIL","","",null,null],[17,"GEN_DNS","","",null,null],[17,"GEN_X400","","",null,null],[17,"GEN_DIRNAME","","",null,null],[17,"GEN_EDIPARTY","","",null,null],[17,"GEN_URI","","",null,null],[17,"GEN_IPADD","","",null,null],[17,"GEN_RID","","",null,null],[11,"clone","","",33,{"inputs":[{"name":"self"}],"output":{"name":"point_conversion_form_t"}}]],"paths":[[3,"stack_st_ASN1_OBJECT"],[3,"stack_st_X509"],[3,"stack_st_X509_NAME"],[3,"stack_st_X509_ATTRIBUTE"],[3,"stack_st_X509_EXTENSION"],[3,"stack_st_GENERAL_NAME"],[3,"stack_st_void"],[3,"stack_st_SSL_CIPHER"],[3,"stack_st_OPENSSL_STRING"],[3,"_STACK"],[3,"BIO_METHOD"],[3,"RSA"],[3,"DSA"],[3,"EVP_PKEY"],[3,"BIO"],[3,"CRYPTO_EX_DATA"],[3,"EVP_CIPHER"],[3,"BIGNUM"],[3,"DH"],[3,"X509"],[3,"X509_CINF"],[3,"X509_ALGOR"],[3,"ASN1_ENCODING"],[3,"X509_VAL"],[3,"X509_REQ_INFO"],[3,"X509_REQ"],[3,"SSL"],[3,"SSL_CTX"],[3,"SSL_SESSION"],[3,"GENERAL_NAME"],[3,"SHA_CTX"],[3,"SHA256_CTX"],[3,"SHA512_CTX"],[4,"point_conversion_form_t"]]};
searchIndex["owning_ref"] = {"doc":"An owning reference.","items":[[8,"StableAddress","owning_ref","An unsafe marker trait for types that deref to a stable address, even when moved. For example, this is implemented by Box, Vec, Rc, Arc and String, among others. Even when a Box is moved, the underlying storage remains at a fixed location.",null,null],[8,"CloneStableAddress","","An unsafe marker trait for types where clones deref to the same address. This has all the requirements of StableDeref, and additionally requires that after calling clone(), both the old and new value deref to the same address. For example, Rc and Arc implement CloneStableDeref, but Box and Vec do not.",null,null],[3,"OwningRef","","An owning reference.",null,null],[3,"OwningRefMut","","An mutable owning reference.",null,null],[3,"OwningHandle","","`OwningHandle` is a complement to `OwningRef`. Where `OwningRef` allows consumers to pass around an owned object and a dependent reference, `OwningHandle` contains an owned object and a dependent object.",null,null],[6,"BoxRef","","Typedef of a owning reference that uses a `Box` as the owner.",null,null],[6,"VecRef","","Typedef of a owning reference that uses a `Vec` as the owner.",null,null],[6,"StringRef","","Typedef of a owning reference that uses a `String` as the owner.",null,null],[6,"RcRef","","Typedef of a owning reference that uses a `Rc` as the owner.",null,null],[6,"ArcRef","","Typedef of a owning reference that uses a `Arc` as the owner.",null,null],[6,"RefRef","","Typedef of a owning reference that uses a `Ref` as the owner.",null,null],[6,"RefMutRef","","Typedef of a owning reference that uses a `RefMut` as the owner.",null,null],[6,"MutexGuardRef","","Typedef of a owning reference that uses a `MutexGuard` as the owner.",null,null],[6,"RwLockReadGuardRef","","Typedef of a owning reference that uses a `RwLockReadGuard` as the owner.",null,null],[6,"RwLockWriteGuardRef","","Typedef of a owning reference that uses a `RwLockWriteGuard` as the owner.",null,null],[6,"BoxRefMut","","Typedef of a mutable owning reference that uses a `Box` as the owner.",null,null],[6,"VecRefMut","","Typedef of a mutable owning reference that uses a `Vec` as the owner.",null,null],[6,"StringRefMut","","Typedef of a mutable owning reference that uses a `String` as the owner.",null,null],[6,"RefMutRefMut","","Typedef of a mutable owning reference that uses a `RefMut` as the owner.",null,null],[6,"MutexGuardRefMut","","Typedef of a mutable owning reference that uses a `MutexGuard` as the owner.",null,null],[6,"RwLockWriteGuardRefMut","","Typedef of a mutable owning reference that uses a `RwLockWriteGuard` as the owner.",null,null],[6,"ErasedBoxRef","","Typedef of a owning reference that uses an erased `Box` as the owner.",null,null],[6,"ErasedRcRef","","Typedef of a owning reference that uses an erased `Rc` as the owner.",null,null],[6,"ErasedArcRef","","Typedef of a owning reference that uses an erased `Arc` as the owner.",null,null],[6,"ErasedBoxRefMut","","Typedef of a mutable owning reference that uses an erased `Box` as the owner.",null,null],[8,"Erased","","Helper trait for an erased concrete type an owner dereferences to. This is used in form of a trait object for keeping something around to (virtually) call the destructor.",null,null],[8,"IntoErased","","Helper trait for erasing the concrete type of what an owner derferences to, for example `Box<T> -> Box<Erased>`. This would be unneeded with higher kinded types support in the language.",null,null],[16,"Erased","","Owner with the dereference type substituted to `Erased`.",0,null],[10,"into_erased","","Perform the type erasure.",0,null],[8,"ToHandle","","Trait to implement the conversion of owner to handle for common types.",null,null],[16,"Handle","","The type of handle to be encapsulated by the OwningHandle.",1,null],[10,"to_handle","","Given an appropriately-long-lived pointer to ourselves, create a handle to be encapsulated by the `OwningHandle`.",1,null],[8,"ToHandleMut","","Trait to implement the conversion of owner to mutable handle for common types.",null,null],[16,"HandleMut","","The type of handle to be encapsulated by the OwningHandle.",2,null],[10,"to_handle_mut","","Given an appropriately-long-lived pointer to ourselves, create a mutable handle to be encapsulated by the `OwningHandle`.",2,null],[11,"new","","Creates a new owning reference from a owner initialized to the direct dereference of it.",3,{"inputs":[{"name":"o"}],"output":{"name":"self"}}],[11,"new_assert_stable_address","","Like `new`, but doesn’t require `O` to implement the `StableAddress` trait. Instead, the caller is responsible to make the same promises as implementing the trait.",3,{"inputs":[{"name":"o"}],"output":{"name":"self"}}],[11,"map","","Converts `self` into a new owning reference that points at something reachable from the previous one.",3,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"owningref"}}],[11,"try_map","","Tries to convert `self` into a new owning reference that points at something reachable from the previous one.",3,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"map_owner","","Converts `self` into a new owning reference with a different owner type.",3,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"owningref"}}],[11,"map_owner_box","","Converts `self` into a new owning reference where the owner is wrapped in an additional `Box<O>`.",3,{"inputs":[{"name":"self"}],"output":{"name":"owningref"}}],[11,"erase_owner","","Erases the concrete base type of the owner with a trait object.",3,{"inputs":[{"name":"self"}],"output":{"name":"owningref"}}],[11,"owner","","A getter for the underlying owner.",3,{"inputs":[{"name":"self"}],"output":{"name":"o"}}],[11,"into_inner","","Discards the reference and retrieves the owner.",3,{"inputs":[{"name":"self"}],"output":{"name":"o"}}],[11,"new","","Creates a new owning reference from a owner initialized to the direct dereference of it.",4,{"inputs":[{"name":"o"}],"output":{"name":"self"}}],[11,"new_assert_stable_address","","Like `new`, but doesn’t require `O` to implement the `StableAddress` trait. Instead, the caller is responsible to make the same promises as implementing the trait.",4,{"inputs":[{"name":"o"}],"output":{"name":"self"}}],[11,"map","","Converts `self` into a new shared owning reference that points at something reachable from the previous one.",4,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"owningref"}}],[11,"map_mut","","Converts `self` into a new mutable owning reference that points at something reachable from the previous one.",4,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"owningrefmut"}}],[11,"try_map","","Tries to convert `self` into a new shared owning reference that points at something reachable from the previous one.",4,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"try_map_mut","","Tries to convert `self` into a new mutable owning reference that points at something reachable from the previous one.",4,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"map_owner","","Converts `self` into a new owning reference with a different owner type.",4,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"owningrefmut"}}],[11,"map_owner_box","","Converts `self` into a new owning reference where the owner is wrapped in an additional `Box<O>`.",4,{"inputs":[{"name":"self"}],"output":{"name":"owningrefmut"}}],[11,"erase_owner","","Erases the concrete base type of the owner with a trait object.",4,{"inputs":[{"name":"self"}],"output":{"name":"owningrefmut"}}],[11,"owner","","A getter for the underlying owner.",4,{"inputs":[{"name":"self"}],"output":{"name":"o"}}],[11,"into_inner","","Discards the reference and retrieves the owner.",4,{"inputs":[{"name":"self"}],"output":{"name":"o"}}],[11,"deref","","",5,null],[11,"deref_mut","","",5,null],[11,"new","","Create a new `OwningHandle` for a type that implements `ToHandle`. For types that don't implement `ToHandle`, callers may invoke `new_with_fn`, which accepts a callback to perform the conversion.",5,{"inputs":[{"name":"o"}],"output":{"name":"self"}}],[11,"new_mut","","Create a new mutable `OwningHandle` for a type that implements `ToHandleMut`.",5,{"inputs":[{"name":"o"}],"output":{"name":"self"}}],[11,"new_with_fn","","Create a new OwningHandle. The provided callback will be invoked with a pointer to the object owned by `o`, and the returned value is stored as the object to which this `OwningHandle` will forward `Deref` and `DerefMut`.",5,{"inputs":[{"name":"o"},{"name":"f"}],"output":{"name":"self"}}],[11,"try_new","","Create a new OwningHandle. The provided callback will be invoked with a pointer to the object owned by `o`, and the returned value is stored as the object to which this `OwningHandle` will forward `Deref` and `DerefMut`.",5,{"inputs":[{"name":"o"},{"name":"f"}],"output":{"name":"result"}}],[11,"deref","","",3,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",4,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref_mut","","",4,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"as_ref","","",3,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"as_ref","","",4,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"as_mut","","",4,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"borrow","","",3,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"from","","",3,{"inputs":[{"name":"o"}],"output":{"name":"self"}}],[11,"from","","",4,{"inputs":[{"name":"o"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"owningrefmut"}],"output":{"name":"self"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",3,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[11,"cmp","","",3,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"hash","","",3,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",4,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[11,"cmp","","",4,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"hash","","",4,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}]],"paths":[[8,"IntoErased"],[8,"ToHandle"],[8,"ToHandleMut"],[3,"OwningRef"],[3,"OwningRefMut"],[3,"OwningHandle"],[8,"Erased"]]};
searchIndex["parking_lot"] = {"doc":"This library provides implementations of `Mutex`, `RwLock`, `Condvar` and `Once` that are smaller, faster and more flexible than those in the Rust standard library. It also provides a `ReentrantMutex` type.","items":[[3,"Once","parking_lot","A synchronization primitive which can be used to run a one-time initialization. Useful for one-time initialization for globals, FFI or related functionality.",null,null],[3,"Mutex","","A mutual exclusion primitive useful for protecting shared data",null,null],[3,"MutexGuard","","An RAII implementation of a \"scoped lock\" of a mutex. When this structure is dropped (falls out of scope), the lock will be unlocked.",null,null],[3,"ReentrantMutex","","A mutex which can be recursively locked by a single thread.",null,null],[3,"ReentrantMutexGuard","","An RAII implementation of a \"scoped lock\" of a reentrant mutex. When this structure is dropped (falls out of scope), the lock will be unlocked.",null,null],[3,"Condvar","","A Condition Variable",null,null],[3,"WaitTimeoutResult","","A type indicating whether a timed wait on a condition variable returned due to a time out or not.",null,null],[3,"RwLock","","A reader-writer lock",null,null],[3,"RwLockReadGuard","","RAII structure used to release the shared read access of a lock when dropped.",null,null],[3,"RwLockWriteGuard","","RAII structure used to release the exclusive write access of a lock when dropped.",null,null],[4,"OnceState","","Current state of a `Once`.",null,null],[13,"New","","A closure has not been executed yet",0,null],[13,"Poisoned","","A closure was executed but panicked.",0,null],[13,"InProgress","","A thread is currently executing a closure.",0,null],[13,"Done","","A closure has completed sucessfully.",0,null],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"waittimeoutresult"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"waittimeoutresult"}],"output":{"name":"bool"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"waittimeoutresult"}}],[11,"timed_out","","Returns whether the wait was known to have timed out.",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"new","","Creates a new condition variable which is ready to be waited on and notified.",2,{"inputs":[],"output":{"name":"condvar"}}],[11,"notify_one","","Wakes up one blocked thread on this condvar.",2,{"inputs":[{"name":"self"}],"output":null}],[11,"notify_all","","Wakes up all blocked threads on this condvar.",2,{"inputs":[{"name":"self"}],"output":null}],[11,"wait","","Blocks the current thread until this condition variable receives a notification.",2,{"inputs":[{"name":"self"},{"name":"mutexguard"}],"output":null}],[11,"wait_until","","Waits on this condition variable for a notification, timing out after the specified time instant.",2,{"inputs":[{"name":"self"},{"name":"mutexguard"},{"name":"instant"}],"output":{"name":"waittimeoutresult"}}],[11,"wait_for","","Waits on this condition variable for a notification, timing out after a specified duration.",2,{"inputs":[{"name":"self"},{"name":"mutexguard"},{"name":"duration"}],"output":{"name":"waittimeoutresult"}}],[11,"default","","",2,{"inputs":[],"output":{"name":"condvar"}}],[11,"new","","Creates a new mutex in an unlocked state ready for use.",3,{"inputs":[{"name":"t"}],"output":{"name":"mutex"}}],[11,"into_inner","","Consumes this mutex, returning the underlying data.",3,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"lock","","Acquires a mutex, blocking the current thread until it is able to do so.",3,{"inputs":[{"name":"self"}],"output":{"name":"mutexguard"}}],[11,"try_lock","","Attempts to acquire this lock.",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"try_lock_for","","Attempts to acquire this lock until a timeout is reached.",3,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"option"}}],[11,"try_lock_until","","Attempts to acquire this lock until a timeout is reached.",3,{"inputs":[{"name":"self"},{"name":"instant"}],"output":{"name":"option"}}],[11,"get_mut","","Returns a mutable reference to the underlying data.",3,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"raw_unlock","","Releases the mutex.",3,{"inputs":[{"name":"self"}],"output":null}],[11,"raw_unlock_fair","","Releases the mutex using a fair unlock protocol.",3,{"inputs":[{"name":"self"}],"output":null}],[11,"raw_lock","","Acquires a mutex, blocking the current thread until it is able to do so.",3,{"inputs":[{"name":"self"}],"output":null}],[11,"raw_try_lock","","Attempts to acquire this lock.",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"default","","",3,{"inputs":[],"output":{"name":"mutex"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"unlock_fair","","Unlocks the mutex using a fair unlock protocol.",4,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",4,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref_mut","","",4,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"drop","","",4,{"inputs":[{"name":"self"}],"output":null}],[11,"new","","Creates a new reentrant mutex in an unlocked state ready for use.",5,{"inputs":[{"name":"t"}],"output":{"name":"reentrantmutex"}}],[11,"into_inner","","Consumes this reentrant mutex, returning the underlying data.",5,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"lock","","Acquires a reentrant mutex, blocking the current thread until it is able to do so.",5,{"inputs":[{"name":"self"}],"output":{"name":"reentrantmutexguard"}}],[11,"try_lock","","Attempts to acquire this lock.",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"try_lock_for","","Attempts to acquire this lock until a timeout is reached.",5,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"option"}}],[11,"try_lock_until","","Attempts to acquire this lock until a timeout is reached.",5,{"inputs":[{"name":"self"},{"name":"instant"}],"output":{"name":"option"}}],[11,"get_mut","","Returns a mutable reference to the underlying data.",5,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"raw_unlock","","Releases the mutex.",5,{"inputs":[{"name":"self"}],"output":null}],[11,"raw_unlock_fair","","Releases the mutex using a fair unlock protocol.",5,{"inputs":[{"name":"self"}],"output":null}],[11,"raw_lock","","Acquires a mutex, blocking the current thread until it is able to do so.",5,{"inputs":[{"name":"self"}],"output":null}],[11,"raw_try_lock","","Attempts to acquire this lock.",5,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"default","","",5,{"inputs":[],"output":{"name":"reentrantmutex"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"unlock_fair","","Unlocks the mutex using a fair unlock protocol.",6,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",6,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"drop","","",6,{"inputs":[{"name":"self"}],"output":null}],[11,"new","","Creates a new instance of an `RwLock<T>` which is unlocked.",7,{"inputs":[{"name":"t"}],"output":{"name":"rwlock"}}],[11,"into_inner","","Consumes this `RwLock`, returning the underlying data.",7,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"read","","Locks this rwlock with shared read access, blocking the current thread until it can be acquired.",7,{"inputs":[{"name":"self"}],"output":{"name":"rwlockreadguard"}}],[11,"try_read","","Attempts to acquire this rwlock with shared read access.",7,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"try_read_for","","Attempts to acquire this rwlock with shared read access until a timeout is reached.",7,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"option"}}],[11,"try_read_until","","Attempts to acquire this rwlock with shared read access until a timeout is reached.",7,{"inputs":[{"name":"self"},{"name":"instant"}],"output":{"name":"option"}}],[11,"read_recursive","","Locks this rwlock with shared read access, blocking the current thread until it can be acquired.",7,{"inputs":[{"name":"self"}],"output":{"name":"rwlockreadguard"}}],[11,"try_read_recursive","","Attempts to acquire this rwlock with shared read access.",7,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"try_read_recursive_for","","Attempts to acquire this rwlock with shared read access until a timeout is reached.",7,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"option"}}],[11,"try_read_recursive_until","","Attempts to acquire this rwlock with shared read access until a timeout is reached.",7,{"inputs":[{"name":"self"},{"name":"instant"}],"output":{"name":"option"}}],[11,"write","","Locks this rwlock with exclusive write access, blocking the current thread until it can be acquired.",7,{"inputs":[{"name":"self"}],"output":{"name":"rwlockwriteguard"}}],[11,"try_write","","Attempts to lock this rwlock with exclusive write access.",7,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"try_write_for","","Attempts to acquire this rwlock with exclusive write access until a timeout is reached.",7,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"option"}}],[11,"try_write_until","","Attempts to acquire this rwlock with exclusive write access until a timeout is reached.",7,{"inputs":[{"name":"self"},{"name":"instant"}],"output":{"name":"option"}}],[11,"get_mut","","Returns a mutable reference to the underlying data.",7,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"raw_unlock_read","","Releases shared read access of the rwlock.",7,{"inputs":[{"name":"self"}],"output":null}],[11,"raw_unlock_write","","Releases exclusive write access of the rwlock.",7,{"inputs":[{"name":"self"}],"output":null}],[11,"raw_unlock_read_fair","","Releases shared read access of the rwlock using a fair unlock protocol.",7,{"inputs":[{"name":"self"}],"output":null}],[11,"raw_unlock_write_fair","","Releases exclusive write access of the rwlock using a fair unlock protocol.",7,{"inputs":[{"name":"self"}],"output":null}],[11,"raw_downgrade","","Atomically downgrades a write lock into a read lock without allowing any writers to take exclusive access of the lock in the meantime.",7,{"inputs":[{"name":"self"}],"output":null}],[11,"raw_read","","Locks this rwlock with shared read access, blocking the current thread until it can be acquired.",7,{"inputs":[{"name":"self"}],"output":null}],[11,"raw_try_read","","Attempts to acquire this rwlock with shared read access.",7,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"raw_read_recursive","","Locks this rwlock with shared read access, blocking the current thread until it can be acquired.",7,{"inputs":[{"name":"self"}],"output":null}],[11,"raw_try_read_recursive","","Attempts to acquire this rwlock with shared read access.",7,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"raw_write","","Locks this rwlock with exclusive write access, blocking the current thread until it can be acquired.",7,{"inputs":[{"name":"self"}],"output":null}],[11,"raw_try_write","","Attempts to lock this rwlock with exclusive write access.",7,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"default","","",7,{"inputs":[],"output":{"name":"rwlock"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"unlock_fair","","Unlocks the `RwLock` using a fair unlock protocol.",8,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",8,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"drop","","",8,{"inputs":[{"name":"self"}],"output":null}],[11,"downgrade","","Atomically downgrades a write lock into a read lock without allowing any writers to take exclusive access of the lock in the meantime.",9,{"inputs":[{"name":"self"}],"output":{"name":"rwlockreadguard"}}],[11,"unlock_fair","","Unlocks the `RwLock` using a fair unlock protocol.",9,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",9,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref_mut","","",9,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"drop","","",9,{"inputs":[{"name":"self"}],"output":null}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"oncestate"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"oncestate"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poisoned","","Returns whether the associated `Once` has been poisoned.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"done","","Returns whether the associated `Once` has successfullly executed a closure.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"new","","Creates a new `Once` value.",10,{"inputs":[],"output":{"name":"once"}}],[11,"state","","Returns the current state of this `Once`.",10,{"inputs":[{"name":"self"}],"output":{"name":"oncestate"}}],[11,"call_once","","Performs an initialization routine once and only once. The given closure will be executed if this is the first time `call_once` has been called, and otherwise the routine will not be invoked.",10,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"call_once_force","","Performs the same function as `call_once` except ignores poisoning.",10,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"default","","",10,{"inputs":[],"output":{"name":"once"}}],[6,"MutexGuardRef","","Typedef of an owning reference that uses a `MutexGuard` as the owner.",null,null],[6,"ReentrantMutexGuardRef","","Typedef of an owning reference that uses a `ReentrantMutexGuard` as the owner.",null,null],[6,"RwLockReadGuardRef","","Typedef of an owning reference that uses a `RwLockReadGuard` as the owner.",null,null],[6,"RwLockWriteGuardRef","","Typedef of an owning reference that uses a `RwLockWriteGuard` as the owner.",null,null],[17,"ONCE_INIT","","Initialization value for static `Once` values.",null,null]],"paths":[[4,"OnceState"],[3,"WaitTimeoutResult"],[3,"Condvar"],[3,"Mutex"],[3,"MutexGuard"],[3,"ReentrantMutex"],[3,"ReentrantMutexGuard"],[3,"RwLock"],[3,"RwLockReadGuard"],[3,"RwLockWriteGuard"],[3,"Once"]]};
searchIndex["parking_lot_core"] = {"doc":"This library exposes a low-level API for creating your own efficient synchronization primitives.","items":[[3,"UnparkResult","parking_lot_core","Result of an unpark operation.",null,null],[12,"unparked_threads","","The number of threads that were unparked.",0,null],[12,"have_more_threads","","Whether there are any threads remaining in the queue. This only returns true if a thread was unparked.",0,null],[12,"be_fair","","This is set to true on average once every 0.5ms for any given key. It should be used to switch to a fair unlocking mechanism for a particular unlock.",0,null],[3,"UnparkToken","","A value which is passed from an unparker to a parked thread.",null,null],[12,"0","","",1,null],[3,"ParkToken","","A value associated with a parked thread which can be used by `unpark_filter`.",null,null],[12,"0","","",2,null],[3,"SpinWait","","A counter used to perform exponential backoff in spin loops.",null,null],[4,"ParkResult","","Result of a park operation.",null,null],[13,"Unparked","","We were unparked by another thread with the given token.",3,null],[13,"Invalid","","The validation callback returned false.",3,null],[13,"TimedOut","","The timeout expired.",3,null],[4,"RequeueOp","","Operation that `unpark_requeue` should perform.",null,null],[13,"Abort","","Abort the operation without doing anything.",4,null],[13,"UnparkOneRequeueRest","","Unpark one thread and requeue the rest onto the target queue.",4,null],[13,"RequeueAll","","Requeue all threads onto the target queue.",4,null],[4,"FilterOp","","Operation that `unpark_filter` should perform for each thread.",null,null],[13,"Unpark","","Unpark the thread and continue scanning the list of parked threads.",5,null],[13,"Skip","","Don't unpark the thread and continue scanning the list of parked threads.",5,null],[13,"Stop","","Don't unpark the thread and stop scanning the list of parked threads.",5,null],[5,"park","","Parks the current thread in the queue associated with the given key.",null,{"inputs":[{"name":"usize"},{"name":"v"},{"name":"b"},{"name":"t"},{"name":"parktoken"},{"name":"option"}],"output":{"name":"parkresult"}}],[5,"unpark_one","","Unparks one thread from the queue associated with the given key.",null,{"inputs":[{"name":"usize"},{"name":"c"}],"output":{"name":"unparkresult"}}],[5,"unpark_all","","Unparks all threads in the queue associated with the given key.",null,{"inputs":[{"name":"usize"},{"name":"unparktoken"}],"output":{"name":"usize"}}],[5,"unpark_requeue","","Removes all threads from the queue associated with `key_from`, optionally unparks the first one and requeues the rest onto the queue associated with `key_to`.",null,{"inputs":[{"name":"usize"},{"name":"usize"},{"name":"v"},{"name":"c"}],"output":{"name":"unparkresult"}}],[5,"unpark_filter","","Unparks a number of threads from the front of the queue associated with `key` depending on the results of a filter function which inspects the `ParkToken` associated with each thread.",null,{"inputs":[{"name":"usize"},{"name":"f"},{"name":"c"}],"output":{"name":"unparkresult"}}],[11,"new","","Creates a new `SpinWait`.",6,{"inputs":[],"output":{"name":"spinwait"}}],[11,"reset","","Resets a `SpinWait` to its initial state.",6,{"inputs":[{"name":"self"}],"output":null}],[11,"spin","","Spins until the sleep threshold has been reached.",6,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"spin_no_yield","","Spins without yielding the thread to the OS.",6,{"inputs":[{"name":"self"}],"output":null}],[11,"default","","",6,{"inputs":[],"output":{"name":"spinwait"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"parkresult"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"parkresult"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"parkresult"}],"output":{"name":"bool"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"is_unparked","","Returns true if we were unparked by another thread.",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"unparkresult"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"unparkresult"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"unparkresult"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"requeueop"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"requeueop"}],"output":{"name":"bool"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"filterop"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"filterop"}],"output":{"name":"bool"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"unparktoken"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"unparktoken"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"unparktoken"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"parktoken"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"parktoken"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"parktoken"}],"output":{"name":"bool"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"deadlock","","[Experimental] Deadlock detection",null,null],[5,"acquire_resource","parking_lot_core::deadlock","Acquire a resource identified by key in the deadlock detector Noop if deadlock_detection feature isn't enabled. Note: Call after the resource is acquired",null,{"inputs":[{"name":"usize"}],"output":null}],[5,"release_resource","","Release a resource identified by key in the deadlock detector. Noop if deadlock_detection feature isn't enabled. Note: Call before the resource is released # Panics Panics if the resource was already released or wasn't acquired in this thread.",null,{"inputs":[{"name":"usize"}],"output":null}],[17,"DEFAULT_UNPARK_TOKEN","parking_lot_core","A default unpark token to use.",null,null],[17,"DEFAULT_PARK_TOKEN","","A default park token to use.",null,null]],"paths":[[3,"UnparkResult"],[3,"UnparkToken"],[3,"ParkToken"],[4,"ParkResult"],[4,"RequeueOp"],[4,"FilterOp"],[3,"SpinWait"]]};
searchIndex["percent_encoding"] = {"doc":"URLs use special chacters to indicate the parts of the request.  For example, a forward slash indicates a path.  In order for that charcter to exist outside of a path separator, that charcter would need to be encoded.","items":[[3,"SIMPLE_ENCODE_SET","percent_encoding","This encode set is used for the path of cannot-be-a-base URLs.",null,null],[3,"QUERY_ENCODE_SET","","This encode set is used in the URL parser for query strings.",null,null],[3,"DEFAULT_ENCODE_SET","","This encode set is used for path components.",null,null],[3,"PATH_SEGMENT_ENCODE_SET","","This encode set is used for on '/'-separated path segment",null,null],[3,"USERINFO_ENCODE_SET","","This encode set is used for username and password.",null,null],[3,"PercentEncode","","The return type of `percent_encode()` and `utf8_percent_encode()`.",null,null],[3,"PercentDecode","","The return type of `percent_decode()`.",null,null],[5,"percent_encode_byte","","Return the percent-encoding of the given bytes.",null,{"inputs":[{"name":"u8"}],"output":{"name":"str"}}],[5,"percent_encode","","Percent-encode the given bytes with the given encode set.",null,null],[5,"utf8_percent_encode","","Percent-encode the UTF-8 encoding of the given string.",null,{"inputs":[{"name":"str"},{"name":"e"}],"output":{"name":"percentencode"}}],[5,"percent_decode","","Percent-decode the given bytes.",null,null],[8,"EncodeSet","","Represents a set of characters / bytes that should be percent-encoded.",null,null],[10,"contains","","Called with UTF-8 bytes rather than code points. Should return true for all non-ASCII bytes.",0,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bool"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"simple_encode_set"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"contains","","",1,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bool"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"query_encode_set"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"contains","","",2,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bool"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"default_encode_set"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"contains","","",3,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bool"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"path_segment_encode_set"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"contains","","",4,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bool"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"userinfo_encode_set"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"contains","","",5,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bool"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"percentencode"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",6,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",6,null],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"percentdecode"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",7,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",7,null],[11,"if_any","","If the percent-decoding is different from the input, return it as a new bytes vector.",7,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"decode_utf8","","Decode the result of percent-decoding as UTF-8.",7,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"decode_utf8_lossy","","Decode the result of percent-decoding as UTF-8, lossily.",7,{"inputs":[{"name":"self"}],"output":{"name":"cow"}}],[14,"define_encode_set","","Define a new struct that implements the `EncodeSet` trait, for use in `percent_decode()` and related functions.",null,null]],"paths":[[8,"EncodeSet"],[3,"SIMPLE_ENCODE_SET"],[3,"QUERY_ENCODE_SET"],[3,"DEFAULT_ENCODE_SET"],[3,"PATH_SEGMENT_ENCODE_SET"],[3,"USERINFO_ENCODE_SET"],[3,"PercentEncode"],[3,"PercentDecode"]]};
searchIndex["phf"] = {"doc":"Compile time optimized maps and sets.","items":[[8,"PhfHash","phf","A trait implemented by types which can be used in PHF data structures.",null,null],[10,"phf_hash","","Feeds the value into the state given, updating the hasher as necessary.",0,null],[11,"phf_hash_slice","","Feeds a slice of this type into the state provided.",0,null],[3,"Map","","An immutable map constructed at compile time.",null,null],[3,"Set","","An immutable set constructed at compile time.",null,null],[3,"OrderedMap","","An order-preserving immutable map constructed at compile time.",null,null],[3,"OrderedSet","","An order-preserving immutable set constructed at compile time.",null,null],[0,"map","","An immutable map constructed at compile time.",null,null],[3,"Map","phf::map","An immutable map constructed at compile time.",null,null],[3,"Entries","","An iterator over the key/value pairs in a `Map`.",null,null],[3,"Keys","","An iterator over the keys in a `Map`.",null,null],[3,"Values","","An iterator over the values in a `Map`.",null,null],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"index","","",1,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"v"}}],[11,"is_empty","","Returns true if the `Map` is empty.",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"len","","Returns the number of entries in the `Map`.",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"contains_key","","Determines if `key` is in the `Map`.",1,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"get","","Returns a reference to the value that `key` maps to.",1,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"option"}}],[11,"get_key","","Returns a reference to the map's internal static instance of the given key.",1,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"option"}}],[11,"get_entry","","Like `get`, but returns both the key and the value.",1,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"option"}}],[11,"entries","","Returns an iterator over the key/value pairs in the map.",1,{"inputs":[{"name":"self"}],"output":{"name":"entries"}}],[11,"keys","","Returns an iterator over the keys in the map.",1,{"inputs":[{"name":"self"}],"output":{"name":"keys"}}],[11,"values","","Returns an iterator over the values in the map.",1,{"inputs":[{"name":"self"}],"output":{"name":"values"}}],[11,"next","","",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",2,null],[11,"next_back","","",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",3,null],[11,"next_back","","",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",4,null],[11,"next_back","","",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[0,"set","phf","An immutable set constructed at compile time.",null,null],[3,"Set","phf::set","An immutable set constructed at compile time.",null,null],[3,"Iter","","An iterator over the values in a `Set`.",null,null],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"len","","Returns the number of elements in the `Set`.",5,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the `Set` contains no elements.",5,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"get_key","","Returns a reference to the set's internal static instance of the given key.",5,{"inputs":[{"name":"self"},{"name":"u"}],"output":{"name":"option"}}],[11,"contains","","Returns true if `value` is in the `Set`.",5,{"inputs":[{"name":"self"},{"name":"u"}],"output":{"name":"bool"}}],[11,"iter","","Returns an iterator over the values in the set.",5,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"is_disjoint","","Returns true if `other` shares no elements with `self`.",5,{"inputs":[{"name":"self"},{"name":"set"}],"output":{"name":"bool"}}],[11,"is_subset","","Returns true if `other` contains all values in `self`.",5,{"inputs":[{"name":"self"},{"name":"set"}],"output":{"name":"bool"}}],[11,"is_superset","","Returns true if `self` contains all values in `other`.",5,{"inputs":[{"name":"self"},{"name":"set"}],"output":{"name":"bool"}}],[11,"next","","",6,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",6,null],[11,"next_back","","",6,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[0,"ordered_map","phf","An order-preserving immutable map constructed at compile time.",null,null],[3,"OrderedMap","phf::ordered_map","An order-preserving immutable map constructed at compile time.",null,null],[3,"Entries","","An iterator over the entries in a `OrderedMap`.",null,null],[3,"Keys","","An iterator over the keys in a `OrderedMap`.",null,null],[3,"Values","","An iterator over the values in a `OrderedMap`.",null,null],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"index","","",7,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"v"}}],[11,"len","","Returns the number of entries in the `Map`.",7,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the `Map` is empty.",7,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"get","","Returns a reference to the value that `key` maps to.",7,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"option"}}],[11,"get_key","","Returns a reference to the map's internal static instance of the given key.",7,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"option"}}],[11,"contains_key","","Determines if `key` is in the `Map`.",7,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"get_index","","Returns the index of the key within the list used to initialize the ordered map.",7,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"option"}}],[11,"index","","Returns references to both the key and values at an index within the list used to initialize the ordered map. See `.get_index(key)`.",7,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"get_entry","","Like `get`, but returns both the key and the value.",7,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"option"}}],[11,"entries","","Returns an iterator over the key/value pairs in the map.",7,{"inputs":[{"name":"self"}],"output":{"name":"entries"}}],[11,"keys","","Returns an iterator over the keys in the map.",7,{"inputs":[{"name":"self"}],"output":{"name":"keys"}}],[11,"values","","Returns an iterator over the values in the map.",7,{"inputs":[{"name":"self"}],"output":{"name":"values"}}],[11,"next","","",8,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",8,null],[11,"next_back","","",8,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",9,null],[11,"next_back","","",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",10,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",10,null],[11,"next_back","","",10,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[0,"ordered_set","phf","An order-preserving immutable set constructed at compile time.",null,null],[3,"OrderedSet","phf::ordered_set","An order-preserving immutable set constructed at compile time.",null,null],[3,"Iter","","An iterator over the values in a `OrderedSet`.",null,null],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"len","","Returns the number of elements in the `OrderedSet`.",11,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the `OrderedSet` contains no elements.",11,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"get_key","","Returns a reference to the set's internal static instance of the given key.",11,{"inputs":[{"name":"self"},{"name":"u"}],"output":{"name":"option"}}],[11,"get_index","","Returns the index of the key within the list used to initialize the ordered set.",11,{"inputs":[{"name":"self"},{"name":"u"}],"output":{"name":"option"}}],[11,"index","","Returns a reference to the key at an index within the list used to initialize the ordered set. See `.get_index(key)`.",11,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"contains","","Returns true if `value` is in the `Set`.",11,{"inputs":[{"name":"self"},{"name":"u"}],"output":{"name":"bool"}}],[11,"iter","","Returns an iterator over the values in the set.",11,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"is_disjoint","","Returns true if `other` shares no elements with `self`.",11,{"inputs":[{"name":"self"},{"name":"orderedset"}],"output":{"name":"bool"}}],[11,"is_subset","","Returns true if `other` contains all values in `self`.",11,{"inputs":[{"name":"self"},{"name":"orderedset"}],"output":{"name":"bool"}}],[11,"is_superset","","Returns true if `self` contains all values in `other`.",11,{"inputs":[{"name":"self"},{"name":"orderedset"}],"output":{"name":"bool"}}],[11,"next","","",12,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",12,null],[11,"next_back","","",12,{"inputs":[{"name":"self"}],"output":{"name":"option"}}]],"paths":[[8,"PhfHash"],[3,"Map"],[3,"Entries"],[3,"Keys"],[3,"Values"],[3,"Set"],[3,"Iter"],[3,"OrderedMap"],[3,"Entries"],[3,"Keys"],[3,"Values"],[3,"OrderedSet"],[3,"Iter"]]};
searchIndex["phf_shared"] = {"doc":"","items":[[5,"displace","phf_shared","",null,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"u32"}}],[5,"split","","",null,null],[5,"hash","","`key` is from `phf_generator::HashState::key`.",null,{"inputs":[{"name":"t"},{"name":"u64"}],"output":{"name":"u64"}}],[5,"get_index","","Return an index into `phf_generator::HashState::map`.",null,null],[8,"PhfHash","","A trait implemented by types which can be used in PHF data structures.",null,null],[10,"phf_hash","","Feeds the value into the state given, updating the hasher as necessary.",0,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"phf_hash_slice","","Feeds a slice of this type into the state provided.",0,null]],"paths":[[8,"PhfHash"]]};
searchIndex["pq_sys"] = {"doc":"","items":[[3,"__BindgenUnionField","pq_sys","",null,null],[3,"__sbuf","","",null,null],[12,"_base","","",0,null],[12,"_size","","",0,null],[3,"__sFILEX","","",null,null],[3,"__sFILE","","",null,null],[12,"_p","","",1,null],[12,"_r","","",1,null],[12,"_w","","",1,null],[12,"_flags","","",1,null],[12,"_file","","",1,null],[12,"_bf","","",1,null],[12,"_lbfsize","","",1,null],[12,"_cookie","","",1,null],[12,"_close","","",1,null],[12,"_read","","",1,null],[12,"_seek","","",1,null],[12,"_write","","",1,null],[12,"_ub","","",1,null],[12,"_extra","","",1,null],[12,"_ur","","",1,null],[12,"_ubuf","","",1,null],[12,"_nbuf","","",1,null],[12,"_lb","","",1,null],[12,"_blksize","","",1,null],[12,"_offset","","",1,null],[3,"pg_conn","","",null,null],[3,"pg_result","","",null,null],[3,"pg_cancel","","",null,null],[3,"pgNotify","","",null,null],[12,"relname","","",2,null],[12,"be_pid","","",2,null],[12,"extra","","",2,null],[12,"next","","",2,null],[3,"_PQprintOpt","","",null,null],[12,"header","","",3,null],[12,"align","","",3,null],[12,"standard","","",3,null],[12,"html3","","",3,null],[12,"expanded","","",3,null],[12,"pager","","",3,null],[12,"fieldSep","","",3,null],[12,"tableOpt","","",3,null],[12,"caption","","",3,null],[12,"fieldName","","",3,null],[3,"_PQconninfoOption","","",null,null],[12,"keyword","","",4,null],[12,"envvar","","",4,null],[12,"compiled","","",4,null],[12,"val","","",4,null],[12,"label","","",4,null],[12,"dispchar","","",4,null],[12,"dispsize","","",4,null],[3,"_bindgen_ty_8","","",null,null],[12,"len","","",5,null],[12,"isint","","",5,null],[12,"u","","",5,null],[3,"_bindgen_ty_8__bindgen_ty_1","","",null,null],[12,"ptr","","",6,null],[12,"integer","","",6,null],[12,"bindgen_union_field","","",6,null],[3,"pgresAttDesc","","",null,null],[12,"name","","",7,null],[12,"tableid","","",7,null],[12,"columnid","","",7,null],[12,"format","","",7,null],[12,"typid","","",7,null],[12,"typlen","","",7,null],[12,"atttypmod","","",7,null],[4,"_bindgen_ty_2","","",null,null],[13,"CONNECTION_OK","","",8,null],[13,"CONNECTION_BAD","","",8,null],[13,"CONNECTION_STARTED","","",8,null],[13,"CONNECTION_MADE","","",8,null],[13,"CONNECTION_AWAITING_RESPONSE","","",8,null],[13,"CONNECTION_AUTH_OK","","",8,null],[13,"CONNECTION_SETENV","","",8,null],[13,"CONNECTION_SSL_STARTUP","","",8,null],[13,"CONNECTION_NEEDED","","",8,null],[4,"_bindgen_ty_3","","",null,null],[13,"PGRES_POLLING_FAILED","","",9,null],[13,"PGRES_POLLING_READING","","",9,null],[13,"PGRES_POLLING_WRITING","","",9,null],[13,"PGRES_POLLING_OK","","",9,null],[13,"PGRES_POLLING_ACTIVE","","",9,null],[4,"_bindgen_ty_4","","",null,null],[13,"PGRES_EMPTY_QUERY","","",10,null],[13,"PGRES_COMMAND_OK","","",10,null],[13,"PGRES_TUPLES_OK","","",10,null],[13,"PGRES_COPY_OUT","","",10,null],[13,"PGRES_COPY_IN","","",10,null],[13,"PGRES_BAD_RESPONSE","","",10,null],[13,"PGRES_NONFATAL_ERROR","","",10,null],[13,"PGRES_FATAL_ERROR","","",10,null],[13,"PGRES_COPY_BOTH","","",10,null],[13,"PGRES_SINGLE_TUPLE","","",10,null],[4,"_bindgen_ty_5","","",null,null],[13,"PQTRANS_IDLE","","",11,null],[13,"PQTRANS_ACTIVE","","",11,null],[13,"PQTRANS_INTRANS","","",11,null],[13,"PQTRANS_INERROR","","",11,null],[13,"PQTRANS_UNKNOWN","","",11,null],[4,"_bindgen_ty_6","","",null,null],[13,"PQERRORS_TERSE","","",12,null],[13,"PQERRORS_DEFAULT","","",12,null],[13,"PQERRORS_VERBOSE","","",12,null],[4,"_bindgen_ty_7","","",null,null],[13,"PQPING_OK","","",13,null],[13,"PQPING_REJECT","","",13,null],[13,"PQPING_NO_RESPONSE","","",13,null],[13,"PQPING_NO_ATTEMPT","","",13,null],[5,"PQconnectStart","","",null,null],[5,"PQconnectStartParams","","",null,null],[5,"PQconnectPoll","","",null,null],[5,"PQconnectdb","","",null,null],[5,"PQconnectdbParams","","",null,null],[5,"PQsetdbLogin","","",null,null],[5,"PQfinish","","",null,null],[5,"PQconndefaults","","",null,null],[5,"PQconninfoParse","","",null,null],[5,"PQconninfo","","",null,null],[5,"PQconninfoFree","","",null,null],[5,"PQresetStart","","",null,null],[5,"PQresetPoll","","",null,null],[5,"PQreset","","",null,null],[5,"PQgetCancel","","",null,null],[5,"PQfreeCancel","","",null,null],[5,"PQcancel","","",null,null],[5,"PQrequestCancel","","",null,null],[5,"PQdb","","",null,null],[5,"PQuser","","",null,null],[5,"PQpass","","",null,null],[5,"PQhost","","",null,null],[5,"PQport","","",null,null],[5,"PQtty","","",null,null],[5,"PQoptions","","",null,null],[5,"PQstatus","","",null,null],[5,"PQtransactionStatus","","",null,null],[5,"PQparameterStatus","","",null,null],[5,"PQprotocolVersion","","",null,null],[5,"PQserverVersion","","",null,null],[5,"PQerrorMessage","","",null,null],[5,"PQsocket","","",null,null],[5,"PQbackendPID","","",null,null],[5,"PQconnectionNeedsPassword","","",null,null],[5,"PQconnectionUsedPassword","","",null,null],[5,"PQclientEncoding","","",null,null],[5,"PQsetClientEncoding","","",null,null],[5,"PQsslInUse","","",null,null],[5,"PQsslStruct","","",null,null],[5,"PQsslAttribute","","",null,null],[5,"PQsslAttributeNames","","",null,null],[5,"PQgetssl","","",null,null],[5,"PQinitSSL","","",null,null],[5,"PQinitOpenSSL","","",null,null],[5,"PQsetErrorVerbosity","","",null,null],[5,"PQtrace","","",null,null],[5,"PQuntrace","","",null,null],[5,"PQsetNoticeReceiver","","",null,null],[5,"PQsetNoticeProcessor","","",null,null],[5,"PQregisterThreadLock","","",null,null],[5,"PQexec","","",null,null],[5,"PQexecParams","","",null,null],[5,"PQprepare","","",null,null],[5,"PQexecPrepared","","",null,null],[5,"PQsendQuery","","",null,null],[5,"PQsendQueryParams","","",null,null],[5,"PQsendPrepare","","",null,null],[5,"PQsendQueryPrepared","","",null,null],[5,"PQsetSingleRowMode","","",null,null],[5,"PQgetResult","","",null,null],[5,"PQisBusy","","",null,null],[5,"PQconsumeInput","","",null,null],[5,"PQnotifies","","",null,null],[5,"PQputCopyData","","",null,null],[5,"PQputCopyEnd","","",null,null],[5,"PQgetCopyData","","",null,null],[5,"PQgetline","","",null,null],[5,"PQputline","","",null,null],[5,"PQgetlineAsync","","",null,null],[5,"PQputnbytes","","",null,null],[5,"PQendcopy","","",null,null],[5,"PQsetnonblocking","","",null,null],[5,"PQisnonblocking","","",null,null],[5,"PQisthreadsafe","","",null,null],[5,"PQping","","",null,null],[5,"PQpingParams","","",null,null],[5,"PQflush","","",null,null],[5,"PQfn","","",null,null],[5,"PQresultStatus","","",null,null],[5,"PQresStatus","","",null,null],[5,"PQresultErrorMessage","","",null,null],[5,"PQresultErrorField","","",null,null],[5,"PQntuples","","",null,null],[5,"PQnfields","","",null,null],[5,"PQbinaryTuples","","",null,null],[5,"PQfname","","",null,null],[5,"PQfnumber","","",null,null],[5,"PQftable","","",null,null],[5,"PQftablecol","","",null,null],[5,"PQfformat","","",null,null],[5,"PQftype","","",null,null],[5,"PQfsize","","",null,null],[5,"PQfmod","","",null,null],[5,"PQcmdStatus","","",null,null],[5,"PQoidStatus","","",null,null],[5,"PQoidValue","","",null,null],[5,"PQcmdTuples","","",null,null],[5,"PQgetvalue","","",null,null],[5,"PQgetlength","","",null,null],[5,"PQgetisnull","","",null,null],[5,"PQnparams","","",null,null],[5,"PQparamtype","","",null,null],[5,"PQdescribePrepared","","",null,null],[5,"PQdescribePortal","","",null,null],[5,"PQsendDescribePrepared","","",null,null],[5,"PQsendDescribePortal","","",null,null],[5,"PQclear","","",null,null],[5,"PQfreemem","","",null,null],[5,"PQmakeEmptyPGresult","","",null,null],[5,"PQcopyResult","","",null,null],[5,"PQsetResultAttrs","","",null,null],[5,"PQresultAlloc","","",null,null],[5,"PQsetvalue","","",null,null],[5,"PQescapeStringConn","","",null,null],[5,"PQescapeLiteral","","",null,null],[5,"PQescapeIdentifier","","",null,null],[5,"PQescapeByteaConn","","",null,null],[5,"PQunescapeBytea","","",null,null],[5,"PQescapeString","","",null,null],[5,"PQescapeBytea","","",null,null],[5,"PQprint","","",null,null],[5,"PQdisplayTuples","","",null,null],[5,"PQprintTuples","","",null,null],[5,"PQlibVersion","","",null,null],[5,"PQmblen","","",null,null],[5,"PQdsplen","","",null,null],[5,"PQenv2encoding","","",null,null],[5,"PQencryptPassword","","",null,null],[6,"__int64_t","","",null,null],[6,"__darwin_size_t","","",null,null],[6,"__darwin_off_t","","",null,null],[6,"fpos_t","","",null,null],[6,"FILE","","",null,null],[6,"Oid","","",null,null],[6,"PGconn","","",null,null],[6,"PGresult","","",null,null],[6,"PGcancel","","",null,null],[6,"PGnotify","","",null,null],[6,"PQnoticeReceiver","","",null,null],[6,"PQnoticeProcessor","","",null,null],[6,"pqbool","","",null,null],[6,"PQprintOpt","","",null,null],[6,"PQconninfoOption","","",null,null],[6,"PQArgBlock","","",null,null],[6,"PGresAttDesc","","",null,null],[6,"pgthreadlock_t","","",null,null],[17,"CONNECTION_OK","","",null,null],[17,"CONNECTION_BAD","","",null,null],[17,"CONNECTION_STARTED","","",null,null],[17,"CONNECTION_MADE","","",null,null],[17,"CONNECTION_AWAITING_RESPONSE","","",null,null],[17,"CONNECTION_AUTH_OK","","",null,null],[17,"CONNECTION_SETENV","","",null,null],[17,"CONNECTION_SSL_STARTUP","","",null,null],[17,"CONNECTION_NEEDED","","",null,null],[17,"PGRES_POLLING_FAILED","","",null,null],[17,"PGRES_POLLING_READING","","",null,null],[17,"PGRES_POLLING_WRITING","","",null,null],[17,"PGRES_POLLING_OK","","",null,null],[17,"PGRES_POLLING_ACTIVE","","",null,null],[17,"PGRES_EMPTY_QUERY","","",null,null],[17,"PGRES_COMMAND_OK","","",null,null],[17,"PGRES_TUPLES_OK","","",null,null],[17,"PGRES_COPY_OUT","","",null,null],[17,"PGRES_COPY_IN","","",null,null],[17,"PGRES_BAD_RESPONSE","","",null,null],[17,"PGRES_NONFATAL_ERROR","","",null,null],[17,"PGRES_FATAL_ERROR","","",null,null],[17,"PGRES_COPY_BOTH","","",null,null],[17,"PGRES_SINGLE_TUPLE","","",null,null],[17,"PQTRANS_IDLE","","",null,null],[17,"PQTRANS_ACTIVE","","",null,null],[17,"PQTRANS_INTRANS","","",null,null],[17,"PQTRANS_INERROR","","",null,null],[17,"PQTRANS_UNKNOWN","","",null,null],[17,"PQERRORS_TERSE","","",null,null],[17,"PQERRORS_DEFAULT","","",null,null],[17,"PQERRORS_VERBOSE","","",null,null],[17,"PQPING_OK","","",null,null],[17,"PQPING_REJECT","","",null,null],[17,"PQPING_NO_RESPONSE","","",null,null],[17,"PQPING_NO_ATTEMPT","","",null,null],[11,"new","","",14,{"inputs":[],"output":{"name":"self"}}],[11,"as_ref","","",14,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"as_mut","","",14,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"default","","",14,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"__sfilex"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"_bindgen_ty_2"}}],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"_bindgen_ty_2"}],"output":{"name":"bool"}}],[11,"hash","","",8,null],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"_bindgen_ty_3"}}],[11,"eq","","",9,{"inputs":[{"name":"self"},{"name":"_bindgen_ty_3"}],"output":{"name":"bool"}}],[11,"hash","","",9,null],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"_bindgen_ty_4"}}],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"_bindgen_ty_4"}],"output":{"name":"bool"}}],[11,"hash","","",10,null],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"_bindgen_ty_5"}}],[11,"eq","","",11,{"inputs":[{"name":"self"},{"name":"_bindgen_ty_5"}],"output":{"name":"bool"}}],[11,"hash","","",11,null],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"_bindgen_ty_6"}}],[11,"eq","","",12,{"inputs":[{"name":"self"},{"name":"_bindgen_ty_6"}],"output":{"name":"bool"}}],[11,"hash","","",12,null],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"_bindgen_ty_7"}}],[11,"eq","","",13,{"inputs":[{"name":"self"},{"name":"_bindgen_ty_7"}],"output":{"name":"bool"}}],[11,"hash","","",13,null],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"pg_conn"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"pg_result"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"pg_cancel"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"self"}}]],"paths":[[3,"__sbuf"],[3,"__sFILE"],[3,"pgNotify"],[3,"_PQprintOpt"],[3,"_PQconninfoOption"],[3,"_bindgen_ty_8"],[3,"_bindgen_ty_8__bindgen_ty_1"],[3,"pgresAttDesc"],[4,"_bindgen_ty_2"],[4,"_bindgen_ty_3"],[4,"_bindgen_ty_4"],[4,"_bindgen_ty_5"],[4,"_bindgen_ty_6"],[4,"_bindgen_ty_7"],[3,"__BindgenUnionField"],[3,"__sFILEX"],[3,"pg_conn"],[3,"pg_result"],[3,"pg_cancel"]]};
searchIndex["quote"] = {"doc":"Quasi-quoting without a Syntex dependency, intended for use with Macros 1.1.","items":[[3,"Tokens","quote","Tokens produced by a `quote!(...)` invocation.",null,null],[3,"ByteStr","","Wrap a `&str` so it interpolates as a byte-string: `b\"abc\"`.",null,null],[12,"0","","",0,null],[3,"Hex","","Wrap an integer so it interpolates as a hexadecimal.",null,null],[12,"0","","",1,null],[3,"Ident","","An identifier that should be interpolated without quotes.",null,null],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"tokens"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":{"name":"bool"}}],[11,"new","","Empty tokens.",2,{"inputs":[],"output":{"name":"self"}}],[11,"append","","For use by `ToTokens` implementations.",2,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"append_all","","For use by `ToTokens` implementations.",2,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"append_separated","","For use by `ToTokens` implementations.",2,{"inputs":[{"name":"self"},{"name":"i"},{"name":"s"}],"output":null}],[11,"append_terminated","","For use by `ToTokens` implementations.",2,{"inputs":[{"name":"self"},{"name":"i"},{"name":"s"}],"output":null}],[11,"as_str","","",2,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"into_string","","",2,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"parse","","",2,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"default","","",2,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",2,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"to_tokens","","",0,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",2,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"to_tokens","","",1,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",1,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",1,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",1,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",1,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",1,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",1,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",1,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",1,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",1,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"ident"}}],[11,"hash","","",3,null],[11,"new","","",3,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"cow"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"string"}],"output":{"name":"self"}}],[11,"as_ref","","",3,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"to_tokens","","",3,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[8,"ToTokens","","Types that can be interpolated inside a `quote!(...)` invocation.",null,null],[10,"to_tokens","","Write `self` to the given `Tokens`.",4,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[14,"quote","","The whole point.",null,null]],"paths":[[3,"ByteStr"],[3,"Hex"],[3,"Tokens"],[3,"Ident"],[8,"ToTokens"]]};
searchIndex["quote_bot"] = {"doc":"A discord quote bot!","items":[[0,"config","quote_bot","",null,null],[3,"Config","quote_bot::config","The config object for the operation of the bot.",null,null],[12,"discord","","Discord config object",0,null],[3,"Discord","","Contains all fields related to discord, such as tokens.",null,null],[12,"token","","Discord bot token snowflake",1,null],[0,"interactions","quote_bot","",null,null],[0,"handler","quote_bot::interactions","",null,null],[3,"InviteUrl","quote_bot::interactions::handler","",null,null],[12,"0","","",2,null],[3,"Handler","","",null,null],[11,"on_reaction_add","","",3,{"inputs":[{"name":"self"},{"name":"context"},{"name":"reaction"}],"output":null}],[11,"on_ready","","",3,{"inputs":[{"name":"self"},{"name":"context"},{"name":"ready"}],"output":null}],[0,"commands","quote_bot::interactions","",null,null],[5,"invite_link","quote_bot::interactions::commands","",null,{"inputs":[{"name":"context"},{"name":"message"},{"name":"args"}],"output":{"name":"result"}}],[5,"command_delete_quote","","",null,{"inputs":[{"name":"context"},{"name":"message"},{"name":"args"}],"output":{"name":"result"}}],[5,"command_from","","",null,{"inputs":[{"name":"context"},{"name":"message"},{"name":"args"}],"output":{"name":"result"}}],[0,"parsing","quote_bot::interactions","",null,null],[5,"get_values","quote_bot::interactions::parsing","Turns a `key = value` set in a string message into a HashMap<Key, Value>`",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[0,"db","quote_bot","",null,null],[3,"Connector","quote_bot::db","",null,null],[0,"models","","",null,null],[3,"Author","quote_bot::db::models","",null,null],[12,"id","","",4,null],[3,"Quote","","",null,null],[12,"id","","Autogen `SERIAL PRIMARY KEY`",5,null],[12,"message_id","","The discord message snowflake id, `UNIQUE`",5,null],[12,"quote","","Quote body, with formatting.",5,null],[12,"created_by_id","","Who created the original message, the person who was quoted.",5,null],[12,"quoted_by_id","","The person who starred the message, the person who quoted.",5,null],[12,"guild_id","","",5,null],[3,"NewQuote","","",null,null],[12,"message_id","","",6,null],[12,"quote","","",6,null],[12,"created_by_id","","",6,null],[12,"quoted_by_id","","",6,null],[12,"guild_id","","",6,null],[3,"NewAuthor","","",null,null],[12,"id","","",7,null],[11,"table","","",4,null],[11,"table","","",5,null],[11,"foreign_key","","",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"foreign_key_column","","",5,null],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"quote"}}],[0,"schema","quote_bot::db","",null,null],[0,"authors","quote_bot::db::schema","Representation of the `authors` table.",null,null],[3,"star","quote_bot::db::schema::authors","Represents `table_name.*`, which is sometimes needed for efficient count queries. It cannot be used in place of `all_columns`, and has a `SqlType` of `()` to prevent it being used that way",null,null],[3,"id","","The `id` column of the `authors` table.",null,null],[3,"table","","The actual table struct",null,null],[0,"dsl","","Re-exports all of the columns of this table, as well as the table struct renamed to the module name. This is meant to be glob imported for functions which only deal with one table.",null,null],[3,"id","quote_bot::db::schema::authors::dsl","The `id` column of the `authors` table.",null,null],[3,"authors","","The actual table struct",null,null],[0,"columns","quote_bot::db::schema::authors","Contains all of the columns of this table",null,null],[3,"star","quote_bot::db::schema::authors::columns","Represents `table_name.*`, which is sometimes needed for efficient count queries. It cannot be used in place of `all_columns`, and has a `SqlType` of `()` to prevent it being used that way",null,null],[3,"id","","The `id` column of the `authors` table.",null,null],[6,"SqlType","quote_bot::db::schema::authors","The SQL type of all of the columns on this table",null,null],[6,"BoxedQuery","","Helper type for representing a boxed query from this table",null,null],[17,"all_columns","","A tuple of all of the columns on this table",null,null],[0,"quotes","quote_bot::db::schema","Representation of the `quotes` table.",null,null],[3,"star","quote_bot::db::schema::quotes","Represents `table_name.*`, which is sometimes needed for efficient count queries. It cannot be used in place of `all_columns`, and has a `SqlType` of `()` to prevent it being used that way",null,null],[3,"id","","The `id` column of the `quotes` table.",null,null],[3,"message_id","","The `message_id` column of the `quotes` table.",null,null],[3,"quote","","The `quote` column of the `quotes` table.",null,null],[3,"created_by_id","","The `created_by_id` column of the `quotes` table.",null,null],[3,"quoted_by_id","","The `quoted_by_id` column of the `quotes` table.",null,null],[3,"guild_id","","The `guild_id` column of the `quotes` table.",null,null],[3,"table","","The actual table struct",null,null],[0,"dsl","","Re-exports all of the columns of this table, as well as the table struct renamed to the module name. This is meant to be glob imported for functions which only deal with one table.",null,null],[3,"id","quote_bot::db::schema::quotes::dsl","The `id` column of the `quotes` table.",null,null],[3,"message_id","","The `message_id` column of the `quotes` table.",null,null],[3,"quote","","The `quote` column of the `quotes` table.",null,null],[3,"created_by_id","","The `created_by_id` column of the `quotes` table.",null,null],[3,"quoted_by_id","","The `quoted_by_id` column of the `quotes` table.",null,null],[3,"guild_id","","The `guild_id` column of the `quotes` table.",null,null],[3,"quotes","","The actual table struct",null,null],[0,"columns","quote_bot::db::schema::quotes","Contains all of the columns of this table",null,null],[3,"star","quote_bot::db::schema::quotes::columns","Represents `table_name.*`, which is sometimes needed for efficient count queries. It cannot be used in place of `all_columns`, and has a `SqlType` of `()` to prevent it being used that way",null,null],[3,"id","","The `id` column of the `quotes` table.",null,null],[3,"message_id","","The `message_id` column of the `quotes` table.",null,null],[3,"quote","","The `quote` column of the `quotes` table.",null,null],[3,"created_by_id","","The `created_by_id` column of the `quotes` table.",null,null],[3,"quoted_by_id","","The `quoted_by_id` column of the `quotes` table.",null,null],[3,"guild_id","","The `guild_id` column of the `quotes` table.",null,null],[6,"SqlType","quote_bot::db::schema::quotes","The SQL type of all of the columns on this table",null,null],[6,"BoxedQuery","","Helper type for representing a boxed query from this table",null,null],[17,"all_columns","","A tuple of all of the columns on this table",null,null],[0,"actions","quote_bot::db","",null,null],[3,"ListParams","quote_bot::db::actions","",null,null],[12,"amount","","",8,null],[12,"page","","a 1 indexed page number",8,null],[5,"create_quote","","Creates a new quote and saves it into the database.",null,{"inputs":[{"name":"pgconnection"},{"name":"newquote"}],"output":{"name":"result"}}],[5,"find_quote","","Find a quote, return Some(Quote) if found or None, else an error.",null,{"inputs":[{"name":"pgconnection"},{"name":"i32"}],"output":{"name":"result"}}],[5,"delete_quote","","",null,{"inputs":[{"name":"pgconnection"},{"name":"quote"}],"output":{"name":"result"}}],[5,"find_author","","Finds an author in the database, if they do not exist, create a new one.",null,{"inputs":[{"name":"pgconnection"},{"name":"str"}],"output":{"name":"result"}}],[5,"find_rand_quote","","Finds a random quote from the user.",null,{"inputs":[{"name":"pgconnection"},{"name":"str"},{"name":"str"}],"output":{"name":"result"}}],[5,"find_contains_quotes","","Searches for a max of 5 quotes that contain the given string query.",null,{"inputs":[{"name":"pgconnection"},{"name":"str"},{"name":"str"},{"name":"str"}],"output":{"name":"result"}}],[5,"find_listed_quotes","","",null,{"inputs":[{"name":"pgconnection"},{"name":"str"},{"name":"str"},{"name":"listparams"}],"output":{"name":"result"}}],[11,"new","quote_bot::db","",9,{"inputs":[],"output":{"name":"connector"}}],[11,"get_conn","","",9,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","quote_bot::db::schema::authors","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"star"}}],[11,"walk_ast","","",10,{"inputs":[{"name":"self"},{"name":"astpass"}],"output":{"name":"queryresult"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"id"}}],[11,"walk_ast","","",11,{"inputs":[{"name":"self"},{"name":"astpass"}],"output":{"name":"queryresult"}}],[11,"has_static_query_id","","",11,{"inputs":[],"output":{"name":"bool"}}],[11,"name","","",11,{"inputs":[],"output":{"name":"str"}}],[11,"eq_all","","",11,null],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"table"}}],[11,"star","","Represents `table_name.*`, which is sometimes necessary for efficient count queries. It cannot be used in place of `all_columns`",12,{"inputs":[{"name":"self"}],"output":{"name":"star"}}],[11,"from_clause","","",12,null],[11,"default_selection","","",12,null],[11,"as_query","","",12,null],[11,"primary_key","","",12,null],[11,"all_columns","","",12,null],[11,"table","","",12,null],[11,"into_update_target","","",12,{"inputs":[{"name":"self"}],"output":{"name":"updatetarget"}}],[11,"join_target","","",12,null],[11,"join_target","","",12,null],[11,"join_target","","",12,null],[11,"join_target","","",12,null],[11,"has_static_query_id","","",12,{"inputs":[],"output":{"name":"bool"}}],[11,"fmt","quote_bot::db::schema::quotes","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"star"}}],[11,"walk_ast","","",13,{"inputs":[{"name":"self"},{"name":"astpass"}],"output":{"name":"queryresult"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"id"}}],[11,"walk_ast","","",14,{"inputs":[{"name":"self"},{"name":"astpass"}],"output":{"name":"queryresult"}}],[11,"has_static_query_id","","",14,{"inputs":[],"output":{"name":"bool"}}],[11,"name","","",14,{"inputs":[],"output":{"name":"str"}}],[11,"eq_all","","",14,null],[11,"add","","",14,null],[11,"sub","","",14,null],[11,"div","","",14,null],[11,"mul","","",14,null],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"message_id"}}],[11,"walk_ast","","",15,{"inputs":[{"name":"self"},{"name":"astpass"}],"output":{"name":"queryresult"}}],[11,"has_static_query_id","","",15,{"inputs":[],"output":{"name":"bool"}}],[11,"name","","",15,{"inputs":[],"output":{"name":"str"}}],[11,"eq_all","","",15,null],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"quote"}}],[11,"walk_ast","","",16,{"inputs":[{"name":"self"},{"name":"astpass"}],"output":{"name":"queryresult"}}],[11,"has_static_query_id","","",16,{"inputs":[],"output":{"name":"bool"}}],[11,"name","","",16,{"inputs":[],"output":{"name":"str"}}],[11,"eq_all","","",16,null],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"created_by_id"}}],[11,"walk_ast","","",17,{"inputs":[{"name":"self"},{"name":"astpass"}],"output":{"name":"queryresult"}}],[11,"has_static_query_id","","",17,{"inputs":[],"output":{"name":"bool"}}],[11,"name","","",17,{"inputs":[],"output":{"name":"str"}}],[11,"eq_all","","",17,null],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"quoted_by_id"}}],[11,"walk_ast","","",18,{"inputs":[{"name":"self"},{"name":"astpass"}],"output":{"name":"queryresult"}}],[11,"has_static_query_id","","",18,{"inputs":[],"output":{"name":"bool"}}],[11,"name","","",18,{"inputs":[],"output":{"name":"str"}}],[11,"eq_all","","",18,null],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"guild_id"}}],[11,"walk_ast","","",19,{"inputs":[{"name":"self"},{"name":"astpass"}],"output":{"name":"queryresult"}}],[11,"has_static_query_id","","",19,{"inputs":[],"output":{"name":"bool"}}],[11,"name","","",19,{"inputs":[],"output":{"name":"str"}}],[11,"eq_all","","",19,null],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"table"}}],[11,"star","","Represents `table_name.*`, which is sometimes necessary for efficient count queries. It cannot be used in place of `all_columns`",20,{"inputs":[{"name":"self"}],"output":{"name":"star"}}],[11,"from_clause","","",20,null],[11,"default_selection","","",20,null],[11,"as_query","","",20,null],[11,"primary_key","","",20,null],[11,"all_columns","","",20,null],[11,"table","","",20,null],[11,"into_update_target","","",20,{"inputs":[{"name":"self"}],"output":{"name":"updatetarget"}}],[11,"join_target","","",20,null],[11,"join_target","","",20,null],[11,"join_target","","",20,null],[11,"join_target","","",20,null],[11,"has_static_query_id","","",20,{"inputs":[],"output":{"name":"bool"}}]],"paths":[[3,"Config"],[3,"Discord"],[3,"InviteUrl"],[3,"Handler"],[3,"Author"],[3,"Quote"],[3,"NewQuote"],[3,"NewAuthor"],[3,"ListParams"],[3,"Connector"],[3,"star"],[3,"id"],[3,"table"],[3,"star"],[3,"id"],[3,"message_id"],[3,"quote"],[3,"created_by_id"],[3,"quoted_by_id"],[3,"guild_id"],[3,"table"]]};
searchIndex["r2d2"] = {"doc":"A generic connection pool.","items":[[3,"Config","r2d2","A struct specifying the runtime configuration of a pool.",null,null],[3,"NopErrorHandler","","A `HandleError` implementation which does nothing.",null,null],[3,"LoggingErrorHandler","","A `HandleError` implementation which logs at the error level.",null,null],[3,"NopConnectionCustomizer","","A `CustomizeConnection` which does nothing.",null,null],[3,"Pool","","A generic connection pool.",null,null],[3,"InitializationError","","An error returned by `Pool::new` if it fails to initialize connections.",null,null],[3,"GetTimeout","","An error returned by `Pool::get` if it times out without retrieving a connection.",null,null],[3,"State","","Information about the state of a `Pool`.",null,null],[12,"connections","","The number of connections currently being managed by the pool.",0,null],[12,"idle_connections","","The number of idle connections.",0,null],[3,"PooledConnection","","A smart pointer wrapping a connection.",null,null],[0,"config","","Pool configuration.",null,null],[3,"Builder","r2d2::config","A builder for `Config`.",null,null],[3,"Config","","A struct specifying the runtime configuration of a pool.",null,null],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Constructs a new `Builder`.",1,{"inputs":[],"output":{"name":"builder"}}],[11,"pool_size","","Sets `pool_size`.",1,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"builder"}}],[11,"min_idle","","Sets `min_idle`.",1,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"builder"}}],[11,"helper_threads","","Sets `helper_threads`.",1,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"builder"}}],[11,"thread_pool","","Sets the `thread_pool`.",1,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"builder"}}],[11,"test_on_check_out","","Sets `test_on_check_out`.",1,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"builder"}}],[11,"initialization_fail_fast","","Sets `initialization_fail_fast`.",1,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"builder"}}],[11,"max_lifetime","","Sets `max_lifetime`.",1,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"builder"}}],[11,"idle_timeout","","Sets `idle_timeout`.",1,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"builder"}}],[11,"connection_timeout","","Sets `connection_timeout` to the specified duration.",1,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"builder"}}],[11,"error_handler","","Sets the `error_handler`.",1,{"inputs":[{"name":"self"},{"name":"box"}],"output":{"name":"builder"}}],[11,"connection_customizer","","Sets the `connection_customizer`.",1,{"inputs":[{"name":"self"},{"name":"box"}],"output":{"name":"builder"}}],[11,"build","","Consumes the `Builder`, turning it into a `Config`.",1,{"inputs":[{"name":"self"}],"output":{"name":"config"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",2,{"inputs":[],"output":{"name":"config"}}],[11,"builder","","Creates a new `Builder` which can be used to construct a customized `Config`.",2,{"inputs":[],"output":{"name":"builder"}}],[11,"pool_size","","The maximum number of connections managed by the pool.",2,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"min_idle","","If set, the pool will try to maintain at least this many idle connections at all times, while respecting the value of `pool_size`.",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"helper_threads","","The number of threads that the pool will use for asynchronous operations such as connection creation and health checks.",2,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"test_on_check_out","","If true, the health of a connection will be verified via a call to `ConnectionManager::is_valid` before it is checked out of the pool.",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"initialization_fail_fast","","If true, `Pool::new` will synchronously initialize its connections, returning an error if they could not be created.",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"idle_timeout","","If set, connections will be closed after sitting idle for at most 30 seconds beyond this duration.",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"max_lifetime","","If set, connections will be closed after existing for at most 30 seconds beyond this duration. If a connection reaches its maximum lifetime while checked out it will be closed when it is returned to the pool.",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"connection_timeout","","Calls to `Pool::get` will wait this long for a connection to become available before returning an error.",2,{"inputs":[{"name":"self"}],"output":{"name":"duration"}}],[11,"error_handler","","The handler for error reported in the pool.",2,{"inputs":[{"name":"self"}],"output":{"name":"handleerror"}}],[11,"connection_customizer","","The connection customizer used by the pool.",2,{"inputs":[{"name":"self"}],"output":{"name":"customizeconnection"}}],[11,"thread_pool","","The thread pool that the pool will use for asynchronous operations such as connection creation and health checks.",2,{"inputs":[{"name":"self"}],"output":{"name":"arc"}}],[8,"ManageConnection","r2d2","A trait which provides connection-specific functionality.",null,null],[16,"Connection","","The connection type this manager deals with.",3,null],[16,"Error","","The error type returned by `Connection`s.",3,null],[10,"connect","","Attempts to create a new connection.",3,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"is_valid","","Determines if the connection is still connected to the database.",3,null],[10,"has_broken","","Quickly determines if the connection is no longer usable.",3,null],[8,"HandleError","","A trait which handles errors reported by the `ManageConnection`.",null,null],[10,"handle_error","","Handles an error.",4,{"inputs":[{"name":"self"},{"name":"e"}],"output":null}],[8,"CustomizeConnection","","A trait which allows for customization of connections.",null,null],[11,"on_acquire","","Called with connections immediately after they are returned from `ManageConnection::connect`.",5,{"inputs":[{"name":"self"},{"name":"c"}],"output":{"name":"result"}}],[11,"on_release","","Called with connections when they are removed from the pool.",5,{"inputs":[{"name":"self"},{"name":"c"}],"output":null}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"noperrorhandler"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"handle_error","","",6,{"inputs":[{"name":"self"},{"name":"e"}],"output":null}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"loggingerrorhandler"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"handle_error","","",7,{"inputs":[{"name":"self"},{"name":"e"}],"output":null}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"nopconnectioncustomizer"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"pool"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new connection pool.",9,{"inputs":[{"name":"config"},{"name":"m"}],"output":{"name":"result"}}],[11,"state","","Returns information about the current state of the pool.",9,{"inputs":[{"name":"self"}],"output":{"name":"state"}}],[11,"config","","Returns the pool's configuration.",9,{"inputs":[{"name":"self"}],"output":{"name":"config"}}],[11,"get","","Retrieves a connection from the pool.",9,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"try_get","","Attempts to retrieve a connection from the pool if there is one available.",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",10,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",11,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drop","","",12,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",12,null],[11,"deref_mut","","",12,null]],"paths":[[3,"State"],[3,"Builder"],[3,"Config"],[8,"ManageConnection"],[8,"HandleError"],[8,"CustomizeConnection"],[3,"NopErrorHandler"],[3,"LoggingErrorHandler"],[3,"NopConnectionCustomizer"],[3,"Pool"],[3,"InitializationError"],[3,"GetTimeout"],[3,"PooledConnection"]]};
searchIndex["r2d2_diesel"] = {"doc":"","items":[[3,"ConnectionManager","r2d2_diesel","",null,null],[4,"Error","","",null,null],[13,"ConnectionError","","",0,null],[13,"QueryError","","",0,null],[11,"new","","",1,{"inputs":[{"name":"s"}],"output":{"name":"self"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"connect","","",1,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"is_valid","","",1,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"has_broken","","",1,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}]],"paths":[[4,"Error"],[3,"ConnectionManager"]]};
searchIndex["rand"] = {"doc":"Utilities for random number generation","items":[[3,"Generator","rand","Iterator which will generate a stream of random items.",null,null],[3,"AsciiGenerator","","Iterator which will continuously generate random ascii characters.",null,null],[3,"XorShiftRng","","An Xorshift[1] random number generator.",null,null],[3,"Open01","","A wrapper for generating floating point numbers uniformly in the open interval `(0,1)` (not including either endpoint).",null,null],[12,"0","","",0,null],[3,"Closed01","","A wrapper for generating floating point numbers uniformly in the closed interval `[0,1]` (including both endpoints).",null,null],[12,"0","","",1,null],[3,"StdRng","","The standard RNG. This is designed to be efficient on the current platform.",null,null],[3,"ThreadRng","","The thread-local RNG.",null,null],[5,"weak_rng","","Create a weak random number generator with a default algorithm and seed.",null,{"inputs":[],"output":{"name":"xorshiftrng"}}],[5,"thread_rng","","Retrieve the lazily-initialized thread-local random number generator, seeded by the system. Intended to be used in method chaining style, e.g. `thread_rng().gen::<i32>()`.",null,{"inputs":[],"output":{"name":"threadrng"}}],[5,"random","","Generates a random value using the thread-local random number generator.",null,{"inputs":[],"output":{"name":"t"}}],[5,"sample","","Randomly sample up to `amount` elements from a finite iterator. The order of elements in the sample is not random.",null,{"inputs":[{"name":"r"},{"name":"i"},{"name":"usize"}],"output":{"name":"vec"}}],[0,"distributions","","Sampling from random distributions.",null,null],[3,"RandSample","rand::distributions","A wrapper for generating types that implement `Rand` via the `Sample` & `IndependentSample` traits.",null,null],[3,"Weighted","","A value with a particular weight for use with `WeightedChoice`.",null,null],[12,"weight","","The numerical weight of this item",2,null],[12,"item","","The actual item which is being weighted",2,null],[3,"WeightedChoice","","A distribution that selects from a finite collection of weighted items.",null,null],[0,"range","","Generating numbers between two others.",null,null],[3,"Range","rand::distributions::range","Sample values uniformly between two bounds.",null,null],[8,"SampleRange","","The helper trait for types that have a sensible way to sample uniformly between two values. This should not be used directly, and is only to facilitate `Range`.",null,null],[10,"construct_range","","Construct the `Range` object that `sample_range` requires. This should not ever be called directly, only via `Range::new`, which will check that `low < high`, so this function doesn't have to repeat the check.",3,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"range"}}],[10,"sample_range","","Sample a value from the given `Range` with the given `Rng` as a source of randomness.",3,{"inputs":[{"name":"range"},{"name":"r"}],"output":{"name":"self"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"range"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new `Range` instance that samples uniformly from `[low, high)`. Panics if `low >= high`.",4,{"inputs":[{"name":"x"},{"name":"x"}],"output":{"name":"range"}}],[11,"sample","","",4,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"sup"}}],[11,"ind_sample","","",4,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"sup"}}],[0,"gamma","rand::distributions","The Gamma and derived distributions.",null,null],[3,"Gamma","rand::distributions::gamma","The Gamma distribution `Gamma(shape, scale)` distribution.",null,null],[3,"ChiSquared","","The chi-squared distribution `χ²(k)`, where `k` is the degrees of freedom.",null,null],[3,"FisherF","","The Fisher F distribution `F(m, n)`.",null,null],[3,"StudentT","","The Student t distribution, `t(nu)`, where `nu` is the degrees of freedom.",null,null],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"gamma"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Construct an object representing the `Gamma(shape, scale)` distribution.",5,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"gamma"}}],[11,"sample","","",5,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",5,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"chisquared"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new chi-squared distribution with degrees-of-freedom `k`. Panics if `k < 0`.",6,{"inputs":[{"name":"f64"}],"output":{"name":"chisquared"}}],[11,"sample","","",6,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",6,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"fisherf"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new `FisherF` distribution, with the given parameter. Panics if either `m` or `n` are not positive.",7,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"fisherf"}}],[11,"sample","","",7,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",7,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"studentt"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new Student t distribution with `n` degrees of freedom. Panics if `n <= 0`.",8,{"inputs":[{"name":"f64"}],"output":{"name":"studentt"}}],[11,"sample","","",8,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",8,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[0,"normal","rand::distributions","The normal and derived distributions.",null,null],[3,"StandardNormal","rand::distributions::normal","A wrapper around an `f64` to generate N(0, 1) random numbers (a.k.a.  a standard normal, or Gaussian).",null,null],[12,"0","","",9,null],[3,"Normal","","The normal distribution `N(mean, std_dev**2)`.",null,null],[3,"LogNormal","","The log-normal distribution `ln N(mean, std_dev**2)`.",null,null],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"standardnormal"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"rand","","",9,{"inputs":[{"name":"r"}],"output":{"name":"standardnormal"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"normal"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Construct a new `Normal` distribution with the given mean and standard deviation.",10,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"normal"}}],[11,"sample","","",10,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",10,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"lognormal"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Construct a new `LogNormal` distribution with the given mean and standard deviation.",11,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"lognormal"}}],[11,"sample","","",11,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",11,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[0,"exponential","rand::distributions","The exponential distribution.",null,null],[3,"Exp1","rand::distributions::exponential","A wrapper around an `f64` to generate Exp(1) random numbers.",null,null],[12,"0","","",12,null],[3,"Exp","","The exponential distribution `Exp(lambda)`.",null,null],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"exp1"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"rand","","",12,{"inputs":[{"name":"r"}],"output":{"name":"exp1"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"exp"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Construct a new `Exp` with the given shape parameter `lambda`. Panics if `lambda <= 0`.",13,{"inputs":[{"name":"f64"}],"output":{"name":"exp"}}],[11,"sample","","",13,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",13,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[8,"Sample","rand::distributions","Types that can be used to create a random instance of `Support`.",null,null],[10,"sample","","Generate a random value of `Support`, using `rng` as the source of randomness.",14,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"support"}}],[8,"IndependentSample","","`Sample`s that do not require keeping track of state.",null,null],[10,"ind_sample","","Generate a random value.",15,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"support"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"sample","","",16,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"sup"}}],[11,"ind_sample","","",16,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"sup"}}],[11,"new","","",16,{"inputs":[],"output":{"name":"randsample"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"weighted"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new `WeightedChoice`.",17,null],[11,"sample","","",17,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"t"}}],[11,"ind_sample","","",17,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"t"}}],[0,"isaac","rand","The ISAAC random number generator.",null,null],[3,"IsaacRng","rand::isaac","A random number generator that uses the ISAAC algorithm[1].",null,null],[3,"Isaac64Rng","","A random number generator that uses ISAAC-64[1], the 64-bit variant of the ISAAC algorithm.",null,null],[11,"new_unseeded","","Create an ISAAC random number generator using the default fixed seed.",18,{"inputs":[],"output":{"name":"isaacrng"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"isaacrng"}}],[11,"next_u32","","",18,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"reseed","","",18,null],[11,"from_seed","","Create an ISAAC random number generator with a seed. This can be any length, although the maximum number of elements used is 256 and any more will be silently ignored. A generator constructed with a given seed will generate the same sequence of values as all other generators constructed with that seed.",18,null],[11,"rand","","",18,{"inputs":[{"name":"r"}],"output":{"name":"isaacrng"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new_unseeded","","Create a 64-bit ISAAC random number generator using the default fixed seed.",19,{"inputs":[],"output":{"name":"isaac64rng"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"isaac64rng"}}],[11,"next_u32","","",19,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next_u64","","",19,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"reseed","","",19,null],[11,"from_seed","","Create an ISAAC random number generator with a seed. This can be any length, although the maximum number of elements used is 256 and any more will be silently ignored. A generator constructed with a given seed will generate the same sequence of values as all other generators constructed with that seed.",19,null],[11,"rand","","",19,{"inputs":[{"name":"r"}],"output":{"name":"isaac64rng"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"chacha","rand","The ChaCha random number generator.",null,null],[3,"ChaChaRng","rand::chacha","A random number generator that uses the ChaCha20 algorithm [1].",null,null],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"chacharng"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new_unseeded","","Create an ChaCha random number generator using the default fixed key of 8 zero words.",20,{"inputs":[],"output":{"name":"chacharng"}}],[11,"set_counter","","Sets the internal 128-bit ChaCha counter to a user-provided value. This permits jumping arbitrarily ahead (or backwards) in the pseudorandom stream.",20,{"inputs":[{"name":"self"},{"name":"u64"},{"name":"u64"}],"output":null}],[11,"next_u32","","",20,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"reseed","","",20,null],[11,"from_seed","","Create a ChaCha generator from a seed, obtained from a variable-length u32 array. Only up to 8 words are used; if less than 8 words are used, the remaining are set to zero.",20,null],[11,"rand","","",20,{"inputs":[{"name":"r"}],"output":{"name":"chacharng"}}],[0,"reseeding","rand","A wrapper around another RNG that reseeds it after it generates a certain number of random bytes.",null,null],[3,"ReseedingRng","rand::reseeding","A wrapper around any RNG which reseeds the underlying RNG after it has generated a certain number of random bytes.",null,null],[12,"reseeder","","Controls the behaviour when reseeding the RNG.",21,null],[3,"ReseedWithDefault","","Reseed an RNG using a `Default` instance. This reseeds by replacing the RNG with the result of a `Default::default` call.",null,null],[8,"Reseeder","","Something that can be used to reseed an RNG via `ReseedingRng`.",null,null],[10,"reseed","","Reseed the given RNG.",22,{"inputs":[{"name":"self"},{"name":"r"}],"output":null}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new `ReseedingRng` with the given parameters.",21,{"inputs":[{"name":"r"},{"name":"u64"},{"name":"rsdr"}],"output":{"name":"reseedingrng"}}],[11,"reseed_if_necessary","","Reseed the internal RNG if the number of bytes that have been generated exceed the threshold.",21,{"inputs":[{"name":"self"}],"output":null}],[11,"next_u32","","",21,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next_u64","","",21,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",21,null],[11,"reseed","","",21,null],[11,"from_seed","","Create a new `ReseedingRng` from the given reseeder and seed. This uses a default value for `generation_threshold`.",21,null],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"reseedwithdefault"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"reseed","","",23,{"inputs":[{"name":"self"},{"name":"r"}],"output":null}],[11,"default","","",23,{"inputs":[],"output":{"name":"reseedwithdefault"}}],[11,"rand","rand","",0,{"inputs":[{"name":"r"}],"output":{"name":"open01"}}],[11,"rand","","",1,{"inputs":[{"name":"r"}],"output":{"name":"closed01"}}],[11,"rand","","",0,{"inputs":[{"name":"r"}],"output":{"name":"open01"}}],[11,"rand","","",1,{"inputs":[{"name":"r"}],"output":{"name":"closed01"}}],[0,"os","","Interfaces to the operating system provided random number generators.",null,null],[3,"OsRng","rand::os","A random number generator that retrieves randomness straight from the operating system. Platform sources:",null,null],[11,"new","","Create a new `OsRng`.",24,{"inputs":[],"output":{"name":"result"}}],[11,"next_u32","","",24,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next_u64","","",24,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",24,null],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"read","rand","A wrapper around any Read to treat it as an RNG.",null,null],[3,"ReadRng","rand::read","An RNG that reads random bytes straight from a `Read`. This will work best with an infinite reader, but this is not required.",null,null],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new `ReadRng` from a `Read`.",25,{"inputs":[{"name":"r"}],"output":{"name":"readrng"}}],[11,"next_u32","","",25,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next_u64","","",25,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",25,null],[8,"Rand","rand","A type that can be randomly generated using an `Rng`.",null,null],[10,"rand","","Generates a random instance of this type using the specified source of randomness.",26,{"inputs":[{"name":"r"}],"output":{"name":"self"}}],[8,"Rng","","A random number generator.",null,null],[10,"next_u32","","Return the next random u32.",27,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next_u64","","Return the next random u64.",27,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"next_f32","","Return the next random f32 selected from the half-open interval `[0, 1)`.",27,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"next_f64","","Return the next random f64 selected from the half-open interval `[0, 1)`.",27,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"fill_bytes","","Fill `dest` with random data.",27,null],[11,"gen","","Return a random value of a `Rand` type.",27,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"gen_iter","","Return an iterator that will yield an infinite number of randomly generated items.",27,{"inputs":[{"name":"self"}],"output":{"name":"generator"}}],[11,"gen_range","","Generate a random value in the range [`low`, `high`).",27,{"inputs":[{"name":"self"},{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[11,"gen_weighted_bool","","Return a bool with a 1 in n chance of true",27,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"gen_ascii_chars","","Return an iterator of random characters from the set A-Z,a-z,0-9.",27,{"inputs":[{"name":"self"}],"output":{"name":"asciigenerator"}}],[11,"choose","","Return a random element from `values`.",27,null],[11,"choose_mut","","Return a mutable pointer to a random element from `values`.",27,null],[11,"shuffle","","Shuffle a mutable slice in place.",27,null],[8,"SeedableRng","","A random number generator that can be explicitly seeded to produce the same stream of randomness multiple times.",null,null],[10,"reseed","","Reseed an RNG with the given seed.",28,{"inputs":[{"name":"self"},{"name":"seed"}],"output":null}],[10,"from_seed","","Create a new RNG with the given seed.",28,{"inputs":[{"name":"seed"}],"output":{"name":"self"}}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",29,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",30,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",31,{"inputs":[{"name":"self"}],"output":{"name":"xorshiftrng"}}],[11,"fmt","","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new_unseeded","","Creates a new XorShiftRng instance which is not seeded.",31,{"inputs":[],"output":{"name":"xorshiftrng"}}],[11,"next_u32","","",31,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"reseed","","Reseed an XorShiftRng. This will panic if `seed` is entirely 0.",31,null],[11,"from_seed","","Create a new XorShiftRng. This will panic if `seed` is entirely 0.",31,null],[11,"rand","","",31,{"inputs":[{"name":"r"}],"output":{"name":"xorshiftrng"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",32,{"inputs":[{"name":"self"}],"output":{"name":"stdrng"}}],[11,"fmt","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a randomly seeded instance of `StdRng`.",32,{"inputs":[],"output":{"name":"result"}}],[11,"next_u32","","",32,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next_u64","","",32,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"reseed","","",32,null],[11,"from_seed","","",32,null],[11,"clone","","",33,{"inputs":[{"name":"self"}],"output":{"name":"threadrng"}}],[11,"fmt","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next_u32","","",33,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next_u64","","",33,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",33,null]],"paths":[[3,"Open01"],[3,"Closed01"],[3,"Weighted"],[8,"SampleRange"],[3,"Range"],[3,"Gamma"],[3,"ChiSquared"],[3,"FisherF"],[3,"StudentT"],[3,"StandardNormal"],[3,"Normal"],[3,"LogNormal"],[3,"Exp1"],[3,"Exp"],[8,"Sample"],[8,"IndependentSample"],[3,"RandSample"],[3,"WeightedChoice"],[3,"IsaacRng"],[3,"Isaac64Rng"],[3,"ChaChaRng"],[3,"ReseedingRng"],[8,"Reseeder"],[3,"ReseedWithDefault"],[3,"OsRng"],[3,"ReadRng"],[8,"Rand"],[8,"Rng"],[8,"SeedableRng"],[3,"Generator"],[3,"AsciiGenerator"],[3,"XorShiftRng"],[3,"StdRng"],[3,"ThreadRng"]]};
searchIndex["regex"] = {"doc":"This crate provides a library for parsing, compiling, and executing regular expressions. Its syntax is similar to Perl-style regular expressions, but lacks a few features like look around and backreferences. In exchange, all searches execute in linear time with respect to the size of the regular expression and search text.","items":[[3,"RegexBuilder","regex","A configurable builder for a regular expression.",null,null],[3,"RegexSetBuilder","","A configurable builder for a set of regular expressions.",null,null],[3,"RegexSet","","Match multiple (possibly overlapping) regular expressions in a single scan.",null,null],[3,"SetMatches","","A set of matches returned by a regex set.",null,null],[3,"SetMatchesIntoIter","","An owned iterator over the set of matches from a regex set.",null,null],[3,"SetMatchesIter","","A borrowed iterator over the set of matches from a regex set.",null,null],[3,"Regex","","A compiled regular expression for matching Unicode strings.",null,null],[3,"Match","","Match represents a single match of a regex in a haystack.",null,null],[3,"Captures","","Captures represents a group of captured strings for a single match.",null,null],[3,"CaptureNames","","An iterator over the names of all possible captures.",null,null],[3,"Matches","","An iterator over all non-overlapping matches for a particular string.",null,null],[3,"CaptureMatches","","An iterator that yields all non-overlapping capture groups matching a particular regular expression.",null,null],[3,"SubCaptureMatches","","An iterator that yields all capturing matches in the order in which they appear in the regex.",null,null],[3,"NoExpand","","NoExpand indicates literal string replacement.",null,null],[12,"0","","",0,null],[3,"Split","","Yields all substrings delimited by a regular expression match.",null,null],[3,"SplitN","","Yields at most `N` substrings delimited by a regular expression match.",null,null],[4,"Error","","An error that occurred during parsing or compiling a regular expression.",null,null],[13,"Syntax","","A syntax error.",1,null],[13,"CompiledTooBig","","The compiled program exceeded the set size limit. The argument is the size limit imposed.",1,null],[5,"escape","","Escapes all regular expression meta characters in `text`.",null,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[0,"bytes","","Match regular expressions on arbitrary bytes.",null,null],[3,"RegexBuilder","regex::bytes","A configurable builder for a regular expression.",null,null],[3,"RegexSetBuilder","","A configurable builder for a set of regular expressions.",null,null],[3,"Match","","Match represents a single match of a regex in a haystack.",null,null],[3,"Regex","","A compiled regular expression for matching arbitrary bytes.",null,null],[3,"Matches","","An iterator over all non-overlapping matches for a particular string.",null,null],[3,"CaptureMatches","","An iterator that yields all non-overlapping capture groups matching a particular regular expression.",null,null],[3,"Split","","Yields all substrings delimited by a regular expression match.",null,null],[3,"SplitN","","Yields at most `N` substrings delimited by a regular expression match.",null,null],[3,"CaptureNames","","An iterator over the names of all possible captures.",null,null],[3,"Captures","","Captures represents a group of captured byte strings for a single match.",null,null],[3,"SubCaptureMatches","","An iterator that yields all capturing matches in the order in which they appear in the regex.",null,null],[3,"NoExpand","","NoExpand indicates literal byte string replacement.",null,null],[12,"0","","",2,null],[3,"RegexSet","","Match multiple (possibly overlapping) regular expressions in a single scan.",null,null],[3,"SetMatches","","A set of matches returned by a regex set.",null,null],[3,"SetMatchesIntoIter","","An owned iterator over the set of matches from a regex set.",null,null],[3,"SetMatchesIter","","A borrowed iterator over the set of matches from a regex set.",null,null],[8,"Replacer","","Replacer describes types that can be used to replace matches in a byte string.",null,null],[10,"replace_append","","Appends text to `dst` to replace the current match.",3,{"inputs":[{"name":"self"},{"name":"captures"},{"name":"vec"}],"output":null}],[11,"no_expansion","","Return a fixed unchanging replacement byte string.",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","regex","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",1,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",1,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"new","regex::bytes","Create a new regular expression builder with the given pattern.",4,{"inputs":[{"name":"str"}],"output":{"name":"regexbuilder"}}],[11,"build","","Consume the builder and compile the regular expression.",4,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"case_insensitive","","Set the value for the case insensitive (`i`) flag.",4,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexbuilder"}}],[11,"multi_line","","Set the value for the multi-line matching (`m`) flag.",4,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexbuilder"}}],[11,"dot_matches_new_line","","Set the value for the any character (`s`) flag, where in `.` matches anything when `s` is set and matches anything except for new line when it is not set (the default).",4,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexbuilder"}}],[11,"swap_greed","","Set the value for the greedy swap (`U`) flag.",4,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexbuilder"}}],[11,"ignore_whitespace","","Set the value for the ignore whitespace (`x`) flag.",4,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexbuilder"}}],[11,"unicode","","Set the value for the Unicode (`u`) flag.",4,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexbuilder"}}],[11,"size_limit","","Set the approximate size limit of the compiled regular expression.",4,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"regexbuilder"}}],[11,"dfa_size_limit","","Set the approximate size of the cache used by the DFA.",4,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"regexbuilder"}}],[11,"new","regex","Create a new regular expression builder with the given pattern.",5,{"inputs":[{"name":"str"}],"output":{"name":"regexbuilder"}}],[11,"build","","Consume the builder and compile the regular expression.",5,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"case_insensitive","","Set the value for the case insensitive (`i`) flag.",5,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexbuilder"}}],[11,"multi_line","","Set the value for the multi-line matching (`m`) flag.",5,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexbuilder"}}],[11,"dot_matches_new_line","","Set the value for the any character (`s`) flag, where in `.` matches anything when `s` is set and matches anything except for new line when it is not set (the default).",5,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexbuilder"}}],[11,"swap_greed","","Set the value for the greedy swap (`U`) flag.",5,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexbuilder"}}],[11,"ignore_whitespace","","Set the value for the ignore whitespace (`x`) flag.",5,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexbuilder"}}],[11,"unicode","","Set the value for the Unicode (`u`) flag.",5,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexbuilder"}}],[11,"size_limit","","Set the approximate size limit of the compiled regular expression.",5,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"regexbuilder"}}],[11,"dfa_size_limit","","Set the approximate size of the cache used by the DFA.",5,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"regexbuilder"}}],[11,"new","regex::bytes","Create a new regular expression builder with the given pattern.",6,{"inputs":[{"name":"i"}],"output":{"name":"regexsetbuilder"}}],[11,"build","","Consume the builder and compile the regular expressions into a set.",6,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"case_insensitive","","Set the value for the case insensitive (`i`) flag.",6,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexsetbuilder"}}],[11,"multi_line","","Set the value for the multi-line matching (`m`) flag.",6,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexsetbuilder"}}],[11,"dot_matches_new_line","","Set the value for the any character (`s`) flag, where in `.` matches anything when `s` is set and matches anything except for new line when it is not set (the default).",6,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexsetbuilder"}}],[11,"swap_greed","","Set the value for the greedy swap (`U`) flag.",6,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexsetbuilder"}}],[11,"ignore_whitespace","","Set the value for the ignore whitespace (`x`) flag.",6,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexsetbuilder"}}],[11,"unicode","","Set the value for the Unicode (`u`) flag.",6,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexsetbuilder"}}],[11,"size_limit","","Set the approximate size limit of the compiled regular expression.",6,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"regexsetbuilder"}}],[11,"dfa_size_limit","","Set the approximate size of the cache used by the DFA.",6,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"regexsetbuilder"}}],[11,"new","regex","Create a new regular expression builder with the given pattern.",7,{"inputs":[{"name":"i"}],"output":{"name":"regexsetbuilder"}}],[11,"build","","Consume the builder and compile the regular expressions into a set.",7,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"case_insensitive","","Set the value for the case insensitive (`i`) flag.",7,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexsetbuilder"}}],[11,"multi_line","","Set the value for the multi-line matching (`m`) flag.",7,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexsetbuilder"}}],[11,"dot_matches_new_line","","Set the value for the any character (`s`) flag, where in `.` matches anything when `s` is set and matches anything except for new line when it is not set (the default).",7,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexsetbuilder"}}],[11,"swap_greed","","Set the value for the greedy swap (`U`) flag.",7,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexsetbuilder"}}],[11,"ignore_whitespace","","Set the value for the ignore whitespace (`x`) flag.",7,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexsetbuilder"}}],[11,"unicode","","Set the value for the Unicode (`u`) flag.",7,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexsetbuilder"}}],[11,"size_limit","","Set the approximate size limit of the compiled regular expression.",7,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"regexsetbuilder"}}],[11,"dfa_size_limit","","Set the approximate size of the cache used by the DFA.",7,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"regexsetbuilder"}}],[11,"no_expansion","regex::bytes","Return a fixed unchanging replacement byte string.",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"match"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"match"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"self"},{"name":"match"}],"output":{"name":"bool"}}],[11,"start","","Returns the starting byte offset of the match in the haystack.",8,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"end","","Returns the ending byte offset of the match in the haystack.",8,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"as_bytes","","Returns the matched text.",8,null],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"regex"}}],[11,"fmt","","Shows the original regular expression.",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","Shows the original regular expression.",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","Attempts to parse a string into a regular expression",9,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"new","","Compiles a regular expression. Once compiled, it can be used repeatedly to search, split or replace text in a string.",9,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"is_match","","Returns true if and only if the regex matches the string given.",9,null],[11,"find","","Returns the start and end byte range of the leftmost-first match in `text`. If no match exists, then `None` is returned.",9,null],[11,"find_iter","","Returns an iterator for each successive non-overlapping match in `text`, returning the start and end byte indices with respect to `text`.",9,null],[11,"captures","","Returns the capture groups corresponding to the leftmost-first match in `text`. Capture group `0` always corresponds to the entire match. If no match is found, then `None` is returned.",9,null],[11,"captures_iter","","Returns an iterator over all the non-overlapping capture groups matched in `text`. This is operationally the same as `find_iter`, except it yields information about capturing group matches.",9,null],[11,"split","","Returns an iterator of substrings of `text` delimited by a match of the regular expression. Namely, each element of the iterator corresponds to text that isn't matched by the regular expression.",9,null],[11,"splitn","","Returns an iterator of at most `limit` substrings of `text` delimited by a match of the regular expression. (A `limit` of `0` will return no substrings.) Namely, each element of the iterator corresponds to text that isn't matched by the regular expression. The remainder of the string that is not split will be the last element in the iterator.",9,null],[11,"replace","","Replaces the leftmost-first match with the replacement provided. The replacement can be a regular byte string (where `$N` and `$name` are expanded to match capture groups) or a function that takes the matches' `Captures` and returns the replaced byte string.",9,null],[11,"replace_all","","Replaces all non-overlapping matches in `text` with the replacement provided. This is the same as calling `replacen` with `limit` set to `0`.",9,null],[11,"replacen","","Replaces at most `limit` non-overlapping matches in `text` with the replacement provided. If `limit` is 0, then all non-overlapping matches are replaced.",9,null],[11,"shortest_match","","Returns the end location of a match in the text given.",9,null],[11,"as_str","","Returns the original string of this regex.",9,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"capture_names","","Returns an iterator over the capture names.",9,{"inputs":[{"name":"self"}],"output":{"name":"capturenames"}}],[11,"captures_len","","Returns the number of captures.",9,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"next","","",10,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",11,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",12,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",13,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",14,null],[11,"get","","Returns the match associated with the capture group at index `i`. If `i` does not correspond to a capture group, or if the capture group did not participate in the match, then `None` is returned.",15,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"name","","Returns the match for the capture group named `name`. If `name` isn't a valid capture group or didn't match anything, then `None` is returned.",15,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"iter","","An iterator that yields all capturing matches in the order in which they appear in the regex. If a particular capture group didn't participate in the match, then `None` is yielded for that capture.",15,{"inputs":[{"name":"self"}],"output":{"name":"subcapturematches"}}],[11,"expand","","Expands all instances of `$name` in `text` to the corresponding capture group `name`, and writes them to the `dst` buffer given.",15,null],[11,"len","","Returns the number of captured groups.",15,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"index","","",15,null],[11,"index","","",15,null],[11,"next","","",16,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"replace_append","","",2,{"inputs":[{"name":"self"},{"name":"captures"},{"name":"vec"}],"output":null}],[11,"no_expansion","","",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","regex","",17,{"inputs":[{"name":"self"}],"output":{"name":"regexset"}}],[11,"new","","Create a new regex set with the given regular expressions.",17,{"inputs":[{"name":"i"}],"output":{"name":"result"}}],[11,"is_match","","Returns true if and only if one of the regexes in this set matches the text given.",17,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"matches","","Returns the set of regular expressions that match in the given text.",17,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"setmatches"}}],[11,"len","","Returns the total number of regular expressions in this set.",17,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"setmatches"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"matched_any","","Whether this set contains any matches.",18,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"matched","","Whether the regex at the given index matched.",18,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"len","","The total number of regexes in the set that created these matches.",18,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"iter","","Returns an iterator over indexes in the regex that matched.",18,{"inputs":[{"name":"self"}],"output":{"name":"setmatchesiter"}}],[11,"into_iter","","",18,null],[11,"next","","",19,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",19,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"setmatchesiter"}}],[11,"next","","",20,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",20,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","regex::bytes","",21,{"inputs":[{"name":"self"}],"output":{"name":"regexset"}}],[11,"new","","Create a new regex set with the given regular expressions.",21,{"inputs":[{"name":"i"}],"output":{"name":"result"}}],[11,"is_match","","Returns true if and only if one of the regexes in this set matches the text given.",21,null],[11,"matches","","Returns the set of regular expressions that match in the given text.",21,null],[11,"len","","Returns the total number of regular expressions in this set.",21,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"setmatches"}}],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"matched_any","","Whether this set contains any matches.",22,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"matched","","Whether the regex at the given index matched.",22,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"len","","The total number of regexes in the set that created these matches.",22,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"iter","","Returns an iterator over indexes in the regex that matched.",22,{"inputs":[{"name":"self"}],"output":{"name":"setmatchesiter"}}],[11,"into_iter","","",22,null],[11,"next","","",23,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",23,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"setmatchesiter"}}],[11,"next","","",24,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",24,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","regex","",25,{"inputs":[{"name":"self"}],"output":{"name":"match"}}],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",25,{"inputs":[{"name":"self"},{"name":"match"}],"output":{"name":"bool"}}],[11,"ne","","",25,{"inputs":[{"name":"self"},{"name":"match"}],"output":{"name":"bool"}}],[11,"start","","Returns the starting byte offset of the match in the haystack.",25,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"end","","Returns the ending byte offset of the match in the haystack.",25,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"as_str","","Returns the matched text.",25,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clone","","",26,{"inputs":[{"name":"self"}],"output":{"name":"regex"}}],[11,"fmt","","Shows the original regular expression.",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","Shows the original regular expression.",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","Attempts to parse a string into a regular expression",26,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"new","","Compiles a regular expression. Once compiled, it can be used repeatedly to search, split or replace text in a string.",26,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"is_match","","Returns true if and only if the regex matches the string given.",26,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"find","","Returns the start and end byte range of the leftmost-first match in `text`. If no match exists, then `None` is returned.",26,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"find_iter","","Returns an iterator for each successive non-overlapping match in `text`, returning the start and end byte indices with respect to `text`.",26,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"matches"}}],[11,"captures","","Returns the capture groups corresponding to the leftmost-first match in `text`. Capture group `0` always corresponds to the entire match. If no match is found, then `None` is returned.",26,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"captures_iter","","Returns an iterator over all the non-overlapping capture groups matched in `text`. This is operationally the same as `find_iter`, except it yields information about capturing group matches.",26,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"capturematches"}}],[11,"split","","Returns an iterator of substrings of `text` delimited by a match of the regular expression. Namely, each element of the iterator corresponds to text that isn't matched by the regular expression.",26,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"split"}}],[11,"splitn","","Returns an iterator of at most `limit` substrings of `text` delimited by a match of the regular expression. (A `limit` of `0` will return no substrings.) Namely, each element of the iterator corresponds to text that isn't matched by the regular expression. The remainder of the string that is not split will be the last element in the iterator.",26,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"}],"output":{"name":"splitn"}}],[11,"replace","","Replaces the leftmost-first match with the replacement provided. The replacement can be a regular string (where `$N` and `$name` are expanded to match capture groups) or a function that takes the matches' `Captures` and returns the replaced string.",26,{"inputs":[{"name":"self"},{"name":"str"},{"name":"r"}],"output":{"name":"cow"}}],[11,"replace_all","","Replaces all non-overlapping matches in `text` with the replacement provided. This is the same as calling `replacen` with `limit` set to `0`.",26,{"inputs":[{"name":"self"},{"name":"str"},{"name":"r"}],"output":{"name":"cow"}}],[11,"replacen","","Replaces at most `limit` non-overlapping matches in `text` with the replacement provided. If `limit` is 0, then all non-overlapping matches are replaced.",26,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"r"}],"output":{"name":"cow"}}],[11,"shortest_match","","Returns the end location of a match in the text given.",26,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"as_str","","Returns the original string of this regex.",26,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"capture_names","","Returns an iterator over the capture names.",26,{"inputs":[{"name":"self"}],"output":{"name":"capturenames"}}],[11,"captures_len","","Returns the number of captures.",26,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"next","","",27,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",27,null],[11,"next","","",28,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",29,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"get","","Returns the match associated with the capture group at index `i`. If `i` does not correspond to a capture group, or if the capture group did not participate in the match, then `None` is returned.",30,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"name","","Returns the match for the capture group named `name`. If `name` isn't a valid capture group or didn't match anything, then `None` is returned.",30,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"iter","","An iterator that yields all capturing matches in the order in which they appear in the regex. If a particular capture group didn't participate in the match, then `None` is yielded for that capture.",30,{"inputs":[{"name":"self"}],"output":{"name":"subcapturematches"}}],[11,"expand","","Expands all instances of `$name` in `text` to the corresponding capture group `name`, and writes them to the `dst` buffer given.",30,{"inputs":[{"name":"self"},{"name":"str"},{"name":"string"}],"output":null}],[11,"len","","Returns the number of captured groups.",30,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"index","","",30,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"str"}}],[11,"index","","",30,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"str"}}],[11,"next","","",31,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",32,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",33,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"replace_append","","",0,{"inputs":[{"name":"self"},{"name":"captures"},{"name":"string"}],"output":null}],[11,"no_expansion","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[8,"Replacer","","Replacer describes types that can be used to replace matches in a string.",null,null],[10,"replace_append","","Appends text to `dst` to replace the current match.",34,{"inputs":[{"name":"self"},{"name":"captures"},{"name":"string"}],"output":null}],[11,"no_expansion","","Return a fixed unchanging replacement string.",34,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"no_expansion","","Return a fixed unchanging replacement string.",34,{"inputs":[{"name":"self"}],"output":{"name":"option"}}]],"paths":[[3,"NoExpand"],[4,"Error"],[3,"NoExpand"],[8,"Replacer"],[3,"RegexBuilder"],[3,"RegexBuilder"],[3,"RegexSetBuilder"],[3,"RegexSetBuilder"],[3,"Match"],[3,"Regex"],[3,"Matches"],[3,"CaptureMatches"],[3,"Split"],[3,"SplitN"],[3,"CaptureNames"],[3,"Captures"],[3,"SubCaptureMatches"],[3,"RegexSet"],[3,"SetMatches"],[3,"SetMatchesIntoIter"],[3,"SetMatchesIter"],[3,"RegexSet"],[3,"SetMatches"],[3,"SetMatchesIntoIter"],[3,"SetMatchesIter"],[3,"Match"],[3,"Regex"],[3,"CaptureNames"],[3,"Split"],[3,"SplitN"],[3,"Captures"],[3,"SubCaptureMatches"],[3,"CaptureMatches"],[3,"Matches"],[8,"Replacer"]]};
searchIndex["regex_syntax"] = {"doc":"This crate provides a regular expression parser and an abstract syntax for regular expressions. The abstract syntax is defined by the `Expr` type. The concrete syntax is enumerated in the `regex` crate documentation.","items":[[3,"Literals","regex_syntax","A set of literal byte strings extracted from a regular expression.",null,null],[3,"Lit","","A single member of a set of literals extracted from a regular expression.",null,null],[3,"CharClass","","A character class.",null,null],[3,"ClassRange","","A single inclusive range in a character class.",null,null],[12,"start","","The start character of the range.",0,null],[12,"end","","The end character of the range.",0,null],[3,"ByteClass","","A byte class for byte ranges only.",null,null],[3,"ByteRange","","A single inclusive range in a byte class.",null,null],[12,"start","","The start byte of the range.",1,null],[12,"end","","The end byte of the range.",1,null],[3,"ExprBuilder","","A builder for configuring regular expression parsing.",null,null],[3,"Error","","A parse error.",null,null],[4,"Expr","","A regular expression abstract syntax tree.",null,null],[13,"Empty","","An empty regex (which never matches any text).",2,null],[13,"Literal","","A sequence of one or more literal characters to be matched.",2,null],[12,"chars","regex_syntax::Expr","The characters.",2,null],[12,"casei","","Whether to match case insensitively.",2,null],[13,"LiteralBytes","regex_syntax","A sequence of one or more literal bytes to be matched.",2,null],[12,"bytes","regex_syntax::Expr","The bytes.",2,null],[12,"casei","","Whether to match case insensitively.",2,null],[13,"AnyChar","regex_syntax","Match any character.",2,null],[13,"AnyCharNoNL","","Match any character, excluding new line (`0xA`).",2,null],[13,"AnyByte","","Match any byte.",2,null],[13,"AnyByteNoNL","","Match any byte, excluding new line (`0xA`).",2,null],[13,"Class","","A character class.",2,null],[13,"ClassBytes","","A character class with byte ranges only.",2,null],[13,"StartLine","","Match the start of a line or beginning of input.",2,null],[13,"EndLine","","Match the end of a line or end of input.",2,null],[13,"StartText","","Match the beginning of input.",2,null],[13,"EndText","","Match the end of input.",2,null],[13,"WordBoundary","","Match a word boundary (word character on one side and a non-word character on the other).",2,null],[13,"NotWordBoundary","","Match a position that is not a word boundary (word or non-word characters on both sides).",2,null],[13,"WordBoundaryAscii","","Match an ASCII word boundary.",2,null],[13,"NotWordBoundaryAscii","","Match a position that is not an ASCII word boundary.",2,null],[13,"Group","","A group, possibly non-capturing.",2,null],[12,"e","regex_syntax::Expr","The expression inside the group.",2,null],[12,"i","","The capture index (starting at `1`) only for capturing groups.",2,null],[12,"name","","The capture name, only for capturing named groups.",2,null],[13,"Repeat","regex_syntax","A repeat operator (`?`, `*`, `+` or `{m,n}`).",2,null],[12,"e","regex_syntax::Expr","The expression to be repeated. Limited to literals, `.`, classes or grouped expressions.",2,null],[12,"r","","The type of repeat operator used.",2,null],[12,"greedy","","Whether the repeat is greedy (match the most) or not (match the least).",2,null],[13,"Concat","regex_syntax","A concatenation of expressions. Must be matched one after the other.",2,null],[13,"Alternate","","An alternation of expressions. Only one must match.",2,null],[4,"Repeater","","The type of a repeat operator expression.",null,null],[13,"ZeroOrOne","","Match zero or one (`?`).",3,null],[13,"ZeroOrMore","","Match zero or more (`*`).",3,null],[13,"OneOrMore","","Match one or more (`+`).",3,null],[13,"Range","","Match for at least `min` and at most `max` (`{m,n}`).",3,null],[12,"min","regex_syntax::Repeater","Lower bound on the number of matches.",3,null],[12,"max","","Optional upper bound on the number of matches.",3,null],[4,"ErrorKind","regex_syntax","The specific type of parse error that can occur.",null,null],[13,"DoubleFlagNegation","","A negation symbol is used twice in flag settings. e.g., `(?-i-s)`.",4,null],[13,"DuplicateCaptureName","","The same capture name was used more than once. e.g., `(?P<a>.)(?P<a>.)`.",4,null],[13,"EmptyAlternate","","An alternate is empty. e.g., `(|a)`.",4,null],[13,"EmptyCaptureName","","A capture group name is empty. e.g., `(?P<>a)`.",4,null],[13,"EmptyFlagNegation","","A negation symbol was not proceded by any flags. e.g., `(?i-)`.",4,null],[13,"EmptyGroup","","A group is empty. e.g., `()`.",4,null],[13,"InvalidBase10","","An invalid number was used in a counted repetition. e.g., `a{b}`.",4,null],[13,"InvalidBase16","","An invalid hexadecimal number was used in an escape sequence. e.g., `\\xAG`.",4,null],[13,"InvalidCaptureName","","An invalid capture name was used. e.g., `(?P<0a>b)`.",4,null],[13,"InvalidClassRange","","An invalid class range was givien. Specifically, when the start of the range is greater than the end. e.g., `[z-a]`.",4,null],[12,"start","regex_syntax::ErrorKind","The first character specified in the range.",4,null],[12,"end","","The second character specified in the range.",4,null],[13,"InvalidClassEscape","regex_syntax","An escape sequence was used in a character class where it is not allowed. e.g., `[a-\\pN]` or `[\\A]`.",4,null],[13,"InvalidRepeatRange","","An invalid counted repetition min/max was given. e.g., `a{2,1}`.",4,null],[12,"min","regex_syntax::ErrorKind","The first number specified in the repetition.",4,null],[12,"max","","The second number specified in the repetition.",4,null],[13,"InvalidScalarValue","regex_syntax","An invalid Unicode scalar value was used in a long hexadecimal sequence. e.g., `\\x{D800}`.",4,null],[13,"MissingBase10","","An empty counted repetition operator. e.g., `a{}`.",4,null],[13,"RepeaterExpectsExpr","","A repetition operator was not applied to an expression. e.g., `*`.",4,null],[13,"RepeaterUnexpectedExpr","","A repetition operator was applied to an expression that cannot be repeated. e.g., `a+*` or `a|*`.",4,null],[13,"UnclosedCaptureName","","A capture group name that is never closed. e.g., `(?P<a`.",4,null],[13,"UnclosedHex","","An unclosed hexadecimal literal. e.g., `\\x{a`.",4,null],[13,"UnclosedParen","","An unclosed parenthesis. e.g., `(a`.",4,null],[13,"UnclosedRepeat","","An unclosed counted repetition operator. e.g., `a{2`.",4,null],[13,"UnclosedUnicodeName","","An unclosed named Unicode class. e.g., `\\p{Yi`.",4,null],[13,"UnexpectedClassEof","","Saw end of regex before class was closed. e.g., `[a`.",4,null],[13,"UnexpectedEscapeEof","","Saw end of regex before escape sequence was closed. e.g., `\\`.",4,null],[13,"UnexpectedFlagEof","","Saw end of regex before flags were closed. e.g., `(?i`.",4,null],[13,"UnexpectedTwoDigitHexEof","","Saw end of regex before two hexadecimal digits were seen. e.g., `\\xA`.",4,null],[13,"UnopenedParen","","Unopened parenthesis. e.g., `)`.",4,null],[13,"UnrecognizedEscape","","Unrecognized escape sequence. e.g., `\\q`.",4,null],[13,"UnrecognizedFlag","","Unrecognized flag. e.g., `(?a)`.",4,null],[13,"UnrecognizedUnicodeClass","","Unrecognized named Unicode class. e.g., `\\p{Foo}`.",4,null],[13,"StackExhausted","","Indicates that the regex uses too much nesting.",4,null],[13,"FlagNotAllowed","","A disallowed flag was found (e.g., `u`).",4,null],[13,"UnicodeNotAllowed","","A Unicode class was used when the Unicode (`u`) flag was disabled.",4,null],[13,"InvalidUtf8","","InvalidUtf8 indicates that the expression may match non-UTF-8 bytes. This never returned if the parser is permitted to allow expressions that match arbitrary bytes.",4,null],[13,"EmptyClass","","A character class was constructed such that it is empty. e.g., `[^\\d\\D]`.",4,null],[13,"UnsupportedClassChar","","Indicates that unsupported notation was used in a character class.",4,null],[5,"escape","","Escapes all regular expression meta characters in `text`.",null,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"literals"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"literals"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"self"},{"name":"literals"}],"output":{"name":"bool"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"lit"}}],[11,"cmp","","",6,{"inputs":[{"name":"self"},{"name":"lit"}],"output":{"name":"ordering"}}],[11,"empty","","Returns a new empty set of literals using default limits.",5,{"inputs":[],"output":{"name":"literals"}}],[11,"limit_size","","Get the approximate size limit (in bytes) of this set.",5,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"set_limit_size","","Set the approximate size limit (in bytes) of this set.",5,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"literals"}}],[11,"limit_class","","Get the character class size limit for this set.",5,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"set_limit_class","","Limits the size of character(or byte) classes considered.",5,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"literals"}}],[11,"literals","","Returns the set of literals as a slice. Its order is unspecified.",5,null],[11,"min_len","","Returns the length of the smallest literal.",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"all_complete","","Returns true if all members in this set are complete.",5,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"any_complete","","Returns true if any member in this set is complete.",5,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"contains_empty","","Returns true if this set contains an empty literal.",5,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_empty","","Returns true if this set is empty or if all of its members is empty.",5,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"to_empty","","Returns a new empty set of literals using this set's limits.",5,{"inputs":[{"name":"self"}],"output":{"name":"literals"}}],[11,"longest_common_prefix","","Returns the longest common prefix of all members in this set.",5,null],[11,"longest_common_suffix","","Returns the longest common suffix of all members in this set.",5,null],[11,"trim_suffix","","Returns a new set of literals with the given number of bytes trimmed from the suffix of each literal.",5,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"unambiguous_prefixes","","Returns a new set of prefixes of this set of literals that are guaranteed to be unambiguous.",5,{"inputs":[{"name":"self"}],"output":{"name":"literals"}}],[11,"unambiguous_suffixes","","Returns a new set of suffixes of this set of literals that are guaranteed to be unambiguous.",5,{"inputs":[{"name":"self"}],"output":{"name":"literals"}}],[11,"union_prefixes","","Unions the prefixes from the given expression to this set.",5,{"inputs":[{"name":"self"},{"name":"expr"}],"output":{"name":"bool"}}],[11,"union_suffixes","","Unions the suffixes from the given expression to this set.",5,{"inputs":[{"name":"self"},{"name":"expr"}],"output":{"name":"bool"}}],[11,"union","","Unions this set with another set.",5,{"inputs":[{"name":"self"},{"name":"literals"}],"output":{"name":"bool"}}],[11,"cross_product","","Extends this set with another set.",5,{"inputs":[{"name":"self"},{"name":"literals"}],"output":{"name":"bool"}}],[11,"cross_add","","Extends each literal in this set with the bytes given.",5,null],[11,"add","","Adds the given literal to this set.",5,{"inputs":[{"name":"self"},{"name":"lit"}],"output":{"name":"bool"}}],[11,"add_char_class","","Extends each literal in this set with the character class given.",5,{"inputs":[{"name":"self"},{"name":"charclass"}],"output":{"name":"bool"}}],[11,"add_byte_class","","Extends each literal in this set with the byte class given.",5,{"inputs":[{"name":"self"},{"name":"byteclass"}],"output":{"name":"bool"}}],[11,"cut","","Cuts every member of this set. When a member is cut, it can never be extended.",5,{"inputs":[{"name":"self"}],"output":null}],[11,"reverse","","Reverses all members in place.",5,{"inputs":[{"name":"self"}],"output":null}],[11,"clear","","Clears this set of all members.",5,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Returns a new complete literal with the bytes given.",6,{"inputs":[{"name":"vec"}],"output":{"name":"lit"}}],[11,"empty","","Returns a new complete empty literal.",6,{"inputs":[],"output":{"name":"lit"}}],[11,"is_cut","","Returns true if this literal was \"cut.\"",6,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"cut","","Cuts this literal.",6,{"inputs":[{"name":"self"}],"output":null}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"lit"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",6,{"inputs":[{"name":"self"},{"name":"lit"}],"output":{"name":"option"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",6,null],[11,"deref","","",6,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",6,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[6,"Result","","An alias for computations that can return a `Error`.",null,null],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"expr"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"expr"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"expr"}],"output":{"name":"bool"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"repeater"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"repeater"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"repeater"}],"output":{"name":"bool"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"charclass"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"charclass"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"self"},{"name":"charclass"}],"output":{"name":"bool"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"classrange"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"classrange"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"classrange"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"classrange"}],"output":{"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"self"},{"name":"classrange"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"self"},{"name":"classrange"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"self"},{"name":"classrange"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"self"},{"name":"classrange"}],"output":{"name":"bool"}}],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"classrange"}],"output":{"name":"ordering"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"byteclass"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"byteclass"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"self"},{"name":"byteclass"}],"output":{"name":"bool"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"byterange"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"byterange"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"byterange"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"byterange"}],"output":{"name":"option"}}],[11,"lt","","",1,{"inputs":[{"name":"self"},{"name":"byterange"}],"output":{"name":"bool"}}],[11,"le","","",1,{"inputs":[{"name":"self"},{"name":"byterange"}],"output":{"name":"bool"}}],[11,"gt","","",1,{"inputs":[{"name":"self"},{"name":"byterange"}],"output":{"name":"bool"}}],[11,"ge","","",1,{"inputs":[{"name":"self"},{"name":"byterange"}],"output":{"name":"bool"}}],[11,"cmp","","",1,{"inputs":[{"name":"self"},{"name":"byterange"}],"output":{"name":"ordering"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"exprbuilder"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new builder for configuring expression parsing.",9,{"inputs":[],"output":{"name":"exprbuilder"}}],[11,"case_insensitive","","Set the default value for the case insensitive (`i`) flag.",9,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"exprbuilder"}}],[11,"multi_line","","Set the default value for the multi-line matching (`m`) flag.",9,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"exprbuilder"}}],[11,"dot_matches_new_line","","Set the default value for the any character (`s`) flag.",9,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"exprbuilder"}}],[11,"swap_greed","","Set the default value for the greedy swap (`U`) flag.",9,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"exprbuilder"}}],[11,"ignore_whitespace","","Set the default value for the ignore whitespace (`x`) flag.",9,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"exprbuilder"}}],[11,"unicode","","Set the default value for the Unicode (`u`) flag.",9,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"exprbuilder"}}],[11,"allow_bytes","","Whether the parser allows matching arbitrary bytes or not.",9,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"exprbuilder"}}],[11,"nest_limit","","Set the nesting limit for regular expression parsing.",9,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"exprbuilder"}}],[11,"parse","","Parse a string as a regular expression using the current configuraiton.",9,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"parse","","Parses a string in a regular expression syntax tree.",2,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"prefixes","","Returns a set of literal prefixes extracted from this expression.",2,{"inputs":[{"name":"self"}],"output":{"name":"literals"}}],[11,"suffixes","","Returns a set of literal suffixes extracted from this expression.",2,{"inputs":[{"name":"self"}],"output":{"name":"literals"}}],[11,"is_anchored_start","","Returns true if and only if the expression is required to match from the beginning of text.",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"has_anchored_start","","Returns true if and only if the expression has at least one matchable sub-expression that must match the beginning of text.",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_anchored_end","","Returns true if and only if the expression is required to match at the end of the text.",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"has_anchored_end","","Returns true if and only if the expression has at least one matchable sub-expression that must match the beginning of text.",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"has_bytes","","Returns true if and only if the expression contains sub-expressions that can match arbitrary bytes.",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"deref","","",7,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"into_iter","","",7,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"new","","Create a new class from an existing set of ranges.",7,{"inputs":[{"name":"vec"}],"output":{"name":"charclass"}}],[11,"matches","","Returns true if `c` is matched by this character class.",7,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"bool"}}],[11,"remove","","Removes the given character from the class if it exists.",7,{"inputs":[{"name":"self"},{"name":"char"}],"output":null}],[11,"negate","","Negates the character class.",7,{"inputs":[{"name":"self"}],"output":{"name":"charclass"}}],[11,"case_fold","","Apply case folding to this character class.",7,{"inputs":[{"name":"self"}],"output":{"name":"charclass"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"option"}}],[11,"new","","Create a new class from an existing set of ranges.",8,{"inputs":[{"name":"vec"}],"output":{"name":"byteclass"}}],[11,"matches","","Returns true if `b` is matched by this byte class.",8,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bool"}}],[11,"remove","","Removes the given byte from the class if it exists.",8,{"inputs":[{"name":"self"},{"name":"u8"}],"output":null}],[11,"negate","","Negates the byte class.",8,{"inputs":[{"name":"self"}],"output":{"name":"byteclass"}}],[11,"case_fold","","Apply case folding to this byte class.",8,{"inputs":[{"name":"self"}],"output":{"name":"byteclass"}}],[11,"deref","","",8,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"into_iter","","",8,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"option"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"ne","","",10,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"errorkind"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"errorkind"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"errorkind"}],"output":{"name":"bool"}}],[11,"position","","Returns an approximate character offset at which the error occurred.",10,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"kind","","Returns the type of the regex parse error.",10,{"inputs":[{"name":"self"}],"output":{"name":"errorkind"}}],[11,"description","","",10,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"ClassRange"],[3,"ByteRange"],[4,"Expr"],[4,"Repeater"],[4,"ErrorKind"],[3,"Literals"],[3,"Lit"],[3,"CharClass"],[3,"ByteClass"],[3,"ExprBuilder"],[3,"Error"]]};
searchIndex["rustc_demangle"] = {"doc":"Demangle Rust compiler symbol names.","items":[[3,"Demangle","rustc_demangle","Representation of a demangled symbol name.",null,null],[3,"TryDemangleError","","Error returned from the `try_demangle` function below when demangling fails.",null,null],[5,"demangle","","De-mangles a Rust symbol into a more readable version",null,{"inputs":[{"name":"str"}],"output":{"name":"demangle"}}],[5,"try_demangle","","The same as `demangle`, except return an `Err` if the string does not appear to be a Rust symbol, rather than \"demangling\" the given string as a no-op.",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"trydemangleerror"}}],[11,"as_str","","Returns the underlying string that's being demangled.",1,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"TryDemangleError"],[3,"Demangle"]]};
searchIndex["safemem"] = {"doc":"Safe wrappers for memory-accessing functions like `std::ptr::copy()`.","items":[[5,"copy_over","safemem","Copy `len` elements from `src_idx` to `dest_idx`. Ranges may overlap.",null,null],[5,"write_bytes","","Safe wrapper for `std::ptr::write_bytes()`/`memset()`.",null,null],[5,"prepend","","Prepend `elems` to `vec`, resizing if necessary.",null,null]],"paths":[]};
searchIndex["scheduled_thread_pool"] = {"doc":"A thread pool to execute scheduled actions in parallel.","items":[[3,"ScheduledThreadPool","scheduled_thread_pool","A pool of threads which can run tasks at specific time intervals.",null,null],[11,"drop","","",0,{"inputs":[{"name":"self"}],"output":null}],[11,"new","","Creates a new thread pool with the specified number of threads.",0,{"inputs":[{"name":"usize"}],"output":{"name":"scheduledthreadpool"}}],[11,"with_name","","Creates a new thread pool with the specified number of threads which will be named.",0,{"inputs":[{"name":"str"},{"name":"usize"}],"output":{"name":"scheduledthreadpool"}}],[11,"execute","","Executes a closure as soon as possible in the pool.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"execute_after","","Executes a closure after a time delay in the pool.",0,{"inputs":[{"name":"self"},{"name":"duration"},{"name":"f"}],"output":null}],[11,"execute_at_fixed_rate","","Executes a closure after an initial delay at a fixed rate in the pool.",0,{"inputs":[{"name":"self"},{"name":"duration"},{"name":"duration"},{"name":"f"}],"output":null}],[11,"execute_with_fixed_delay","","Executes a closure after an initial delay at a fixed rate in the pool.",0,{"inputs":[{"name":"self"},{"name":"duration"},{"name":"duration"},{"name":"f"}],"output":null}]],"paths":[[3,"ScheduledThreadPool"]]};
searchIndex["serde"] = {"doc":"Serde","items":[[0,"ser","serde","Generic data structure serialization framework.",null,null],[3,"Impossible","serde::ser","Helper type for implementing a `Serializer` that does not support serializing one of the compound types.",null,null],[11,"serialize_element","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"end","","",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"serialize_element","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"end","","",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"serialize_field","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"end","","",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"serialize_field","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"end","","",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"serialize_key","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"serialize_value","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"end","","",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"serialize_field","","",0,{"inputs":[{"name":"self"},{"name":"str"},{"name":"t"}],"output":{"name":"result"}}],[11,"end","","",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"serialize_field","","",0,{"inputs":[{"name":"self"},{"name":"str"},{"name":"t"}],"output":{"name":"result"}}],[11,"end","","",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[8,"Error","","Trait used by `Serialize` implementations to generically construct errors belonging to the `Serializer` against which they are currently running.",null,null],[10,"custom","","Used when a [`Serialize`] implementation encounters any error while serializing a type.",1,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[8,"Serialize","","A data structure that can be serialized into any data format supported by Serde.",null,null],[10,"serialize","","Serialize this value into the given Serde serializer.",2,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[8,"Serializer","","A data format that can serialize any data structure supported by Serde.",null,null],[16,"Ok","","The output type produced by this `Serializer` during successful serialization. Most serializers that produce text or binary output should set `Ok = ()` and serialize into an [`io::Write`] or buffer contained within the `Serializer` instance. Serializers that build in-memory data structures may be simplified by using `Ok` to propagate the data structure around.",3,null],[16,"Error","","The error type when some error occurs during serialization.",3,null],[16,"SerializeSeq","","Type returned from [`serialize_seq`] for serializing the content of the sequence.",3,null],[16,"SerializeTuple","","Type returned from [`serialize_tuple`] for serializing the content of the tuple.",3,null],[16,"SerializeTupleStruct","","Type returned from [`serialize_tuple_struct`] for serializing the content of the tuple struct.",3,null],[16,"SerializeTupleVariant","","Type returned from [`serialize_tuple_variant`] for serializing the content of the tuple variant.",3,null],[16,"SerializeMap","","Type returned from [`serialize_map`] for serializing the content of the map.",3,null],[16,"SerializeStruct","","Type returned from [`serialize_struct`] for serializing the content of the struct.",3,null],[16,"SerializeStructVariant","","Type returned from [`serialize_struct_variant`] for serializing the content of the struct variant.",3,null],[10,"serialize_bool","","Serialize a `bool` value.",3,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[10,"serialize_i8","","Serialize an `i8` value.",3,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"result"}}],[10,"serialize_i16","","Serialize an `i16` value.",3,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"result"}}],[10,"serialize_i32","","Serialize an `i32` value.",3,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"result"}}],[10,"serialize_i64","","Serialize an `i64` value.",3,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"result"}}],[10,"serialize_u8","","Serialize a `u8` value.",3,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"result"}}],[10,"serialize_u16","","Serialize a `u16` value.",3,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"result"}}],[10,"serialize_u32","","Serialize a `u32` value.",3,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[10,"serialize_u64","","Serialize a `u64` value.",3,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"result"}}],[10,"serialize_f32","","Serialize an `f32` value.",3,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"result"}}],[10,"serialize_f64","","Serialize an `f64` value.",3,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"result"}}],[10,"serialize_char","","Serialize a character.",3,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"result"}}],[10,"serialize_str","","Serialize a `&str`.",3,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[10,"serialize_bytes","","Serialize a chunk of raw byte data.",3,null],[10,"serialize_none","","Serialize a [`None`] value.",3,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"serialize_some","","Serialize a [`Some(T)`] value.",3,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[10,"serialize_unit","","Serialize a `()` value.",3,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"serialize_unit_struct","","Serialize a unit struct like `struct Unit` or `PhantomData<T>`.",3,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[10,"serialize_unit_variant","","Serialize a unit variant like `E::A` in `enum E { A, B }`.",3,{"inputs":[{"name":"self"},{"name":"str"},{"name":"u32"},{"name":"str"}],"output":{"name":"result"}}],[10,"serialize_newtype_struct","","Serialize a newtype struct like `struct Millimeters(u8)`.",3,{"inputs":[{"name":"self"},{"name":"str"},{"name":"t"}],"output":{"name":"result"}}],[10,"serialize_newtype_variant","","Serialize a newtype variant like `E::N` in `enum E { N(u8) }`.",3,{"inputs":[{"name":"self"},{"name":"str"},{"name":"u32"},{"name":"str"},{"name":"t"}],"output":{"name":"result"}}],[10,"serialize_seq","","Begin to serialize a variably sized sequence. This call must be followed by zero or more calls to `serialize_element`, then a call to `end`.",3,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[10,"serialize_tuple","","Begin to serialize a statically sized sequence whose length will be known at deserialization time without looking at the serialized data. This call must be followed by zero or more calls to `serialize_element`, then a call to `end`.",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[10,"serialize_tuple_struct","","Begin to serialize a tuple struct like `struct Rgb(u8, u8, u8)`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",3,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"}],"output":{"name":"result"}}],[10,"serialize_tuple_variant","","Begin to serialize a tuple variant like `E::T` in `enum E { T(u8, u8) }`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",3,{"inputs":[{"name":"self"},{"name":"str"},{"name":"u32"},{"name":"str"},{"name":"usize"}],"output":{"name":"result"}}],[10,"serialize_map","","Begin to serialize a map. This call must be followed by zero or more calls to `serialize_key` and `serialize_value`, then a call to `end`.",3,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[10,"serialize_struct","","Begin to serialize a struct like `struct Rgb { r: u8, g: u8, b: u8 }`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",3,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"}],"output":{"name":"result"}}],[10,"serialize_struct_variant","","Begin to serialize a struct variant like `E::S` in `enum E { S { r: u8, g: u8, b: u8 } }`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",3,{"inputs":[{"name":"self"},{"name":"str"},{"name":"u32"},{"name":"str"},{"name":"usize"}],"output":{"name":"result"}}],[11,"collect_seq","","Collect an iterator as a sequence.",3,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"result"}}],[11,"collect_map","","Collect an iterator as a map.",3,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"result"}}],[11,"collect_str","","Serialize a string produced by an implementation of `Display`.",3,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[8,"SerializeSeq","","Returned from `Serializer::serialize_seq`.",null,null],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",4,null],[16,"Error","","Must match the `Error` type of our `Serializer`.",4,null],[10,"serialize_element","","Serialize a sequence element.",4,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[10,"end","","Finish serializing a sequence.",4,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[8,"SerializeTuple","","Returned from `Serializer::serialize_tuple`.",null,null],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",5,null],[16,"Error","","Must match the `Error` type of our `Serializer`.",5,null],[10,"serialize_element","","Serialize a tuple element.",5,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[10,"end","","Finish serializing a tuple.",5,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[8,"SerializeTupleStruct","","Returned from `Serializer::serialize_tuple_struct`.",null,null],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",6,null],[16,"Error","","Must match the `Error` type of our `Serializer`.",6,null],[10,"serialize_field","","Serialize a tuple struct field.",6,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[10,"end","","Finish serializing a tuple struct.",6,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[8,"SerializeTupleVariant","","Returned from `Serializer::serialize_tuple_variant`.",null,null],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",7,null],[16,"Error","","Must match the `Error` type of our `Serializer`.",7,null],[10,"serialize_field","","Serialize a tuple variant field.",7,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[10,"end","","Finish serializing a tuple variant.",7,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[8,"SerializeMap","","Returned from `Serializer::serialize_map`.",null,null],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",8,null],[16,"Error","","Must match the `Error` type of our `Serializer`.",8,null],[10,"serialize_key","","Serialize a map key.",8,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[10,"serialize_value","","Serialize a map value.",8,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"serialize_entry","","Serialize a map entry consisting of a key and a value.",8,{"inputs":[{"name":"self"},{"name":"k"},{"name":"v"}],"output":{"name":"result"}}],[10,"end","","Finish serializing a map.",8,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[8,"SerializeStruct","","Returned from `Serializer::serialize_struct`.",null,null],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",9,null],[16,"Error","","Must match the `Error` type of our `Serializer`.",9,null],[10,"serialize_field","","Serialize a struct field.",9,{"inputs":[{"name":"self"},{"name":"str"},{"name":"t"}],"output":{"name":"result"}}],[11,"skip_field","","Indicate that a struct field has been skipped.",9,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[10,"end","","Finish serializing a struct.",9,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[8,"SerializeStructVariant","","Returned from `Serializer::serialize_struct_variant`.",null,null],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",10,null],[16,"Error","","Must match the `Error` type of our `Serializer`.",10,null],[10,"serialize_field","","Serialize a struct variant field.",10,{"inputs":[{"name":"self"},{"name":"str"},{"name":"t"}],"output":{"name":"result"}}],[11,"skip_field","","Indicate that a struct variant field has been skipped.",10,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[10,"end","","Finish serializing a struct variant.",10,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[0,"de","serde","Generic data structure deserialization framework.",null,null],[3,"IgnoredAny","serde::de","An efficient way of discarding data from a deserializer.",null,null],[4,"Unexpected","","`Unexpected` represents an unexpected invocation of any one of the `Visitor` trait methods.",null,null],[13,"Bool","","The input contained a boolean value that was not expected.",11,null],[13,"Unsigned","","The input contained an unsigned integer `u8`, `u16`, `u32` or `u64` that was not expected.",11,null],[13,"Signed","","The input contained a signed integer `i8`, `i16`, `i32` or `i64` that was not expected.",11,null],[13,"Float","","The input contained a floating point `f32` or `f64` that was not expected.",11,null],[13,"Char","","The input contained a `char` that was not expected.",11,null],[13,"Str","","The input contained a `&str` or `String` that was not expected.",11,null],[13,"Bytes","","The input contained a `&[u8]` or `Vec<u8>` that was not expected.",11,null],[13,"Unit","","The input contained a unit `()` that was not expected.",11,null],[13,"Option","","The input contained an `Option<T>` that was not expected.",11,null],[13,"NewtypeStruct","","The input contained a newtype struct that was not expected.",11,null],[13,"Seq","","The input contained a sequence that was not expected.",11,null],[13,"Map","","The input contained a map that was not expected.",11,null],[13,"Enum","","The input contained an enum that was not expected.",11,null],[13,"UnitVariant","","The input contained a unit variant that was not expected.",11,null],[13,"NewtypeVariant","","The input contained a newtype variant that was not expected.",11,null],[13,"TupleVariant","","The input contained a tuple variant that was not expected.",11,null],[13,"StructVariant","","The input contained a struct variant that was not expected.",11,null],[13,"Other","","A message stating what uncategorized thing the input contained that was not expected.",11,null],[0,"value","","Building blocks for deserializing basic values using the `IntoDeserializer` trait.",null,null],[3,"Error","serde::de::value","A minimal representation of all possible errors that can occur using the `IntoDeserializer` trait.",null,null],[3,"UnitDeserializer","","A deserializer holding a `()`.",null,null],[3,"BoolDeserializer","","A deserializer holding a `bool`.",null,null],[3,"I8Deserializer","","A deserializer holding an `i8`.",null,null],[3,"I16Deserializer","","A deserializer holding an `i16`.",null,null],[3,"I32Deserializer","","A deserializer holding an `i32`.",null,null],[3,"I64Deserializer","","A deserializer holding an `i64`.",null,null],[3,"IsizeDeserializer","","A deserializer holding an `isize`.",null,null],[3,"U8Deserializer","","A deserializer holding a `u8`.",null,null],[3,"U16Deserializer","","A deserializer holding a `u16`.",null,null],[3,"U64Deserializer","","A deserializer holding a `u64`.",null,null],[3,"UsizeDeserializer","","A deserializer holding a `usize`.",null,null],[3,"F32Deserializer","","A deserializer holding an `f32`.",null,null],[3,"F64Deserializer","","A deserializer holding an `f64`.",null,null],[3,"CharDeserializer","","A deserializer holding a `char`.",null,null],[3,"U32Deserializer","","A deserializer holding a `u32`.",null,null],[3,"StrDeserializer","","A deserializer holding a `&str`.",null,null],[3,"BorrowedStrDeserializer","","A deserializer holding a `&str` with a lifetime tied to another deserializer.",null,null],[3,"StringDeserializer","","A deserializer holding a `String`.",null,null],[3,"CowStrDeserializer","","A deserializer holding a `Cow<str>`.",null,null],[3,"BorrowedBytesDeserializer","","A deserializer holding a `&[u8]` with a lifetime tied to another deserializer.",null,null],[3,"SeqDeserializer","","A deserializer that iterates over a sequence.",null,null],[3,"SeqAccessDeserializer","","A deserializer holding a `SeqAccess`.",null,null],[3,"MapDeserializer","","A deserializer that iterates over a map.",null,null],[3,"MapAccessDeserializer","","A deserializer holding a `MapAccess`.",null,null],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",12,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"ne","","",12,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"custom","","",12,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"custom","","",12,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",12,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"unitdeserializer"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",13,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",13,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",13,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",13,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",13,null],[11,"deserialize_enum","","",13,null],[11,"deserialize_identifier","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_any","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"booldeserializer"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",14,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",14,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",14,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",14,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",14,null],[11,"deserialize_enum","","",14,null],[11,"deserialize_identifier","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_any","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"i8deserializer"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",15,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",15,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",15,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",15,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",15,null],[11,"deserialize_enum","","",15,null],[11,"deserialize_identifier","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_any","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"i16deserializer"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",16,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",16,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",16,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",16,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",16,null],[11,"deserialize_enum","","",16,null],[11,"deserialize_identifier","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_any","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"i32deserializer"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",17,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",17,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",17,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",17,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",17,null],[11,"deserialize_enum","","",17,null],[11,"deserialize_identifier","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_any","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"i64deserializer"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",18,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",18,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",18,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",18,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",18,null],[11,"deserialize_enum","","",18,null],[11,"deserialize_identifier","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_any","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"isizedeserializer"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",19,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",19,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",19,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",19,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",19,null],[11,"deserialize_enum","","",19,null],[11,"deserialize_identifier","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_any","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"u8deserializer"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",20,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",20,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",20,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",20,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",20,null],[11,"deserialize_enum","","",20,null],[11,"deserialize_identifier","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_any","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"u16deserializer"}}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",21,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",21,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",21,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",21,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",21,null],[11,"deserialize_enum","","",21,null],[11,"deserialize_identifier","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_any","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"u64deserializer"}}],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",22,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",22,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",22,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",22,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",22,null],[11,"deserialize_enum","","",22,null],[11,"deserialize_identifier","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_any","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"usizedeserializer"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",23,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",23,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",23,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",23,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",23,null],[11,"deserialize_enum","","",23,null],[11,"deserialize_identifier","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_any","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"f32deserializer"}}],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",24,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",24,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",24,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",24,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",24,null],[11,"deserialize_enum","","",24,null],[11,"deserialize_identifier","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_any","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"clone","","",25,{"inputs":[{"name":"self"}],"output":{"name":"f64deserializer"}}],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",25,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",25,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",25,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",25,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",25,null],[11,"deserialize_enum","","",25,null],[11,"deserialize_identifier","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_any","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"clone","","",26,{"inputs":[{"name":"self"}],"output":{"name":"chardeserializer"}}],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",26,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",26,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",26,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",26,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",26,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",26,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",26,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",26,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",26,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",26,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",26,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",26,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",26,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",26,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",26,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",26,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",26,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",26,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",26,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",26,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",26,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",26,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",26,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",26,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",26,null],[11,"deserialize_enum","","",26,null],[11,"deserialize_identifier","","",26,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",26,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_any","","",26,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"clone","","",27,{"inputs":[{"name":"self"}],"output":{"name":"u32deserializer"}}],[11,"fmt","","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",27,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",27,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",27,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",27,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",27,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",27,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",27,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",27,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",27,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",27,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",27,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",27,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",27,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",27,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",27,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",27,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",27,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",27,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",27,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",27,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",27,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",27,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",27,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",27,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",27,null],[11,"deserialize_identifier","","",27,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",27,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_any","","",27,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",27,null],[11,"variant_seed","","",27,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"clone","","",28,{"inputs":[{"name":"self"}],"output":{"name":"strdeserializer"}}],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deserialize_any","","",28,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",28,null],[11,"deserialize_bool","","",28,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",28,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",28,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",28,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",28,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",28,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",28,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",28,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",28,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",28,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",28,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",28,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",28,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",28,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",28,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",28,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",28,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",28,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",28,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",28,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",28,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",28,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",28,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",28,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",28,null],[11,"deserialize_identifier","","",28,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",28,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"variant_seed","","",28,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"clone","","",29,{"inputs":[{"name":"self"}],"output":{"name":"borrowedstrdeserializer"}}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new borrowed deserializer from the given string.",29,{"inputs":[{"name":"str"}],"output":{"name":"borrowedstrdeserializer"}}],[11,"deserialize_any","","",29,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",29,null],[11,"deserialize_bool","","",29,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",29,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",29,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",29,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",29,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",29,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",29,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",29,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",29,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",29,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",29,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",29,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",29,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",29,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",29,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",29,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",29,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",29,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",29,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",29,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",29,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",29,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",29,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",29,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",29,null],[11,"deserialize_identifier","","",29,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",29,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"variant_seed","","",29,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"clone","","",30,{"inputs":[{"name":"self"}],"output":{"name":"stringdeserializer"}}],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deserialize_any","","",30,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",30,null],[11,"deserialize_bool","","",30,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",30,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",30,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",30,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",30,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",30,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",30,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",30,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",30,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",30,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",30,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",30,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",30,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",30,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",30,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",30,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",30,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",30,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",30,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",30,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",30,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",30,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",30,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",30,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",30,null],[11,"deserialize_identifier","","",30,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",30,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"variant_seed","","",30,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"clone","","",31,{"inputs":[{"name":"self"}],"output":{"name":"cowstrdeserializer"}}],[11,"fmt","","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deserialize_any","","",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",31,null],[11,"deserialize_bool","","",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",31,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",31,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",31,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",31,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",31,null],[11,"deserialize_identifier","","",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"variant_seed","","",31,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"clone","","",32,{"inputs":[{"name":"self"}],"output":{"name":"borrowedbytesdeserializer"}}],[11,"fmt","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new borrowed deserializer from the given byte slice.",32,null],[11,"deserialize_any","","",32,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",32,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",32,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",32,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",32,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",32,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",32,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",32,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",32,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",32,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",32,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",32,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",32,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",32,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",32,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",32,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",32,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",32,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",32,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",32,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",32,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",32,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",32,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",32,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",32,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",32,null],[11,"deserialize_identifier","","",32,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",32,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",32,null],[11,"clone","","",33,{"inputs":[{"name":"self"}],"output":{"name":"seqdeserializer"}}],[11,"fmt","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Construct a new `SeqDeserializer<I, E>`.",33,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"end","","Check for remaining elements after passing a `SeqDeserializer` to `Visitor::visit_seq`.",33,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"deserialize_any","","",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",33,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",33,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",33,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",33,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",33,null],[11,"deserialize_enum","","",33,null],[11,"deserialize_identifier","","",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"next_element_seed","","",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"size_hint","","",33,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",34,{"inputs":[{"name":"self"}],"output":{"name":"seqaccessdeserializer"}}],[11,"fmt","","",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Construct a new `SeqAccessDeserializer<A>`.",34,{"inputs":[{"name":"a"}],"output":{"name":"self"}}],[11,"deserialize_any","","",34,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",34,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",34,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",34,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",34,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",34,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",34,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",34,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",34,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",34,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",34,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",34,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",34,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",34,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",34,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",34,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",34,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",34,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",34,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",34,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",34,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",34,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",34,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",34,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",34,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",34,null],[11,"deserialize_enum","","",34,null],[11,"deserialize_identifier","","",34,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",34,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"new","","Construct a new `MapDeserializer<I, E>`.",35,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"end","","Check for remaining elements after passing a `MapDeserializer` to `Visitor::visit_map`.",35,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"deserialize_any","","",35,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",35,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",35,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",35,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",35,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",35,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",35,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",35,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",35,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",35,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",35,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",35,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",35,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",35,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",35,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",35,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",35,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",35,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",35,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",35,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",35,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",35,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",35,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",35,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",35,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",35,null],[11,"deserialize_enum","","",35,null],[11,"deserialize_identifier","","",35,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",35,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"next_key_seed","","",35,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"next_value_seed","","",35,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"next_entry_seed","","",35,{"inputs":[{"name":"self"},{"name":"tk"},{"name":"tv"}],"output":{"name":"result"}}],[11,"size_hint","","",35,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_element_seed","","",35,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"size_hint","","",35,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",35,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",35,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",36,{"inputs":[{"name":"self"}],"output":{"name":"mapaccessdeserializer"}}],[11,"fmt","","",36,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Construct a new `MapAccessDeserializer<A>`.",36,{"inputs":[{"name":"a"}],"output":{"name":"self"}}],[11,"deserialize_any","","",36,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",36,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",36,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",36,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",36,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",36,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",36,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",36,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",36,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",36,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",36,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",36,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",36,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",36,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",36,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",36,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",36,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",36,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",36,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",36,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",36,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",36,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",36,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",36,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",36,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",36,null],[11,"deserialize_enum","","",36,null],[11,"deserialize_identifier","","",36,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",36,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"clone","serde::de","",37,{"inputs":[{"name":"self"}],"output":{"name":"ignoredany"}}],[11,"fmt","","",37,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",37,{"inputs":[],"output":{"name":"ignoredany"}}],[11,"expecting","","",37,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"visit_bool","","",37,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"visit_i64","","",37,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"result"}}],[11,"visit_u64","","",37,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"result"}}],[11,"visit_f64","","",37,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"result"}}],[11,"visit_str","","",37,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"visit_none","","",37,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"visit_some","","",37,{"inputs":[{"name":"self"},{"name":"d"}],"output":{"name":"result"}}],[11,"visit_newtype_struct","","",37,{"inputs":[{"name":"self"},{"name":"d"}],"output":{"name":"result"}}],[11,"visit_unit","","",37,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"visit_seq","","",37,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"result"}}],[11,"visit_map","","",37,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"result"}}],[11,"visit_bytes","","",37,null],[11,"deserialize","","",37,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[8,"Error","","The `Error` trait allows `Deserialize` implementations to create descriptive error messages belonging to the `Deserializer` against which they are currently running.",null,null],[10,"custom","","Raised when there is general error when deserializing a type.",38,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"invalid_type","","Raised when a `Deserialize` receives a type different from what it was expecting.",38,{"inputs":[{"name":"unexpected"},{"name":"expected"}],"output":{"name":"self"}}],[11,"invalid_value","","Raised when a `Deserialize` receives a value of the right type but that is wrong for some other reason.",38,{"inputs":[{"name":"unexpected"},{"name":"expected"}],"output":{"name":"self"}}],[11,"invalid_length","","Raised when deserializing a sequence or map and the input data contains too many or too few elements.",38,{"inputs":[{"name":"usize"},{"name":"expected"}],"output":{"name":"self"}}],[11,"unknown_variant","","Raised when a `Deserialize` enum type received a variant with an unrecognized name.",38,null],[11,"unknown_field","","Raised when a `Deserialize` struct type received a field with an unrecognized name.",38,null],[11,"missing_field","","Raised when a `Deserialize` struct type expected to receive a required field with a particular name but that field was not present in the input.",38,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"duplicate_field","","Raised when a `Deserialize` struct type received more than one of the same field.",38,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[8,"Expected","","`Expected` represents an explanation of what data a `Visitor` was expecting to receive.",null,null],[10,"fmt","","Format an explanation of what data was being expected. Same signature as the `Display` and `Debug` traits.",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"Deserialize","","A data structure that can be deserialized from any data format supported by Serde.",null,null],[10,"deserialize","","Deserialize this value from the given Serde deserializer.",40,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[8,"DeserializeOwned","","A data structure that can be deserialized without borrowing any data from the deserializer.",null,null],[8,"DeserializeSeed","","`DeserializeSeed` is the stateful form of the `Deserialize` trait. If you ever find yourself looking for a way to pass data into a `Deserialize` impl, this trait is the way to do it.",null,null],[16,"Value","","The type produced by using this seed.",41,null],[10,"deserialize","","Equivalent to the more common `Deserialize::deserialize` method, except with some initial piece of data (the seed) passed in.",41,{"inputs":[{"name":"self"},{"name":"d"}],"output":{"name":"result"}}],[8,"Deserializer","","A data format that can deserialize any data structure supported by Serde.",null,null],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",42,null],[10,"deserialize_any","","Require the `Deserializer` to figure out how to drive the visitor based on what data type is in the input.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_bool","","Hint that the `Deserialize` type is expecting a `bool` value.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_i8","","Hint that the `Deserialize` type is expecting an `i8` value.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_i16","","Hint that the `Deserialize` type is expecting an `i16` value.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_i32","","Hint that the `Deserialize` type is expecting an `i32` value.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_i64","","Hint that the `Deserialize` type is expecting an `i64` value.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_u8","","Hint that the `Deserialize` type is expecting a `u8` value.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_u16","","Hint that the `Deserialize` type is expecting a `u16` value.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_u32","","Hint that the `Deserialize` type is expecting a `u32` value.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_u64","","Hint that the `Deserialize` type is expecting a `u64` value.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_f32","","Hint that the `Deserialize` type is expecting a `f32` value.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_f64","","Hint that the `Deserialize` type is expecting a `f64` value.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_char","","Hint that the `Deserialize` type is expecting a `char` value.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_str","","Hint that the `Deserialize` type is expecting a string value and does not benefit from taking ownership of buffered data owned by the `Deserializer`.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_string","","Hint that the `Deserialize` type is expecting a string value and would benefit from taking ownership of buffered data owned by the `Deserializer`.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_bytes","","Hint that the `Deserialize` type is expecting a byte array and does not benefit from taking ownership of buffered data owned by the `Deserializer`.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_byte_buf","","Hint that the `Deserialize` type is expecting a byte array and would benefit from taking ownership of buffered data owned by the `Deserializer`.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_option","","Hint that the `Deserialize` type is expecting an optional value.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_unit","","Hint that the `Deserialize` type is expecting a unit value.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_unit_struct","","Hint that the `Deserialize` type is expecting a unit struct with a particular name.",42,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_newtype_struct","","Hint that the `Deserialize` type is expecting a newtype struct with a particular name.",42,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_seq","","Hint that the `Deserialize` type is expecting a sequence of values.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_tuple","","Hint that the `Deserialize` type is expecting a sequence of values and knows how many values there are without looking at the serialized data.",42,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_tuple_struct","","Hint that the `Deserialize` type is expecting a tuple struct with a particular name and number of fields.",42,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_map","","Hint that the `Deserialize` type is expecting a map of key-value pairs.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_struct","","Hint that the `Deserialize` type is expecting a struct with a particular name and fields.",42,null],[10,"deserialize_enum","","Hint that the `Deserialize` type is expecting an enum value with a particular name and possible variants.",42,null],[10,"deserialize_identifier","","Hint that the `Deserialize` type is expecting the name of a struct field or the discriminant of an enum variant.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_ignored_any","","Hint that the `Deserialize` type needs to deserialize a value whose type doesn't matter because it is ignored.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[8,"Visitor","","This trait represents a visitor that walks through a deserializer.",null,null],[16,"Value","","The value produced by this visitor.",43,null],[10,"expecting","","Format a message stating what data this Visitor expects to receive.",43,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"visit_bool","","The input contains a boolean.",43,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"visit_i8","","The input contains an `i8`.",43,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"result"}}],[11,"visit_i16","","The input contains an `i16`.",43,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"result"}}],[11,"visit_i32","","The input contains an `i32`.",43,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"result"}}],[11,"visit_i64","","The input contains an `i64`.",43,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"result"}}],[11,"visit_u8","","The input contains a `u8`.",43,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"result"}}],[11,"visit_u16","","The input contains a `u16`.",43,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"result"}}],[11,"visit_u32","","The input contains a `u32`.",43,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"visit_u64","","The input contains a `u64`.",43,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"result"}}],[11,"visit_f32","","The input contains an `f32`.",43,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"result"}}],[11,"visit_f64","","The input contains an `f64`.",43,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"result"}}],[11,"visit_char","","The input contains a `char`.",43,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"result"}}],[11,"visit_str","","The input contains a string. The lifetime of the string is ephemeral and it may be destroyed after this method returns.",43,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"visit_borrowed_str","","The input contains a string that lives at least as long as the `Deserializer`.",43,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"visit_string","","The input contains a string and ownership of the string is being given to the `Visitor`.",43,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"result"}}],[11,"visit_bytes","","The input contains a byte array. The lifetime of the byte array is ephemeral and it may be destroyed after this method returns.",43,null],[11,"visit_borrowed_bytes","","The input contains a byte array that lives at least as long as the `Deserializer`.",43,null],[11,"visit_byte_buf","","The input contains a byte array and ownership of the byte array is being given to the `Visitor`.",43,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"result"}}],[11,"visit_none","","The input contains an optional that is absent.",43,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"visit_some","","The input contains an optional that is present.",43,{"inputs":[{"name":"self"},{"name":"d"}],"output":{"name":"result"}}],[11,"visit_unit","","The input contains a unit `()`.",43,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"visit_newtype_struct","","The input contains a newtype struct.",43,{"inputs":[{"name":"self"},{"name":"d"}],"output":{"name":"result"}}],[11,"visit_seq","","The input contains a sequence of elements.",43,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"result"}}],[11,"visit_map","","The input contains a key-value map.",43,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"result"}}],[11,"visit_enum","","The input contains an enum.",43,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"result"}}],[8,"SeqAccess","","Provides a `Visitor` access to each element of a sequence in the input.",null,null],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",44,null],[10,"next_element_seed","","This returns `Ok(Some(value))` for the next value in the sequence, or `Ok(None)` if there are no more remaining items.",44,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"next_element","","This returns `Ok(Some(value))` for the next value in the sequence, or `Ok(None)` if there are no more remaining items.",44,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"size_hint","","Returns the number of elements remaining in the sequence, if known.",44,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[8,"MapAccess","","Provides a `Visitor` access to each entry of a map in the input.",null,null],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",45,null],[10,"next_key_seed","","This returns `Ok(Some(key))` for the next key in the map, or `Ok(None)` if there are no more remaining entries.",45,{"inputs":[{"name":"self"},{"name":"k"}],"output":{"name":"result"}}],[10,"next_value_seed","","This returns a `Ok(value)` for the next value in the map.",45,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"next_entry_seed","","This returns `Ok(Some((key, value)))` for the next (key-value) pair in the map, or `Ok(None)` if there are no more remaining items.",45,{"inputs":[{"name":"self"},{"name":"k"},{"name":"v"}],"output":{"name":"result"}}],[11,"next_key","","This returns `Ok(Some(key))` for the next key in the map, or `Ok(None)` if there are no more remaining entries.",45,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"next_value","","This returns a `Ok(value)` for the next value in the map.",45,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"next_entry","","This returns `Ok(Some((key, value)))` for the next (key-value) pair in the map, or `Ok(None)` if there are no more remaining items.",45,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"size_hint","","Returns the number of entries remaining in the map, if known.",45,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[8,"EnumAccess","","Provides a `Visitor` access to the data of an enum in the input.",null,null],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",46,null],[16,"Variant","","The `Visitor` that will be used to deserialize the content of the enum variant.",46,null],[10,"variant_seed","","`variant` is called to identify which variant to deserialize.",46,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"variant","","`variant` is called to identify which variant to deserialize.",46,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[8,"VariantAccess","","`VariantAccess` is a visitor that is created by the `Deserializer` and passed to the `Deserialize` to deserialize the content of a particular enum variant.",null,null],[16,"Error","","The error type that can be returned if some error occurs during deserialization. Must match the error type of our `EnumAccess`.",47,null],[10,"unit_variant","","Called when deserializing a variant with no values.",47,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"newtype_variant_seed","","Called when deserializing a variant with a single value.",47,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"newtype_variant","","Called when deserializing a variant with a single value.",47,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"tuple_variant","","Called when deserializing a tuple-like variant.",47,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[10,"struct_variant","","Called when deserializing a struct-like variant.",47,null],[8,"IntoDeserializer","","Converts an existing value into a `Deserializer` from which other values can be deserialized.",null,null],[16,"Deserializer","","The type of the deserializer being converted into.",48,null],[10,"into_deserializer","","Convert this value into a deserializer.",48,null],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"unexpected"}}],[11,"eq","","",11,{"inputs":[{"name":"self"},{"name":"unexpected"}],"output":{"name":"bool"}}],[11,"ne","","",11,{"inputs":[{"name":"self"},{"name":"unexpected"}],"output":{"name":"bool"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"Serialize","serde","A data structure that can be serialized into any data format supported by Serde.",null,null],[10,"serialize","","Serialize this value into the given Serde serializer.",2,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[8,"Serializer","","A data format that can serialize any data structure supported by Serde.",null,null],[16,"Ok","","The output type produced by this `Serializer` during successful serialization. Most serializers that produce text or binary output should set `Ok = ()` and serialize into an [`io::Write`] or buffer contained within the `Serializer` instance. Serializers that build in-memory data structures may be simplified by using `Ok` to propagate the data structure around.",3,null],[16,"Error","","The error type when some error occurs during serialization.",3,null],[16,"SerializeSeq","","Type returned from [`serialize_seq`] for serializing the content of the sequence.",3,null],[16,"SerializeTuple","","Type returned from [`serialize_tuple`] for serializing the content of the tuple.",3,null],[16,"SerializeTupleStruct","","Type returned from [`serialize_tuple_struct`] for serializing the content of the tuple struct.",3,null],[16,"SerializeTupleVariant","","Type returned from [`serialize_tuple_variant`] for serializing the content of the tuple variant.",3,null],[16,"SerializeMap","","Type returned from [`serialize_map`] for serializing the content of the map.",3,null],[16,"SerializeStruct","","Type returned from [`serialize_struct`] for serializing the content of the struct.",3,null],[16,"SerializeStructVariant","","Type returned from [`serialize_struct_variant`] for serializing the content of the struct variant.",3,null],[10,"serialize_bool","","Serialize a `bool` value.",3,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[10,"serialize_i8","","Serialize an `i8` value.",3,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"result"}}],[10,"serialize_i16","","Serialize an `i16` value.",3,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"result"}}],[10,"serialize_i32","","Serialize an `i32` value.",3,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"result"}}],[10,"serialize_i64","","Serialize an `i64` value.",3,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"result"}}],[10,"serialize_u8","","Serialize a `u8` value.",3,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"result"}}],[10,"serialize_u16","","Serialize a `u16` value.",3,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"result"}}],[10,"serialize_u32","","Serialize a `u32` value.",3,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[10,"serialize_u64","","Serialize a `u64` value.",3,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"result"}}],[10,"serialize_f32","","Serialize an `f32` value.",3,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"result"}}],[10,"serialize_f64","","Serialize an `f64` value.",3,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"result"}}],[10,"serialize_char","","Serialize a character.",3,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"result"}}],[10,"serialize_str","","Serialize a `&str`.",3,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[10,"serialize_bytes","","Serialize a chunk of raw byte data.",3,null],[10,"serialize_none","","Serialize a [`None`] value.",3,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"serialize_some","","Serialize a [`Some(T)`] value.",3,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[10,"serialize_unit","","Serialize a `()` value.",3,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"serialize_unit_struct","","Serialize a unit struct like `struct Unit` or `PhantomData<T>`.",3,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[10,"serialize_unit_variant","","Serialize a unit variant like `E::A` in `enum E { A, B }`.",3,{"inputs":[{"name":"self"},{"name":"str"},{"name":"u32"},{"name":"str"}],"output":{"name":"result"}}],[10,"serialize_newtype_struct","","Serialize a newtype struct like `struct Millimeters(u8)`.",3,{"inputs":[{"name":"self"},{"name":"str"},{"name":"t"}],"output":{"name":"result"}}],[10,"serialize_newtype_variant","","Serialize a newtype variant like `E::N` in `enum E { N(u8) }`.",3,{"inputs":[{"name":"self"},{"name":"str"},{"name":"u32"},{"name":"str"},{"name":"t"}],"output":{"name":"result"}}],[10,"serialize_seq","","Begin to serialize a variably sized sequence. This call must be followed by zero or more calls to `serialize_element`, then a call to `end`.",3,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[10,"serialize_tuple","","Begin to serialize a statically sized sequence whose length will be known at deserialization time without looking at the serialized data. This call must be followed by zero or more calls to `serialize_element`, then a call to `end`.",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[10,"serialize_tuple_struct","","Begin to serialize a tuple struct like `struct Rgb(u8, u8, u8)`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",3,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"}],"output":{"name":"result"}}],[10,"serialize_tuple_variant","","Begin to serialize a tuple variant like `E::T` in `enum E { T(u8, u8) }`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",3,{"inputs":[{"name":"self"},{"name":"str"},{"name":"u32"},{"name":"str"},{"name":"usize"}],"output":{"name":"result"}}],[10,"serialize_map","","Begin to serialize a map. This call must be followed by zero or more calls to `serialize_key` and `serialize_value`, then a call to `end`.",3,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[10,"serialize_struct","","Begin to serialize a struct like `struct Rgb { r: u8, g: u8, b: u8 }`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",3,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"}],"output":{"name":"result"}}],[10,"serialize_struct_variant","","Begin to serialize a struct variant like `E::S` in `enum E { S { r: u8, g: u8, b: u8 } }`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",3,{"inputs":[{"name":"self"},{"name":"str"},{"name":"u32"},{"name":"str"},{"name":"usize"}],"output":{"name":"result"}}],[11,"collect_seq","","Collect an iterator as a sequence.",3,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"result"}}],[11,"collect_map","","Collect an iterator as a map.",3,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"result"}}],[11,"collect_str","","Serialize a string produced by an implementation of `Display`.",3,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[8,"Deserialize","","A data structure that can be deserialized from any data format supported by Serde.",null,null],[10,"deserialize","","Deserialize this value from the given Serde deserializer.",40,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[8,"Deserializer","","A data format that can deserialize any data structure supported by Serde.",null,null],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",42,null],[10,"deserialize_any","","Require the `Deserializer` to figure out how to drive the visitor based on what data type is in the input.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_bool","","Hint that the `Deserialize` type is expecting a `bool` value.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_i8","","Hint that the `Deserialize` type is expecting an `i8` value.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_i16","","Hint that the `Deserialize` type is expecting an `i16` value.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_i32","","Hint that the `Deserialize` type is expecting an `i32` value.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_i64","","Hint that the `Deserialize` type is expecting an `i64` value.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_u8","","Hint that the `Deserialize` type is expecting a `u8` value.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_u16","","Hint that the `Deserialize` type is expecting a `u16` value.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_u32","","Hint that the `Deserialize` type is expecting a `u32` value.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_u64","","Hint that the `Deserialize` type is expecting a `u64` value.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_f32","","Hint that the `Deserialize` type is expecting a `f32` value.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_f64","","Hint that the `Deserialize` type is expecting a `f64` value.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_char","","Hint that the `Deserialize` type is expecting a `char` value.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_str","","Hint that the `Deserialize` type is expecting a string value and does not benefit from taking ownership of buffered data owned by the `Deserializer`.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_string","","Hint that the `Deserialize` type is expecting a string value and would benefit from taking ownership of buffered data owned by the `Deserializer`.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_bytes","","Hint that the `Deserialize` type is expecting a byte array and does not benefit from taking ownership of buffered data owned by the `Deserializer`.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_byte_buf","","Hint that the `Deserialize` type is expecting a byte array and would benefit from taking ownership of buffered data owned by the `Deserializer`.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_option","","Hint that the `Deserialize` type is expecting an optional value.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_unit","","Hint that the `Deserialize` type is expecting a unit value.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_unit_struct","","Hint that the `Deserialize` type is expecting a unit struct with a particular name.",42,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_newtype_struct","","Hint that the `Deserialize` type is expecting a newtype struct with a particular name.",42,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_seq","","Hint that the `Deserialize` type is expecting a sequence of values.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_tuple","","Hint that the `Deserialize` type is expecting a sequence of values and knows how many values there are without looking at the serialized data.",42,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_tuple_struct","","Hint that the `Deserialize` type is expecting a tuple struct with a particular name and number of fields.",42,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_map","","Hint that the `Deserialize` type is expecting a map of key-value pairs.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_struct","","Hint that the `Deserialize` type is expecting a struct with a particular name and fields.",42,null],[10,"deserialize_enum","","Hint that the `Deserialize` type is expecting an enum value with a particular name and possible variants.",42,null],[10,"deserialize_identifier","","Hint that the `Deserialize` type is expecting the name of a struct field or the discriminant of an enum variant.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_ignored_any","","Hint that the `Deserialize` type needs to deserialize a value whose type doesn't matter because it is ignored.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[14,"forward_to_deserialize_any","","Helper macro when implementing the `Deserializer` part of a new data format for Serde.",null,null]],"paths":[[3,"Impossible"],[8,"Error"],[8,"Serialize"],[8,"Serializer"],[8,"SerializeSeq"],[8,"SerializeTuple"],[8,"SerializeTupleStruct"],[8,"SerializeTupleVariant"],[8,"SerializeMap"],[8,"SerializeStruct"],[8,"SerializeStructVariant"],[4,"Unexpected"],[3,"Error"],[3,"UnitDeserializer"],[3,"BoolDeserializer"],[3,"I8Deserializer"],[3,"I16Deserializer"],[3,"I32Deserializer"],[3,"I64Deserializer"],[3,"IsizeDeserializer"],[3,"U8Deserializer"],[3,"U16Deserializer"],[3,"U64Deserializer"],[3,"UsizeDeserializer"],[3,"F32Deserializer"],[3,"F64Deserializer"],[3,"CharDeserializer"],[3,"U32Deserializer"],[3,"StrDeserializer"],[3,"BorrowedStrDeserializer"],[3,"StringDeserializer"],[3,"CowStrDeserializer"],[3,"BorrowedBytesDeserializer"],[3,"SeqDeserializer"],[3,"SeqAccessDeserializer"],[3,"MapDeserializer"],[3,"MapAccessDeserializer"],[3,"IgnoredAny"],[8,"Error"],[8,"Expected"],[8,"Deserialize"],[8,"DeserializeSeed"],[8,"Deserializer"],[8,"Visitor"],[8,"SeqAccess"],[8,"MapAccess"],[8,"EnumAccess"],[8,"VariantAccess"],[8,"IntoDeserializer"]]};
searchIndex["serde_derive"] = {"doc":"This crate provides Serde's two derive macros.","items":[[5,"derive_serialize","serde_derive","",null,{"inputs":[{"name":"tokenstream"}],"output":{"name":"tokenstream"}}],[5,"derive_deserialize","","",null,{"inputs":[{"name":"tokenstream"}],"output":{"name":"tokenstream"}}]],"paths":[]};
searchIndex["serde_derive_internals"] = {"doc":"","items":[[3,"Ctxt","serde_derive_internals","",null,null],[0,"ast","","",null,null],[3,"Container","serde_derive_internals::ast","",null,null],[12,"ident","","",0,null],[12,"attrs","","",0,null],[12,"body","","",0,null],[12,"generics","","",0,null],[3,"Variant","","",null,null],[12,"ident","","",1,null],[12,"attrs","","",1,null],[12,"style","","",1,null],[12,"fields","","",1,null],[3,"Field","","",null,null],[12,"ident","","",2,null],[12,"attrs","","",2,null],[12,"ty","","",2,null],[4,"Body","","",null,null],[13,"Enum","","",3,null],[13,"Struct","","",3,null],[4,"Style","","",null,null],[13,"Struct","","",4,null],[13,"Tuple","","",4,null],[13,"Newtype","","",4,null],[13,"Unit","","",4,null],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"from_ast","","",0,{"inputs":[{"name":"ctxt"},{"name":"deriveinput"}],"output":{"name":"container"}}],[11,"all_fields","","",3,{"inputs":[{"name":"self"}],"output":{"name":"box"}}],[11,"has_getter","","",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[0,"attr","serde_derive_internals","",null,null],[3,"Name","serde_derive_internals::attr","",null,null],[3,"Container","","Represents container (e.g. struct) attribute information",null,null],[3,"Variant","","Represents variant attribute information",null,null],[3,"Field","","Represents field attribute information",null,null],[4,"RenameRule","","",null,null],[13,"None","","Don't apply a default rename rule.",5,null],[13,"LowerCase","","Rename direct children to \"lowercase\" style.",5,null],[13,"PascalCase","","Rename direct children to \"PascalCase\" style, as typically used for enum variants.",5,null],[13,"CamelCase","","Rename direct children to \"camelCase\" style.",5,null],[13,"SnakeCase","","Rename direct children to \"snake_case\" style, as commonly used for fields.",5,null],[13,"ScreamingSnakeCase","","Rename direct children to \"SCREAMING_SNAKE_CASE\" style, as commonly used for constants.",5,null],[13,"KebabCase","","Rename direct children to \"kebab-case\" style.",5,null],[13,"ScreamingKebabCase","","Rename direct children to \"SCREAMING-KEBAB-CASE\" style.",5,null],[4,"EnumTag","","Styles of representing an enum.",null,null],[13,"External","","The default.",6,null],[13,"Internal","","`#[serde(tag = \"type\")]`",6,null],[12,"tag","serde_derive_internals::attr::EnumTag","",6,null],[13,"Adjacent","serde_derive_internals::attr","`#[serde(tag = \"t\", content = \"c\")]`",6,null],[12,"tag","serde_derive_internals::attr::EnumTag","",6,null],[12,"content","","",6,null],[13,"None","serde_derive_internals::attr","`#[serde(untagged)]`",6,null],[4,"Identifier","","Whether this enum represents the fields of a struct or the variants of an enum.",null,null],[13,"No","","It does not.",7,null],[13,"Field","","This enum represents the fields of a struct. All of the variants must be unit variants, except possibly one which is annotated with `#[serde(other)]` and is a newtype variant.",7,null],[13,"Variant","","This enum represents the variants of an enum. All of the variants must be unit variants.",7,null],[4,"Default","","Represents the default to use for a field when deserializing.",null,null],[13,"None","","Field must always be specified because it does not have a default.",8,null],[13,"Default","","The default is given by `std::default::Default::default()`.",8,null],[13,"Path","","The default is given by this function.",8,null],[5,"get_serde_meta_items","","",null,{"inputs":[{"name":"attribute"}],"output":{"name":"option"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"serialize_name","","Return the container name for the container when serializing.",9,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"deserialize_name","","Return the container name for the container when deserializing.",9,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"identifier"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_ast","","Extract out the `#[serde(...)]` attributes from an item.",10,{"inputs":[{"name":"ctxt"},{"name":"deriveinput"}],"output":{"name":"self"}}],[11,"name","","",10,{"inputs":[{"name":"self"}],"output":{"name":"name"}}],[11,"rename_all","","",10,{"inputs":[{"name":"self"}],"output":{"name":"renamerule"}}],[11,"deny_unknown_fields","","",10,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"default","","",10,{"inputs":[{"name":"self"}],"output":{"name":"default"}}],[11,"ser_bound","","",10,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"de_bound","","",10,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"tag","","",10,{"inputs":[{"name":"self"}],"output":{"name":"enumtag"}}],[11,"from_type","","",10,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"into_type","","",10,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"remote","","",10,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"identifier","","",10,{"inputs":[{"name":"self"}],"output":{"name":"identifier"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_ast","","",11,{"inputs":[{"name":"ctxt"},{"name":"variant"}],"output":{"name":"self"}}],[11,"name","","",11,{"inputs":[{"name":"self"}],"output":{"name":"name"}}],[11,"rename_by_rule","","",11,{"inputs":[{"name":"self"},{"name":"renamerule"}],"output":null}],[11,"rename_all","","",11,{"inputs":[{"name":"self"}],"output":{"name":"renamerule"}}],[11,"skip_deserializing","","",11,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"skip_serializing","","",11,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"other","","",11,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"serialize_with","","",11,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"deserialize_with","","",11,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"default"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"self"},{"name":"default"}],"output":{"name":"bool"}}],[11,"from_ast","","Extract out the `#[serde(...)]` attributes from a struct field.",12,{"inputs":[{"name":"ctxt"},{"name":"usize"},{"name":"field"}],"output":{"name":"self"}}],[11,"name","","",12,{"inputs":[{"name":"self"}],"output":{"name":"name"}}],[11,"rename_by_rule","","",12,{"inputs":[{"name":"self"},{"name":"renamerule"}],"output":null}],[11,"skip_serializing","","",12,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"skip_deserializing","","",12,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"skip_serializing_if","","",12,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"default","","",12,{"inputs":[{"name":"self"}],"output":{"name":"default"}}],[11,"serialize_with","","",12,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"deserialize_with","","",12,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"ser_bound","","",12,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"de_bound","","",12,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"borrowed_lifetimes","","",12,{"inputs":[{"name":"self"}],"output":{"name":"btreeset"}}],[11,"getter","","",12,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"default","serde_derive_internals","",13,{"inputs":[],"output":{"name":"ctxt"}}],[11,"new","","",13,{"inputs":[],"output":{"name":"self"}}],[11,"error","","",13,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"check","","",13,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"drop","","",13,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","serde_derive_internals::attr","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"renamerule"}],"output":{"name":"bool"}}],[11,"apply_to_variant","","",5,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"string"}}],[11,"apply_to_field","","",5,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"string"}}],[11,"from_str","","",5,{"inputs":[{"name":"str"}],"output":{"name":"result"}}]],"paths":[[3,"Container"],[3,"Variant"],[3,"Field"],[4,"Body"],[4,"Style"],[4,"RenameRule"],[4,"EnumTag"],[4,"Identifier"],[4,"Default"],[3,"Name"],[3,"Container"],[3,"Variant"],[3,"Field"],[3,"Ctxt"]]};
searchIndex["serde_json"] = {"doc":"Serde JSON","items":[[3,"Deserializer","serde_json","A structure that deserializes JSON into Rust values.",null,null],[3,"StreamDeserializer","","Iterator that deserializes a stream into multiple JSON values.",null,null],[3,"Error","","This type represents all possible errors that can occur when serializing or deserializing JSON data.",null,null],[3,"Serializer","","A structure for serializing Rust values into JSON.",null,null],[3,"Map","","Represents a JSON key/value type.",null,null],[3,"Number","","Represents a JSON number, whether integer or floating point.",null,null],[4,"Value","","Represents any valid JSON value.",null,null],[13,"Null","","Represents a JSON null value.",0,null],[13,"Bool","","Represents a JSON boolean.",0,null],[13,"Number","","Represents a JSON number, whether integer or floating point.",0,null],[13,"String","","Represents a JSON string.",0,null],[13,"Array","","Represents a JSON array.",0,null],[13,"Object","","Represents a JSON object.",0,null],[5,"from_reader","","Deserialize an instance of type `T` from an IO stream of JSON.",null,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[5,"from_slice","","Deserialize an instance of type `T` from bytes of JSON text.",null,null],[5,"from_str","","Deserialize an instance of type `T` from a string of JSON text.",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[5,"to_string","","Serialize the given data structure as a String of JSON.",null,{"inputs":[{"name":"t"}],"output":{"name":"result"}}],[5,"to_string_pretty","","Serialize the given data structure as a pretty-printed String of JSON.",null,{"inputs":[{"name":"t"}],"output":{"name":"result"}}],[5,"to_vec","","Serialize the given data structure as a JSON byte vector.",null,{"inputs":[{"name":"t"}],"output":{"name":"result"}}],[5,"to_vec_pretty","","Serialize the given data structure as a pretty-printed JSON byte vector.",null,{"inputs":[{"name":"t"}],"output":{"name":"result"}}],[5,"to_writer","","Serialize the given data structure as JSON into the IO stream.",null,{"inputs":[{"name":"w"},{"name":"t"}],"output":{"name":"result"}}],[5,"to_writer_pretty","","Serialize the given data structure as pretty-printed JSON into the IO stream.",null,{"inputs":[{"name":"w"},{"name":"t"}],"output":{"name":"result"}}],[5,"from_value","","Interpret a `serde_json::Value` as an instance of type `T`.",null,{"inputs":[{"name":"value"}],"output":{"name":"result"}}],[5,"to_value","","Convert a `T` into `serde_json::Value` which is an enum that can represent any valid JSON data.",null,{"inputs":[{"name":"t"}],"output":{"name":"result"}}],[0,"de","","Deserialize JSON data to a Rust data structure.",null,null],[3,"IoRead","serde_json::de","JSON input source that reads from a std::io input stream.",null,null],[3,"SliceRead","","JSON input source that reads from a slice of bytes.",null,null],[3,"StrRead","","JSON input source that reads from a UTF-8 string.",null,null],[3,"Deserializer","","A structure that deserializes JSON into Rust values.",null,null],[3,"StreamDeserializer","","Iterator that deserializes a stream into multiple JSON values.",null,null],[5,"from_reader","","Deserialize an instance of type `T` from an IO stream of JSON.",null,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[5,"from_slice","","Deserialize an instance of type `T` from bytes of JSON text.",null,null],[5,"from_str","","Deserialize an instance of type `T` from a string of JSON text.",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[8,"Read","","Trait used by the deserializer for iterating over input. This is manually \"specialized\" for iterating over &[u8]. Once feature(specialization) is stable we can use actual specialization.",null,null],[11,"new","","Create a JSON deserializer from one of the possible serde_json input sources.",1,{"inputs":[{"name":"r"}],"output":{"name":"self"}}],[11,"from_reader","","Creates a JSON deserializer from an `io::Read`.",1,{"inputs":[{"name":"r"}],"output":{"name":"self"}}],[11,"from_slice","","Creates a JSON deserializer from a `&[u8]`.",1,null],[11,"from_str","","Creates a JSON deserializer from a `&str`.",1,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"end","","The `Deserializer::end` method should be called after a value has been fully deserialized. This allows the `Deserializer` to validate that the input stream is at the end or that it only has trailing whitespace.",1,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"into_iter","","Turn a JSON deserializer into an iterator over values of type T.",1,{"inputs":[{"name":"self"}],"output":{"name":"streamdeserializer"}}],[11,"new","","Create a JSON stream deserializer from one of the possible serde_json input sources.",2,{"inputs":[{"name":"r"}],"output":{"name":"self"}}],[11,"byte_offset","","Returns the number of bytes so far deserialized into a successful `T`.",2,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"next","","",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[0,"error","serde_json","When serializing or deserializing JSON goes wrong.",null,null],[3,"Error","serde_json::error","This type represents all possible errors that can occur when serializing or deserializing JSON data.",null,null],[4,"Category","","Categorizes the cause of a `serde_json::Error`.",null,null],[13,"Io","","The error was caused by a failure to read or write bytes on an IO stream.",3,null],[13,"Syntax","","The error was caused by input that was not syntactically valid JSON.",3,null],[13,"Data","","The error was caused by input data that was semantically incorrect.",3,null],[13,"Eof","","The error was caused by prematurely reaching the end of the input data.",3,null],[6,"Result","","Alias for a `Result` with the error type `serde_json::Error`.",null,null],[11,"line","","One-based line number at which the error was detected.",4,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"column","","One-based column number at which the error was detected.",4,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"classify","","Categorizes the cause of this error.",4,{"inputs":[{"name":"self"}],"output":{"name":"category"}}],[11,"is_io","","Returns true if this error was caused by a failure to read or write bytes on an IO stream.",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_syntax","","Returns true if this error was caused by input that was not syntactically valid JSON.",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_data","","Returns true if this error was caused by input data that was semantically incorrect.",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_eof","","Returns true if this error was caused by prematurely reaching the end of the input data.",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"category"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"category"}],"output":{"name":"bool"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",4,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"custom","","",4,{"inputs":[{"name":"t"}],"output":{"name":"error"}}],[11,"invalid_type","","",4,{"inputs":[{"name":"unexpected"},{"name":"expected"}],"output":{"name":"self"}}],[11,"custom","","",4,{"inputs":[{"name":"t"}],"output":{"name":"error"}}],[0,"map","serde_json","A map of String to serde_json::Value.",null,null],[3,"Map","serde_json::map","Represents a JSON key/value type.",null,null],[3,"VacantEntry","","A vacant Entry. It is part of the [`Entry`] enum.",null,null],[3,"OccupiedEntry","","An occupied Entry. It is part of the [`Entry`] enum.",null,null],[3,"Iter","","An iterator over a serde_json::Map's entries.",null,null],[3,"IterMut","","A mutable iterator over a serde_json::Map's entries.",null,null],[3,"IntoIter","","An owning iterator over a serde_json::Map's entries.",null,null],[3,"Keys","","An iterator over a serde_json::Map's keys.",null,null],[3,"Values","","An iterator over a serde_json::Map's values.",null,null],[4,"Entry","","A view into a single entry in a map, which may either be vacant or occupied. This enum is constructed from the [`entry`] method on [`Map`].",null,null],[13,"Vacant","","A vacant Entry.",5,null],[13,"Occupied","","An occupied Entry.",5,null],[11,"new","","Makes a new empty Map.",6,{"inputs":[],"output":{"name":"self"}}],[11,"with_capacity","","Makes a new empty Map with the given initial capacity.",6,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"clear","","Clears the map, removing all values.",6,{"inputs":[{"name":"self"}],"output":null}],[11,"get","","Returns a reference to the value corresponding to the key.",6,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"option"}}],[11,"contains_key","","Returns true if the map contains a value for the specified key.",6,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"bool"}}],[11,"get_mut","","Returns a mutable reference to the value corresponding to the key.",6,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"option"}}],[11,"insert","","Inserts a key-value pair into the map.",6,{"inputs":[{"name":"self"},{"name":"string"},{"name":"value"}],"output":{"name":"option"}}],[11,"remove","","Removes a key from the map, returning the value at the key if the key was previously in the map.",6,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"option"}}],[11,"entry","","Gets the given key's corresponding entry in the map for in-place manipulation.",6,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"entry"}}],[11,"len","","Returns the number of elements in the map.",6,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the map contains no elements.",6,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"iter","","Gets an iterator over the entries of the map.",6,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"iter_mut","","Gets a mutable iterator over the entries of the map.",6,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"keys","","Gets an iterator over the keys of the map.",6,{"inputs":[{"name":"self"}],"output":{"name":"keys"}}],[11,"values","","Gets an iterator over the values of the map.",6,{"inputs":[{"name":"self"}],"output":{"name":"values"}}],[11,"default","","",6,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"index","","",6,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"value"}}],[11,"index_mut","","",6,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"value"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"serialize","","",6,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",6,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"from_iter","","",6,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"extend","","",6,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"key","","Returns a reference to this entry's key.",5,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"or_insert","","Ensures a value is in the entry by inserting the default if empty, and returns a mutable reference to the value in the entry.",5,{"inputs":[{"name":"self"},{"name":"value"}],"output":{"name":"value"}}],[11,"or_insert_with","","Ensures a value is in the entry by inserting the result of the default function if empty, and returns a mutable reference to the value in the entry.",5,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"value"}}],[11,"key","","Gets a reference to the key that would be used when inserting a value through the VacantEntry.",7,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"insert","","Sets the value of the entry with the VacantEntry's key, and returns a mutable reference to it.",7,{"inputs":[{"name":"self"},{"name":"value"}],"output":{"name":"value"}}],[11,"key","","Gets a reference to the key in the entry.",8,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get","","Gets a reference to the value in the entry.",8,{"inputs":[{"name":"self"}],"output":{"name":"value"}}],[11,"get_mut","","Gets a mutable reference to the value in the entry.",8,{"inputs":[{"name":"self"}],"output":{"name":"value"}}],[11,"into_mut","","Converts the entry into a mutable reference to its value.",8,{"inputs":[{"name":"self"}],"output":{"name":"value"}}],[11,"insert","","Sets the value of the entry with the `OccupiedEntry`'s key, and returns the entry's old value.",8,{"inputs":[{"name":"self"},{"name":"value"}],"output":{"name":"value"}}],[11,"remove","","Takes the value of the entry out of the map, and returns it.",8,{"inputs":[{"name":"self"}],"output":{"name":"value"}}],[11,"next","","",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",9,null],[11,"next_back","","",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"len","","",9,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"next","","",10,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",10,null],[11,"next_back","","",10,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"len","","",10,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"into_iter","","",6,null],[11,"next","","",11,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",11,null],[11,"next_back","","",11,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"len","","",11,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"next","","",12,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",12,null],[11,"next_back","","",12,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"len","","",12,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"next","","",13,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",13,null],[11,"next_back","","",13,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"len","","",13,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[0,"ser","serde_json","Serialize a Rust data structure into JSON data.",null,null],[3,"Serializer","serde_json::ser","A structure for serializing Rust values into JSON.",null,null],[3,"CompactFormatter","","This structure compacts a JSON value with no extra whitespace.",null,null],[3,"PrettyFormatter","","This structure pretty prints a JSON value to make it human readable.",null,null],[4,"CharEscape","","Represents a character escape code in a type-safe manner.",null,null],[13,"Quote","","An escaped quote `\"`",14,null],[13,"ReverseSolidus","","An escaped reverse solidus `\\`",14,null],[13,"Solidus","","An escaped solidus `/`",14,null],[13,"Backspace","","An escaped backspace character (usually escaped as `\\b`)",14,null],[13,"FormFeed","","An escaped form feed character (usually escaped as `\\f`)",14,null],[13,"LineFeed","","An escaped line feed character (usually escaped as `\\n`)",14,null],[13,"CarriageReturn","","An escaped carriage return character (usually escaped as `\\r`)",14,null],[13,"Tab","","An escaped tab character (usually escaped as `\\t`)",14,null],[13,"AsciiControl","","An escaped ASCII plane control character (usually escaped as `\\u00XX` where `XX` are two hex characters)",14,null],[5,"to_writer","","Serialize the given data structure as JSON into the IO stream.",null,{"inputs":[{"name":"w"},{"name":"t"}],"output":{"name":"result"}}],[5,"to_writer_pretty","","Serialize the given data structure as pretty-printed JSON into the IO stream.",null,{"inputs":[{"name":"w"},{"name":"t"}],"output":{"name":"result"}}],[5,"to_vec","","Serialize the given data structure as a JSON byte vector.",null,{"inputs":[{"name":"t"}],"output":{"name":"result"}}],[5,"to_vec_pretty","","Serialize the given data structure as a pretty-printed JSON byte vector.",null,{"inputs":[{"name":"t"}],"output":{"name":"result"}}],[5,"to_string","","Serialize the given data structure as a String of JSON.",null,{"inputs":[{"name":"t"}],"output":{"name":"result"}}],[5,"to_string_pretty","","Serialize the given data structure as a pretty-printed String of JSON.",null,{"inputs":[{"name":"t"}],"output":{"name":"result"}}],[8,"Formatter","","This trait abstracts away serializing the JSON control characters, which allows the user to optionally pretty print the JSON output.",null,null],[11,"write_null","","Writes a `null` value to the specified writer.",15,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"write_bool","","Writes a `true` or `false` value to the specified writer.",15,{"inputs":[{"name":"self"},{"name":"w"},{"name":"bool"}],"output":{"name":"result"}}],[11,"write_i8","","Writes an integer value like `-123` to the specified writer.",15,{"inputs":[{"name":"self"},{"name":"w"},{"name":"i8"}],"output":{"name":"result"}}],[11,"write_i16","","Writes an integer value like `-123` to the specified writer.",15,{"inputs":[{"name":"self"},{"name":"w"},{"name":"i16"}],"output":{"name":"result"}}],[11,"write_i32","","Writes an integer value like `-123` to the specified writer.",15,{"inputs":[{"name":"self"},{"name":"w"},{"name":"i32"}],"output":{"name":"result"}}],[11,"write_i64","","Writes an integer value like `-123` to the specified writer.",15,{"inputs":[{"name":"self"},{"name":"w"},{"name":"i64"}],"output":{"name":"result"}}],[11,"write_u8","","Writes an integer value like `123` to the specified writer.",15,{"inputs":[{"name":"self"},{"name":"w"},{"name":"u8"}],"output":{"name":"result"}}],[11,"write_u16","","Writes an integer value like `123` to the specified writer.",15,{"inputs":[{"name":"self"},{"name":"w"},{"name":"u16"}],"output":{"name":"result"}}],[11,"write_u32","","Writes an integer value like `123` to the specified writer.",15,{"inputs":[{"name":"self"},{"name":"w"},{"name":"u32"}],"output":{"name":"result"}}],[11,"write_u64","","Writes an integer value like `123` to the specified writer.",15,{"inputs":[{"name":"self"},{"name":"w"},{"name":"u64"}],"output":{"name":"result"}}],[11,"write_f32","","Writes a floating point value like `-31.26e+12` to the specified writer.",15,{"inputs":[{"name":"self"},{"name":"w"},{"name":"f32"}],"output":{"name":"result"}}],[11,"write_f64","","Writes a floating point value like `-31.26e+12` to the specified writer.",15,{"inputs":[{"name":"self"},{"name":"w"},{"name":"f64"}],"output":{"name":"result"}}],[11,"begin_string","","Called before each series of `write_string_fragment` and `write_char_escape`.  Writes a `\"` to the specified writer.",15,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"end_string","","Called after each series of `write_string_fragment` and `write_char_escape`.  Writes a `\"` to the specified writer.",15,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"write_string_fragment","","Writes a string fragment that doesn't need any escaping to the specified writer.",15,{"inputs":[{"name":"self"},{"name":"w"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_char_escape","","Writes a character escape code to the specified writer.",15,{"inputs":[{"name":"self"},{"name":"w"},{"name":"charescape"}],"output":{"name":"result"}}],[11,"begin_array","","Called before every array.  Writes a `[` to the specified writer.",15,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"end_array","","Called after every array.  Writes a `]` to the specified writer.",15,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"begin_array_value","","Called before every array value.  Writes a `,` if needed to the specified writer.",15,{"inputs":[{"name":"self"},{"name":"w"},{"name":"bool"}],"output":{"name":"result"}}],[11,"end_array_value","","Called after every array value.",15,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"begin_object","","Called before every object.  Writes a `{` to the specified writer.",15,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"end_object","","Called after every object.  Writes a `}` to the specified writer.",15,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"begin_object_key","","Called before every object key.",15,{"inputs":[{"name":"self"},{"name":"w"},{"name":"bool"}],"output":{"name":"result"}}],[11,"end_object_key","","Called after every object key.  A `:` should be written to the specified writer by either this method or `begin_object_value`.",15,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"begin_object_value","","Called before every object value.  A `:` should be written to the specified writer by either this method or `end_object_key`.",15,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"end_object_value","","Called after every object value.",15,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"new","","Creates a new JSON serializer.",16,{"inputs":[{"name":"w"}],"output":{"name":"self"}}],[11,"pretty","","Creates a new JSON pretty print serializer.",16,{"inputs":[{"name":"w"}],"output":{"name":"self"}}],[11,"with_formatter","","Creates a new JSON visitor whose output will be written to the writer specified.",16,{"inputs":[{"name":"w"},{"name":"f"}],"output":{"name":"self"}}],[11,"into_inner","","Unwrap the `Writer` from the `Serializer`.",16,{"inputs":[{"name":"self"}],"output":{"name":"w"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"compactformatter"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"prettyformatter"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Construct a pretty printer formatter that defaults to using two spaces for indentation.",18,{"inputs":[],"output":{"name":"self"}}],[11,"with_indent","","Construct a pretty printer formatter that uses the `indent` string for indentation.",18,null],[11,"default","","",18,{"inputs":[],"output":{"name":"self"}}],[11,"begin_array","","",18,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"end_array","","",18,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"begin_array_value","","",18,{"inputs":[{"name":"self"},{"name":"w"},{"name":"bool"}],"output":{"name":"result"}}],[11,"end_array_value","","",18,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"begin_object","","",18,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"end_object","","",18,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"begin_object_key","","",18,{"inputs":[{"name":"self"},{"name":"w"},{"name":"bool"}],"output":{"name":"result"}}],[11,"begin_object_value","","",18,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"end_object_value","","",18,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[0,"value","serde_json","The Value enum, a loosely typed way of representing any valid JSON value.",null,null],[3,"Number","serde_json::value","Represents a JSON number, whether integer or floating point.",null,null],[4,"Value","","Represents any valid JSON value.",null,null],[13,"Null","","Represents a JSON null value.",0,null],[13,"Bool","","Represents a JSON boolean.",0,null],[13,"Number","","Represents a JSON number, whether integer or floating point.",0,null],[13,"String","","Represents a JSON string.",0,null],[13,"Array","","Represents a JSON array.",0,null],[13,"Object","","Represents a JSON object.",0,null],[5,"to_value","","Convert a `T` into `serde_json::Value` which is an enum that can represent any valid JSON data.",null,{"inputs":[{"name":"t"}],"output":{"name":"result"}}],[5,"from_value","","Interpret a `serde_json::Value` as an instance of type `T`.",null,{"inputs":[{"name":"value"}],"output":{"name":"result"}}],[11,"index","","Index into a `serde_json::Value` using the syntax `value[0]` or `value[\"k\"]`.",0,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"value"}}],[11,"index_mut","","Write into a `serde_json::Value` using the syntax `value[0] = ...` or `value[\"k\"] = ...`.",0,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"value"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"bool"}}],[11,"from","","",0,{"inputs":[{"name":"i8"}],"output":{"name":"self"}}],[11,"from","","",0,{"inputs":[{"name":"i16"}],"output":{"name":"self"}}],[11,"from","","",0,{"inputs":[{"name":"i32"}],"output":{"name":"self"}}],[11,"from","","",0,{"inputs":[{"name":"i64"}],"output":{"name":"self"}}],[11,"from","","",0,{"inputs":[{"name":"isize"}],"output":{"name":"self"}}],[11,"from","","",0,{"inputs":[{"name":"u8"}],"output":{"name":"self"}}],[11,"from","","",0,{"inputs":[{"name":"u16"}],"output":{"name":"self"}}],[11,"from","","",0,{"inputs":[{"name":"u32"}],"output":{"name":"self"}}],[11,"from","","",0,{"inputs":[{"name":"u64"}],"output":{"name":"self"}}],[11,"from","","",0,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"from","","Convert 32-bit floating point number to `Value`",0,{"inputs":[{"name":"f32"}],"output":{"name":"self"}}],[11,"from","","Convert 64-bit floating point number to `Value`",0,{"inputs":[{"name":"f64"}],"output":{"name":"self"}}],[11,"from","","Convert boolean to `Value`",0,{"inputs":[{"name":"bool"}],"output":{"name":"self"}}],[11,"from","","Convert `String` to `Value`",0,{"inputs":[{"name":"string"}],"output":{"name":"self"}}],[11,"from","","Convert string slice to `Value`",0,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"from","","Convert copy-on-write string to `Value`",0,{"inputs":[{"name":"cow"}],"output":{"name":"self"}}],[11,"from","","Convert map (with string keys) to `Value`",0,{"inputs":[{"name":"map"}],"output":{"name":"self"}}],[11,"from","","Convert a `Vec` to `Value`",0,{"inputs":[{"name":"vec"}],"output":{"name":"self"}}],[11,"from","","Convert a slice to `Value`",0,null],[11,"from_iter","","Convert an iteratable type to a `Value`",0,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"serialize","","",0,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",0,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"fmt","","Display a JSON value as a string.",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",0,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"deserialize_any","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",0,null],[11,"deserialize_newtype_struct","","",0,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",0,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",0,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",0,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",0,null],[11,"deserialize_identifier","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[8,"Index","","A type that can be used to index into a `serde_json::Value`. See the `get` and `get_mut` methods of `Value`.",null,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"value"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"value"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"value"}],"output":{"name":"bool"}}],[11,"get","","Index into a JSON array or map. A string index can be used to access a value in a map, and a usize index can be used to access an element of an array.",0,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"option"}}],[11,"get_mut","","Mutably index into a JSON array or map. A string index can be used to access a value in a map, and a usize index can be used to access an element of an array.",0,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"option"}}],[11,"is_object","","Returns true if the `Value` is an Object. Returns false otherwise.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_object","","If the `Value` is an Object, returns the associated Map. Returns None otherwise.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_object_mut","","If the `Value` is an Object, returns the associated mutable Map. Returns None otherwise.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_array","","Returns true if the `Value` is an Array. Returns false otherwise.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_array","","If the `Value` is an Array, returns the associated vector. Returns None otherwise.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_array_mut","","If the `Value` is an Array, returns the associated mutable vector. Returns None otherwise.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_string","","Returns true if the `Value` is a String. Returns false otherwise.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_str","","If the `Value` is a String, returns the associated str. Returns None otherwise.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_number","","Returns true if the `Value` is a Number. Returns false otherwise.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_i64","","Returns true if the `Value` is an integer between `i64::MIN` and `i64::MAX`.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_u64","","Returns true if the `Value` is an integer between zero and `u64::MAX`.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_f64","","Returns true if the `Value` is a number that can be represented by f64.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_i64","","If the `Value` is an integer, represent it as i64 if possible. Returns None otherwise.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_u64","","If the `Value` is an integer, represent it as u64 if possible. Returns None otherwise.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_f64","","If the `Value` is a number, represent it as f64 if possible. Returns None otherwise.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_boolean","","Returns true if the `Value` is a Boolean. Returns false otherwise.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_bool","","If the `Value` is a Boolean, returns the associated bool. Returns None otherwise.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_null","","Returns true if the `Value` is a Null. Returns false otherwise.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_null","","If the `Value` is a Null, returns (). Returns None otherwise.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"pointer","","Looks up a value by a JSON Pointer.",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"pointer_mut","","Looks up a value by a JSON Pointer and returns a mutable reference to that value.",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"default","","",0,{"inputs":[],"output":{"name":"value"}}],[11,"clone","serde_json","",19,{"inputs":[{"name":"self"}],"output":{"name":"number"}}],[11,"eq","","",19,{"inputs":[{"name":"self"},{"name":"number"}],"output":{"name":"bool"}}],[11,"ne","","",19,{"inputs":[{"name":"self"},{"name":"number"}],"output":{"name":"bool"}}],[11,"is_i64","","Returns true if the `Number` is an integer between `i64::MIN` and `i64::MAX`.",19,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_u64","","Returns true if the `Number` is an integer between zero and `u64::MAX`.",19,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_f64","","Returns true if the `Number` can be represented by f64.",19,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_i64","","If the `Number` is an integer, represent it as i64 if possible. Returns None otherwise.",19,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_u64","","If the `Number` is an integer, represent it as u64 if possible. Returns None otherwise.",19,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_f64","","Represents the number as f64 if possible. Returns None otherwise.",19,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"from_f64","","Converts a finite `f64` to a `Number`. Infinite or NaN values are not JSON numbers.",19,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"serialize","","",19,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",19,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"deserialize_any","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",19,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",19,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",19,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",19,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",19,null],[11,"deserialize_enum","","",19,null],[11,"deserialize_identifier","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"from","","",19,{"inputs":[{"name":"i8"}],"output":{"name":"self"}}],[11,"from","","",19,{"inputs":[{"name":"i16"}],"output":{"name":"self"}}],[11,"from","","",19,{"inputs":[{"name":"i32"}],"output":{"name":"self"}}],[11,"from","","",19,{"inputs":[{"name":"i64"}],"output":{"name":"self"}}],[11,"from","","",19,{"inputs":[{"name":"isize"}],"output":{"name":"self"}}],[11,"from","","",19,{"inputs":[{"name":"u8"}],"output":{"name":"self"}}],[11,"from","","",19,{"inputs":[{"name":"u16"}],"output":{"name":"self"}}],[11,"from","","",19,{"inputs":[{"name":"u32"}],"output":{"name":"self"}}],[11,"from","","",19,{"inputs":[{"name":"u64"}],"output":{"name":"self"}}],[11,"from","","",19,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"new","serde_json::de","Create a JSON input source to read from a std::io input stream.",20,{"inputs":[{"name":"r"}],"output":{"name":"self"}}],[11,"next","","",20,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"peek","","",20,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"discard","","",20,{"inputs":[{"name":"self"}],"output":null}],[11,"position","","",20,{"inputs":[{"name":"self"}],"output":{"name":"position"}}],[11,"peek_position","","",20,{"inputs":[{"name":"self"}],"output":{"name":"position"}}],[11,"byte_offset","","",20,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"parse_str","","",20,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"result"}}],[11,"parse_str_raw","","",20,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"result"}}],[11,"ignore_str","","",20,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"new","","Create a JSON input source to read from a slice of bytes.",21,null],[11,"next","","",21,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"peek","","",21,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"discard","","",21,{"inputs":[{"name":"self"}],"output":null}],[11,"position","","",21,{"inputs":[{"name":"self"}],"output":{"name":"position"}}],[11,"peek_position","","",21,{"inputs":[{"name":"self"}],"output":{"name":"position"}}],[11,"byte_offset","","",21,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"parse_str","","",21,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"result"}}],[11,"parse_str_raw","","",21,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"result"}}],[11,"ignore_str","","",21,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"new","","Create a JSON input source to read from a UTF-8 string.",22,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"next","","",22,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"peek","","",22,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"discard","","",22,{"inputs":[{"name":"self"}],"output":null}],[11,"position","","",22,{"inputs":[{"name":"self"}],"output":{"name":"position"}}],[11,"peek_position","","",22,{"inputs":[{"name":"self"}],"output":{"name":"position"}}],[11,"byte_offset","","",22,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"parse_str","","",22,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"result"}}],[11,"parse_str_raw","","",22,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"result"}}],[11,"ignore_str","","",22,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[6,"Result","serde_json","Alias for a `Result` with the error type `serde_json::Error`.",null,null],[14,"json","","Construct a `serde_json::Value` from a JSON literal.",null,null]],"paths":[[4,"Value"],[3,"Deserializer"],[3,"StreamDeserializer"],[4,"Category"],[3,"Error"],[4,"Entry"],[3,"Map"],[3,"VacantEntry"],[3,"OccupiedEntry"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Keys"],[3,"Values"],[4,"CharEscape"],[8,"Formatter"],[3,"Serializer"],[3,"CompactFormatter"],[3,"PrettyFormatter"],[3,"Number"],[3,"IoRead"],[3,"SliceRead"],[3,"StrRead"]]};
searchIndex["serenity"] = {"doc":"Serenity is a Rust library for the Discord API.","items":[[3,"CACHE","serenity","A mutable and lazily-initialized static binding. It can be accessed across any function and in any context.",null,null],[4,"Error","","A common error enum returned by most of the library's functionality within a custom [`Result`].",null,null],[13,"Decode","","An error while decoding a payload.",0,null],[13,"Format","","There was an error with a format.",0,null],[13,"Io","","An `std::io` error.",0,null],[13,"Json","","An error from the `serde_json` crate.",0,null],[13,"Model","","An error from the [`model`] module.",0,null],[13,"Num","","An error occurred while parsing an integer.",0,null],[13,"ExceededLimit","","Input exceeded a limit. Providing the input and the limit that's not supposed to be exceeded.",0,null],[13,"Other","","Some other error. This is only used for \"Expected value \" errors, when a more detailed error can not be easily provided via the [`Error::Decode`] variant.",0,null],[13,"Url","","An error from the `url` crate.",0,null],[13,"Client","","A [client] error.",0,null],[13,"Gateway","","An error from the `gateway` module.",0,null],[13,"Http","","An error from the [`http`] module.",0,null],[13,"Hyper","","An error from the `hyper` crate.",0,null],[13,"Tls","","An error from the `native-tls` crate.",0,null],[13,"WebSocket","","An error from the `rust-websocket` crate.",0,null],[0,"constants","","A set of constants used by the library.",null,null],[4,"OpCode","serenity::constants","Enum to map gateway opcodes.",null,null],[13,"Event","","Dispatches an event.",1,null],[13,"Heartbeat","","Used for ping checking.",1,null],[13,"Identify","","Used for client handshake.",1,null],[13,"StatusUpdate","","Used to update the client status.",1,null],[13,"VoiceStateUpdate","","Used to join/move/leave voice channels.",1,null],[13,"VoiceServerPing","","Used for voice ping checking.",1,null],[13,"Resume","","Used to resume a closed connection.",1,null],[13,"Reconnect","","Used to tell clients to reconnect to the gateway.",1,null],[13,"GetGuildMembers","","Used to request guild members.",1,null],[13,"InvalidSession","","Used to notify clients that they have an invalid session Id.",1,null],[13,"Hello","","Sent immediately after connection, contains heartbeat + server info.",1,null],[13,"HeartbeatAck","","Sent immediately following a client heartbeat that was received.",1,null],[4,"VoiceOpCode","","Enum to map voice opcodes.",null,null],[13,"Identify","","Used to begin a voice websocket connection.",2,null],[13,"SelectProtocol","","Used to select the voice protocol.",2,null],[13,"Hello","","Used to complete the websocket handshake.",2,null],[13,"KeepAlive","","Used to keep the websocket connection alive.",2,null],[13,"SessionDescription","","Used to describe the session.",2,null],[13,"Speaking","","Used to indicate which users are speaking.",2,null],[13,"Heartbeat","","Used to heartbeat.",2,null],[0,"close_codes","","",null,null],[17,"UNKNOWN_ERROR","serenity::constants::close_codes","Unknown error; try reconnecting?",null,null],[17,"UNKNOWN_OPCODE","","Invalid Gateway OP Code.",null,null],[17,"DECODE_ERROR","","An invalid payload was sent.",null,null],[17,"NOT_AUTHENTICATED","","A payload was sent prior to identifying.",null,null],[17,"AUTHENTICATION_FAILED","","The account token sent with the identify payload was incorrect.",null,null],[17,"ALREADY_AUTHENTICATED","","More than one identify payload was sent.",null,null],[17,"INVALID_SEQUENCE","","The sequence sent when resuming the session was invalid.",null,null],[17,"RATE_LIMITED","","Payloads were being sent too quickly.",null,null],[17,"SESSION_TIMEOUT","","A session timed out.",null,null],[17,"INVALID_SHARD","","An invalid shard when identifying was sent.",null,null],[17,"SHARDING_REQUIRED","","The session would have handled too many guilds.",null,null],[7,"JOIN_MESSAGES","serenity::constants","List of messages Discord shows on member join.",null,null],[17,"EMBED_MAX_LENGTH","","The maximum length of the textual size of an embed.",null,null],[17,"GATEWAY_VERSION","","The gateway version used by the library. The gateway URI is retrieved via the REST API.",null,null],[17,"LARGE_THRESHOLD","","The large threshold to send on identify.",null,null],[17,"MESSAGE_CODE_LIMIT","","The maximum unicode code points allowed within a message by Discord.",null,null],[17,"USER_AGENT","","The [UserAgent] sent along with every request.",null,null],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"opcode"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",1,null],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"opcode"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"opcode"}],"output":{"name":"option"}}],[11,"cmp","","",1,{"inputs":[{"name":"self"},{"name":"opcode"}],"output":{"name":"ordering"}}],[11,"serialize","","",1,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",1,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"num","","",1,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"voiceopcode"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",2,null],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"voiceopcode"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",2,{"inputs":[{"name":"self"},{"name":"voiceopcode"}],"output":{"name":"option"}}],[11,"cmp","","",2,{"inputs":[{"name":"self"},{"name":"voiceopcode"}],"output":{"name":"ordering"}}],[11,"serialize","","",2,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",2,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"num","","",2,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[0,"model","serenity","Mappings of objects received from the API, with optional helper methods for ease of use.",null,null],[3,"Attachment","serenity::model","A file uploaded with a message. Not to be confused with [`Embed`]s.",null,null],[12,"id","","The unique ID given to this attachment.",3,null],[12,"filename","","The filename of the file that was uploaded. This is equivalent to what the uploader had their file named.",3,null],[12,"height","","If the attachment is an image, then the height of the image is provided.",3,null],[12,"proxy_url","","The proxy URL.",3,null],[12,"size","","The size of the file in bytes.",3,null],[12,"url","","The URL of the uploaded attachment.",3,null],[12,"width","","If the attachment is an image, then the widfth of the image is provided.",3,null],[3,"Embed","","Represents a rich embed which allows using richer markdown, multiple fields and more. This was heavily inspired by [slack's attachments].",null,null],[12,"author","","Information about the author of the embed.",4,null],[12,"colour","","The colour code of the embed.",4,null],[12,"description","","The description of the embed.",4,null],[12,"fields","","The array of fields.",4,null],[12,"footer","","Footer information for the embed.",4,null],[12,"image","","Image information of the embed.",4,null],[12,"kind","","The type of the embed. For embeds not generated by Discord's backend, this will always be \"rich\".",4,null],[12,"provider","","Provider information for the embed.",4,null],[12,"thumbnail","","Thumbnail information of the embed.",4,null],[12,"timestamp","","Timestamp information.",4,null],[12,"title","","The title of the embed.",4,null],[12,"url","","The URL of the embed.",4,null],[12,"video","","The embed's video information.",4,null],[3,"EmbedAuthor","","An author object in an embed.",null,null],[12,"icon_url","","The URL of the author icon.",5,null],[12,"name","","The name of the author.",5,null],[12,"proxy_icon_url","","A proxied URL of the author icon.",5,null],[12,"url","","The URL of the author.",5,null],[3,"EmbedField","","A field object in an embed.",null,null],[12,"inline","","Indicator of whether the field should display as inline.",6,null],[12,"name","","The name of the field.",6,null],[12,"value","","The value of the field.",6,null],[3,"EmbedFooter","","Footer information for an embed.",null,null],[12,"icon_url","","The URL of the footer icon.",7,null],[12,"proxy_icon_url","","A proxied URL of the footer icon.",7,null],[12,"text","","The associated text with the footer.",7,null],[3,"EmbedImage","","An image object in an embed.",null,null],[12,"height","","The height of the image.",8,null],[12,"proxy_url","","A proxied URL of the image.",8,null],[12,"url","","Source URL of the image.",8,null],[12,"width","","The width of the image.",8,null],[3,"EmbedProvider","","The provider of an embed.",null,null],[12,"name","","The name of the provider.",9,null],[12,"url","","The URL of the provider.",9,null],[3,"EmbedThumbnail","","The dimensions and URL of an embed thumbnail.",null,null],[12,"height","","The height of the thumbnail in pixels.",10,null],[12,"proxy_url","","A proxied URL of the thumbnail.",10,null],[12,"url","","The source URL of the thumbnail.",10,null],[12,"width","","The width of the thumbnail in pixels.",10,null],[3,"EmbedVideo","","Video information for an embed.",null,null],[12,"height","","The height of the video in pixels.",11,null],[12,"url","","The source URL of the video.",11,null],[12,"width","","The width of the video in pixels.",11,null],[3,"Group","","A group channel - potentially including other [`User`]s - separate from a [`Guild`].",null,null],[12,"channel_id","","The Id of the group channel.",12,null],[12,"icon","","The optional icon of the group channel.",12,null],[12,"last_message_id","","The Id of the last message sent.",12,null],[12,"last_pin_timestamp","","Timestamp of the latest pinned message.",12,null],[12,"name","","The name of the group channel.",12,null],[12,"owner_id","","The Id of the group owner.",12,null],[12,"recipients","","A map of the group's recipients.",12,null],[3,"GuildChannel","","Represents a guild's text or voice channel. Some methods are available only for voice channels and some are only available for text channels.",null,null],[12,"id","","The unique Id of the channel.",13,null],[12,"bitrate","","The bitrate of the channel.",13,null],[12,"category_id","","Whether this guild channel belongs in a category.",13,null],[12,"guild_id","","The Id of the guild the channel is located in.",13,null],[12,"kind","","The type of the channel.",13,null],[12,"last_message_id","","The Id of the last message sent in the channel.",13,null],[12,"last_pin_timestamp","","The timestamp of the time a pin was most recently made.",13,null],[12,"name","","The name of the channel.",13,null],[12,"permission_overwrites","","Permission overwrites for [`Member`]s and for [`Role`]s.",13,null],[12,"position","","The position of the channel.",13,null],[12,"topic","","The topic of the channel.",13,null],[12,"user_limit","","The maximum number of members allowed in the channel.",13,null],[12,"nsfw","","Used to tell if the channel is not safe for work. Note however, it's recommended to use [`is_nsfw`] as it's gonna be more accurate.",13,null],[3,"Message","","A representation of a message over a guild's text channel, a group, or a private channel.",null,null],[12,"id","","The unique Id of the message. Can be used to calculate the creation date of the message.",14,null],[12,"attachments","","An vector of the files attached to a message.",14,null],[12,"author","","The user that sent the message.",14,null],[12,"channel_id","","The Id of the [`Channel`] that the message was sent to.",14,null],[12,"content","","The content of the message.",14,null],[12,"edited_timestamp","","The timestamp of the last time the message was updated, if it was.",14,null],[12,"embeds","","Array of embeds sent with the message.",14,null],[12,"kind","","Indicator of the type of message this is, i.e. whether it is a regular message or a system message.",14,null],[12,"mention_everyone","","Indicator of whether the message mentions everyone.",14,null],[12,"mention_roles","","Array of [`Role`]s' Ids mentioned in the message.",14,null],[12,"mentions","","Array of users mentioned in the message.",14,null],[12,"nonce","","Non-repeating number used for ensuring message order.",14,null],[12,"pinned","","Indicator of whether the message is pinned.",14,null],[12,"reactions","","Array of reactions performed on the message.",14,null],[12,"timestamp","","Initial message creation timestamp, calculated from its Id.",14,null],[12,"tts","","Indicator of whether the command is to be played back via text-to-speech.",14,null],[12,"webhook_id","","The Id of the webhook that sent this message, if one did.",14,null],[3,"MessageReaction","","A representation of a reaction to a message.",null,null],[12,"count","","The amount of the type of reaction that have been sent for the associated message.",15,null],[12,"me","","Indicator of whether the current user has sent the type of reaction.",15,null],[12,"reaction_type","","The type of reaction.",15,null],[3,"PrivateChannel","","A Direct Message text channel with another user.",null,null],[12,"id","","The unique Id of the private channel.",16,null],[12,"last_message_id","","The Id of the last message sent.",16,null],[12,"last_pin_timestamp","","Timestamp of the last time a [`Message`] was pinned.",16,null],[12,"kind","","Indicator of the type of channel this is.",16,null],[12,"recipient","","The recipient to the private channel.",16,null],[3,"Reaction","","An emoji reaction to a message.",null,null],[12,"channel_id","","The [`Channel`] of the associated [`Message`].",17,null],[12,"emoji","","The reactive emoji used.",17,null],[12,"message_id","","The Id of the [`Message`] that was reacted to.",17,null],[12,"user_id","","The Id of the [`User`] that sent the reaction.",17,null],[3,"ChannelCategory","","A category of [`GuildChannel`]s.",null,null],[12,"id","","Id of this category.",18,null],[12,"category_id","","If this category belongs to another category.",18,null],[12,"position","","The position of this category.",18,null],[12,"kind","","Indicator of the type of channel this is.",18,null],[12,"name","","The name of the category.",18,null],[12,"nsfw","","Whether this category is nsfw. (This'll be inherited by all channels in this category)",18,null],[12,"permission_overwrites","","Permission overwrites for the [`GuildChannel`]s.",18,null],[3,"PermissionOverwrite","","A channel-specific permission overwrite for a member or role.",null,null],[12,"allow","","",19,null],[12,"deny","","",19,null],[12,"kind","","",19,null],[3,"BotGateway","","A representation of the data retrieved from the bot gateway endpoint.",null,null],[12,"shards","","The number of shards that is recommended to be used by the current bot user.",20,null],[12,"url","","The gateway to connect to.",20,null],[3,"Game","","Representation of a game that a [`User`] is playing -- or streaming in the case that a stream URL is provided.",null,null],[12,"kind","","The type of game status.",21,null],[12,"name","","The name of the game being played.",21,null],[12,"url","","The Stream URL if [`kind`] is [`GameType::Streaming`].",21,null],[3,"Gateway","","A representation of the data retrieved from the gateway endpoint.",null,null],[12,"url","","The gateway to connect to.",22,null],[3,"Presence","","Information detailing the current online status of a [`User`].",null,null],[12,"game","","The game that a [`User`] is current playing.",23,null],[12,"last_modified","","The date of the last presence update.",23,null],[12,"nick","","The nickname of the member, if applicable.",23,null],[12,"status","","The user's online status.",23,null],[12,"user_id","","The Id of the [`User`]. Can be used to calculate the user's creation date.",23,null],[12,"user","","The associated user instance.",23,null],[3,"Ready","","An initial set of information given after IDENTIFYing to the gateway.",null,null],[12,"guilds","","",24,null],[12,"presences","","",24,null],[12,"private_channels","","",24,null],[12,"session_id","","",24,null],[12,"shard","","",24,null],[12,"trace","","",24,null],[12,"user","","",24,null],[12,"version","","",24,null],[3,"Emoji","","Represents a custom guild emoji, which can either be created using the API, or via an integration. Emojis created using the API only work within the guild it was created in.",null,null],[12,"id","","The Id of the emoji.",25,null],[12,"name","","The name of the emoji. It must be at least 2 characters long and can only contain alphanumeric characters and underscores.",25,null],[12,"managed","","Whether the emoji is managed via an [`Integration`] service.",25,null],[12,"require_colons","","Whether the emoji name needs to be surrounded by colons in order to be used by the client.",25,null],[12,"roles","","A list of [`Role`]s that are allowed to use the emoji. If there are no roles specified, then usage is unrestricted.",25,null],[3,"Integration","","Various information about integrations.",null,null],[12,"id","","",26,null],[12,"account","","",26,null],[12,"enabled","","",26,null],[12,"expire_behaviour","","",26,null],[12,"expire_grace_period","","",26,null],[12,"kind","","",26,null],[12,"name","","",26,null],[12,"role_id","","",26,null],[12,"synced_at","","",26,null],[12,"syncing","","",26,null],[12,"user","","",26,null],[3,"IntegrationAccount","","Integration account object.",null,null],[12,"id","","",27,null],[12,"name","","",27,null],[3,"Member","","Information about a member of a guild.",null,null],[12,"deaf","","Indicator of whether the member can hear in voice channels.",28,null],[12,"guild_id","","The unique Id of the guild that the member is a part of.",28,null],[12,"joined_at","","Timestamp representing the date when the member joined.",28,null],[12,"mute","","Indicator of whether the member can speak in voice channels.",28,null],[12,"nick","","The member's nickname, if present.",28,null],[12,"roles","","Vector of Ids of [`Role`]s given to the member.",28,null],[12,"user","","Attached User struct.",28,null],[3,"PartialGuild","","Partial information about a [`Guild`]. This does not include information like member data.",null,null],[12,"id","","",29,null],[12,"afk_channel_id","","",29,null],[12,"afk_timeout","","",29,null],[12,"default_message_notifications","","",29,null],[12,"embed_channel_id","","",29,null],[12,"embed_enabled","","",29,null],[12,"emojis","","",29,null],[12,"features","","",29,null],[12,"icon","","",29,null],[12,"mfa_level","","",29,null],[12,"name","","",29,null],[12,"owner_id","","",29,null],[12,"region","","",29,null],[12,"roles","","",29,null],[12,"splash","","",29,null],[12,"verification_level","","",29,null],[3,"Role","","Information about a role within a guild. A role represents a set of permissions, and can be attached to one or multiple users. A role has various miscellaneous configurations, such as being assigned a colour. Roles are unique per guild and do not cross over to other guilds in any way, and can have channel-specific permission overrides in addition to guild-level permissions.",null,null],[12,"id","","The Id of the role. Can be used to calculate the role's creation date.",30,null],[12,"colour","","The colour of the role. This is an ergonomic representation of the inner value.",30,null],[12,"hoist","","Indicator of whether the role is pinned above lesser roles.",30,null],[12,"managed","","Indicator of whether the role is managed by an integration service.",30,null],[12,"mentionable","","Indicator of whether the role can be mentioned, similar to mentioning a specific member or `@everyone`.",30,null],[12,"name","","The name of the role.",30,null],[12,"permissions","","A set of permissions that the role has been assigned.",30,null],[12,"position","","The role's position in the position list. Roles are considered higher in hierarchy if their position is higher.",30,null],[3,"Change","","",null,null],[12,"name","","",31,null],[12,"old","","",31,null],[12,"new","","",31,null],[3,"AuditLogs","","",null,null],[12,"entries","","",32,null],[3,"AuditLogEntry","","",null,null],[12,"target","","Determines to what entity an [`action`] was used on.",33,null],[12,"action","","Determines what action was done on a [`target`]",33,null],[12,"reason","","What was the reasoning by doing an action on a target? If there was one.",33,null],[12,"user_id","","The user that did this action on a target.",33,null],[12,"changes","","What changes were made.",33,null],[12,"id","","The id of this entry.",33,null],[3,"Ban","","A representation of a banning of a user.",null,null],[12,"reason","","The reason given for this ban.",34,null],[12,"user","","The user that was banned.",34,null],[3,"Guild","","Information about a Discord guild, such as channels, emojis, etc.",null,null],[12,"afk_channel_id","","Id of a voice channel that's considered the AFK channel.",35,null],[12,"afk_timeout","","The amount of seconds a user can not show any activity in a voice channel before being moved to an AFK channel -- if one exists.",35,null],[12,"channels","","All voice and text channels contained within a guild.",35,null],[12,"default_message_notifications","","Indicator of whether notifications for all messages are enabled by default in the guild.",35,null],[12,"emojis","","All of the guild's custom emojis.",35,null],[12,"features","","VIP features enabled for the guild. Can be obtained through the [Discord Partnership] website.",35,null],[12,"icon","","The hash of the icon used by the guild.",35,null],[12,"id","","The unique Id identifying the guild.",35,null],[12,"joined_at","","The date that the current user joined the guild.",35,null],[12,"large","","Indicator of whether the guild is considered \"large\" by Discord.",35,null],[12,"member_count","","The number of members in the guild.",35,null],[12,"members","","Users who are members of the guild.",35,null],[12,"mfa_level","","Indicator of whether the guild requires multi-factor authentication for [`Role`]s or [`User`]s with moderation permissions.",35,null],[12,"name","","The name of the guild.",35,null],[12,"owner_id","","The Id of the [`User`] who owns the guild.",35,null],[12,"presences","","A mapping of [`User`]s' Ids to their current presences.",35,null],[12,"region","","The region that the voice servers that the guild uses are located in.",35,null],[12,"roles","","A mapping of the guild's roles.",35,null],[12,"splash","","An identifying hash of the guild's splash icon.",35,null],[12,"verification_level","","Indicator of the current verification level of the guild.",35,null],[12,"voice_states","","A mapping of of [`User`]s to their current voice state.",35,null],[3,"GuildEmbed","","Information relating to a guild's widget embed.",null,null],[12,"channel_id","","The Id of the channel to show the embed for.",36,null],[12,"enabled","","Whether the widget embed is enabled.",36,null],[3,"GuildPrune","","Representation of the number of members that would be pruned by a guild prune operation.",null,null],[12,"pruned","","The number of members that would be pruned by the operation.",37,null],[3,"GuildInfo","","Basic information about a guild.",null,null],[12,"id","","The unique Id of the guild.",38,null],[12,"icon","","The hash of the icon of the guild.",38,null],[12,"name","","The name of the guild.",38,null],[12,"owner","","Indicator of whether the current user is the owner.",38,null],[12,"permissions","","The permissions that the current user has.",38,null],[3,"GuildUnavailable","","Data for an unavailable guild.",null,null],[12,"id","","The Id of the [`Guild`] that is unavailable.",39,null],[12,"unavailable","","Indicator of whether the guild is unavailable.",39,null],[3,"Invite","","Information about an invite code.",null,null],[12,"approximate_member_count","","The approximate number of [`Member`]s in the related [`Guild`].",40,null],[12,"approximate_presence_count","","The approximate number of [`Member`]s with an active session in the related [`Guild`].",40,null],[12,"code","","The unique code for the invite.",40,null],[12,"channel","","A representation of the minimal amount of information needed about the [`GuildChannel`] being invited to.",40,null],[12,"guild","","a representation of the minimal amount of information needed about the [`Guild`] being invited to.",40,null],[3,"InviteChannel","","A inimal information about the channel an invite points to.",null,null],[12,"id","","",41,null],[12,"name","","",41,null],[12,"kind","","",41,null],[3,"InviteGuild","","A minimal amount of information about the guild an invite points to.",null,null],[12,"id","","",42,null],[12,"icon","","",42,null],[12,"name","","",42,null],[12,"splash_hash","","",42,null],[12,"text_channel_count","","",42,null],[12,"voice_channel_count","","",42,null],[3,"RichInvite","","Detailed information about an invite. This information can only be retrieved by anyone with the [Manage Guild] permission. Otherwise, a minimal amount of information can be retrieved via the [`Invite`] struct.",null,null],[12,"channel","","A representation of the minimal amount of information needed about the channel being invited to.",43,null],[12,"code","","The unique code for the invite.",43,null],[12,"created_at","","When the invite was created.",43,null],[12,"guild","","A representation of the minimal amount of information needed about the guild being invited to.",43,null],[12,"inviter","","The user that created the invite.",43,null],[12,"max_age","","The maximum age of the invite in seconds, from when it was created.",43,null],[12,"max_uses","","The maximum number of times that an invite may be used before it expires. Note that this does not supercede the [`max_age`] value, if the value of [`temporary`] is `true`. If the value of `temporary` is `false`, then the invite will self-expire after the given number of max uses. If the value is `0`, then the invite is permanent.",43,null],[12,"temporary","","Indicator of whether the invite self-expires after a certain amount of time or uses.",43,null],[12,"uses","","The amount of times that an invite has been used.",43,null],[3,"EmojiIdentifier","","A version of an emoji used only when solely the Id and name are known.",null,null],[12,"id","","The Id of the emoji.",44,null],[12,"name","","The name of the emoji. It must be at least 2 characters long and can only contain alphanumeric characters and underscores.",44,null],[3,"AffectedComponent","","A component that was affected during a service incident.",null,null],[12,"name","","",45,null],[3,"Incident","","An incident retrieved from the Discord status page.",null,null],[12,"created_at","","",46,null],[12,"id","","",46,null],[12,"impact","","",46,null],[12,"incident_updates","","",46,null],[12,"monitoring_at","","",46,null],[12,"name","","",46,null],[12,"page_id","","",46,null],[12,"resolved_at","","",46,null],[12,"short_link","","",46,null],[12,"status","","",46,null],[12,"updated_at","","",46,null],[3,"IncidentUpdate","","An update to an incident from the Discord status page.",null,null],[12,"affected_components","","",47,null],[12,"body","","",47,null],[12,"created_at","","",47,null],[12,"display_at","","",47,null],[12,"id","","",47,null],[12,"incident_id","","",47,null],[12,"status","","",47,null],[12,"updated_at","","",47,null],[3,"Maintenance","","A Discord status maintenance message. This can be either for active maintenances or for scheduled maintenances.",null,null],[12,"description","","",48,null],[12,"id","","",48,null],[12,"name","","",48,null],[12,"start","","",48,null],[12,"stop","","",48,null],[3,"CurrentUser","","Information about the current user.",null,null],[12,"id","","",49,null],[12,"avatar","","",49,null],[12,"bot","","",49,null],[12,"discriminator","","",49,null],[12,"email","","",49,null],[12,"mfa_enabled","","",49,null],[12,"name","","",49,null],[12,"verified","","",49,null],[3,"User","","Information about a user.",null,null],[12,"id","","The unique Id of the user. Can be used to calculate the account's cration date.",50,null],[12,"avatar","","Optional avatar hash.",50,null],[12,"bot","","Indicator of whether the user is a bot.",50,null],[12,"discriminator","","The account's discriminator to differentiate the user from others with the same [`name`]. The name+discriminator pair is always unique.",50,null],[12,"name","","The account's username. Changing username will trigger a discriminator change if the username+discriminator pair becomes non-unique.",50,null],[3,"VoiceRegion","","Information about an available voice region.",null,null],[12,"custom","","Whether it is a custom voice region, which is used for events.",51,null],[12,"deprecated","","Whether it is a deprecated voice region, which you should avoid using.",51,null],[12,"id","","The internal Id of the voice region.",51,null],[12,"name","","A recognizable name of the location of the voice region.",51,null],[12,"optional","","Whether the voice region is optimal for use by the current user.",51,null],[12,"sample_hostname","","an example hostname.",51,null],[12,"sample_port","","An example port.",51,null],[12,"vip","","Indicator of whether the voice region is only for VIP guilds.",51,null],[3,"VoiceState","","A user's state within a voice channel.",null,null],[12,"channel_id","","",52,null],[12,"deaf","","",52,null],[12,"mute","","",52,null],[12,"self_deaf","","",52,null],[12,"self_mute","","",52,null],[12,"session_id","","",52,null],[12,"suppress","","",52,null],[12,"token","","",52,null],[12,"user_id","","",52,null],[3,"Webhook","","A representation of a webhook, which is a low-effort way to post messages to channels. They do not necessarily require a bot user or authentication to use.",null,null],[12,"id","","The unique Id.",53,null],[12,"avatar","","The default avatar.",53,null],[12,"channel_id","","The Id of the channel that owns the webhook.",53,null],[12,"guild_id","","The Id of the guild that owns the webhook.",53,null],[12,"name","","The default name of the webhook.",53,null],[12,"token","","The webhook's secure token.",53,null],[12,"user","","The user that created the webhook.",53,null],[3,"ChannelId","","An identifier for a Channel",null,null],[12,"0","","",54,null],[3,"EmojiId","","An identifier for an Emoji",null,null],[12,"0","","",55,null],[3,"GuildId","","An identifier for a Guild",null,null],[12,"0","","",56,null],[3,"IntegrationId","","An identifier for an Integration",null,null],[12,"0","","",57,null],[3,"MessageId","","An identifier for a Message",null,null],[12,"0","","",58,null],[3,"RoleId","","An identifier for a Role",null,null],[12,"0","","",59,null],[3,"UserId","","An identifier for a User",null,null],[12,"0","","",60,null],[3,"WebhookId","","An identifier for a `Webhook`.",null,null],[12,"0","","",61,null],[3,"AuditLogEntryId","","An identifier for an audit log entry.",null,null],[12,"0","","",62,null],[3,"ApplicationInfo","","Information about a user's application. An application does not necessarily have an associated bot user.",null,null],[12,"bot","","The bot user associated with the application. See [`BotApplication`] for more information.",63,null],[12,"bot_public","","Indicator of whether the bot is public.",63,null],[12,"bot_require_code_grant","","Indicator of whether the bot requires an OAuth2 code grant.",63,null],[12,"description","","A description of the application, assigned by the application owner.",63,null],[12,"flags","","A set of bitflags assigned to the application, which represent gated feature flags that have been enabled for the application.",63,null],[12,"icon","","A hash pointing to the application's icon.",63,null],[12,"id","","The unique numeric Id of the application.",63,null],[12,"name","","The name assigned to the application by the application owner.",63,null],[12,"redirect_uris","","A list of redirect URIs assigned to the application.",63,null],[12,"rpc_origins","","A list of RPC Origins assigned to the application.",63,null],[12,"secret","","The given secret to the application.",63,null],[3,"BotApplication","","Information about an application with an application's bot user.",null,null],[12,"id","","The unique Id of the bot user.",64,null],[12,"avatar","","A hash of the avatar, if one is assigned.",64,null],[12,"bot","","Indicator of whether it is a bot.",64,null],[12,"discriminator","","The discriminator assigned to the bot user.",64,null],[12,"name","","The bot user's username.",64,null],[12,"token","","The token used to authenticate as the bot user.",64,null],[3,"CurrentApplicationInfo","","Information about the current application and its owner.",null,null],[12,"description","","",65,null],[12,"icon","","",65,null],[12,"id","","",65,null],[12,"name","","",65,null],[12,"owner","","",65,null],[12,"rpc_origins","","",65,null],[4,"MessageType","","Differentiates between regular and different types of system messages.",null,null],[13,"Regular","","A regular message.",66,null],[13,"GroupRecipientAddition","","An indicator that a recipient was added by the author.",66,null],[13,"GroupRecipientRemoval","","An indicator that a recipient was removed by the author.",66,null],[13,"GroupCallCreation","","An indicator that a call was started by the author.",66,null],[13,"GroupNameUpdate","","An indicator that the group name was modified by the author.",66,null],[13,"GroupIconUpdate","","An indicator that the group icon was modified by the author.",66,null],[13,"PinsAdd","","An indicator that a message was pinned by the author.",66,null],[13,"MemberJoin","","An indicator that a member joined the guild.",66,null],[4,"ReactionType","","The type of a [`Reaction`] sent.",null,null],[13,"Custom","","A reaction with a [`Guild`]s custom [`Emoji`], which is unique to the guild.",67,null],[12,"id","serenity::model::ReactionType","The Id of the custom [`Emoji`].",67,null],[12,"name","","The name of the custom emoji. This is primarily used for decoration and distinguishing the emoji client-side.",67,null],[13,"Unicode","serenity::model","A reaction with a twemoji.",67,null],[4,"Channel","","A container for any channel.",null,null],[13,"Group","","A group. A group comprises of only one channel.",68,null],[13,"Guild","","A [text] or [voice] channel within a [`Guild`].",68,null],[13,"Private","","A private channel to another [`User`]. No other users may access the channel. For multi-user \"private channels\", use a group.",68,null],[13,"Category","","A category of [`GuildChannel`]s",68,null],[4,"ChannelType","","A representation of a type of channel.",null,null],[13,"Text","","An indicator that the channel is a text [`GuildChannel`].",69,null],[13,"Private","","An indicator that the channel is a [`PrivateChannel`].",69,null],[13,"Voice","","An indicator that the channel is a voice [`GuildChannel`].",69,null],[13,"Group","","An indicator that the channel is the channel of a [`Group`].",69,null],[13,"Category","","An indicator that the channel is the channel of a [`ChannelCategory`].",69,null],[4,"PermissionOverwriteType","","The type of edit being made to a Channel's permissions.",null,null],[13,"Member","","A member which is having its permission overwrites edited.",70,null],[13,"Role","","A role which is having its permission overwrites edited.",70,null],[4,"ModelError","","An error returned from the [`model`] module.",null,null],[13,"BulkDeleteAmount","","When attempting to delete below or above the minimum and maximum allowed number of messages.",71,null],[13,"DeleteMessageDaysAmount","","When attempting to delete a number of days' worth of messages that is not allowed.",71,null],[13,"EmbedTooLarge","","Indicates that the textual content of an embed exceeds the maximum length.",71,null],[13,"GuildNotFound","","An indication that a [guild][`Guild`] could not be found by [Id][`GuildId`] in the [`Cache`].",71,null],[13,"InvalidPermissions","","Indicates that you do not have the required permissions to perform an operation.",71,null],[13,"InvalidUser","","An indicator that the [current user] can not perform an action.",71,null],[13,"ItemMissing","","An indicator that an item is missing from the [`Cache`], and the action can not be continued.",71,null],[13,"MessageTooLong","","Indicates that a [`Message`]s content was too long and will not successfully send, as the length is over 2000 codepoints, or 4000 bytes.",71,null],[13,"MessagingBot","","Indicates that the current user is attempting to Direct Message another bot user, which is disallowed by the API.",71,null],[4,"GameType","","The type of activity that is being performed when playing a game.",null,null],[13,"Playing","","An indicator that the user is playing a game.",72,null],[13,"Streaming","","An indicator that the user is streaming to a service.",72,null],[4,"Feature","","A special feature, such as for VIP guilds, that a [`Guild`] has had granted to them.",null,null],[13,"InviteSplash","","The [`Guild`] can set a custom [`splash`][`Guild::splash`] image on invite URLs.",73,null],[13,"VanityUrl","","The [`Guild`] can set a Vanity URL, which is a custom-named permanent invite code.",73,null],[13,"VipRegions","","The [`Guild`] has access to VIP voice channel regions.",73,null],[4,"Target","","Determines to what entity an action was used on.",null,null],[13,"Guild","","",74,null],[13,"Channel","","",74,null],[13,"User","","",74,null],[13,"Role","","",74,null],[13,"Invite","","",74,null],[13,"Webhook","","",74,null],[13,"Emoji","","",74,null],[4,"Action","","Determines the action that was done on a target.",null,null],[13,"GuildUpdate","","",75,null],[13,"Channel","","",75,null],[13,"ChannelOverwrite","","",75,null],[13,"Member","","",75,null],[13,"Role","","",75,null],[13,"Invite","","",75,null],[13,"Webhook","","",75,null],[13,"Emoji","","",75,null],[4,"ActionChannel","","",null,null],[13,"Create","","",76,null],[13,"Update","","",76,null],[13,"Delete","","",76,null],[4,"ActionChannelOverwrite","","",null,null],[13,"Create","","",77,null],[13,"Update","","",77,null],[13,"Delete","","",77,null],[4,"ActionMember","","",null,null],[13,"Kick","","",78,null],[13,"Prune","","",78,null],[13,"BanAdd","","",78,null],[13,"BanRemove","","",78,null],[13,"Update","","",78,null],[13,"RoleUpdate","","",78,null],[4,"ActionRole","","",null,null],[13,"Create","","",79,null],[13,"Update","","",79,null],[13,"Delete","","",79,null],[4,"ActionInvite","","",null,null],[13,"Create","","",80,null],[13,"Update","","",80,null],[13,"Delete","","",80,null],[4,"ActionWebhook","","",null,null],[13,"Create","","",81,null],[13,"Update","","",81,null],[13,"Delete","","",81,null],[4,"ActionEmoji","","",null,null],[13,"Create","","",82,null],[13,"Delete","","",82,null],[13,"Update","","",82,null],[4,"GuildStatus","","",null,null],[13,"OnlinePartialGuild","","",83,null],[13,"OnlineGuild","","",83,null],[13,"Offline","","",83,null],[4,"VerificationLevel","","The level to set as criteria prior to a user being able to send messages in a [`Guild`].",null,null],[13,"None","","Does not require any verification.",84,null],[13,"Low","","Must have a verified email on the user's Discord account.",84,null],[13,"Medium","","Must also be a registered user on Discord for longer than 5 minutes.",84,null],[13,"High","","Must also be a member of the guild for longer than 10 minutes.",84,null],[13,"Higher","","Must have a verified phone on the user's Discord account.",84,null],[4,"UserParseError","","",null,null],[13,"InvalidUsername","","",85,null],[13,"Rest","","",85,null],[4,"UserIdParseError","","",null,null],[13,"InvalidFormat","","",86,null],[4,"RoleParseError","","",null,null],[13,"NotPresentInCache","","",87,null],[13,"InvalidRole","","",87,null],[4,"RoleIdParseError","","",null,null],[13,"NotPresentInCache","","",88,null],[4,"IncidentStatus","","The type of status update during a service incident.",null,null],[13,"Identified","","",89,null],[13,"Investigating","","",89,null],[13,"Monitoring","","",89,null],[13,"Postmortem","","",89,null],[13,"Resolved","","",89,null],[4,"DefaultAvatar","","An enum that represents a default avatar.",null,null],[13,"Blurple","","The avatar when the result is `0`.",90,null],[13,"Grey","","The avatar when the result is `1`.",90,null],[13,"Green","","The avatar when the result is `2`.",90,null],[13,"Orange","","The avatar when the result is `3`.",90,null],[13,"Red","","The avatar when the result is `4`.",90,null],[4,"NotificationLevel","","Identifier for the notification level of a channel.",null,null],[13,"All","","Receive notifications for everything.",91,null],[13,"Mentions","","Receive only mentions.",91,null],[13,"Nothing","","Receive no notifications.",91,null],[13,"Parent","","Inherit the notification level from the parent setting.",91,null],[4,"OnlineStatus","","The representation of a user's status.",null,null],[13,"DoNotDisturb","","",92,null],[13,"Idle","","",92,null],[13,"Invisible","","",92,null],[13,"Offline","","",92,null],[13,"Online","","",92,null],[4,"GuildContainer","","A container for guilds.",null,null],[13,"Guild","","A guild which can have its contents directly searched.",93,null],[13,"Id","","A guild's id, which can be used to search the cache for a guild.",93,null],[4,"Region","","The name of a region that a voice server can be located in.",null,null],[13,"Amsterdam","","",94,null],[13,"Brazil","","",94,null],[13,"EuCentral","","",94,null],[13,"EuWest","","",94,null],[13,"Frankfurt","","",94,null],[13,"London","","",94,null],[13,"Sydney","","",94,null],[13,"UsCentral","","",94,null],[13,"UsEast","","",94,null],[13,"UsSouth","","",94,null],[13,"UsWest","","",94,null],[13,"VipAmsterdam","","",94,null],[13,"VipUsEast","","",94,null],[13,"VipUsWest","","",94,null],[0,"event","","All the events this library handles.",null,null],[3,"ChannelCreateEvent","serenity::model::event","Event data for the channel creation event.",null,null],[12,"channel","","The channel that was created.",95,null],[3,"ChannelDeleteEvent","","",null,null],[12,"channel","","",96,null],[3,"ChannelPinsUpdateEvent","","",null,null],[12,"channel_id","","",97,null],[12,"last_pin_timestamp","","",97,null],[3,"ChannelRecipientAddEvent","","",null,null],[12,"channel_id","","",98,null],[12,"user","","",98,null],[3,"ChannelRecipientRemoveEvent","","",null,null],[12,"channel_id","","",99,null],[12,"user","","",99,null],[3,"ChannelUpdateEvent","","",null,null],[12,"channel","","",100,null],[3,"GuildBanAddEvent","","",null,null],[12,"guild_id","","",101,null],[12,"user","","",101,null],[3,"GuildBanRemoveEvent","","",null,null],[12,"guild_id","","",102,null],[12,"user","","",102,null],[3,"GuildCreateEvent","","",null,null],[12,"guild","","",103,null],[3,"GuildDeleteEvent","","",null,null],[12,"guild","","",104,null],[3,"GuildEmojisUpdateEvent","","",null,null],[12,"emojis","","",105,null],[12,"guild_id","","",105,null],[3,"GuildIntegrationsUpdateEvent","","",null,null],[12,"guild_id","","",106,null],[3,"GuildMemberAddEvent","","",null,null],[12,"guild_id","","",107,null],[12,"member","","",107,null],[3,"GuildMemberRemoveEvent","","",null,null],[12,"guild_id","","",108,null],[12,"user","","",108,null],[3,"GuildMemberUpdateEvent","","",null,null],[12,"guild_id","","",109,null],[12,"nick","","",109,null],[12,"roles","","",109,null],[12,"user","","",109,null],[3,"GuildMembersChunkEvent","","",null,null],[12,"guild_id","","",110,null],[12,"members","","",110,null],[3,"GuildRoleCreateEvent","","",null,null],[12,"guild_id","","",111,null],[12,"role","","",111,null],[3,"GuildRoleDeleteEvent","","",null,null],[12,"guild_id","","",112,null],[12,"role_id","","",112,null],[3,"GuildRoleUpdateEvent","","",null,null],[12,"guild_id","","",113,null],[12,"role","","",113,null],[3,"GuildUnavailableEvent","","",null,null],[12,"guild_id","","",114,null],[3,"GuildUpdateEvent","","",null,null],[12,"guild","","",115,null],[3,"MessageCreateEvent","","",null,null],[12,"message","","",116,null],[3,"MessageDeleteBulkEvent","","",null,null],[12,"channel_id","","",117,null],[12,"ids","","",117,null],[3,"MessageDeleteEvent","","",null,null],[12,"channel_id","","",118,null],[12,"message_id","","",118,null],[3,"MessageUpdateEvent","","",null,null],[12,"id","","",119,null],[12,"channel_id","","",119,null],[12,"kind","","",119,null],[12,"content","","",119,null],[12,"nonce","","",119,null],[12,"tts","","",119,null],[12,"pinned","","",119,null],[12,"timestamp","","",119,null],[12,"edited_timestamp","","",119,null],[12,"author","","",119,null],[12,"mention_everyone","","",119,null],[12,"mentions","","",119,null],[12,"mention_roles","","",119,null],[12,"attachments","","",119,null],[12,"embeds","","",119,null],[3,"PresenceUpdateEvent","","",null,null],[12,"guild_id","","",120,null],[12,"presence","","",120,null],[12,"roles","","",120,null],[3,"PresencesReplaceEvent","","",null,null],[12,"presences","","",121,null],[3,"ReactionAddEvent","","",null,null],[12,"reaction","","",122,null],[3,"ReactionRemoveEvent","","",null,null],[12,"reaction","","",123,null],[3,"ReactionRemoveAllEvent","","",null,null],[12,"channel_id","","",124,null],[12,"message_id","","",124,null],[3,"ReadyEvent","","The \"Ready\" event, containing initial ready cache",null,null],[12,"ready","","",125,null],[3,"ResumedEvent","","",null,null],[12,"trace","","",126,null],[3,"TypingStartEvent","","",null,null],[12,"channel_id","","",127,null],[12,"timestamp","","",127,null],[12,"user_id","","",127,null],[3,"UnknownEvent","","",null,null],[12,"kind","","",128,null],[12,"value","","",128,null],[3,"UserUpdateEvent","","",null,null],[12,"current_user","","",129,null],[3,"VoiceServerUpdateEvent","","",null,null],[12,"channel_id","","",130,null],[12,"endpoint","","",130,null],[12,"guild_id","","",130,null],[12,"token","","",130,null],[3,"VoiceStateUpdateEvent","","",null,null],[12,"guild_id","","",131,null],[12,"voice_state","","",131,null],[3,"WebhookUpdateEvent","","",null,null],[12,"channel_id","","",132,null],[12,"guild_id","","",132,null],[3,"VoiceHeartbeat","","",null,null],[12,"heartbeat_interval","","",133,null],[3,"VoiceHello","","",null,null],[12,"heartbeat_interval","","",134,null],[12,"ip","","",134,null],[12,"modes","","",134,null],[12,"port","","",134,null],[12,"ssrc","","",134,null],[3,"VoiceSessionDescription","","",null,null],[12,"mode","","",135,null],[12,"secret_key","","",135,null],[3,"VoiceSpeaking","","",null,null],[12,"speaking","","",136,null],[12,"ssrc","","",136,null],[12,"user_id","","",136,null],[4,"GatewayEvent","","",null,null],[13,"Dispatch","","",137,null],[13,"Heartbeat","","",137,null],[13,"Reconnect","","",137,null],[13,"InvalidateSession","","",137,null],[13,"Hello","","",137,null],[13,"HeartbeatAck","","",137,null],[4,"Event","","Event received over a websocket connection",null,null],[13,"ChannelCreate","","A [`Channel`] was created.",138,null],[13,"ChannelDelete","","A [`Channel`] has been deleted.",138,null],[13,"ChannelPinsUpdate","","The pins for a [`Channel`] have been updated.",138,null],[13,"ChannelRecipientAdd","","A [`User`] has been added to a [`Group`].",138,null],[13,"ChannelRecipientRemove","","A [`User`] has been removed from a [`Group`].",138,null],[13,"ChannelUpdate","","A [`Channel`] has been updated.",138,null],[13,"GuildBanAdd","","",138,null],[13,"GuildBanRemove","","",138,null],[13,"GuildCreate","","",138,null],[13,"GuildDelete","","",138,null],[13,"GuildEmojisUpdate","","",138,null],[13,"GuildIntegrationsUpdate","","",138,null],[13,"GuildMemberAdd","","",138,null],[13,"GuildMemberRemove","","",138,null],[13,"GuildMemberUpdate","","A member's roles have changed",138,null],[13,"GuildMembersChunk","","",138,null],[13,"GuildRoleCreate","","",138,null],[13,"GuildRoleDelete","","",138,null],[13,"GuildRoleUpdate","","",138,null],[13,"GuildUnavailable","","When a guild is unavailable, such as due to a Discord server outage.",138,null],[13,"GuildUpdate","","",138,null],[13,"MessageCreate","","",138,null],[13,"MessageDelete","","",138,null],[13,"MessageDeleteBulk","","",138,null],[13,"MessageUpdate","","A message has been edited, either by the user or the system",138,null],[13,"PresenceUpdate","","A member's presence state (or username or avatar) has changed",138,null],[13,"PresencesReplace","","The precense list of the user's friends should be replaced entirely",138,null],[13,"ReactionAdd","","A reaction was added to a message.",138,null],[13,"ReactionRemove","","A reaction was removed to a message.",138,null],[13,"ReactionRemoveAll","","A request was issued to remove all [`Reaction`]s from a [`Message`].",138,null],[13,"Ready","","The first event in a connection, containing the initial ready cache.",138,null],[13,"Resumed","","The connection has successfully resumed after a disconnect.",138,null],[13,"TypingStart","","A user is typing; considered to last 5 seconds",138,null],[13,"UserUpdate","","Update to the logged-in user's information",138,null],[13,"VoiceStateUpdate","","A member's voice state has changed",138,null],[13,"VoiceServerUpdate","","Voice server information is available",138,null],[13,"WebhookUpdate","","A webhook for a [channel][`GuildChannel`] was updated in a [`Guild`].",138,null],[13,"Unknown","","An event type not covered by the above",138,null],[4,"VoiceEvent","","A representation of data received for [`voice`] events.",null,null],[13,"Heartbeat","","A voice heartbeat.",139,null],[13,"Hello","","A \"hello\" was received with initial voice data, such as the [`heartbeat_interval`].",139,null],[13,"KeepAlive","","A simple keepalive event.",139,null],[13,"Ready","","A voice event describing the current session.",139,null],[13,"Speaking","","A voice event denoting that someone is speaking.",139,null],[13,"Unknown","","An unknown voice event not registered.",139,null],[11,"clone","","",95,{"inputs":[{"name":"self"}],"output":{"name":"channelcreateevent"}}],[11,"fmt","","",95,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deserialize","","",95,{"inputs":[{"name":"d"}],"output":{"name":"stdresult"}}],[11,"clone","","",96,{"inputs":[{"name":"self"}],"output":{"name":"channeldeleteevent"}}],[11,"fmt","","",96,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deserialize","","",96,{"inputs":[{"name":"d"}],"output":{"name":"stdresult"}}],[11,"clone","","",97,{"inputs":[{"name":"self"}],"output":{"name":"channelpinsupdateevent"}}],[11,"fmt","","",97,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",98,{"inputs":[{"name":"self"}],"output":{"name":"channelrecipientaddevent"}}],[11,"fmt","","",98,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",99,{"inputs":[{"name":"self"}],"output":{"name":"channelrecipientremoveevent"}}],[11,"fmt","","",99,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",100,{"inputs":[{"name":"self"}],"output":{"name":"channelupdateevent"}}],[11,"fmt","","",100,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deserialize","","",100,{"inputs":[{"name":"d"}],"output":{"name":"stdresult"}}],[11,"clone","","",101,{"inputs":[{"name":"self"}],"output":{"name":"guildbanaddevent"}}],[11,"fmt","","",101,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",102,{"inputs":[{"name":"self"}],"output":{"name":"guildbanremoveevent"}}],[11,"fmt","","",102,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",103,{"inputs":[{"name":"self"}],"output":{"name":"guildcreateevent"}}],[11,"fmt","","",103,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deserialize","","",103,{"inputs":[{"name":"d"}],"output":{"name":"stdresult"}}],[11,"clone","","",104,{"inputs":[{"name":"self"}],"output":{"name":"guilddeleteevent"}}],[11,"fmt","","",104,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deserialize","","",104,{"inputs":[{"name":"d"}],"output":{"name":"stdresult"}}],[11,"clone","","",105,{"inputs":[{"name":"self"}],"output":{"name":"guildemojisupdateevent"}}],[11,"fmt","","",105,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",106,{"inputs":[{"name":"self"}],"output":{"name":"guildintegrationsupdateevent"}}],[11,"fmt","","",106,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",107,{"inputs":[{"name":"self"}],"output":{"name":"guildmemberaddevent"}}],[11,"fmt","","",107,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deserialize","","",107,{"inputs":[{"name":"d"}],"output":{"name":"stdresult"}}],[11,"clone","","",108,{"inputs":[{"name":"self"}],"output":{"name":"guildmemberremoveevent"}}],[11,"fmt","","",108,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",109,{"inputs":[{"name":"self"}],"output":{"name":"guildmemberupdateevent"}}],[11,"fmt","","",109,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",110,{"inputs":[{"name":"self"}],"output":{"name":"guildmemberschunkevent"}}],[11,"fmt","","",110,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deserialize","","",110,{"inputs":[{"name":"d"}],"output":{"name":"stdresult"}}],[11,"clone","","",111,{"inputs":[{"name":"self"}],"output":{"name":"guildrolecreateevent"}}],[11,"fmt","","",111,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",112,{"inputs":[{"name":"self"}],"output":{"name":"guildroledeleteevent"}}],[11,"fmt","","",112,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",113,{"inputs":[{"name":"self"}],"output":{"name":"guildroleupdateevent"}}],[11,"fmt","","",113,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",114,{"inputs":[{"name":"self"}],"output":{"name":"guildunavailableevent"}}],[11,"fmt","","",114,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",115,{"inputs":[{"name":"self"}],"output":{"name":"guildupdateevent"}}],[11,"fmt","","",115,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deserialize","","",115,{"inputs":[{"name":"d"}],"output":{"name":"stdresult"}}],[11,"clone","","",116,{"inputs":[{"name":"self"}],"output":{"name":"messagecreateevent"}}],[11,"fmt","","",116,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deserialize","","",116,{"inputs":[{"name":"d"}],"output":{"name":"stdresult"}}],[11,"clone","","",117,{"inputs":[{"name":"self"}],"output":{"name":"messagedeletebulkevent"}}],[11,"fmt","","",117,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",118,{"inputs":[{"name":"self"}],"output":{"name":"messagedeleteevent"}}],[11,"fmt","","",118,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",119,{"inputs":[{"name":"self"}],"output":{"name":"messageupdateevent"}}],[11,"fmt","","",119,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",120,{"inputs":[{"name":"self"}],"output":{"name":"presenceupdateevent"}}],[11,"fmt","","",120,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deserialize","","",120,{"inputs":[{"name":"d"}],"output":{"name":"stdresult"}}],[11,"clone","","",121,{"inputs":[{"name":"self"}],"output":{"name":"presencesreplaceevent"}}],[11,"fmt","","",121,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deserialize","","",121,{"inputs":[{"name":"d"}],"output":{"name":"stdresult"}}],[11,"clone","","",122,{"inputs":[{"name":"self"}],"output":{"name":"reactionaddevent"}}],[11,"fmt","","",122,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deserialize","","",122,{"inputs":[{"name":"d"}],"output":{"name":"stdresult"}}],[11,"clone","","",123,{"inputs":[{"name":"self"}],"output":{"name":"reactionremoveevent"}}],[11,"fmt","","",123,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deserialize","","",123,{"inputs":[{"name":"d"}],"output":{"name":"stdresult"}}],[11,"clone","","",124,{"inputs":[{"name":"self"}],"output":{"name":"reactionremoveallevent"}}],[11,"fmt","","",124,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",125,{"inputs":[{"name":"self"}],"output":{"name":"readyevent"}}],[11,"fmt","","",125,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deserialize","","",125,{"inputs":[{"name":"d"}],"output":{"name":"stdresult"}}],[11,"clone","","",126,{"inputs":[{"name":"self"}],"output":{"name":"resumedevent"}}],[11,"fmt","","",126,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",127,{"inputs":[{"name":"self"}],"output":{"name":"typingstartevent"}}],[11,"fmt","","",127,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",128,{"inputs":[{"name":"self"}],"output":{"name":"unknownevent"}}],[11,"fmt","","",128,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",129,{"inputs":[{"name":"self"}],"output":{"name":"userupdateevent"}}],[11,"fmt","","",129,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deserialize","","",129,{"inputs":[{"name":"d"}],"output":{"name":"stdresult"}}],[11,"clone","","",130,{"inputs":[{"name":"self"}],"output":{"name":"voiceserverupdateevent"}}],[11,"fmt","","",130,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",131,{"inputs":[{"name":"self"}],"output":{"name":"voicestateupdateevent"}}],[11,"fmt","","",131,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deserialize","","",131,{"inputs":[{"name":"d"}],"output":{"name":"stdresult"}}],[11,"clone","","",132,{"inputs":[{"name":"self"}],"output":{"name":"webhookupdateevent"}}],[11,"fmt","","",132,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",137,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",137,{"inputs":[{"name":"self"}],"output":{"name":"gatewayevent"}}],[11,"decode","","",137,{"inputs":[{"name":"value"}],"output":{"name":"result"}}],[11,"clone","","",138,{"inputs":[{"name":"self"}],"output":{"name":"event"}}],[11,"fmt","","",138,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",133,{"inputs":[{"name":"self"}],"output":{"name":"voiceheartbeat"}}],[11,"fmt","","",133,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",134,{"inputs":[{"name":"self"}],"output":{"name":"voicehello"}}],[11,"fmt","","",134,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",135,{"inputs":[{"name":"self"}],"output":{"name":"voicesessiondescription"}}],[11,"fmt","","",135,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",136,{"inputs":[{"name":"self"}],"output":{"name":"voicespeaking"}}],[11,"fmt","","",136,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",139,{"inputs":[{"name":"self"}],"output":{"name":"voiceevent"}}],[11,"fmt","","",139,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"permissions","serenity::model","A set of permissions for a role or user. These can be assigned directly to a role or as a channel's permission overrides.",null,null],[3,"Permissions","serenity::model::permissions","A set of permissions that can be assigned to [`User`]s and [`Role`]s via [`PermissionOverwrite`]s, roles globally in a [`Guild`], and to [`GuildChannel`]s.",null,null],[17,"PRESET_GENERAL","","Returns a set of permissions with the original @everyone permissions set to true.",null,null],[17,"PRESET_TEXT","","Returns a set of text-only permissions with the original `@everyone` permissions set to true.",null,null],[17,"PRESET_VOICE","","Returns a set of voice-only permissions with the original `@everyone` permissions set to true.",null,null],[11,"eq","","",140,{"inputs":[{"name":"self"},{"name":"permissions"}],"output":{"name":"bool"}}],[11,"ne","","",140,{"inputs":[{"name":"self"},{"name":"permissions"}],"output":{"name":"bool"}}],[11,"clone","","",140,{"inputs":[{"name":"self"}],"output":{"name":"permissions"}}],[11,"partial_cmp","","",140,{"inputs":[{"name":"self"},{"name":"permissions"}],"output":{"name":"option"}}],[11,"lt","","",140,{"inputs":[{"name":"self"},{"name":"permissions"}],"output":{"name":"bool"}}],[11,"le","","",140,{"inputs":[{"name":"self"},{"name":"permissions"}],"output":{"name":"bool"}}],[11,"gt","","",140,{"inputs":[{"name":"self"},{"name":"permissions"}],"output":{"name":"bool"}}],[11,"ge","","",140,{"inputs":[{"name":"self"},{"name":"permissions"}],"output":{"name":"bool"}}],[11,"cmp","","",140,{"inputs":[{"name":"self"},{"name":"permissions"}],"output":{"name":"ordering"}}],[11,"hash","","",140,null],[11,"fmt","","",140,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",140,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",140,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",140,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",140,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"CREATE_INVITE","","Allows for the creation of [`RichInvite`]s.",140,null],[18,"KICK_MEMBERS","","Allows for the kicking of guild [member]s.",140,null],[18,"BAN_MEMBERS","","Allows the banning of guild [member]s.",140,null],[18,"ADMINISTRATOR","","Allows all permissions, bypassing channel [permission overwrite]s.",140,null],[18,"MANAGE_CHANNELS","","Allows management and editing of guild [channel]s.",140,null],[18,"MANAGE_GUILD","","Allows management and editing of the [guild].",140,null],[18,"ADD_REACTIONS","","[`Member`]s with this permission can add new [`Reaction`]s to a [`Message`]. Members can still react using reactions already added to messages without this permission.",140,null],[18,"READ_MESSAGES","","Allows reading messages in a guild channel. If a user does not have this permission, then they will not be able to see the channel.",140,null],[18,"SEND_MESSAGES","","Allows sending messages in a guild channel.",140,null],[18,"SEND_TTS_MESSAGES","","Allows the sending of text-to-speech messages in a channel.",140,null],[18,"MANAGE_MESSAGES","","Allows the deleting of other messages in a guild channel.",140,null],[18,"EMBED_LINKS","","Allows links from this user - or users of this role - to be embedded, with potential data such as a thumbnail, description, and page name.",140,null],[18,"ATTACH_FILES","","Allows uploading of files.",140,null],[18,"READ_MESSAGE_HISTORY","","Allows the reading of a channel's message history.",140,null],[18,"MENTION_EVERYONE","","Allows the usage of the `@everyone` mention, which will notify all users in a channel. The `@here` mention will also be available, and can be used to mention all non-offline users.",140,null],[18,"USE_EXTERNAL_EMOJIS","","Allows the usage of custom emojis from other guilds.",140,null],[18,"CONNECT","","Allows the joining of a voice channel.",140,null],[18,"SPEAK","","Allows the user to speak in a voice channel.",140,null],[18,"MUTE_MEMBERS","","Allows the muting of members in a voice channel.",140,null],[18,"DEAFEN_MEMBERS","","Allows the deafening of members in a voice channel.",140,null],[18,"MOVE_MEMBERS","","Allows the moving of members from one voice channel to another.",140,null],[18,"USE_VAD","","Allows the usage of voice-activity-detection in a [voice] channel.",140,null],[18,"CHANGE_NICKNAME","","Allows members to change their own nickname in the guild.",140,null],[18,"MANAGE_NICKNAMES","","Allows members to change other members' nicknames.",140,null],[18,"MANAGE_ROLES","","Allows management and editing of roles below their own.",140,null],[18,"MANAGE_WEBHOOKS","","Allows management of webhooks.",140,null],[18,"MANAGE_EMOJIS","","Allows management of emojis created without the use of an [`Integration`].",140,null],[11,"empty","","Returns an empty set of flags.",140,{"inputs":[],"output":{"name":"permissions"}}],[11,"all","","Returns the set containing all flags.",140,{"inputs":[],"output":{"name":"permissions"}}],[11,"bits","","Returns the raw value of the flags currently stored.",140,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",140,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",140,{"inputs":[{"name":"u64"}],"output":{"name":"permissions"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",140,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",140,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",140,{"inputs":[{"name":"self"},{"name":"permissions"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",140,{"inputs":[{"name":"self"},{"name":"permissions"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",140,{"inputs":[{"name":"self"},{"name":"permissions"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",140,{"inputs":[{"name":"self"},{"name":"permissions"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",140,{"inputs":[{"name":"self"},{"name":"permissions"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",140,{"inputs":[{"name":"self"},{"name":"permissions"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",140,{"inputs":[{"name":"self"},{"name":"permissions"}],"output":{"name":"permissions"}}],[11,"bitor_assign","","Adds the set of flags.",140,{"inputs":[{"name":"self"},{"name":"permissions"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",140,{"inputs":[{"name":"self"},{"name":"permissions"}],"output":{"name":"permissions"}}],[11,"bitxor_assign","","Toggles the set of flags.",140,{"inputs":[{"name":"self"},{"name":"permissions"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",140,{"inputs":[{"name":"self"},{"name":"permissions"}],"output":{"name":"permissions"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",140,{"inputs":[{"name":"self"},{"name":"permissions"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",140,{"inputs":[{"name":"self"},{"name":"permissions"}],"output":{"name":"permissions"}}],[11,"sub_assign","","Disables all flags enabled in the set.",140,{"inputs":[{"name":"self"},{"name":"permissions"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",140,{"inputs":[{"name":"self"}],"output":{"name":"permissions"}}],[11,"extend","","",140,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",140,{"inputs":[{"name":"t"}],"output":{"name":"permissions"}}],[11,"add_reactions","","Shorthand for checking that the set of permissions contains the [Add Reactions] permission.",140,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"administrator","","Shorthand for checking that the set of permissions contains the [Administrator] permission.",140,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"attach_files","","Shorthand for checking that the set of permissions contains the [Attach Files] permission.",140,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"ban_members","","Shorthand for checking that the set of permissions contains the [Ban Members] permission.",140,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"change_nickname","","Shorthand for checking that the set of permissions contains the [Change Nickname] permission.",140,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"connect","","Shorthand for checking that the set of permissions contains the [Connect] permission.",140,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"create_invite","","Shorthand for checking that the set of permissions contains the [Create Invite] permission.",140,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"deafen_members","","Shorthand for checking that the set of permissions contains the [Deafen Members] permission.",140,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"embed_links","","Shorthand for checking that the set of permissions contains the [Embed Links] permission.",140,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"external_emojis","","Shorthand for checking that the set of permissions contains the [Use External Emojis] permission.",140,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"kick_members","","Shorthand for checking that the set of permissions contains the [Kick Members] permission.",140,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"manage_channels","","Shorthand for checking that the set of permissions contains the [Manage Channels] permission.",140,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"manage_emojis","","Shorthand for checking that the set of permissions contains the [Manage Emojis] permission.",140,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"manage_guild","","Shorthand for checking that the set of permissions contains the [Manage Guild] permission.",140,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"manage_messages","","Shorthand for checking that the set of permissions contains the [Manage Messages] permission.",140,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"manage_nicknames","","Shorthand for checking that the set of permissions contains the [Manage Nicknames] permission.",140,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"manage_roles","","Shorthand for checking that the set of permissions contains the [Manage Roles] permission.",140,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"manage_webhooks","","Shorthand for checking that the set of permissions contains the [Manage Webhooks] permission.",140,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"mention_everyone","","Shorthand for checking that the set of permissions contains the [Mention Everyone] permission.",140,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"move_members","","Shorthand for checking that the set of permissions contains the [Move Members] permission.",140,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"mute_members","","Shorthand for checking that the set of permissions contains the [Mute Members] permission.",140,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"read_message_history","","Shorthand for checking that the set of permissions contains the [Read Message History] permission.",140,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"read_messages","","Shorthand for checking that the set of permissions contains the [Read Messages] permission.",140,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"send_messages","","Shorthand for checking that the set of permissions contains the [Send Messages] permission.",140,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"send_tts_messages","","Shorthand for checking that the set of permissions contains the [Send TTS Messages] permission.",140,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"speak","","Shorthand for checking that the set of permissions contains the [Speak] permission.",140,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"use_external_emojis","","Shorthand for checking that the set of permissions contains the [Use External Emojis] permission.",140,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"use_vad","","Shorthand for checking that the set of permissions contains the [Use VAD] permission.",140,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"deserialize","","",140,{"inputs":[{"name":"d"}],"output":{"name":"stdresult"}}],[11,"clone","serenity::model","",3,{"inputs":[{"name":"self"}],"output":{"name":"attachment"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"dimensions","","If this attachment is an image, then a tuple of the width and height in pixels is returned.",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"download","","Downloads the attachment, returning back a vector of bytes.",3,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"broadcast_typing","","Broadcasts that the current user is typing to a channel for the next 5 seconds.",54,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"create_permission","","Creates a [permission overwrite][`PermissionOverwrite`] for either a single [`Member`] or [`Role`] within the channel.",54,{"inputs":[{"name":"self"},{"name":"permissionoverwrite"}],"output":{"name":"result"}}],[11,"create_reaction","","React to a [`Message`] with a custom [`Emoji`] or unicode character.",54,{"inputs":[{"name":"self"},{"name":"m"},{"name":"r"}],"output":{"name":"result"}}],[11,"delete","","Deletes this channel, returning the channel on a successful deletion.",54,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"delete_message","","Deletes a [`Message`] given its Id.",54,{"inputs":[{"name":"self"},{"name":"m"}],"output":{"name":"result"}}],[11,"delete_messages","","Deletes all messages by Ids from the given vector in the given channel.",54,null],[11,"delete_permission","","Deletes all permission overrides in the channel from a member or role.",54,{"inputs":[{"name":"self"},{"name":"permissionoverwritetype"}],"output":{"name":"result"}}],[11,"delete_reaction","","Deletes the given [`Reaction`] from the channel.",54,{"inputs":[{"name":"self"},{"name":"m"},{"name":"option"},{"name":"r"}],"output":{"name":"result"}}],[11,"edit","","Edits the settings of a [`Channel`], optionally setting new values.",54,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"edit_message","","Edits a [`Message`] in the channel given its Id.",54,{"inputs":[{"name":"self"},{"name":"m"},{"name":"f"}],"output":{"name":"result"}}],[11,"find","","Search the cache for the channel with the Id.",54,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"get","","Search the cache for the channel. If it can't be found, the channel is requested over REST.",54,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"invites","","Gets all of the channel's invites.",54,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"message","","Gets a message from the channel.",54,{"inputs":[{"name":"self"},{"name":"m"}],"output":{"name":"result"}}],[11,"messages","","Gets messages from the channel.",54,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"name","","Returns the name of whatever channel this id holds.",54,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"pin","","Pins a [`Message`] to the channel.",54,{"inputs":[{"name":"self"},{"name":"m"}],"output":{"name":"result"}}],[11,"pins","","Gets the list of [`Message`]s which are pinned to the channel.",54,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"reaction_users","","Gets the list of [`User`]s who have reacted to a [`Message`] with a certain [`Emoji`].",54,{"inputs":[{"name":"self"},{"name":"m"},{"name":"r"},{"name":"option"},{"name":"option"}],"output":{"name":"result"}}],[11,"say","","Sends a message with just the given message content in the channel.",54,{"inputs":[{"name":"self"},{"name":"d"}],"output":{"name":"result"}}],[11,"send_files","","Sends a file along with optional message contents. The filename must be specified.",54,{"inputs":[{"name":"self"},{"name":"vec"},{"name":"f"}],"output":{"name":"result"}}],[11,"send_message","","Sends a message to the channel.",54,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"unpin","","Unpins a [`Message`] in the channel given by its Id.",54,{"inputs":[{"name":"self"},{"name":"m"}],"output":{"name":"result"}}],[11,"webhooks","","Retrieves the channel's webhooks.",54,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"from","","Gets the Id of a `Channel`.",54,{"inputs":[{"name":"channel"}],"output":{"name":"channelid"}}],[11,"from","","Gets the Id of a `Channel`.",54,{"inputs":[{"name":"channel"}],"output":{"name":"channelid"}}],[11,"from","","Gets the Id of a private channel.",54,{"inputs":[{"name":"privatechannel"}],"output":{"name":"channelid"}}],[11,"from","","Gets the Id of a private channel.",54,{"inputs":[{"name":"privatechannel"}],"output":{"name":"channelid"}}],[11,"from","","Gets the Id of a guild channel.",54,{"inputs":[{"name":"guildchannel"}],"output":{"name":"channelid"}}],[11,"from","","Gets the Id of a guild channel.",54,{"inputs":[{"name":"guildchannel"}],"output":{"name":"channelid"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"embed"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fake","","Creates a fake Embed, giving back a `serde_json` map.",4,{"inputs":[{"name":"f"}],"output":{"name":"value"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"embedauthor"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"embedfield"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"embedfooter"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"embedimage"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"embedprovider"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"embedthumbnail"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"embedvideo"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"group"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"add_recipient","","Adds the given user to the group. If the user is already in the group, then nothing is done.",12,{"inputs":[{"name":"self"},{"name":"u"}],"output":{"name":"result"}}],[11,"broadcast_typing","","Broadcasts that the current user is typing in the group.",12,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"create_reaction","","React to a [`Message`] with a custom [`Emoji`] or unicode character.",12,{"inputs":[{"name":"self"},{"name":"m"},{"name":"r"}],"output":{"name":"result"}}],[11,"delete_messages","","Deletes all messages by Ids from the given vector in the channel.",12,null],[11,"delete_permission","","Deletes all permission overrides in the channel from a member or role.",12,{"inputs":[{"name":"self"},{"name":"permissionoverwritetype"}],"output":{"name":"result"}}],[11,"delete_reaction","","Deletes the given [`Reaction`] from the channel.",12,{"inputs":[{"name":"self"},{"name":"m"},{"name":"option"},{"name":"r"}],"output":{"name":"result"}}],[11,"edit_message","","Edits a [`Message`] in the channel given its Id.",12,{"inputs":[{"name":"self"},{"name":"m"},{"name":"f"}],"output":{"name":"result"}}],[11,"icon_url","","Returns the formatted URI of the group's icon if one exists.",12,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_nsfw","","Determines if the channel is NSFW.",12,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"leave","","Leaves the group.",12,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"message","","Gets a message from the channel.",12,{"inputs":[{"name":"self"},{"name":"m"}],"output":{"name":"result"}}],[11,"messages","","Gets messages from the channel.",12,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"name","","Generates a name for the group.",12,{"inputs":[{"name":"self"}],"output":{"name":"cow"}}],[11,"pins","","Retrieves the list of messages that have been pinned in the group.",12,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"reaction_users","","Gets the list of [`User`]s who have reacted to a [`Message`] with a certain [`Emoji`].",12,{"inputs":[{"name":"self"},{"name":"m"},{"name":"r"},{"name":"option"},{"name":"option"}],"output":{"name":"result"}}],[11,"remove_recipient","","Removes a recipient from the group. If the recipient is already not in the group, then nothing is done.",12,{"inputs":[{"name":"self"},{"name":"u"}],"output":{"name":"result"}}],[11,"say","","Sends a message with just the given message content in the channel.",12,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"send_files","","Sends (a) file(s) along with optional message contents.",12,{"inputs":[{"name":"self"},{"name":"vec"},{"name":"f"}],"output":{"name":"result"}}],[11,"send_message","","Sends a message to the group with the given content.",12,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"unpin","","Unpins a [`Message`] in the channel given by its Id.",12,{"inputs":[{"name":"self"},{"name":"m"}],"output":{"name":"result"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"guildchannel"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"broadcast_typing","","Broadcasts to the channel that the current user is typing.",13,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"create_invite","","Creates an invite leading to the given channel.",13,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"create_permission","","Creates a [permission overwrite][`PermissionOverwrite`] for either a single [`Member`] or [`Role`] within a [`Channel`].",13,{"inputs":[{"name":"self"},{"name":"permissionoverwrite"}],"output":{"name":"result"}}],[11,"delete","","Deletes this channel, returning the channel on a successful deletion.",13,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"delete_messages","","Deletes all messages by Ids from the given vector in the channel.",13,null],[11,"delete_permission","","Deletes all permission overrides in the channel from a member or role.",13,{"inputs":[{"name":"self"},{"name":"permissionoverwritetype"}],"output":{"name":"result"}}],[11,"delete_reaction","","Deletes the given [`Reaction`] from the channel.",13,{"inputs":[{"name":"self"},{"name":"m"},{"name":"option"},{"name":"r"}],"output":{"name":"result"}}],[11,"edit","","Modifies a channel's settings, such as its position or name.",13,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"edit_message","","Edits a [`Message`] in the channel given its Id.",13,{"inputs":[{"name":"self"},{"name":"m"},{"name":"f"}],"output":{"name":"result"}}],[11,"guild","","Attempts to find this channel's guild in the Cache.",13,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"invites","","Gets all of the channel's invites.",13,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"is_nsfw","","Determines if the channel is NSFW.",13,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"message","","Gets a message from the channel.",13,{"inputs":[{"name":"self"},{"name":"m"}],"output":{"name":"result"}}],[11,"messages","","Gets messages from the channel.",13,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"name","","Returns the name of the guild channel.",13,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"permissions_for","","Calculates the permissions of a member.",13,{"inputs":[{"name":"self"},{"name":"u"}],"output":{"name":"result"}}],[11,"pin","","Pins a [`Message`] to the channel.",13,{"inputs":[{"name":"self"},{"name":"m"}],"output":{"name":"result"}}],[11,"pins","","Gets all channel's pins.",13,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"reaction_users","","Gets the list of [`User`]s who have reacted to a [`Message`] with a certain [`Emoji`].",13,{"inputs":[{"name":"self"},{"name":"m"},{"name":"r"},{"name":"option"},{"name":"option"}],"output":{"name":"result"}}],[11,"say","","Sends a message with just the given message content in the channel.",13,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"send_files","","Sends (a) file(s) along with optional message contents.",13,{"inputs":[{"name":"self"},{"name":"vec"},{"name":"f"}],"output":{"name":"result"}}],[11,"send_message","","Sends a message to the channel with the given content.",13,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"unpin","","Unpins a [`Message`] in the channel given by its Id.",13,{"inputs":[{"name":"self"},{"name":"m"}],"output":{"name":"result"}}],[11,"webhooks","","Retrieves the channel's webhooks.",13,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","","Formats the channel, creating a mention of it.",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"fmtresult"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"message"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"channel","","Retrieves the related channel located in the cache.",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_own","","A util function for determining whether this message was sent by someone else, or the bot.",14,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"delete","","Deletes the message.",14,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"delete_reactions","","Deletes all of the [`Reaction`]s associated with the message.",14,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"edit","","Edits this message, replacing the original content with new content.",14,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"content_safe","","Returns message content, but with user and role mentions replaced with names and everyone/here mentions cancelled.",14,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"reaction_users","","Gets the list of [`User`]s who have reacted to a [`Message`] with a certain [`Emoji`].",14,{"inputs":[{"name":"self"},{"name":"r"},{"name":"option"},{"name":"option"}],"output":{"name":"result"}}],[11,"guild","","Returns the associated `Guild` for the message if one is in the cache.",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"guild_id","","Retrieves the Id of the guild that the message was sent in, if sent in one.",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_private","","True if message was sent using direct messages.",14,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"overflow_length","","Checks the length of a string to ensure that it is within Discord's maximum message length limit.",14,{"inputs":[{"name":"str"}],"output":{"name":"option"}}],[11,"pin","","Pins this message to its channel.",14,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"react","","React to the message with a custom [`Emoji`] or unicode character.",14,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"result"}}],[11,"reply","","Replies to the user, mentioning them prior to the content in the form of: `@<USER_ID>: YOUR_CONTENT`.",14,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"unpin","","Unpins the message from its channel.",14,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"from","","Gets the Id of a `Message`.",58,{"inputs":[{"name":"message"}],"output":{"name":"messageid"}}],[11,"from","","Gets the Id of a `Message`.",58,{"inputs":[{"name":"message"}],"output":{"name":"messageid"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"messagereaction"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",66,{"inputs":[{"name":"self"}],"output":{"name":"messagetype"}}],[11,"fmt","","",66,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",66,null],[11,"eq","","",66,{"inputs":[{"name":"self"},{"name":"messagetype"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",66,{"inputs":[{"name":"self"},{"name":"messagetype"}],"output":{"name":"option"}}],[11,"cmp","","",66,{"inputs":[{"name":"self"},{"name":"messagetype"}],"output":{"name":"ordering"}}],[11,"serialize","","",66,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",66,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"privatechannel"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"broadcast_typing","","Broadcasts that the current user is typing to the recipient.",16,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"create_reaction","","React to a [`Message`] with a custom [`Emoji`] or unicode character.",16,{"inputs":[{"name":"self"},{"name":"m"},{"name":"r"}],"output":{"name":"result"}}],[11,"delete","","Deletes the channel. This does not delete the contents of the channel, and is equivalent to closing a private channel on the client, which can be re-opened.",16,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"delete_messages","","Deletes all messages by Ids from the given vector in the channel.",16,null],[11,"delete_permission","","Deletes all permission overrides in the channel from a member or role.",16,{"inputs":[{"name":"self"},{"name":"permissionoverwritetype"}],"output":{"name":"result"}}],[11,"delete_reaction","","Deletes the given [`Reaction`] from the channel.",16,{"inputs":[{"name":"self"},{"name":"m"},{"name":"option"},{"name":"r"}],"output":{"name":"result"}}],[11,"edit_message","","Edits a [`Message`] in the channel given its Id.",16,{"inputs":[{"name":"self"},{"name":"m"},{"name":"f"}],"output":{"name":"result"}}],[11,"is_nsfw","","Determines if the channel is NSFW.",16,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"message","","Gets a message from the channel.",16,{"inputs":[{"name":"self"},{"name":"m"}],"output":{"name":"result"}}],[11,"messages","","Gets messages from the channel.",16,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"name","","Returns \"DM with $username#discriminator\".",16,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"reaction_users","","Gets the list of [`User`]s who have reacted to a [`Message`] with a certain [`Emoji`].",16,{"inputs":[{"name":"self"},{"name":"m"},{"name":"r"},{"name":"option"},{"name":"option"}],"output":{"name":"result"}}],[11,"pin","","Pins a [`Message`] to the channel.",16,{"inputs":[{"name":"self"},{"name":"m"}],"output":{"name":"result"}}],[11,"pins","","Retrieves the list of messages that have been pinned in the private channel.",16,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"say","","Sends a message with just the given message content in the channel.",16,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"send_files","","Sends (a) file(s) along with optional message contents.",16,{"inputs":[{"name":"self"},{"name":"vec"},{"name":"f"}],"output":{"name":"result"}}],[11,"send_message","","Sends a message to the channel with the given content.",16,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"unpin","","Unpins a [`Message`] in the channel given by its Id.",16,{"inputs":[{"name":"self"},{"name":"m"}],"output":{"name":"result"}}],[11,"fmt","","Formats the private channel, displaying the recipient's username.",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"fmtresult"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"reaction"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"delete","","Deletes the reaction, but only if the current user is the user who made the reaction or has permission to.",17,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"users","","Retrieves the list of [`User`]s who have reacted to a [`Message`] with a certain [`Emoji`].",17,{"inputs":[{"name":"self"},{"name":"r"},{"name":"option"},{"name":"option"}],"output":{"name":"result"}}],[11,"clone","","",67,{"inputs":[{"name":"self"}],"output":{"name":"reactiontype"}}],[11,"fmt","","",67,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",67,{"inputs":[{"name":"self"},{"name":"reactiontype"}],"output":{"name":"bool"}}],[11,"ne","","",67,{"inputs":[{"name":"self"},{"name":"reactiontype"}],"output":{"name":"bool"}}],[11,"hash","","",67,null],[11,"deserialize","","",67,{"inputs":[{"name":"d"}],"output":{"name":"stdresult"}}],[11,"as_data","","Creates a data-esque display of the type. This is not very useful for displaying, as the primary client can not render it, but can be useful for debugging.",67,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"from","","Creates a `ReactionType` from a `char`.",67,{"inputs":[{"name":"char"}],"output":{"name":"reactiontype"}}],[11,"from","","",67,{"inputs":[{"name":"emoji"}],"output":{"name":"reactiontype"}}],[11,"from","","",67,{"inputs":[{"name":"string"}],"output":{"name":"reactiontype"}}],[11,"from","","Creates a `ReactionType` from a string slice.",67,{"inputs":[{"name":"str"}],"output":{"name":"reactiontype"}}],[11,"fmt","","Formats the reaction type, displaying the associated emoji in a way that clients can understand.",67,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"fmtresult"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"channelcategory"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"create_permission","","Adds a permission overwrite to the category's channels.",18,{"inputs":[{"name":"self"},{"name":"permissionoverwrite"}],"output":{"name":"result"}}],[11,"delete_permission","","Deletes all permission overrides in the category from the channels.",18,{"inputs":[{"name":"self"},{"name":"permissionoverwritetype"}],"output":{"name":"result"}}],[11,"delete","","Deletes this category.",18,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"edit","","Modifies the category's settings, such as its position or name.",18,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"is_nsfw","","",18,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"name","","Returns the name of the category.",18,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clone","","",68,{"inputs":[{"name":"self"}],"output":{"name":"channel"}}],[11,"fmt","","",68,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"create_reaction","","React to a [`Message`] with a custom [`Emoji`] or unicode character.",68,{"inputs":[{"name":"self"},{"name":"m"},{"name":"r"}],"output":{"name":"result"}}],[11,"delete","","Deletes the inner channel.",68,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"delete_message","","Deletes a [`Message`] given its Id.",68,{"inputs":[{"name":"self"},{"name":"m"}],"output":{"name":"result"}}],[11,"delete_reaction","","Deletes the given [`Reaction`] from the channel.",68,{"inputs":[{"name":"self"},{"name":"m"},{"name":"option"},{"name":"r"}],"output":{"name":"result"}}],[11,"edit_message","","Edits a [`Message`] in the channel given its Id.",68,{"inputs":[{"name":"self"},{"name":"m"},{"name":"f"}],"output":{"name":"result"}}],[11,"is_nsfw","","Determines if the channel is NSFW.",68,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"message","","Gets a message from the channel.",68,{"inputs":[{"name":"self"},{"name":"m"}],"output":{"name":"result"}}],[11,"messages","","Gets messages from the channel.",68,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"reaction_users","","Gets the list of [`User`]s who have reacted to a [`Message`] with a certain [`Emoji`].",68,{"inputs":[{"name":"self"},{"name":"m"},{"name":"r"},{"name":"option"},{"name":"option"}],"output":{"name":"result"}}],[11,"id","","Retrieves the Id of the inner [`Group`], [`GuildChannel`], or [`PrivateChannel`].",68,{"inputs":[{"name":"self"}],"output":{"name":"channelid"}}],[11,"say","","Sends a message with just the given message content in the channel.",68,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"send_files","","Sends (a) file(s) along with optional message contents.",68,{"inputs":[{"name":"self"},{"name":"vec"},{"name":"f"}],"output":{"name":"result"}}],[11,"send_message","","Sends a message to the channel.",68,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"unpin","","Unpins a [`Message`] in the channel given by its Id.",68,{"inputs":[{"name":"self"},{"name":"m"}],"output":{"name":"result"}}],[11,"deserialize","","",68,{"inputs":[{"name":"d"}],"output":{"name":"stdresult"}}],[11,"fmt","","Formats the channel into a \"mentioned\" string.",68,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"fmtresult"}}],[11,"clone","","",69,{"inputs":[{"name":"self"}],"output":{"name":"channeltype"}}],[11,"fmt","","",69,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",69,null],[11,"eq","","",69,{"inputs":[{"name":"self"},{"name":"channeltype"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",69,{"inputs":[{"name":"self"},{"name":"channeltype"}],"output":{"name":"option"}}],[11,"cmp","","",69,{"inputs":[{"name":"self"},{"name":"channeltype"}],"output":{"name":"ordering"}}],[11,"serialize","","",69,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",69,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"name","","",69,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"permissionoverwrite"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deserialize","","",19,{"inputs":[{"name":"d"}],"output":{"name":"stdresult"}}],[11,"clone","","",70,{"inputs":[{"name":"self"}],"output":{"name":"permissionoverwritetype"}}],[11,"fmt","","",70,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",70,{"inputs":[{"name":"self"},{"name":"permissionoverwritetype"}],"output":{"name":"bool"}}],[11,"ne","","",70,{"inputs":[{"name":"self"},{"name":"permissionoverwritetype"}],"output":{"name":"bool"}}],[11,"clone","","",71,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"fmt","","",71,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",71,null],[11,"eq","","",71,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"ne","","",71,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"fmt","","",71,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"fmtresult"}}],[11,"description","","",71,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"botgateway"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"game"}}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"playing","","Creates a `Game` struct that appears as a `Playing <name>` status.",21,{"inputs":[{"name":"str"}],"output":{"name":"game"}}],[11,"streaming","","Creates a `Game` struct that appears as a `Streaming <name>` status.",21,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"game"}}],[11,"deserialize","","",21,{"inputs":[{"name":"d"}],"output":{"name":"stdresult"}}],[11,"clone","","",72,{"inputs":[{"name":"self"}],"output":{"name":"gametype"}}],[11,"fmt","","",72,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",72,null],[11,"eq","","",72,{"inputs":[{"name":"self"},{"name":"gametype"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",72,{"inputs":[{"name":"self"},{"name":"gametype"}],"output":{"name":"option"}}],[11,"cmp","","",72,{"inputs":[{"name":"self"},{"name":"gametype"}],"output":{"name":"ordering"}}],[11,"serialize","","",72,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",72,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"default","","",72,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"gateway"}}],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"presence"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deserialize","","",23,{"inputs":[{"name":"d"}],"output":{"name":"stdresult"}}],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"ready"}}],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",25,{"inputs":[{"name":"self"}],"output":{"name":"emoji"}}],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"delete","","Deletes the emoji.",25,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"edit","","Edits the emoji by updating it with a new name.",25,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"find_guild_id","","Finds the [`Guild`] that owns the emoji by looking through the Cache.",25,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"url","","Generates a URL to the emoji's image.",25,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"fmt","","Formats the emoji into a string that will cause Discord clients to render the emoji.",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"fmtresult"}}],[11,"from","","Gets the Id of an `Emoji`.",55,{"inputs":[{"name":"emoji"}],"output":{"name":"emojiid"}}],[11,"from","","Gets the Id of an `Emoji`.",55,{"inputs":[{"name":"emoji"}],"output":{"name":"emojiid"}}],[11,"clone","","",73,{"inputs":[{"name":"self"}],"output":{"name":"feature"}}],[11,"fmt","","",73,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",73,null],[11,"eq","","",73,{"inputs":[{"name":"self"},{"name":"feature"}],"output":{"name":"bool"}}],[11,"as_channel_id","","Converts the guild Id into the default channel's Id.",56,{"inputs":[{"name":"self"}],"output":{"name":"channelid"}}],[11,"ban","","Ban a [`User`] from the guild. All messages by the user within the last given number of days given will be deleted.",56,{"inputs":[{"name":"self"},{"name":"u"},{"name":"bo"}],"output":{"name":"result"}}],[11,"bans","","Gets a list of the guild's bans.",56,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"audit_logs","","Gets a list of the guild's audit log entries",56,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"channels","","Gets all of the guild's channels over the REST API.",56,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"create_channel","","Creates a [`GuildChannel`] in the the guild.",56,{"inputs":[{"name":"self"},{"name":"str"},{"name":"channeltype"}],"output":{"name":"result"}}],[11,"create_emoji","","Creates an emoji in the guild with a name and base64-encoded image.",56,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"}],"output":{"name":"result"}}],[11,"create_integration","","Creates an integration for the guild.",56,{"inputs":[{"name":"self"},{"name":"i"},{"name":"str"}],"output":{"name":"result"}}],[11,"create_role","","Creates a new role in the guild with the data set, if any.",56,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"delete","","Deletes the current guild if the current account is the owner of the guild.",56,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"delete_emoji","","Deletes an [`Emoji`] from the guild.",56,{"inputs":[{"name":"self"},{"name":"e"}],"output":{"name":"result"}}],[11,"delete_integration","","Deletes an integration by Id from the guild.",56,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"result"}}],[11,"delete_role","","Deletes a [`Role`] by Id from the guild.",56,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"result"}}],[11,"edit","","Edits the current guild with new data where specified.",56,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"edit_emoji","","Edits an [`Emoji`]'s name in the guild.",56,{"inputs":[{"name":"self"},{"name":"e"},{"name":"str"}],"output":{"name":"result"}}],[11,"edit_member","","Edits the properties of member of the guild, such as muting or nicknaming them.",56,{"inputs":[{"name":"self"},{"name":"u"},{"name":"f"}],"output":{"name":"result"}}],[11,"edit_nickname","","Edits the current user's nickname for the guild.",56,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"edit_role","","Edits a [`Role`], optionally setting its new fields.",56,{"inputs":[{"name":"self"},{"name":"r"},{"name":"f"}],"output":{"name":"result"}}],[11,"find","","Search the cache for the guild.",56,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"get","","Requests the guild over REST.",56,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"integrations","","Gets all integration of the guild.",56,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"invites","","Gets all of the guild's invites.",56,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"kick","","Kicks a [`Member`] from the guild.",56,{"inputs":[{"name":"self"},{"name":"u"}],"output":{"name":"result"}}],[11,"leave","","Leaves the guild.",56,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"member","","Gets a user's [`Member`] for the guild by Id.",56,{"inputs":[{"name":"self"},{"name":"u"}],"output":{"name":"result"}}],[11,"members","","Gets a list of the guild's members.",56,{"inputs":[{"name":"self"},{"name":"option"},{"name":"option"}],"output":{"name":"result"}}],[11,"move_member","","Moves a member to a specific voice channel.",56,{"inputs":[{"name":"self"},{"name":"u"},{"name":"c"}],"output":{"name":"result"}}],[11,"prune_count","","Gets the number of [`Member`]s that would be pruned with the given number of days.",56,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"result"}}],[11,"shard_id","","Returns the Id of the shard associated with the guild.",56,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"start_integration_sync","","Starts an integration sync for the given integration Id.",56,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"result"}}],[11,"start_prune","","Starts a prune of [`Member`]s.",56,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"result"}}],[11,"unban","","Unbans a [`User`] from the guild.",56,{"inputs":[{"name":"self"},{"name":"u"}],"output":{"name":"result"}}],[11,"webhooks","","Retrieves the guild's webhooks.",56,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"from","","Gets the Id of a partial guild.",56,{"inputs":[{"name":"partialguild"}],"output":{"name":"guildid"}}],[11,"from","","Gets the Id of a partial guild.",56,{"inputs":[{"name":"partialguild"}],"output":{"name":"guildid"}}],[11,"from","","Gets the Id of Guild information struct.",56,{"inputs":[{"name":"guildinfo"}],"output":{"name":"guildid"}}],[11,"from","","Gets the Id of Guild information struct.",56,{"inputs":[{"name":"guildinfo"}],"output":{"name":"guildid"}}],[11,"from","","Gets the Id of Invite Guild struct.",56,{"inputs":[{"name":"inviteguild"}],"output":{"name":"guildid"}}],[11,"from","","Gets the Id of Invite Guild struct.",56,{"inputs":[{"name":"inviteguild"}],"output":{"name":"guildid"}}],[11,"from","","Gets the Id of Guild.",56,{"inputs":[{"name":"guild"}],"output":{"name":"guildid"}}],[11,"from","","Gets the Id of Guild.",56,{"inputs":[{"name":"guild"}],"output":{"name":"guildid"}}],[11,"clone","","",26,{"inputs":[{"name":"self"}],"output":{"name":"integration"}}],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","Gets the Id of integration.",57,{"inputs":[{"name":"integration"}],"output":{"name":"integrationid"}}],[11,"clone","","",27,{"inputs":[{"name":"self"}],"output":{"name":"integrationaccount"}}],[11,"fmt","","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",28,{"inputs":[{"name":"self"}],"output":{"name":"member"}}],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"add_role","","Adds a [`Role`] to the member, editing its roles in-place if the request was successful.",28,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"result"}}],[11,"add_roles","","Adds one or multiple [`Role`]s to the member, editing its roles in-place if the request was successful.",28,null],[11,"ban","","Ban the member from its guild, deleting the last X number of days' worth of messages.",28,{"inputs":[{"name":"self"},{"name":"bo"}],"output":{"name":"result"}}],[11,"colour","","Determines the member's colour.",28,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"default_channel","","Returns the \"default channel\" of the guild for the member. (This returns the first channel that can be read by the member, if there isn't one returns `None`)",28,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"display_name","","Calculates the member's display name.",28,{"inputs":[{"name":"self"}],"output":{"name":"cow"}}],[11,"distinct","","Returns the DiscordTag of a Member, taking possible nickname into account.",28,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"edit","","Edits the member with the given data. See [`Guild::edit_member`] for more information.",28,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"kick","","Kick the member from the guild.",28,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"permissions","","Returns the permissions for the member.",28,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"remove_role","","Removes a [`Role`] from the member, editing its roles in-place if the request was successful.",28,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"result"}}],[11,"remove_roles","","Removes one or multiple [`Role`]s from the member.",28,null],[11,"roles","","Retrieves the full role data for the user's roles.",28,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"unban","","Unbans the [`User`] from the guild.",28,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","","Mentions the user so that they receive a notification.",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"fmtresult"}}],[11,"clone","","",29,{"inputs":[{"name":"self"}],"output":{"name":"partialguild"}}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"ban","","Ban a [`User`] from the guild. All messages by the user within the last given number of days given will be deleted. This may be a range between `0` and `7`.",29,{"inputs":[{"name":"self"},{"name":"u"},{"name":"u8"}],"output":{"name":"result"}}],[11,"bans","","Gets a list of the guild's bans.",29,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"channels","","Gets all of the guild's channels over the REST API.",29,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"create_channel","","Creates a [`GuildChannel`] in the guild.",29,{"inputs":[{"name":"self"},{"name":"str"},{"name":"channeltype"}],"output":{"name":"result"}}],[11,"create_emoji","","Creates an emoji in the guild with a name and base64-encoded image.",29,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"}],"output":{"name":"result"}}],[11,"create_integration","","Creates an integration for the guild.",29,{"inputs":[{"name":"self"},{"name":"i"},{"name":"str"}],"output":{"name":"result"}}],[11,"create_role","","Creates a new role in the guild with the data set, if any.",29,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"delete","","Deletes the current guild if the current user is the owner of the guild.",29,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"delete_emoji","","Deletes an [`Emoji`] from the guild.",29,{"inputs":[{"name":"self"},{"name":"e"}],"output":{"name":"result"}}],[11,"delete_integration","","Deletes an integration by Id from the guild.",29,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"result"}}],[11,"delete_role","","Deletes a [`Role`] by Id from the guild.",29,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"result"}}],[11,"edit","","Edits the current guild with new data where specified.",29,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"edit_emoji","","Edits an [`Emoji`]'s name in the guild.",29,{"inputs":[{"name":"self"},{"name":"e"},{"name":"str"}],"output":{"name":"result"}}],[11,"edit_member","","Edits the properties of member of the guild, such as muting or nicknaming them.",29,{"inputs":[{"name":"self"},{"name":"u"},{"name":"f"}],"output":{"name":"result"}}],[11,"edit_nickname","","Edits the current user's nickname for the guild.",29,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"get","","Gets a partial amount of guild data by its Id.",29,{"inputs":[{"name":"g"}],"output":{"name":"result"}}],[11,"kick","","Kicks a [`Member`] from the guild.",29,{"inputs":[{"name":"self"},{"name":"u"}],"output":{"name":"result"}}],[11,"icon_url","","Returns a formatted URL of the guild's icon, if the guild has an icon.",29,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"integrations","","Gets all integration of the guild.",29,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"invites","","Gets all of the guild's invites.",29,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"leave","","Leaves the guild.",29,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"member","","Gets a user's [`Member`] for the guild by Id.",29,{"inputs":[{"name":"self"},{"name":"u"}],"output":{"name":"result"}}],[11,"members","","Gets a list of the guild's members.",29,{"inputs":[{"name":"self"},{"name":"option"},{"name":"option"}],"output":{"name":"result"}}],[11,"move_member","","Moves a member to a specific voice channel.",29,{"inputs":[{"name":"self"},{"name":"u"},{"name":"c"}],"output":{"name":"result"}}],[11,"prune_count","","Gets the number of [`Member`]s that would be pruned with the given number of days.",29,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"result"}}],[11,"shard_id","","Returns the Id of the shard associated with the guild.",29,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"splash_url","","Returns the formatted URL of the guild's splash image, if one exists.",29,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"start_integration_sync","","Starts an integration sync for the given integration Id.",29,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"result"}}],[11,"unban","","Unbans a [`User`] from the guild.",29,{"inputs":[{"name":"self"},{"name":"u"}],"output":{"name":"result"}}],[11,"webhooks","","Retrieves the guild's webhooks.",29,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"role_by_name","","Obtain a reference to a role by its name.",29,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"clone","","",30,{"inputs":[{"name":"self"}],"output":{"name":"role"}}],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"delete","","Deletes the role.",30,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"edit","","Edits a [`Role`], optionally setting its new fields.",30,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"find_guild","","Searches the cache for the guild that owns the role.",30,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"has_permission","","Check that the role has the given permission.",30,{"inputs":[{"name":"self"},{"name":"permissions"}],"output":{"name":"bool"}}],[11,"has_permissions","","Checks whether the role has all of the given permissions.",30,{"inputs":[{"name":"self"},{"name":"permissions"},{"name":"bool"}],"output":{"name":"bool"}}],[11,"fmt","","Format a mention for the role, pinging its members.",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"fmtresult"}}],[11,"cmp","","",30,{"inputs":[{"name":"self"},{"name":"role"}],"output":{"name":"ordering"}}],[11,"eq","","",30,{"inputs":[{"name":"self"},{"name":"role"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",30,{"inputs":[{"name":"self"},{"name":"role"}],"output":{"name":"option"}}],[11,"find","","Search the cache for the role.",59,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"from","","Gets the Id of a role.",59,{"inputs":[{"name":"role"}],"output":{"name":"roleid"}}],[11,"from","","Gets the Id of a role.",59,{"inputs":[{"name":"role"}],"output":{"name":"roleid"}}],[11,"fmt","","",74,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",75,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",76,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",77,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",78,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",79,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",80,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",81,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",82,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deserialize","","",32,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"clone","","",34,{"inputs":[{"name":"self"}],"output":{"name":"ban"}}],[11,"fmt","","",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",34,{"inputs":[{"name":"self"},{"name":"ban"}],"output":{"name":"bool"}}],[11,"ne","","",34,{"inputs":[{"name":"self"},{"name":"ban"}],"output":{"name":"bool"}}],[11,"hash","","",34,null],[11,"clone","","",35,{"inputs":[{"name":"self"}],"output":{"name":"guild"}}],[11,"fmt","","",35,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default_channel","","Returns the \"default\" channel of the guild for the passed user id. (This returns the first channel that can be read by the user, if there isn't one, returns `None`)",35,{"inputs":[{"name":"self"},{"name":"userid"}],"output":{"name":"option"}}],[11,"default_channel_guaranteed","","Returns the guaranteed \"default\" channel of the guild. (This returns the first channel that can be read by everyone, if there isn't one, returns `None`) Note however that this is very costy if used in a server with lots of channels, members, or both.",35,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"ban","","Ban a [`User`] from the guild. All messages by the user within the last given number of days given will be deleted.",35,{"inputs":[{"name":"self"},{"name":"u"},{"name":"bo"}],"output":{"name":"result"}}],[11,"bans","","Retrieves a list of [`Ban`]s for the guild.",35,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"audit_logs","","Retrieves a list of [`AuditLogs`] for the guild.",35,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"channels","","Gets all of the guild's channels over the REST API.",35,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"create","","Creates a guild with the data provided.",35,{"inputs":[{"name":"str"},{"name":"region"},{"name":"option"}],"output":{"name":"result"}}],[11,"create_channel","","Creates a new [`Channel`] in the guild.",35,{"inputs":[{"name":"self"},{"name":"str"},{"name":"channeltype"}],"output":{"name":"result"}}],[11,"create_emoji","","Creates an emoji in the guild with a name and base64-encoded image. The [`utils::read_image`] function is provided for you as a simple method to read an image and encode it into base64, if you are reading from the filesystem.",35,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"}],"output":{"name":"result"}}],[11,"create_integration","","Creates an integration for the guild.",35,{"inputs":[{"name":"self"},{"name":"i"},{"name":"str"}],"output":{"name":"result"}}],[11,"create_role","","Creates a new role in the guild with the data set, if any.",35,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"delete","","Deletes the current guild if the current user is the owner of the guild.",35,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"delete_emoji","","Deletes an [`Emoji`] from the guild.",35,{"inputs":[{"name":"self"},{"name":"e"}],"output":{"name":"result"}}],[11,"delete_integration","","Deletes an integration by Id from the guild.",35,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"result"}}],[11,"delete_role","","Deletes a [`Role`] by Id from the guild.",35,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"result"}}],[11,"edit","","Edits the current guild with new data where specified.",35,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"edit_emoji","","Edits an [`Emoji`]'s name in the guild.",35,{"inputs":[{"name":"self"},{"name":"e"},{"name":"str"}],"output":{"name":"result"}}],[11,"edit_member","","Edits the properties of member of the guild, such as muting or nicknaming them.",35,{"inputs":[{"name":"self"},{"name":"u"},{"name":"f"}],"output":{"name":"result"}}],[11,"edit_nickname","","Edits the current user's nickname for the guild.",35,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"edit_role","","Edits a role, optionally setting its fields.",35,{"inputs":[{"name":"self"},{"name":"r"},{"name":"f"}],"output":{"name":"result"}}],[11,"get","","Gets a partial amount of guild data by its Id.",35,{"inputs":[{"name":"g"}],"output":{"name":"result"}}],[11,"icon_url","","Returns the formatted URL of the guild's icon, if one exists.",35,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"integrations","","Gets all integration of the guild.",35,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"invites","","Retrieves the active invites for the guild.",35,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"is_large","","Checks if the guild is 'large'. A guild is considered large if it has more than 250 members.",35,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"kick","","Kicks a [`Member`] from the guild.",35,{"inputs":[{"name":"self"},{"name":"u"}],"output":{"name":"result"}}],[11,"leave","","Leaves the guild.",35,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"member","","Gets a user's [`Member`] for the guild by Id.",35,{"inputs":[{"name":"self"},{"name":"u"}],"output":{"name":"result"}}],[11,"members","","Gets a list of the guild's members.",35,{"inputs":[{"name":"self"},{"name":"option"},{"name":"option"}],"output":{"name":"result"}}],[11,"members_with_status","","Gets a list of all the members (satisfying the status provided to the function) in this guild.",35,{"inputs":[{"name":"self"},{"name":"onlinestatus"}],"output":{"name":"vec"}}],[11,"member_named","","Retrieves the first [`Member`] found that matches the name - with an optional discriminator - provided.",35,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"move_member","","Moves a member to a specific voice channel.",35,{"inputs":[{"name":"self"},{"name":"u"},{"name":"c"}],"output":{"name":"result"}}],[11,"permissions_for","","Calculate a [`User`]'s permissions in a given channel in the guild.",35,{"inputs":[{"name":"self"},{"name":"c"},{"name":"u"}],"output":{"name":"permissions"}}],[11,"prune_count","","Retrieves the count of the number of [`Member`]s that would be pruned with the number of given days.",35,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"result"}}],[11,"shard_id","","Returns the Id of the shard associated with the guild.",35,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"splash_url","","Returns the formatted URL of the guild's splash image, if one exists.",35,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"start_integration_sync","","Starts an integration sync for the given integration Id.",35,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"result"}}],[11,"start_prune","","Starts a prune of [`Member`]s.",35,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"result"}}],[11,"unban","","Unbans the given [`User`] from the guild.",35,{"inputs":[{"name":"self"},{"name":"u"}],"output":{"name":"result"}}],[11,"webhooks","","Retrieves the guild's webhooks.",35,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"role_by_name","","Obtain a reference to a role by its name.",35,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"deserialize","","",35,{"inputs":[{"name":"d"}],"output":{"name":"stdresult"}}],[11,"clone","","",36,{"inputs":[{"name":"self"}],"output":{"name":"guildembed"}}],[11,"fmt","","",36,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",37,{"inputs":[{"name":"self"}],"output":{"name":"guildprune"}}],[11,"fmt","","",37,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",38,{"inputs":[{"name":"self"}],"output":{"name":"guildinfo"}}],[11,"fmt","","",38,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"icon_url","","Returns the formatted URL of the guild's icon, if the guild has an icon.",38,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"from","","",93,{"inputs":[{"name":"partialguild"}],"output":{"name":"guildcontainer"}}],[11,"from","","",93,{"inputs":[{"name":"guildid"}],"output":{"name":"guildcontainer"}}],[11,"from","","",93,{"inputs":[{"name":"u64"}],"output":{"name":"guildcontainer"}}],[11,"splash_url","","Returns the formatted URL of the guild's splash image, if one exists.",42,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",39,{"inputs":[{"name":"self"}],"output":{"name":"guildunavailable"}}],[11,"fmt","","",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",83,{"inputs":[{"name":"self"}],"output":{"name":"guildstatus"}}],[11,"fmt","","",83,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"id","","Retrieves the Id of the inner [`Guild`].",83,{"inputs":[{"name":"self"}],"output":{"name":"guildid"}}],[11,"clone","","",84,{"inputs":[{"name":"self"}],"output":{"name":"verificationlevel"}}],[11,"fmt","","",84,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",84,null],[11,"eq","","",84,{"inputs":[{"name":"self"},{"name":"verificationlevel"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",84,{"inputs":[{"name":"self"},{"name":"verificationlevel"}],"output":{"name":"option"}}],[11,"cmp","","",84,{"inputs":[{"name":"self"},{"name":"verificationlevel"}],"output":{"name":"ordering"}}],[11,"serialize","","",84,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",84,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"num","","",84,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"clone","","",40,{"inputs":[{"name":"self"}],"output":{"name":"invite"}}],[11,"fmt","","",40,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"create","","Creates an invite for a [`GuildChannel`], providing a builder so that fields may optionally be set.",40,{"inputs":[{"name":"c"},{"name":"f"}],"output":{"name":"result"}}],[11,"delete","","Deletes the invite.",40,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"get","","Gets the information about an invite.",40,{"inputs":[{"name":"str"},{"name":"bool"}],"output":{"name":"result"}}],[11,"url","","Returns a URL to use for the invite.",40,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"clone","","",41,{"inputs":[{"name":"self"}],"output":{"name":"invitechannel"}}],[11,"fmt","","",41,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",42,{"inputs":[{"name":"self"}],"output":{"name":"inviteguild"}}],[11,"fmt","","",42,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"shard_id","","Returns the Id of the shard associated with the guild.",42,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"clone","","",43,{"inputs":[{"name":"self"}],"output":{"name":"richinvite"}}],[11,"fmt","","",43,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"delete","","Deletes the invite.",43,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"url","","Returns a URL to use for the invite.",43,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"mention","","",54,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"mention","","",68,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"mention","","",25,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"mention","","",28,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"mention","","",59,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"mention","","",30,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"mention","","",60,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"mention","","",50,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"fmt","","",85,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",85,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",85,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"from_str","","",50,{"inputs":[{"name":"str"}],"output":{"name":"stdresult"}}],[11,"fmt","","",86,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",86,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",86,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"from_str","","",60,{"inputs":[{"name":"str"}],"output":{"name":"stdresult"}}],[11,"fmt","","",87,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",87,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",87,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"from_str","","",30,{"inputs":[{"name":"str"}],"output":{"name":"stdresult"}}],[11,"fmt","","",88,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",88,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",88,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"from_str","","",59,{"inputs":[{"name":"str"}],"output":{"name":"stdresult"}}],[11,"clone","","",44,{"inputs":[{"name":"self"}],"output":{"name":"emojiidentifier"}}],[11,"fmt","","",44,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",44,null],[11,"eq","","",44,{"inputs":[{"name":"self"},{"name":"emojiidentifier"}],"output":{"name":"bool"}}],[11,"ne","","",44,{"inputs":[{"name":"self"},{"name":"emojiidentifier"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",44,{"inputs":[{"name":"self"},{"name":"emojiidentifier"}],"output":{"name":"option"}}],[11,"lt","","",44,{"inputs":[{"name":"self"},{"name":"emojiidentifier"}],"output":{"name":"bool"}}],[11,"le","","",44,{"inputs":[{"name":"self"},{"name":"emojiidentifier"}],"output":{"name":"bool"}}],[11,"gt","","",44,{"inputs":[{"name":"self"},{"name":"emojiidentifier"}],"output":{"name":"bool"}}],[11,"ge","","",44,{"inputs":[{"name":"self"},{"name":"emojiidentifier"}],"output":{"name":"bool"}}],[11,"cmp","","",44,{"inputs":[{"name":"self"},{"name":"emojiidentifier"}],"output":{"name":"ordering"}}],[11,"url","","Generates a URL to the emoji's image.",44,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"from_str","","",44,{"inputs":[{"name":"str"}],"output":{"name":"stdresult"}}],[11,"from_str","","",54,{"inputs":[{"name":"str"}],"output":{"name":"stdresult"}}],[11,"from_str","","",68,{"inputs":[{"name":"str"}],"output":{"name":"stdresult"}}],[11,"clone","","",45,{"inputs":[{"name":"self"}],"output":{"name":"affectedcomponent"}}],[11,"fmt","","",45,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",46,{"inputs":[{"name":"self"}],"output":{"name":"incident"}}],[11,"fmt","","",46,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",47,{"inputs":[{"name":"self"}],"output":{"name":"incidentupdate"}}],[11,"fmt","","",47,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",89,{"inputs":[{"name":"self"}],"output":{"name":"incidentstatus"}}],[11,"fmt","","",89,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",89,null],[11,"eq","","",89,{"inputs":[{"name":"self"},{"name":"incidentstatus"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",89,{"inputs":[{"name":"self"},{"name":"incidentstatus"}],"output":{"name":"option"}}],[11,"cmp","","",89,{"inputs":[{"name":"self"},{"name":"incidentstatus"}],"output":{"name":"ordering"}}],[11,"clone","","",48,{"inputs":[{"name":"self"}],"output":{"name":"maintenance"}}],[11,"fmt","","",48,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",49,{"inputs":[{"name":"self"}],"output":{"name":"currentuser"}}],[11,"fmt","","",49,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"avatar_url","","Returns the formatted URL of the user's icon, if one exists.",49,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"default_avatar_url","","Returns the formatted URL to the user's default avatar URL.",49,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"edit","","Edits the current user's profile settings.",49,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"face","","Retrieves the URL to the current user's avatar, falling back to the default avatar if needed.",49,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"guilds","","Gets a list of guilds that the current user is in.",49,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"invite_url","","Returns the invite url for the bot with the given permissions.",49,{"inputs":[{"name":"self"},{"name":"permissions"}],"output":{"name":"result"}}],[11,"static_avatar_url","","Returns a static formatted URL of the user's icon, if one exists.",49,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"tag","","Returns the tag of the current user.",49,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"clone","","",90,{"inputs":[{"name":"self"}],"output":{"name":"defaultavatar"}}],[11,"fmt","","",90,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",90,null],[11,"eq","","",90,{"inputs":[{"name":"self"},{"name":"defaultavatar"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",90,{"inputs":[{"name":"self"},{"name":"defaultavatar"}],"output":{"name":"option"}}],[11,"cmp","","",90,{"inputs":[{"name":"self"},{"name":"defaultavatar"}],"output":{"name":"ordering"}}],[11,"name","","Retrieves the String hash of the default avatar.",90,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"clone","","",91,{"inputs":[{"name":"self"}],"output":{"name":"notificationlevel"}}],[11,"fmt","","",91,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",91,null],[11,"eq","","",91,{"inputs":[{"name":"self"},{"name":"notificationlevel"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",91,{"inputs":[{"name":"self"},{"name":"notificationlevel"}],"output":{"name":"option"}}],[11,"cmp","","",91,{"inputs":[{"name":"self"},{"name":"notificationlevel"}],"output":{"name":"ordering"}}],[11,"serialize","","",91,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",91,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"clone","","",92,{"inputs":[{"name":"self"}],"output":{"name":"onlinestatus"}}],[11,"fmt","","",92,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",92,null],[11,"eq","","",92,{"inputs":[{"name":"self"},{"name":"onlinestatus"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",92,{"inputs":[{"name":"self"},{"name":"onlinestatus"}],"output":{"name":"option"}}],[11,"cmp","","",92,{"inputs":[{"name":"self"},{"name":"onlinestatus"}],"output":{"name":"ordering"}}],[11,"name","","",92,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"default","","",92,{"inputs":[],"output":{"name":"onlinestatus"}}],[11,"clone","","",50,{"inputs":[{"name":"self"}],"output":{"name":"user"}}],[11,"fmt","","",50,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",50,{"inputs":[{"name":"self"},{"name":"user"}],"output":{"name":"bool"}}],[11,"ne","","",50,{"inputs":[{"name":"self"},{"name":"user"}],"output":{"name":"bool"}}],[11,"hash","","",50,null],[11,"avatar_url","","Returns the formatted URL of the user's icon, if one exists.",50,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"create_dm_channel","","Creates a direct message channel between the [current user] and the user. This can also retrieve the channel if one already exists.",50,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"created_at","","Retrieves the time that this user was created at.",50,{"inputs":[{"name":"self"}],"output":{"name":"naivedatetime"}}],[11,"default_avatar_url","","Returns the formatted URL to the user's default avatar URL.",50,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"direct_message","","Sends a message to a user through a direct message channel. This is a channel that can only be accessed by you and the recipient.",50,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"dm","","This is an alias of [direct_message].",50,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"face","","Retrieves the URL to the user's avatar, falling back to the default avatar if needed.",50,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"has_role","","Check if a user has a [`Role`]. This will retrieve the [`Guild`] from the [`Cache`] if it is available, and then check if that guild has the given [`Role`].",50,{"inputs":[{"name":"self"},{"name":"g"},{"name":"r"}],"output":{"name":"bool"}}],[11,"refresh","","Refreshes the information about the user.",50,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"static_avatar_url","","Returns a static formatted URL of the user's icon, if one exists.",50,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"tag","","Returns the \"tag\" for the user.",50,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"fmt","","Formats a string which will mention the user.",50,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"create_dm_channel","","Creates a direct message channel between the [current user] and the user. This can also retrieve the channel if one already exists.",60,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"find","","Search the cache for the user with the Id.",60,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"get","","Gets a user by its Id over the REST API.",60,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"from","","Gets the Id of a `CurrentUser` struct.",60,{"inputs":[{"name":"currentuser"}],"output":{"name":"userid"}}],[11,"from","","Gets the Id of a `CurrentUser` struct.",60,{"inputs":[{"name":"currentuser"}],"output":{"name":"userid"}}],[11,"from","","Gets the Id of a `Member`.",60,{"inputs":[{"name":"member"}],"output":{"name":"userid"}}],[11,"from","","Gets the Id of a `Member`.",60,{"inputs":[{"name":"member"}],"output":{"name":"userid"}}],[11,"from","","Gets the Id of a `User`.",60,{"inputs":[{"name":"user"}],"output":{"name":"userid"}}],[11,"from","","Gets the Id of a `User`.",60,{"inputs":[{"name":"user"}],"output":{"name":"userid"}}],[11,"clone","","",51,{"inputs":[{"name":"self"}],"output":{"name":"voiceregion"}}],[11,"fmt","","",51,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",52,{"inputs":[{"name":"self"}],"output":{"name":"voicestate"}}],[11,"fmt","","",52,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",53,{"inputs":[{"name":"self"}],"output":{"name":"webhook"}}],[11,"fmt","","",53,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"delete","","Deletes the webhook.",53,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"edit","","",53,{"inputs":[{"name":"self"},{"name":"option"},{"name":"option"}],"output":{"name":"result"}}],[11,"execute","","Executes a webhook with the fields set via the given builder.",53,{"inputs":[{"name":"self"},{"name":"bool"},{"name":"f"}],"output":{"name":"result"}}],[11,"refresh","","Retrieves the latest information about the webhook, editing the webhook in-place.",53,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"get","","Retrieves the webhook by the Id.",61,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[8,"BanOptions","","",null,null],[11,"dmd","","",141,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"reason","","",141,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[8,"Mentionable","","Allows something - such as a channel or role - to be mentioned in a message.",null,null],[10,"mention","","Creates a mentionable string, that will be able to notify and/or create a link to the item.",142,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"clone","","",54,{"inputs":[{"name":"self"}],"output":{"name":"channelid"}}],[11,"fmt","","",54,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",54,null],[11,"partial_cmp","","",54,{"inputs":[{"name":"self"},{"name":"channelid"}],"output":{"name":"option"}}],[11,"lt","","",54,{"inputs":[{"name":"self"},{"name":"channelid"}],"output":{"name":"bool"}}],[11,"le","","",54,{"inputs":[{"name":"self"},{"name":"channelid"}],"output":{"name":"bool"}}],[11,"gt","","",54,{"inputs":[{"name":"self"},{"name":"channelid"}],"output":{"name":"bool"}}],[11,"ge","","",54,{"inputs":[{"name":"self"},{"name":"channelid"}],"output":{"name":"bool"}}],[11,"cmp","","",54,{"inputs":[{"name":"self"},{"name":"channelid"}],"output":{"name":"ordering"}}],[11,"created_at","","Retrieves the time that the Id was created at.",54,{"inputs":[{"name":"self"}],"output":{"name":"naivedatetime"}}],[11,"from","","",54,{"inputs":[{"name":"u64"}],"output":{"name":"channelid"}}],[11,"eq","","",54,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"eq","","",54,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"bool"}}],[11,"fmt","","",54,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"fmtresult"}}],[11,"deserialize","","",54,{"inputs":[{"name":"d"}],"output":{"name":"stdresult"}}],[11,"clone","","",55,{"inputs":[{"name":"self"}],"output":{"name":"emojiid"}}],[11,"fmt","","",55,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",55,null],[11,"partial_cmp","","",55,{"inputs":[{"name":"self"},{"name":"emojiid"}],"output":{"name":"option"}}],[11,"lt","","",55,{"inputs":[{"name":"self"},{"name":"emojiid"}],"output":{"name":"bool"}}],[11,"le","","",55,{"inputs":[{"name":"self"},{"name":"emojiid"}],"output":{"name":"bool"}}],[11,"gt","","",55,{"inputs":[{"name":"self"},{"name":"emojiid"}],"output":{"name":"bool"}}],[11,"ge","","",55,{"inputs":[{"name":"self"},{"name":"emojiid"}],"output":{"name":"bool"}}],[11,"cmp","","",55,{"inputs":[{"name":"self"},{"name":"emojiid"}],"output":{"name":"ordering"}}],[11,"created_at","","Retrieves the time that the Id was created at.",55,{"inputs":[{"name":"self"}],"output":{"name":"naivedatetime"}}],[11,"from","","",55,{"inputs":[{"name":"u64"}],"output":{"name":"emojiid"}}],[11,"eq","","",55,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"eq","","",55,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"bool"}}],[11,"fmt","","",55,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"fmtresult"}}],[11,"deserialize","","",55,{"inputs":[{"name":"d"}],"output":{"name":"stdresult"}}],[11,"clone","","",56,{"inputs":[{"name":"self"}],"output":{"name":"guildid"}}],[11,"fmt","","",56,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",56,null],[11,"partial_cmp","","",56,{"inputs":[{"name":"self"},{"name":"guildid"}],"output":{"name":"option"}}],[11,"lt","","",56,{"inputs":[{"name":"self"},{"name":"guildid"}],"output":{"name":"bool"}}],[11,"le","","",56,{"inputs":[{"name":"self"},{"name":"guildid"}],"output":{"name":"bool"}}],[11,"gt","","",56,{"inputs":[{"name":"self"},{"name":"guildid"}],"output":{"name":"bool"}}],[11,"ge","","",56,{"inputs":[{"name":"self"},{"name":"guildid"}],"output":{"name":"bool"}}],[11,"cmp","","",56,{"inputs":[{"name":"self"},{"name":"guildid"}],"output":{"name":"ordering"}}],[11,"created_at","","Retrieves the time that the Id was created at.",56,{"inputs":[{"name":"self"}],"output":{"name":"naivedatetime"}}],[11,"from","","",56,{"inputs":[{"name":"u64"}],"output":{"name":"guildid"}}],[11,"eq","","",56,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"eq","","",56,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"bool"}}],[11,"fmt","","",56,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"fmtresult"}}],[11,"deserialize","","",56,{"inputs":[{"name":"d"}],"output":{"name":"stdresult"}}],[11,"clone","","",57,{"inputs":[{"name":"self"}],"output":{"name":"integrationid"}}],[11,"fmt","","",57,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",57,null],[11,"partial_cmp","","",57,{"inputs":[{"name":"self"},{"name":"integrationid"}],"output":{"name":"option"}}],[11,"lt","","",57,{"inputs":[{"name":"self"},{"name":"integrationid"}],"output":{"name":"bool"}}],[11,"le","","",57,{"inputs":[{"name":"self"},{"name":"integrationid"}],"output":{"name":"bool"}}],[11,"gt","","",57,{"inputs":[{"name":"self"},{"name":"integrationid"}],"output":{"name":"bool"}}],[11,"ge","","",57,{"inputs":[{"name":"self"},{"name":"integrationid"}],"output":{"name":"bool"}}],[11,"cmp","","",57,{"inputs":[{"name":"self"},{"name":"integrationid"}],"output":{"name":"ordering"}}],[11,"created_at","","Retrieves the time that the Id was created at.",57,{"inputs":[{"name":"self"}],"output":{"name":"naivedatetime"}}],[11,"from","","",57,{"inputs":[{"name":"u64"}],"output":{"name":"integrationid"}}],[11,"eq","","",57,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"eq","","",57,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"bool"}}],[11,"fmt","","",57,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"fmtresult"}}],[11,"deserialize","","",57,{"inputs":[{"name":"d"}],"output":{"name":"stdresult"}}],[11,"clone","","",58,{"inputs":[{"name":"self"}],"output":{"name":"messageid"}}],[11,"fmt","","",58,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",58,null],[11,"partial_cmp","","",58,{"inputs":[{"name":"self"},{"name":"messageid"}],"output":{"name":"option"}}],[11,"lt","","",58,{"inputs":[{"name":"self"},{"name":"messageid"}],"output":{"name":"bool"}}],[11,"le","","",58,{"inputs":[{"name":"self"},{"name":"messageid"}],"output":{"name":"bool"}}],[11,"gt","","",58,{"inputs":[{"name":"self"},{"name":"messageid"}],"output":{"name":"bool"}}],[11,"ge","","",58,{"inputs":[{"name":"self"},{"name":"messageid"}],"output":{"name":"bool"}}],[11,"cmp","","",58,{"inputs":[{"name":"self"},{"name":"messageid"}],"output":{"name":"ordering"}}],[11,"created_at","","Retrieves the time that the Id was created at.",58,{"inputs":[{"name":"self"}],"output":{"name":"naivedatetime"}}],[11,"from","","",58,{"inputs":[{"name":"u64"}],"output":{"name":"messageid"}}],[11,"eq","","",58,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"eq","","",58,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"bool"}}],[11,"fmt","","",58,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"fmtresult"}}],[11,"deserialize","","",58,{"inputs":[{"name":"d"}],"output":{"name":"stdresult"}}],[11,"clone","","",59,{"inputs":[{"name":"self"}],"output":{"name":"roleid"}}],[11,"fmt","","",59,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",59,null],[11,"partial_cmp","","",59,{"inputs":[{"name":"self"},{"name":"roleid"}],"output":{"name":"option"}}],[11,"lt","","",59,{"inputs":[{"name":"self"},{"name":"roleid"}],"output":{"name":"bool"}}],[11,"le","","",59,{"inputs":[{"name":"self"},{"name":"roleid"}],"output":{"name":"bool"}}],[11,"gt","","",59,{"inputs":[{"name":"self"},{"name":"roleid"}],"output":{"name":"bool"}}],[11,"ge","","",59,{"inputs":[{"name":"self"},{"name":"roleid"}],"output":{"name":"bool"}}],[11,"cmp","","",59,{"inputs":[{"name":"self"},{"name":"roleid"}],"output":{"name":"ordering"}}],[11,"created_at","","Retrieves the time that the Id was created at.",59,{"inputs":[{"name":"self"}],"output":{"name":"naivedatetime"}}],[11,"from","","",59,{"inputs":[{"name":"u64"}],"output":{"name":"roleid"}}],[11,"eq","","",59,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"eq","","",59,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"bool"}}],[11,"fmt","","",59,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"fmtresult"}}],[11,"deserialize","","",59,{"inputs":[{"name":"d"}],"output":{"name":"stdresult"}}],[11,"clone","","",60,{"inputs":[{"name":"self"}],"output":{"name":"userid"}}],[11,"fmt","","",60,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",60,null],[11,"partial_cmp","","",60,{"inputs":[{"name":"self"},{"name":"userid"}],"output":{"name":"option"}}],[11,"lt","","",60,{"inputs":[{"name":"self"},{"name":"userid"}],"output":{"name":"bool"}}],[11,"le","","",60,{"inputs":[{"name":"self"},{"name":"userid"}],"output":{"name":"bool"}}],[11,"gt","","",60,{"inputs":[{"name":"self"},{"name":"userid"}],"output":{"name":"bool"}}],[11,"ge","","",60,{"inputs":[{"name":"self"},{"name":"userid"}],"output":{"name":"bool"}}],[11,"cmp","","",60,{"inputs":[{"name":"self"},{"name":"userid"}],"output":{"name":"ordering"}}],[11,"created_at","","Retrieves the time that the Id was created at.",60,{"inputs":[{"name":"self"}],"output":{"name":"naivedatetime"}}],[11,"from","","",60,{"inputs":[{"name":"u64"}],"output":{"name":"userid"}}],[11,"eq","","",60,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"eq","","",60,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"bool"}}],[11,"fmt","","",60,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"fmtresult"}}],[11,"deserialize","","",60,{"inputs":[{"name":"d"}],"output":{"name":"stdresult"}}],[11,"clone","","",61,{"inputs":[{"name":"self"}],"output":{"name":"webhookid"}}],[11,"fmt","","",61,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",61,null],[11,"partial_cmp","","",61,{"inputs":[{"name":"self"},{"name":"webhookid"}],"output":{"name":"option"}}],[11,"lt","","",61,{"inputs":[{"name":"self"},{"name":"webhookid"}],"output":{"name":"bool"}}],[11,"le","","",61,{"inputs":[{"name":"self"},{"name":"webhookid"}],"output":{"name":"bool"}}],[11,"gt","","",61,{"inputs":[{"name":"self"},{"name":"webhookid"}],"output":{"name":"bool"}}],[11,"ge","","",61,{"inputs":[{"name":"self"},{"name":"webhookid"}],"output":{"name":"bool"}}],[11,"cmp","","",61,{"inputs":[{"name":"self"},{"name":"webhookid"}],"output":{"name":"ordering"}}],[11,"created_at","","Retrieves the time that the Id was created at.",61,{"inputs":[{"name":"self"}],"output":{"name":"naivedatetime"}}],[11,"from","","",61,{"inputs":[{"name":"u64"}],"output":{"name":"webhookid"}}],[11,"eq","","",61,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"eq","","",61,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"bool"}}],[11,"fmt","","",61,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"fmtresult"}}],[11,"deserialize","","",61,{"inputs":[{"name":"d"}],"output":{"name":"stdresult"}}],[11,"clone","","",62,{"inputs":[{"name":"self"}],"output":{"name":"auditlogentryid"}}],[11,"fmt","","",62,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",62,null],[11,"partial_cmp","","",62,{"inputs":[{"name":"self"},{"name":"auditlogentryid"}],"output":{"name":"option"}}],[11,"lt","","",62,{"inputs":[{"name":"self"},{"name":"auditlogentryid"}],"output":{"name":"bool"}}],[11,"le","","",62,{"inputs":[{"name":"self"},{"name":"auditlogentryid"}],"output":{"name":"bool"}}],[11,"gt","","",62,{"inputs":[{"name":"self"},{"name":"auditlogentryid"}],"output":{"name":"bool"}}],[11,"ge","","",62,{"inputs":[{"name":"self"},{"name":"auditlogentryid"}],"output":{"name":"bool"}}],[11,"cmp","","",62,{"inputs":[{"name":"self"},{"name":"auditlogentryid"}],"output":{"name":"ordering"}}],[11,"created_at","","Retrieves the time that the Id was created at.",62,{"inputs":[{"name":"self"}],"output":{"name":"naivedatetime"}}],[11,"from","","",62,{"inputs":[{"name":"u64"}],"output":{"name":"auditlogentryid"}}],[11,"eq","","",62,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"eq","","",62,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"bool"}}],[11,"fmt","","",62,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"fmtresult"}}],[11,"deserialize","","",62,{"inputs":[{"name":"d"}],"output":{"name":"stdresult"}}],[11,"clone","","",93,{"inputs":[{"name":"self"}],"output":{"name":"guildcontainer"}}],[11,"fmt","","",93,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",63,{"inputs":[{"name":"self"}],"output":{"name":"applicationinfo"}}],[11,"fmt","","",63,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",64,{"inputs":[{"name":"self"}],"output":{"name":"botapplication"}}],[11,"fmt","","",64,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",65,{"inputs":[{"name":"self"}],"output":{"name":"currentapplicationinfo"}}],[11,"fmt","","",65,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",94,{"inputs":[{"name":"self"}],"output":{"name":"region"}}],[11,"fmt","","",94,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",94,null],[11,"eq","","",94,{"inputs":[{"name":"self"},{"name":"region"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",94,{"inputs":[{"name":"self"},{"name":"region"}],"output":{"name":"option"}}],[11,"cmp","","",94,{"inputs":[{"name":"self"},{"name":"region"}],"output":{"name":"ordering"}}],[11,"name","","",94,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[0,"prelude","serenity","A set of exports which can be helpful to use.",null,null],[3,"Context","serenity::prelude","The context is a general utility struct provided on event dispatches, which helps with dealing with the current \"context\" of the event dispatch. The context also acts as a general high-level interface over the associated [`Shard`] which received the event, or the low-level [`http`] module.",null,null],[12,"data","","A clone of [`Client::data`]. Refer to its documentation for more information.",143,null],[12,"shard","","The associated shard which dispatched the event handler.",143,null],[4,"SerenityError","","A common error enum returned by most of the library's functionality within a custom [`Result`].",null,null],[13,"Decode","","An error while decoding a payload.",0,null],[13,"Format","","There was an error with a format.",0,null],[13,"Io","","An `std::io` error.",0,null],[13,"Json","","An error from the `serde_json` crate.",0,null],[13,"Model","","An error from the [`model`] module.",0,null],[13,"Num","","An error occurred while parsing an integer.",0,null],[13,"ExceededLimit","","Input exceeded a limit. Providing the input and the limit that's not supposed to be exceeded.",0,null],[13,"Other","","Some other error. This is only used for \"Expected value \" errors, when a more detailed error can not be easily provided via the [`Error::Decode`] variant.",0,null],[13,"Url","","An error from the `url` crate.",0,null],[13,"Client","","A [client] error.",0,null],[13,"Gateway","","An error from the `gateway` module.",0,null],[13,"Http","","An error from the [`http`] module.",0,null],[13,"Hyper","","An error from the `hyper` crate.",0,null],[13,"Tls","","An error from the `native-tls` crate.",0,null],[13,"WebSocket","","An error from the `rust-websocket` crate.",0,null],[4,"ClientError","","An error returned from the [`Client`].",null,null],[13,"InvalidToken","","When the token provided is invalid. This is returned when validating a token through the [`validate_token`] function.",144,null],[13,"ShardBootFailure","","When a shard has completely failed to reboot after resume and/or reconnect attempts.",144,null],[13,"Shutdown","","When all shards that the client is responsible for have shutdown with an error.",144,null],[4,"GatewayError","","An error that occurred while attempting to deal with the gateway.",null,null],[13,"BuildingUrl","","There was an error building a URL.",145,null],[13,"Closed","","The connection closed, potentially uncleanly.",145,null],[13,"ExpectedHello","","Expected a Hello during a handshake",145,null],[13,"HeartbeatFailed","","When there was an error sending a heartbeat.",145,null],[13,"InvalidAuthentication","","When invalid authentication (a bad token) was sent in the IDENTIFY.",145,null],[13,"InvalidHandshake","","Expected a Ready or an InvalidateSession",145,null],[13,"InvalidOpCode","","An indicator that an unknown opcode was received from the gateway.",145,null],[13,"InvalidShardData","","When invalid sharding data was sent in the IDENTIFY.",145,null],[13,"NoAuthentication","","When no authentication was sent in the IDENTIFY.",145,null],[13,"NoSessionId","","When a session Id was expected (for resuming), but was not present.",145,null],[13,"OverloadedShard","","When a shard would have too many guilds assigned to it.",145,null],[13,"ReconnectFailure","","Failed to reconnect after a number of attempts.",145,null],[4,"HttpError","","",null,null],[13,"InvalidRequest","","When a status code was unexpectedly received for a request's status.",146,null],[13,"RateLimitI64","","When the decoding of a ratelimit header could not be properly decoded into an `i64`.",146,null],[13,"RateLimitUtf8","","When the decoding of a ratelimit header could not be properly decoded from UTF-8.",146,null],[13,"UnknownStatus","","When a status is received, but the verification to ensure the response is valid does not recognize the status.",146,null],[4,"ModelError","","An error returned from the [`model`] module.",null,null],[13,"BulkDeleteAmount","","When attempting to delete below or above the minimum and maximum allowed number of messages.",71,null],[13,"DeleteMessageDaysAmount","","When attempting to delete a number of days' worth of messages that is not allowed.",71,null],[13,"EmbedTooLarge","","Indicates that the textual content of an embed exceeds the maximum length.",71,null],[13,"GuildNotFound","","An indication that a [guild][`Guild`] could not be found by [Id][`GuildId`] in the [`Cache`].",71,null],[13,"InvalidPermissions","","Indicates that you do not have the required permissions to perform an operation.",71,null],[13,"InvalidUser","","An indicator that the [current user] can not perform an action.",71,null],[13,"ItemMissing","","An indicator that an item is missing from the [`Cache`], and the action can not be continued.",71,null],[13,"MessageTooLong","","Indicates that a [`Message`]s content was too long and will not successfully send, as the length is over 2000 codepoints, or 4000 bytes.",71,null],[13,"MessagingBot","","Indicates that the current user is attempting to Direct Message another bot user, which is disallowed by the API.",71,null],[8,"Mentionable","","Allows something - such as a channel or role - to be mentioned in a message.",null,null],[10,"mention","","Creates a mentionable string, that will be able to notify and/or create a link to the item.",142,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[8,"EventHandler","","",null,null],[11,"on_cached","","",147,{"inputs":[{"name":"self"},{"name":"context"},{"name":"vec"}],"output":null}],[11,"on_channel_create","","",147,{"inputs":[{"name":"self"},{"name":"context"},{"name":"arc"}],"output":null}],[11,"on_category_create","","",147,{"inputs":[{"name":"self"},{"name":"context"},{"name":"arc"}],"output":null}],[11,"on_category_delete","","",147,{"inputs":[{"name":"self"},{"name":"context"},{"name":"arc"}],"output":null}],[11,"on_private_channel_create","","",147,{"inputs":[{"name":"self"},{"name":"context"},{"name":"arc"}],"output":null}],[11,"on_channel_delete","","",147,{"inputs":[{"name":"self"},{"name":"context"},{"name":"arc"}],"output":null}],[11,"on_channel_pins_update","","",147,{"inputs":[{"name":"self"},{"name":"context"},{"name":"channelpinsupdateevent"}],"output":null}],[11,"on_channel_recipient_addition","","",147,{"inputs":[{"name":"self"},{"name":"context"},{"name":"channelid"},{"name":"user"}],"output":null}],[11,"on_channel_recipient_removal","","",147,{"inputs":[{"name":"self"},{"name":"context"},{"name":"channelid"},{"name":"user"}],"output":null}],[11,"on_channel_update","","",147,{"inputs":[{"name":"self"},{"name":"context"},{"name":"option"},{"name":"channel"}],"output":null}],[11,"on_guild_ban_addition","","",147,{"inputs":[{"name":"self"},{"name":"context"},{"name":"guildid"},{"name":"user"}],"output":null}],[11,"on_guild_ban_removal","","",147,{"inputs":[{"name":"self"},{"name":"context"},{"name":"guildid"},{"name":"user"}],"output":null}],[11,"on_guild_create","","",147,{"inputs":[{"name":"self"},{"name":"context"},{"name":"guild"},{"name":"bool"}],"output":null}],[11,"on_guild_delete","","",147,{"inputs":[{"name":"self"},{"name":"context"},{"name":"partialguild"},{"name":"option"}],"output":null}],[11,"on_guild_emojis_update","","",147,{"inputs":[{"name":"self"},{"name":"context"},{"name":"guildid"},{"name":"hashmap"}],"output":null}],[11,"on_guild_integrations_update","","",147,{"inputs":[{"name":"self"},{"name":"context"},{"name":"guildid"}],"output":null}],[11,"on_guild_member_addition","","",147,{"inputs":[{"name":"self"},{"name":"context"},{"name":"guildid"},{"name":"member"}],"output":null}],[11,"on_guild_member_removal","","",147,{"inputs":[{"name":"self"},{"name":"context"},{"name":"guildid"},{"name":"user"},{"name":"option"}],"output":null}],[11,"on_guild_member_update","","",147,{"inputs":[{"name":"self"},{"name":"context"},{"name":"option"},{"name":"member"}],"output":null}],[11,"on_guild_members_chunk","","",147,{"inputs":[{"name":"self"},{"name":"context"},{"name":"guildid"},{"name":"hashmap"}],"output":null}],[11,"on_guild_role_create","","",147,{"inputs":[{"name":"self"},{"name":"context"},{"name":"guildid"},{"name":"role"}],"output":null}],[11,"on_guild_role_delete","","",147,{"inputs":[{"name":"self"},{"name":"context"},{"name":"guildid"},{"name":"roleid"},{"name":"option"}],"output":null}],[11,"on_guild_role_update","","",147,{"inputs":[{"name":"self"},{"name":"context"},{"name":"guildid"},{"name":"option"},{"name":"role"}],"output":null}],[11,"on_guild_unavailable","","",147,{"inputs":[{"name":"self"},{"name":"context"},{"name":"guildid"}],"output":null}],[11,"on_guild_update","","",147,{"inputs":[{"name":"self"},{"name":"context"},{"name":"option"},{"name":"partialguild"}],"output":null}],[11,"on_message","","",147,{"inputs":[{"name":"self"},{"name":"context"},{"name":"message"}],"output":null}],[11,"on_message_delete","","",147,{"inputs":[{"name":"self"},{"name":"context"},{"name":"channelid"},{"name":"messageid"}],"output":null}],[11,"on_message_delete_bulk","","",147,{"inputs":[{"name":"self"},{"name":"context"},{"name":"channelid"},{"name":"vec"}],"output":null}],[11,"on_reaction_add","","",147,{"inputs":[{"name":"self"},{"name":"context"},{"name":"reaction"}],"output":null}],[11,"on_reaction_remove","","",147,{"inputs":[{"name":"self"},{"name":"context"},{"name":"reaction"}],"output":null}],[11,"on_reaction_remove_all","","",147,{"inputs":[{"name":"self"},{"name":"context"},{"name":"channelid"},{"name":"messageid"}],"output":null}],[11,"on_message_update","","",147,{"inputs":[{"name":"self"},{"name":"context"},{"name":"messageupdateevent"}],"output":null}],[11,"on_presence_replace","","",147,{"inputs":[{"name":"self"},{"name":"context"},{"name":"vec"}],"output":null}],[11,"on_presence_update","","",147,{"inputs":[{"name":"self"},{"name":"context"},{"name":"presenceupdateevent"}],"output":null}],[11,"on_ready","","",147,{"inputs":[{"name":"self"},{"name":"context"},{"name":"ready"}],"output":null}],[11,"on_resume","","",147,{"inputs":[{"name":"self"},{"name":"context"},{"name":"resumedevent"}],"output":null}],[11,"on_typing_start","","",147,{"inputs":[{"name":"self"},{"name":"context"},{"name":"typingstartevent"}],"output":null}],[11,"on_unknown","","",147,{"inputs":[{"name":"self"},{"name":"context"},{"name":"string"},{"name":"value"}],"output":null}],[11,"on_user_update","","",147,{"inputs":[{"name":"self"},{"name":"context"},{"name":"currentuser"},{"name":"currentuser"}],"output":null}],[11,"on_voice_server_update","","",147,{"inputs":[{"name":"self"},{"name":"context"},{"name":"voiceserverupdateevent"}],"output":null}],[11,"on_voice_state_update","","",147,{"inputs":[{"name":"self"},{"name":"context"},{"name":"option"},{"name":"voicestate"}],"output":null}],[11,"on_webhook_update","","",147,{"inputs":[{"name":"self"},{"name":"context"},{"name":"guildid"},{"name":"channelid"}],"output":null}],[0,"builder","serenity","A set of builders used to make using methods on certain structs simpler to use.",null,null],[3,"CreateEmbed","serenity::builder","A builder to create a fake [`Embed`] object, for use with the [`ChannelId::send_message`] and [`ExecuteWebhook::embeds`] methods.",null,null],[12,"0","","",148,null],[3,"CreateEmbedAuthor","","A builder to create a fake [`Embed`] object's author, for use with the [`CreateEmbed::author`] method.",null,null],[12,"0","","",149,null],[3,"CreateEmbedField","","A builder to create a fake [`Embed`] object's field, for use with the [`CreateEmbed::field`] method.",null,null],[12,"0","","",150,null],[3,"CreateEmbedFooter","","A builder to create a fake [`Embed`] object's footer, for use with the [`CreateEmbed::footer`] method.",null,null],[12,"0","","",151,null],[3,"CreateInvite","","A builder to create a [`RichInvite`] for use via [`GuildChannel::create_invite`].",null,null],[12,"0","","",152,null],[3,"CreateMessage","","A builder to specify the contents of an [`http::send_message`] request, primarily meant for use through [`ChannelId::send_message`].",null,null],[12,"0","","",153,null],[12,"1","","",153,null],[3,"EditChannel","","A builder to edit a [`GuildChannel`] for use via [`GuildChannel::edit`]",null,null],[12,"0","","",154,null],[3,"EditGuild","","A builder to optionally edit certain fields of a [`Guild`]. This is meant for usage with [`Guild::edit`].",null,null],[12,"0","","",155,null],[3,"EditMember","","A builder which edits the properties of a [`Member`], to be used in conjunction with [`Member::edit`].",null,null],[12,"0","","",156,null],[3,"EditProfile","","A builder to edit the current user's settings, to be used in conjunction with [`CurrentUser::edit`].",null,null],[12,"0","","",157,null],[3,"EditRole","","A builer to create or edit a [`Role`] for use via a number of model methods.",null,null],[12,"0","","",158,null],[3,"ExecuteWebhook","","A builder to create the inner content of a [`Webhook`]'s execution.",null,null],[12,"0","","",159,null],[3,"GetMessages","","Builds a request for a request to the API to retrieve messages.",null,null],[12,"0","","",160,null],[11,"clone","","",148,{"inputs":[{"name":"self"}],"output":{"name":"createembed"}}],[11,"fmt","","",148,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"author","","Set the author of the embed.",148,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"color","","Set the colour of the left-hand side of the embed.",148,{"inputs":[{"name":"self"},{"name":"c"}],"output":{"name":"self"}}],[11,"colour","","Set the colour of the left-hand side of the embed.",148,{"inputs":[{"name":"self"},{"name":"c"}],"output":{"name":"self"}}],[11,"description","","Set the description of the embed.",148,{"inputs":[{"name":"self"},{"name":"d"}],"output":{"name":"self"}}],[11,"field","","Set a field. Note that this will not overwrite other fields, and will add to them.",148,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"fields","","Adds multiple fields at once.",148,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"self"}}],[11,"footer","","Set the footer of the embed.",148,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"image","","Set the image associated with the embed. This only supports HTTP(S).",148,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"thumbnail","","Set the thumbnail of the embed. This only supports HTTP(S).",148,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"timestamp","","Set the timestamp.",148,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"self"}}],[11,"title","","Set the title of the embed.",148,{"inputs":[{"name":"self"},{"name":"d"}],"output":{"name":"self"}}],[11,"url","","Set the URL to direct to when clicking on the title.",148,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"attachment","","Same as calling [`image`] with \"attachment://filename.(jpg, png)\".",148,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"default","","Creates a builder with default values, setting the `type` to `rich`.",148,{"inputs":[],"output":{"name":"createembed"}}],[11,"from","","Converts the fields of an embed into the values for a new embed builder.",148,{"inputs":[{"name":"embed"}],"output":{"name":"createembed"}}],[11,"clone","","",149,{"inputs":[{"name":"self"}],"output":{"name":"createembedauthor"}}],[11,"fmt","","",149,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",149,{"inputs":[],"output":{"name":"createembedauthor"}}],[11,"icon_url","","Set the URL of the author's icon.",149,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"name","","Set the author's name.",149,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"url","","Set the author's URL.",149,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"clone","","",150,{"inputs":[{"name":"self"}],"output":{"name":"createembedfield"}}],[11,"fmt","","",150,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"inline","","Set whether the field is inlined. Set to true by default.",150,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"name","","Set the field's name. It can't be longer than 256 characters.",150,{"inputs":[{"name":"self"},{"name":"d"}],"output":{"name":"self"}}],[11,"value","","Set the field's value. It can't be longer than 1024 characters.",150,{"inputs":[{"name":"self"},{"name":"d"}],"output":{"name":"self"}}],[11,"default","","Creates a builder with default values, setting the value of `inline` to `true`.",150,{"inputs":[],"output":{"name":"createembedfield"}}],[11,"clone","","",151,{"inputs":[{"name":"self"}],"output":{"name":"createembedfooter"}}],[11,"fmt","","",151,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",151,{"inputs":[],"output":{"name":"createembedfooter"}}],[11,"icon_url","","Set the icon URL's value. This only supports HTTP(S).",151,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"text","","Set the footer's text.",151,{"inputs":[{"name":"self"},{"name":"d"}],"output":{"name":"self"}}],[11,"clone","","",152,{"inputs":[{"name":"self"}],"output":{"name":"createinvite"}}],[11,"fmt","","",152,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"max_age","","The duration that the invite will be valid for.",152,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"self"}}],[11,"max_uses","","The number of uses that the invite will be valid for.",152,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"self"}}],[11,"temporary","","Whether an invite grants a temporary membership.",152,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"unique","","Whether or not to try to reuse a similar invite.",152,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"default","","Creates a builder with default values, setting `validate` to `null`.",152,{"inputs":[],"output":{"name":"createinvite"}}],[11,"clone","","",153,{"inputs":[{"name":"self"}],"output":{"name":"createmessage"}}],[11,"fmt","","",153,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"content","","Set the content of the message.",153,{"inputs":[{"name":"self"},{"name":"d"}],"output":{"name":"self"}}],[11,"embed","","Set an embed for the message.",153,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"tts","","Set whether the message is text-to-speech.",153,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"reactions","","Adds a list of reactions to create after the message's sent.",153,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"self"}}],[11,"default","","Creates a map for sending a [`Message`], setting [`tts`] to `false` by default.",153,{"inputs":[],"output":{"name":"createmessage"}}],[11,"clone","","",154,{"inputs":[{"name":"self"}],"output":{"name":"editchannel"}}],[11,"fmt","","",154,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",154,{"inputs":[],"output":{"name":"editchannel"}}],[11,"bitrate","","The bitrate of the channel in bits.",154,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"self"}}],[11,"name","","The name of the channel.",154,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"position","","The position of the channel in the channel list.",154,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"self"}}],[11,"topic","","The topic of the channel. Can be empty.",154,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"user_limit","","The number of users that may be in the channel simultaneously.",154,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"self"}}],[11,"clone","","",155,{"inputs":[{"name":"self"}],"output":{"name":"editguild"}}],[11,"fmt","","",155,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",155,{"inputs":[],"output":{"name":"editguild"}}],[11,"afk_channel","","Set the \"AFK voice channel\" that users are to move to if they have been AFK for an amount of time, configurable by [`afk_timeout`].",155,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"self"}}],[11,"afk_timeout","","Set the amount of time a user is to be moved to the AFK channel - configured via [`afk_channel`] - after being AFK.",155,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"self"}}],[11,"icon","","Set the icon of the guild. Pass `None` to remove the icon.",155,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"self"}}],[11,"name","","Set the name of the guild.",155,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"owner","","Transfers the ownership of the guild to another user by Id.",155,{"inputs":[{"name":"self"},{"name":"u"}],"output":{"name":"self"}}],[11,"region","","Set the voice region of the server.",155,{"inputs":[{"name":"self"},{"name":"region"}],"output":{"name":"self"}}],[11,"splash","","Set the splash image of the guild on the invitation page.",155,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"self"}}],[11,"verification_level","","Set the verification level of the guild. This can restrict what a user must have prior to being able to send messages in a guild.",155,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"self"}}],[11,"clone","","",156,{"inputs":[{"name":"self"}],"output":{"name":"editmember"}}],[11,"fmt","","",156,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",156,{"inputs":[],"output":{"name":"editmember"}}],[11,"deafen","","Whether to deafen the member.",156,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"mute","","Whether to mute the member.",156,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"nickname","","Changes the member's nickname. Pass an empty string to reset the nickname.",156,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"roles","","Set the list of roles that the member should have.",156,null],[11,"voice_channel","","The Id of the voice channel to move the member to.",156,{"inputs":[{"name":"self"},{"name":"c"}],"output":{"name":"self"}}],[11,"clone","","",157,{"inputs":[{"name":"self"}],"output":{"name":"editprofile"}}],[11,"fmt","","",157,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",157,{"inputs":[],"output":{"name":"editprofile"}}],[11,"avatar","","Sets the avatar of the current user. `None` can be passed to remove an avatar.",157,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"self"}}],[11,"email","","Modifies the current user's email address.",157,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"new_password","","Modifies the current user's password.",157,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"password","","Used for providing the current password as verification when [modifying the password] or [modifying the associated email address].",157,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"username","","Modifies the current user's username.",157,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"clone","","",158,{"inputs":[{"name":"self"}],"output":{"name":"editrole"}}],[11,"fmt","","",158,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new builder with the values of the given [`Role`].",158,{"inputs":[{"name":"role"}],"output":{"name":"self"}}],[11,"colour","","Sets the colour of the role.",158,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"self"}}],[11,"hoist","","Whether or not to hoist the role above lower-positioned role in the user list.",158,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"mentionable","","Whether or not to make the role mentionable, notifying its users.",158,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"name","","The name of the role to set.",158,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"permissions","","The set of permissions to assign the role.",158,{"inputs":[{"name":"self"},{"name":"permissions"}],"output":{"name":"self"}}],[11,"position","","The position to assign the role in the role list. This correlates to the role's position in the user list.",158,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"self"}}],[11,"default","","Creates a builder with default parameters.",158,{"inputs":[],"output":{"name":"editrole"}}],[11,"clone","","",159,{"inputs":[{"name":"self"}],"output":{"name":"executewebhook"}}],[11,"fmt","","",159,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"avatar_url","","Override the default avatar of the webhook with an image URL.",159,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"content","","Set the content of the message.",159,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"embeds","","Set the embeds associated with the message.",159,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"self"}}],[11,"tts","","Whether the message is a text-to-speech message.",159,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"username","","Override the default username of the webhook.",159,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"default","","Returns a default set of values for a [`Webhook`] execution.",159,{"inputs":[],"output":{"name":"executewebhook"}}],[11,"clone","","",160,{"inputs":[{"name":"self"}],"output":{"name":"getmessages"}}],[11,"fmt","","",160,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",160,{"inputs":[],"output":{"name":"getmessages"}}],[11,"after","","Indicates to retrieve the messages after a specific message, given by its Id.",160,{"inputs":[{"name":"self"},{"name":"m"}],"output":{"name":"self"}}],[11,"around","","Indicates to retrieve the messages around a specific message in either direction (before+after) the given message.",160,{"inputs":[{"name":"self"},{"name":"m"}],"output":{"name":"self"}}],[11,"before","","Indicates to retrieve the messages before a specific message, given by its Id.",160,{"inputs":[{"name":"self"},{"name":"m"}],"output":{"name":"self"}}],[11,"limit","","The maximum number of messages to retrieve for the query.",160,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"self"}}],[11,"most_recent","","This is a function that is here for completeness. You do not need to call this - except to clear previous calls to `after`, `around`, and `before` - as it is the default value.",160,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[0,"cache","serenity","A cache of events received over a `Shard`, where storing at least some data from the event is possible.",null,null],[3,"Cache","serenity::cache","A cache of all events received over a [`Shard`], where storing at least some data from the event is possible.",null,null],[12,"channels","","A map of channels in [`Guild`]s that the current user has received data for.",161,null],[12,"categories","","A map of channel categories.",161,null],[12,"groups","","A map of the groups that the current user is in.",161,null],[12,"guilds","","A map of guilds with full data available. This includes data like [`Role`]s and [`Emoji`]s that are not available through the REST API.",161,null],[12,"notes","","A map of notes that a user has made for individual users.",161,null],[12,"presences","","A map of users' presences. This is updated in real-time. Note that status updates are often \"eaten\" by the gateway, and this should not be treated as being entirely 100% accurate.",161,null],[12,"private_channels","","A map of direct message channels that the current user has open with other users.",161,null],[12,"shard_count","","The total number of shards being used by the bot.",161,null],[12,"unavailable_guilds","","A list of guilds which are \"unavailable\". Refer to the documentation for [`Event::GuildUnavailable`] for more information on when this can occur.",161,null],[12,"user","","The current user \"logged in\" and for which events are being received for.",161,null],[12,"users","","A map of users that the current user sees.",161,null],[11,"clone","","",161,{"inputs":[{"name":"self"}],"output":{"name":"cache"}}],[11,"fmt","","",161,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"unknown_members","","Fetches the number of [`Member`]s that have not had data received.",161,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"all_private_channels","","Fetches a vector of all [`PrivateChannel`] and [`Group`] Ids that are stored in the cache.",161,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"all_guilds","","Fetches a vector of all [`Guild`]s' Ids that are stored in the cache.",161,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"channel","","Retrieves a [`Channel`] from the cache based on the given Id.",161,{"inputs":[{"name":"self"},{"name":"c"}],"output":{"name":"option"}}],[11,"guild","","Retrieves a guild from the cache based on the given Id.",161,{"inputs":[{"name":"self"},{"name":"g"}],"output":{"name":"option"}}],[11,"guild_channel","","Retrieves a reference to a [`Guild`]'s channel. Unlike [`channel`], this will only search guilds for the given channel.",161,{"inputs":[{"name":"self"},{"name":"c"}],"output":{"name":"option"}}],[11,"group","","Retrieves a reference to a [`Group`] from the cache based on the given associated channel Id.",161,{"inputs":[{"name":"self"},{"name":"c"}],"output":{"name":"option"}}],[11,"member","","Retrieves a [`Guild`]'s member from the cache based on the guild's and user's given Ids.",161,{"inputs":[{"name":"self"},{"name":"g"},{"name":"u"}],"output":{"name":"option"}}],[11,"private_channel","","Retrieves a [`PrivateChannel`] from the cache's [`private_channels`] map, if it exists.",161,{"inputs":[{"name":"self"},{"name":"c"}],"output":{"name":"option"}}],[11,"role","","Retrieves a [`Guild`]'s role by their Ids.",161,{"inputs":[{"name":"self"},{"name":"g"},{"name":"r"}],"output":{"name":"option"}}],[11,"user","","Retrieves a `User` from the cache's [`users`] map, if it exists.",161,{"inputs":[{"name":"self"},{"name":"u"}],"output":{"name":"option"}}],[11,"categories","","",161,{"inputs":[{"name":"self"},{"name":"c"}],"output":{"name":"option"}}],[11,"default","","",161,{"inputs":[],"output":{"name":"cache"}}],[0,"client","serenity","The Client contains information about a single bot or user's token, as well as event handlers. Dispatching events to configured handlers and starting the shards' connections are handled directly via the client. In addition, the `http` module and `Cache` are also automatically handled by the Client module for you.",null,null],[3,"Context","serenity::client","The context is a general utility struct provided on event dispatches, which helps with dealing with the current \"context\" of the event dispatch. The context also acts as a general high-level interface over the associated [`Shard`] which received the event, or the low-level [`http`] module.",null,null],[12,"data","","A clone of [`Client::data`]. Refer to its documentation for more information.",143,null],[12,"shard","","The associated shard which dispatched the event handler.",143,null],[3,"CloseHandle","","",null,null],[3,"Client","","The Client is the way to be able to start sending authenticated requests over the REST API, as well as initializing a WebSocket connection through [`Shard`]s. Refer to the [documentation on using sharding][sharding docs] for more information.",null,null],[12,"data","","A ShareMap which requires types to be Send + Sync. This is a map that can be safely shared across contexts.",162,null],[12,"shard_runners","","A HashMap of all shards instantiated by the Client.",162,null],[4,"ClientError","","An error returned from the [`Client`].",null,null],[13,"InvalidToken","","When the token provided is invalid. This is returned when validating a token through the [`validate_token`] function.",144,null],[13,"ShardBootFailure","","When a shard has completely failed to reboot after resume and/or reconnect attempts.",144,null],[13,"Shutdown","","When all shards that the client is responsible for have shutdown with an error.",144,null],[5,"validate_token","","Validates that a token is likely in a valid format.",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[0,"bridge","","",null,null],[0,"gateway","serenity::client::bridge","",null,null],[3,"ShardManager","serenity::client::bridge::gateway","",null,null],[12,"runners","","",163,null],[3,"ShardQueuer","","The shard queuer is a simple loop that runs indefinitely to manage the startup of shards.",null,null],[12,"data","","",164,null],[12,"event_handler","","",164,null],[12,"framework","","",164,null],[12,"last_start","","",164,null],[12,"manager_tx","","",164,null],[12,"runners","","",164,null],[12,"rx","","",164,null],[12,"token","","",164,null],[12,"ws_url","","",164,null],[3,"ShardRunner","","",null,null],[3,"ShardId","","",null,null],[12,"0","","",165,null],[3,"ShardRunnerInfo","","",null,null],[12,"runner_tx","","",166,null],[12,"shard","","",166,null],[4,"ShardManagerMessage","","",null,null],[13,"Restart","","",167,null],[13,"Shutdown","","",167,null],[13,"ShutdownAll","","",167,null],[4,"ShardQueuerMessage","","",null,null],[13,"Start","","Message to start a shard, where the 0-index element is the ID of the Shard to start and the 1-index element is the total shards in use.",168,null],[13,"Shutdown","","Message to shutdown the shard queuer.",168,null],[11,"new","","",163,{"inputs":[{"name":"u64"},{"name":"u64"},{"name":"u64"},{"name":"arc"},{"name":"arc"},{"name":"arc"},{"name":"arc"},{"name":"arc"}],"output":{"name":"self"}}],[11,"initialize","","",163,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"run","","",163,{"inputs":[{"name":"self"}],"output":null}],[11,"shutdown_all","","",163,{"inputs":[{"name":"self"}],"output":null}],[11,"drop","","",163,{"inputs":[{"name":"self"}],"output":null}],[11,"run","","",164,{"inputs":[{"name":"self"}],"output":null}],[11,"new","","",169,{"inputs":[{"name":"arc"},{"name":"sender"},{"name":"arc"},{"name":"arc"},{"name":"arc"}],"output":{"name":"self"}}],[11,"run","","",169,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"clone","","",167,{"inputs":[{"name":"self"}],"output":{"name":"shardmanagermessage"}}],[11,"fmt","","",167,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",167,null],[11,"eq","","",167,{"inputs":[{"name":"self"},{"name":"shardmanagermessage"}],"output":{"name":"bool"}}],[11,"ne","","",167,{"inputs":[{"name":"self"},{"name":"shardmanagermessage"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",167,{"inputs":[{"name":"self"},{"name":"shardmanagermessage"}],"output":{"name":"option"}}],[11,"lt","","",167,{"inputs":[{"name":"self"},{"name":"shardmanagermessage"}],"output":{"name":"bool"}}],[11,"le","","",167,{"inputs":[{"name":"self"},{"name":"shardmanagermessage"}],"output":{"name":"bool"}}],[11,"gt","","",167,{"inputs":[{"name":"self"},{"name":"shardmanagermessage"}],"output":{"name":"bool"}}],[11,"ge","","",167,{"inputs":[{"name":"self"},{"name":"shardmanagermessage"}],"output":{"name":"bool"}}],[11,"cmp","","",167,{"inputs":[{"name":"self"},{"name":"shardmanagermessage"}],"output":{"name":"ordering"}}],[11,"clone","","",165,{"inputs":[{"name":"self"}],"output":{"name":"shardid"}}],[11,"fmt","","",165,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",165,null],[11,"eq","","",165,{"inputs":[{"name":"self"},{"name":"shardid"}],"output":{"name":"bool"}}],[11,"ne","","",165,{"inputs":[{"name":"self"},{"name":"shardid"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",165,{"inputs":[{"name":"self"},{"name":"shardid"}],"output":{"name":"option"}}],[11,"lt","","",165,{"inputs":[{"name":"self"},{"name":"shardid"}],"output":{"name":"bool"}}],[11,"le","","",165,{"inputs":[{"name":"self"},{"name":"shardid"}],"output":{"name":"bool"}}],[11,"gt","","",165,{"inputs":[{"name":"self"},{"name":"shardid"}],"output":{"name":"bool"}}],[11,"ge","","",165,{"inputs":[{"name":"self"},{"name":"shardid"}],"output":{"name":"bool"}}],[11,"cmp","","",165,{"inputs":[{"name":"self"},{"name":"shardid"}],"output":{"name":"ordering"}}],[11,"fmt","","",165,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"fmtresult"}}],[11,"clone","serenity::prelude","",143,{"inputs":[{"name":"self"}],"output":{"name":"context"}}],[11,"edit_profile","","Edits the current user's profile settings.",143,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"online","","Sets the current user as being [`Online`]. This maintains the current game.",143,{"inputs":[{"name":"self"}],"output":null}],[11,"idle","","Sets the current user as being [`Idle`]. This maintains the current game.",143,{"inputs":[{"name":"self"}],"output":null}],[11,"dnd","","Sets the current user as being [`DoNotDisturb`]. This maintains the current game.",143,{"inputs":[{"name":"self"}],"output":null}],[11,"invisible","","Sets the current user as being [`Invisible`]. This maintains the current game.",143,{"inputs":[{"name":"self"}],"output":null}],[11,"reset_presence","","\"Resets\" the current user's presence, by setting the game to `None` and the online status to [`Online`].",143,{"inputs":[{"name":"self"}],"output":null}],[11,"set_game","","Sets the current game, defaulting to an online status of [`Online`].",143,{"inputs":[{"name":"self"},{"name":"game"}],"output":null}],[11,"set_game_name","","Sets the current game, passing in only its name. This will automatically set the current user's [`OnlineStatus`] to [`Online`], and its [`GameType`] as [`Playing`].",143,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[11,"set_presence","","Sets the current user's presence, providing all fields to be passed.",143,{"inputs":[{"name":"self"},{"name":"option"},{"name":"onlinestatus"},{"name":"bool"}],"output":null}],[11,"quit","","Disconnects the shard from the websocket, essentially \"quiting\" it. Note however that this will only exit the one which the `Context` was given. If it's just one shard that's on, then serenity will stop any further actions until [`Client::start`] and vice versa are called again.",143,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"clone","","",144,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"fmt","","",144,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",144,null],[11,"eq","","",144,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"fmt","","",144,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"fmtresult"}}],[11,"description","","",144,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"on_cached","","",147,{"inputs":[{"name":"self"},{"name":"context"},{"name":"vec"}],"output":null}],[11,"on_channel_create","","",147,{"inputs":[{"name":"self"},{"name":"context"},{"name":"arc"}],"output":null}],[11,"on_category_create","","",147,{"inputs":[{"name":"self"},{"name":"context"},{"name":"arc"}],"output":null}],[11,"on_category_delete","","",147,{"inputs":[{"name":"self"},{"name":"context"},{"name":"arc"}],"output":null}],[11,"on_private_channel_create","","",147,{"inputs":[{"name":"self"},{"name":"context"},{"name":"arc"}],"output":null}],[11,"on_channel_delete","","",147,{"inputs":[{"name":"self"},{"name":"context"},{"name":"arc"}],"output":null}],[11,"on_channel_pins_update","","",147,{"inputs":[{"name":"self"},{"name":"context"},{"name":"channelpinsupdateevent"}],"output":null}],[11,"on_channel_recipient_addition","","",147,{"inputs":[{"name":"self"},{"name":"context"},{"name":"channelid"},{"name":"user"}],"output":null}],[11,"on_channel_recipient_removal","","",147,{"inputs":[{"name":"self"},{"name":"context"},{"name":"channelid"},{"name":"user"}],"output":null}],[11,"on_channel_update","","",147,{"inputs":[{"name":"self"},{"name":"context"},{"name":"option"},{"name":"channel"}],"output":null}],[11,"on_guild_ban_addition","","",147,{"inputs":[{"name":"self"},{"name":"context"},{"name":"guildid"},{"name":"user"}],"output":null}],[11,"on_guild_ban_removal","","",147,{"inputs":[{"name":"self"},{"name":"context"},{"name":"guildid"},{"name":"user"}],"output":null}],[11,"on_guild_create","","",147,{"inputs":[{"name":"self"},{"name":"context"},{"name":"guild"},{"name":"bool"}],"output":null}],[11,"on_guild_delete","","",147,{"inputs":[{"name":"self"},{"name":"context"},{"name":"partialguild"},{"name":"option"}],"output":null}],[11,"on_guild_emojis_update","","",147,{"inputs":[{"name":"self"},{"name":"context"},{"name":"guildid"},{"name":"hashmap"}],"output":null}],[11,"on_guild_integrations_update","","",147,{"inputs":[{"name":"self"},{"name":"context"},{"name":"guildid"}],"output":null}],[11,"on_guild_member_addition","","",147,{"inputs":[{"name":"self"},{"name":"context"},{"name":"guildid"},{"name":"member"}],"output":null}],[11,"on_guild_member_removal","","",147,{"inputs":[{"name":"self"},{"name":"context"},{"name":"guildid"},{"name":"user"},{"name":"option"}],"output":null}],[11,"on_guild_member_update","","",147,{"inputs":[{"name":"self"},{"name":"context"},{"name":"option"},{"name":"member"}],"output":null}],[11,"on_guild_members_chunk","","",147,{"inputs":[{"name":"self"},{"name":"context"},{"name":"guildid"},{"name":"hashmap"}],"output":null}],[11,"on_guild_role_create","","",147,{"inputs":[{"name":"self"},{"name":"context"},{"name":"guildid"},{"name":"role"}],"output":null}],[11,"on_guild_role_delete","","",147,{"inputs":[{"name":"self"},{"name":"context"},{"name":"guildid"},{"name":"roleid"},{"name":"option"}],"output":null}],[11,"on_guild_role_update","","",147,{"inputs":[{"name":"self"},{"name":"context"},{"name":"guildid"},{"name":"option"},{"name":"role"}],"output":null}],[11,"on_guild_unavailable","","",147,{"inputs":[{"name":"self"},{"name":"context"},{"name":"guildid"}],"output":null}],[11,"on_guild_update","","",147,{"inputs":[{"name":"self"},{"name":"context"},{"name":"option"},{"name":"partialguild"}],"output":null}],[11,"on_message","","",147,{"inputs":[{"name":"self"},{"name":"context"},{"name":"message"}],"output":null}],[11,"on_message_delete","","",147,{"inputs":[{"name":"self"},{"name":"context"},{"name":"channelid"},{"name":"messageid"}],"output":null}],[11,"on_message_delete_bulk","","",147,{"inputs":[{"name":"self"},{"name":"context"},{"name":"channelid"},{"name":"vec"}],"output":null}],[11,"on_reaction_add","","",147,{"inputs":[{"name":"self"},{"name":"context"},{"name":"reaction"}],"output":null}],[11,"on_reaction_remove","","",147,{"inputs":[{"name":"self"},{"name":"context"},{"name":"reaction"}],"output":null}],[11,"on_reaction_remove_all","","",147,{"inputs":[{"name":"self"},{"name":"context"},{"name":"channelid"},{"name":"messageid"}],"output":null}],[11,"on_message_update","","",147,{"inputs":[{"name":"self"},{"name":"context"},{"name":"messageupdateevent"}],"output":null}],[11,"on_presence_replace","","",147,{"inputs":[{"name":"self"},{"name":"context"},{"name":"vec"}],"output":null}],[11,"on_presence_update","","",147,{"inputs":[{"name":"self"},{"name":"context"},{"name":"presenceupdateevent"}],"output":null}],[11,"on_ready","","",147,{"inputs":[{"name":"self"},{"name":"context"},{"name":"ready"}],"output":null}],[11,"on_resume","","",147,{"inputs":[{"name":"self"},{"name":"context"},{"name":"resumedevent"}],"output":null}],[11,"on_typing_start","","",147,{"inputs":[{"name":"self"},{"name":"context"},{"name":"typingstartevent"}],"output":null}],[11,"on_unknown","","",147,{"inputs":[{"name":"self"},{"name":"context"},{"name":"string"},{"name":"value"}],"output":null}],[11,"on_user_update","","",147,{"inputs":[{"name":"self"},{"name":"context"},{"name":"currentuser"},{"name":"currentuser"}],"output":null}],[11,"on_voice_server_update","","",147,{"inputs":[{"name":"self"},{"name":"context"},{"name":"voiceserverupdateevent"}],"output":null}],[11,"on_voice_state_update","","",147,{"inputs":[{"name":"self"},{"name":"context"},{"name":"option"},{"name":"voicestate"}],"output":null}],[11,"on_webhook_update","","",147,{"inputs":[{"name":"self"},{"name":"context"},{"name":"guildid"},{"name":"channelid"}],"output":null}],[8,"EventHandler","serenity::client","",null,null],[11,"on_cached","serenity::prelude","",147,{"inputs":[{"name":"self"},{"name":"context"},{"name":"vec"}],"output":null}],[11,"on_channel_create","","",147,{"inputs":[{"name":"self"},{"name":"context"},{"name":"arc"}],"output":null}],[11,"on_category_create","","",147,{"inputs":[{"name":"self"},{"name":"context"},{"name":"arc"}],"output":null}],[11,"on_category_delete","","",147,{"inputs":[{"name":"self"},{"name":"context"},{"name":"arc"}],"output":null}],[11,"on_private_channel_create","","",147,{"inputs":[{"name":"self"},{"name":"context"},{"name":"arc"}],"output":null}],[11,"on_channel_delete","","",147,{"inputs":[{"name":"self"},{"name":"context"},{"name":"arc"}],"output":null}],[11,"on_channel_pins_update","","",147,{"inputs":[{"name":"self"},{"name":"context"},{"name":"channelpinsupdateevent"}],"output":null}],[11,"on_channel_recipient_addition","","",147,{"inputs":[{"name":"self"},{"name":"context"},{"name":"channelid"},{"name":"user"}],"output":null}],[11,"on_channel_recipient_removal","","",147,{"inputs":[{"name":"self"},{"name":"context"},{"name":"channelid"},{"name":"user"}],"output":null}],[11,"on_channel_update","","",147,{"inputs":[{"name":"self"},{"name":"context"},{"name":"option"},{"name":"channel"}],"output":null}],[11,"on_guild_ban_addition","","",147,{"inputs":[{"name":"self"},{"name":"context"},{"name":"guildid"},{"name":"user"}],"output":null}],[11,"on_guild_ban_removal","","",147,{"inputs":[{"name":"self"},{"name":"context"},{"name":"guildid"},{"name":"user"}],"output":null}],[11,"on_guild_create","","",147,{"inputs":[{"name":"self"},{"name":"context"},{"name":"guild"},{"name":"bool"}],"output":null}],[11,"on_guild_delete","","",147,{"inputs":[{"name":"self"},{"name":"context"},{"name":"partialguild"},{"name":"option"}],"output":null}],[11,"on_guild_emojis_update","","",147,{"inputs":[{"name":"self"},{"name":"context"},{"name":"guildid"},{"name":"hashmap"}],"output":null}],[11,"on_guild_integrations_update","","",147,{"inputs":[{"name":"self"},{"name":"context"},{"name":"guildid"}],"output":null}],[11,"on_guild_member_addition","","",147,{"inputs":[{"name":"self"},{"name":"context"},{"name":"guildid"},{"name":"member"}],"output":null}],[11,"on_guild_member_removal","","",147,{"inputs":[{"name":"self"},{"name":"context"},{"name":"guildid"},{"name":"user"},{"name":"option"}],"output":null}],[11,"on_guild_member_update","","",147,{"inputs":[{"name":"self"},{"name":"context"},{"name":"option"},{"name":"member"}],"output":null}],[11,"on_guild_members_chunk","","",147,{"inputs":[{"name":"self"},{"name":"context"},{"name":"guildid"},{"name":"hashmap"}],"output":null}],[11,"on_guild_role_create","","",147,{"inputs":[{"name":"self"},{"name":"context"},{"name":"guildid"},{"name":"role"}],"output":null}],[11,"on_guild_role_delete","","",147,{"inputs":[{"name":"self"},{"name":"context"},{"name":"guildid"},{"name":"roleid"},{"name":"option"}],"output":null}],[11,"on_guild_role_update","","",147,{"inputs":[{"name":"self"},{"name":"context"},{"name":"guildid"},{"name":"option"},{"name":"role"}],"output":null}],[11,"on_guild_unavailable","","",147,{"inputs":[{"name":"self"},{"name":"context"},{"name":"guildid"}],"output":null}],[11,"on_guild_update","","",147,{"inputs":[{"name":"self"},{"name":"context"},{"name":"option"},{"name":"partialguild"}],"output":null}],[11,"on_message","","",147,{"inputs":[{"name":"self"},{"name":"context"},{"name":"message"}],"output":null}],[11,"on_message_delete","","",147,{"inputs":[{"name":"self"},{"name":"context"},{"name":"channelid"},{"name":"messageid"}],"output":null}],[11,"on_message_delete_bulk","","",147,{"inputs":[{"name":"self"},{"name":"context"},{"name":"channelid"},{"name":"vec"}],"output":null}],[11,"on_reaction_add","","",147,{"inputs":[{"name":"self"},{"name":"context"},{"name":"reaction"}],"output":null}],[11,"on_reaction_remove","","",147,{"inputs":[{"name":"self"},{"name":"context"},{"name":"reaction"}],"output":null}],[11,"on_reaction_remove_all","","",147,{"inputs":[{"name":"self"},{"name":"context"},{"name":"channelid"},{"name":"messageid"}],"output":null}],[11,"on_message_update","","",147,{"inputs":[{"name":"self"},{"name":"context"},{"name":"messageupdateevent"}],"output":null}],[11,"on_presence_replace","","",147,{"inputs":[{"name":"self"},{"name":"context"},{"name":"vec"}],"output":null}],[11,"on_presence_update","","",147,{"inputs":[{"name":"self"},{"name":"context"},{"name":"presenceupdateevent"}],"output":null}],[11,"on_ready","","",147,{"inputs":[{"name":"self"},{"name":"context"},{"name":"ready"}],"output":null}],[11,"on_resume","","",147,{"inputs":[{"name":"self"},{"name":"context"},{"name":"resumedevent"}],"output":null}],[11,"on_typing_start","","",147,{"inputs":[{"name":"self"},{"name":"context"},{"name":"typingstartevent"}],"output":null}],[11,"on_unknown","","",147,{"inputs":[{"name":"self"},{"name":"context"},{"name":"string"},{"name":"value"}],"output":null}],[11,"on_user_update","","",147,{"inputs":[{"name":"self"},{"name":"context"},{"name":"currentuser"},{"name":"currentuser"}],"output":null}],[11,"on_voice_server_update","","",147,{"inputs":[{"name":"self"},{"name":"context"},{"name":"voiceserverupdateevent"}],"output":null}],[11,"on_voice_state_update","","",147,{"inputs":[{"name":"self"},{"name":"context"},{"name":"option"},{"name":"voicestate"}],"output":null}],[11,"on_webhook_update","","",147,{"inputs":[{"name":"self"},{"name":"context"},{"name":"guildid"},{"name":"channelid"}],"output":null}],[11,"clone","serenity::client","",170,{"inputs":[{"name":"self"}],"output":{"name":"closehandle"}}],[11,"close","","",170,{"inputs":[{"name":"self"}],"output":null}],[11,"clone","","",162,{"inputs":[{"name":"self"}],"output":{"name":"client"}}],[11,"new","","Creates a Client for a bot user.",162,{"inputs":[{"name":"str"},{"name":"h"}],"output":{"name":"self"}}],[11,"with_framework","","Sets a framework to be used with the client. All message events will be passed through the framework after being passed to the [`on_message`] event handler.",162,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"start","","Establish the connection and start listening for events.",162,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"start_autosharded","","Establish the connection(s) and start listening for events.",162,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"start_shard","","Establish a sharded connection and start listening for events.",162,{"inputs":[{"name":"self"},{"name":"u64"},{"name":"u64"}],"output":{"name":"result"}}],[11,"start_shards","","Establish sharded connections and start listening for events.",162,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"result"}}],[11,"start_shard_range","","Establish a range of sharded connections and start listening for events.",162,null],[11,"close_handle","","Returns a thread-safe handle for closing shards.",162,{"inputs":[{"name":"self"}],"output":{"name":"closehandle"}}],[11,"drop","","",162,{"inputs":[{"name":"self"}],"output":null}],[0,"framework","serenity","The framework is a customizable method of separating commands.",null,null],[0,"standard","serenity::framework","",null,null],[3,"Command","serenity::framework::standard","Command struct used to store commands internally.",null,null],[12,"checks","","A set of checks to be called prior to executing the command. The checks will short-circuit on the first check that returns `false`.",171,null],[12,"exec","","Function called when the command is called.",171,null],[12,"bucket","","Ratelimit bucket.",171,null],[12,"desc","","Command description, used by other commands.",171,null],[12,"example","","Example arguments, used by other commands.",171,null],[12,"usage","","Command usage schema, used by other commands.",171,null],[12,"min_args","","Minumum amount of arguments that should be passed.",171,null],[12,"max_args","","Maximum amount of arguments that can be passed.",171,null],[12,"required_permissions","","Permissions required to use this command.",171,null],[12,"allowed_roles","","Roles allowed to use this command.",171,null],[12,"help_available","","Whether command should be displayed in help list or not, used by other commands.",171,null],[12,"dm_only","","Whether command can be used only privately or not.",171,null],[12,"guild_only","","Whether command can be used only in guilds or not.",171,null],[12,"owners_only","","Whether command can only be used by owners or not.",171,null],[3,"CommandGroup","","",null,null],[12,"prefix","","",172,null],[12,"commands","","",172,null],[12,"bucket","","Some fields taken from Command",172,null],[12,"required_permissions","","",172,null],[12,"allowed_roles","","",172,null],[12,"help_available","","",172,null],[12,"dm_only","","",172,null],[12,"guild_only","","",172,null],[12,"owners_only","","",172,null],[3,"CommandError","","An error from a command.",null,null],[3,"Configuration","","The configuration to use for a [`Framework`] associated with a [`Client`] instance.",null,null],[3,"CreateCommand","","",null,null],[12,"0","","",173,null],[3,"CreateGroup","","Used to create command groups",null,null],[12,"0","","",174,null],[3,"Args","","",null,null],[3,"StandardFramework","","A utility for easily managing dispatches to commands.",null,null],[12,"initialized","","Whether the framework has been \"initialized\".",175,null],[4,"CommandType","","Command function type. Allows to access internal framework things inside your commands.",null,null],[13,"StringResponse","","",176,null],[13,"Basic","","",176,null],[13,"WithCommands","","",176,null],[4,"CommandOrAlias","","",null,null],[13,"Alias","","",177,null],[13,"Command","","",177,null],[4,"ArgError","","Defines how an operation on an `Args` method failed.",null,null],[13,"Eos","","\"END-OF-STRING\", more precisely, there isn't anything to parse anymore.",178,null],[13,"Parse","","A parsing operation failed; the error in it can be of any returned from the `FromStr` trait.",178,null],[4,"DispatchError","","A enum representing all possible fail conditions under which a command won't be executed.",null,null],[13,"CheckFailed","","When a custom function check has failed.",179,null],[13,"CommandDisabled","","When the requested command is disabled in bot configuration.",179,null],[13,"BlockedUser","","When the user is blocked in bot configuration.",179,null],[13,"BlockedGuild","","When the guild or its owner is blocked in bot configuration.",179,null],[13,"LackOfPermissions","","When the command requester lacks specific required permissions.",179,null],[13,"RateLimited","","When the command requester has exceeded a ratelimit bucket. The attached value is the time a requester has to wait to run the command again.",179,null],[13,"OnlyForDM","","When the requested command can only be used in a direct message or group channel.",179,null],[13,"OnlyForGuilds","","When the requested command can only be ran in guilds, or the bot doesn't support DMs.",179,null],[13,"OnlyForOwners","","When the requested command can only be used by bot owners.",179,null],[13,"LackingRole","","When the requested command requires one role.",179,null],[13,"NotEnoughArguments","","When there are too few arguments.",179,null],[12,"min","serenity::framework::standard::DispatchError","",179,null],[12,"given","","",179,null],[13,"TooManyArguments","serenity::framework::standard","When there are too many arguments.",179,null],[12,"max","serenity::framework::standard::DispatchError","",179,null],[12,"given","","",179,null],[13,"IgnoredBot","serenity::framework::standard","When the command was requested by a bot user when they are set to be ignored.",179,null],[13,"WebhookAuthor","","When the bot ignores webhooks and a command was issued by one.",179,null],[0,"help_commands","","A collection of default help commands for the framework.",null,null],[5,"with_embeds","serenity::framework::standard::help_commands","Posts an embed showing each individual command group and its commands.",null,{"inputs":[{"name":"context"},{"name":"message"},{"name":"hashmap"},{"name":"args"}],"output":{"name":"result"}}],[5,"plain","","Posts formatted text displaying each individual command group and its commands.",null,{"inputs":[{"name":"context"},{"name":"message"},{"name":"hashmap"},{"name":"args"}],"output":{"name":"result"}}],[11,"clone","serenity::framework::standard","",180,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"fmt","","",180,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",180,{"inputs":[{"name":"d"}],"output":{"name":"self"}}],[11,"new","","",171,null],[11,"default","","",171,{"inputs":[],"output":{"name":"command"}}],[11,"allow_dm","","If set to false, bot will ignore any private messages.",181,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"allow_whitespace","","Whether to allow whitespace being optional between a mention/prefix and a command.",181,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"blocked_guilds","","HashSet of guild Ids where commands will be ignored.",181,{"inputs":[{"name":"self"},{"name":"hashset"}],"output":{"name":"self"}}],[11,"blocked_users","","HashSet of user Ids whose commands will be ignored. Guilds owned by user Ids will also be ignored.",181,{"inputs":[{"name":"self"},{"name":"hashset"}],"output":{"name":"self"}}],[11,"depth","","The default depth of the message to check for commands. Defaults to 5. This determines how \"far\" into a message to check for a valid command.",181,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"self"}}],[11,"disabled_commands","","HashSet of command names that won't be run.",181,{"inputs":[{"name":"self"},{"name":"hashset"}],"output":{"name":"self"}}],[11,"dynamic_prefix","","Sets the prefix to respond to dynamically based on conditions.",181,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"ignore_bots","","Whether the bot should respond to other bots.",181,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"ignore_webhooks","","If set to true, bot will ignore all commands called by webhooks. True by default.",181,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"on_mention","","Whether or not to respond to commands initiated with a mention. Note that this can be used in conjunction with [`prefix`].",181,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"owners","","A `HashSet` of user Ids checks won't apply to.",181,{"inputs":[{"name":"self"},{"name":"hashset"}],"output":{"name":"self"}}],[11,"prefix","","Sets the prefix to respond to. A prefix can be a string slice of any non-zero length.",181,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"prefixes","","Sets the prefixes to respond to. Each can be a string slice of any non-zero length.",181,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"self"}}],[11,"delimiter","","Sets a delimiter to be used when splitting the content after a command.",181,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"delimiters","","Sets multiple delimiters to be used when splitting the content after a command. Additionally cleans the default delimiter from the vector.",181,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"self"}}],[11,"case_insensitivity","","Whether the framework shouldn't care about the user's input if it's: `~command`, `~Command`, `~COMMAND`. Setting this to `true` will result in all command names to be case insensitive.",181,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"default","","Builds a default framework configuration, setting the following:",181,{"inputs":[],"output":{"name":"configuration"}}],[11,"batch_known_as","","Adds multiple aliases.",173,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"self"}}],[11,"bucket","","Adds a ratelimit bucket.",173,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"check","","Adds a \"check\" to a command, which checks whether or not the command's function should be called.",173,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"desc","","Description, used by other commands.",173,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"dm_only","","Whether command can be used only privately or not.",173,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"example","","Example arguments, used by other commands.",173,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"exec","","A function that can be called when a command is received. You can return `Err(string)` if there's an error.",173,null],[11,"exec_help","","Sets a function that's called when a command is called that can access the internal HashMap of commands, used specifically for creating a help command.",173,null],[11,"exec_str","","Sets a string to be sent in the channel of context on command. This can be useful for an `about`, `invite`, `ping`, etc. command.",173,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"guild_only","","Whether command can be used only in guilds or not.",173,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"help_available","","Whether command should be displayed in help list or not, used by other commands.",173,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"known_as","","Adds an alias, allowing users to use the command under a different name.",173,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"max_args","","Maximum amount of arguments that can be passed.",173,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"self"}}],[11,"min_args","","Minumum amount of arguments that should be passed.",173,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"self"}}],[11,"num_args","","Exact number of arguments that should be passed.",173,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"self"}}],[11,"owners_only","","Whether command can be used only privately or not.",173,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"required_permissions","","The permissions that a user must have in the contextual channel in order for the command to be processed.",173,{"inputs":[{"name":"self"},{"name":"permissions"}],"output":{"name":"self"}}],[11,"usage","","Command usage schema, used by other commands.",173,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"allowed_roles","","Sets roles that are allowed to use the command.",173,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"self"}}],[11,"default","","",174,{"inputs":[],"output":{"name":"creategroup"}}],[11,"command","","Adds a command to group.",174,{"inputs":[{"name":"self"},{"name":"str"},{"name":"f"}],"output":{"name":"self"}}],[11,"on","","Adds a command to group with simplified API. You can return Err(From::from(string)) if there's an error.",174,null],[11,"prefix","","If prefix is set, it will be required before all command names. For example, if bot prefix is \"~\" and group prefix is \"image\" we'd call a subcommand named \"hibiki\" by sending \"~image hibiki\".",174,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"bucket","","Adds a ratelimit bucket.",174,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"dm_only","","Whether command can be used only privately or not.",174,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"guild_only","","Whether command can be used only in guilds or not.",174,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"help_available","","Whether command should be displayed in help list or not, used by other commands.",174,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"owners_only","","Whether command can be used only privately or not.",174,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"required_permissions","","The permissions that a user must have in the contextual channel in order for the command to be processed.",174,{"inputs":[{"name":"self"},{"name":"permissions"}],"output":{"name":"self"}}],[11,"allowed_roles","","Sets roles that are allowed to use the command.",174,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"self"}}],[11,"default","","",172,{"inputs":[],"output":{"name":"commandgroup"}}],[11,"fmt","","",178,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",178,{"inputs":[{"name":"e"}],"output":{"name":"self"}}],[11,"description","","",178,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",178,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",178,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",182,{"inputs":[{"name":"self"}],"output":{"name":"args"}}],[11,"fmt","","",182,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",182,{"inputs":[{"name":"str"},{"name":"vec"}],"output":{"name":"self"}}],[11,"single","","Removes the first element, parses it to a specific type if necessary, returns.",182,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"single_n","","Like [`single`], but doesn't remove the element.",182,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"skip","","Skips if there's a first element, but also returns it.",182,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"skip_for","","Like [`skip`], but allows for multiple at once.",182,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"single_quoted","","Like [`single`], but takes quotes into account.",182,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"single_quoted_n","","Like [`single_quoted`], but doesn't remove the element.",182,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"multiple_quoted","","Like [`list`], but takes quotes into account.",182,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"list","","Empty outs the internal vector while parsing (if necessary) and returning them",182,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"full","","This method is just `internal_vector.join(delimiter)`",182,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"find","","Returns the first argument that can be converted and removes it from the list.",182,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"find_n","","Returns the first argument that can be converted and does not remove it from the list.",182,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"deref","","",182,null],[11,"default","","",175,{"inputs":[],"output":{"name":"standardframework"}}],[11,"new","","",175,{"inputs":[],"output":{"name":"self"}}],[11,"configure","","Configures the framework, setting non-default values. All fields are optional. Refer to [`Configuration::default`] for more information on the default values.",175,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"bucket","","Defines a bucket with `delay` between each command, and the `limit` of uses per `time_span`.",175,{"inputs":[{"name":"self"},{"name":"s"},{"name":"i64"},{"name":"i64"},{"name":"i32"}],"output":{"name":"self"}}],[11,"complex_bucket","","Same as [`bucket`] but with a check added.",175,{"inputs":[{"name":"self"},{"name":"s"},{"name":"i64"},{"name":"i64"},{"name":"i32"},{"name":"check"}],"output":{"name":"self"}}],[11,"simple_bucket","","Defines a bucket with only a `delay` between each command.",175,{"inputs":[{"name":"self"},{"name":"s"},{"name":"i64"}],"output":{"name":"self"}}],[11,"on","","Adds a function to be associated with a command, which will be called when a command is used in a message.",175,null],[11,"command","","Adds a command using command builder.",175,{"inputs":[{"name":"self"},{"name":"s"},{"name":"f"}],"output":{"name":"self"}}],[11,"group","","Adds a group which can organize several related commands. Groups are taken into account when using `serenity::framework::standard::help_commands`.",175,{"inputs":[{"name":"self"},{"name":"s"},{"name":"f"}],"output":{"name":"self"}}],[11,"on_dispatch_error","","Specify the function that's called in case a command wasn't executed for one reason or another.",175,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"before","","Specify the function to be called prior to every command's execution. If that function returns true, the command will be executed.",175,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"after","","Specify the function to be called after every command's execution. Fourth argument exists if command returned an error which you can handle.",175,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"dispatch","","",175,{"inputs":[{"name":"self"},{"name":"context"},{"name":"message"}],"output":null}],[11,"update_current_user","","",175,{"inputs":[{"name":"self"},{"name":"userid"},{"name":"bool"}],"output":null}],[8,"Framework","serenity::framework","This trait allows for serenity to either use its builtin framework, or yours.",null,null],[10,"dispatch","","",183,{"inputs":[{"name":"self"},{"name":"context"},{"name":"message"}],"output":null}],[0,"gateway","serenity","The gateway module contains the pieces - primarily the `Shard` - responsible for maintaing a WebSocket connection with Discord.",null,null],[3,"Shard","serenity::gateway","A Shard is a higher-level handler for a websocket connection to Discord's gateway. The shard allows for sending and receiving messages over the websocket, such as setting the active game, reconnecting, syncing guilds, and more.",null,null],[12,"client","","",184,null],[4,"GatewayError","","An error that occurred while attempting to deal with the gateway.",null,null],[13,"BuildingUrl","","There was an error building a URL.",145,null],[13,"Closed","","The connection closed, potentially uncleanly.",145,null],[13,"ExpectedHello","","Expected a Hello during a handshake",145,null],[13,"HeartbeatFailed","","When there was an error sending a heartbeat.",145,null],[13,"InvalidAuthentication","","When invalid authentication (a bad token) was sent in the IDENTIFY.",145,null],[13,"InvalidHandshake","","Expected a Ready or an InvalidateSession",145,null],[13,"InvalidOpCode","","An indicator that an unknown opcode was received from the gateway.",145,null],[13,"InvalidShardData","","When invalid sharding data was sent in the IDENTIFY.",145,null],[13,"NoAuthentication","","When no authentication was sent in the IDENTIFY.",145,null],[13,"NoSessionId","","When a session Id was expected (for resuming), but was not present.",145,null],[13,"OverloadedShard","","When a shard would have too many guilds assigned to it.",145,null],[13,"ReconnectFailure","","Failed to reconnect after a number of attempts.",145,null],[4,"ConnectionStage","","Indicates the current connection stage of a [`Shard`].",null,null],[13,"Connected","","Indicator that the [`Shard`] is normally connected and is not in, e.g., a resume phase.",185,null],[13,"Connecting","","Indicator that the [`Shard`] is connecting and is in, e.g., a resume phase.",185,null],[13,"Disconnected","","Indicator that the [`Shard`] is fully disconnected and is not in a reconnecting phase.",185,null],[13,"Handshake","","Indicator that the [`Shard`] is currently initiating a handshake.",185,null],[13,"Identifying","","Indicator that the [`Shard`] has sent an IDENTIFY packet and is awaiting a READY packet.",185,null],[11,"clone","serenity::prelude","",145,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"fmt","","",145,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",145,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"fmtresult"}}],[11,"description","","",145,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"new","serenity::gateway","Instantiates a new instance of a Shard, bypassing the client.",184,null],[11,"shard_info","","Retrieves a copy of the current shard information.",184,null],[11,"set_afk","","Sets whether the current user is afk. This helps Discord determine where to send notifications.",184,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"set_game","","Sets the user's current game, if any.",184,{"inputs":[{"name":"self"},{"name":"option"}],"output":null}],[11,"set_status","","Sets the user's current online status.",184,{"inputs":[{"name":"self"},{"name":"onlinestatus"}],"output":null}],[11,"set_presence","","Sets the user's full presence information.",184,{"inputs":[{"name":"self"},{"name":"option"},{"name":"onlinestatus"},{"name":"bool"}],"output":null}],[11,"latency","","Calculates the heartbeat latency between the shard and the gateway.",184,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"shutdown_clean","","Shuts down the receiver by attempting to cleanly close the connection.",184,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"shutdown","","Uncleanly shuts down the receiver by not sending a close code.",184,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"chunk_guilds","","Requests that one or multiple [`Guild`]s be chunked.",184,null],[11,"guilds_handled","","Calculates the number of guilds that the shard is responsible for.",184,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[11,"fmt","","",185,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",185,{"inputs":[{"name":"self"},{"name":"connectionstage"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",185,{"inputs":[{"name":"self"},{"name":"connectionstage"}],"output":{"name":"option"}}],[11,"cmp","","",185,{"inputs":[{"name":"self"},{"name":"connectionstage"}],"output":{"name":"ordering"}}],[0,"http","serenity","The HTTP module which provides functions for performing requests to endpoints in Discord's API.",null,null],[4,"StatusClass","serenity::http","The class of an HTTP `status-code`.",null,null],[13,"Informational","","1xx (Informational): The request was received, continuing process",186,null],[13,"Success","","2xx (Success): The request was successfully received, understood, and accepted",186,null],[13,"Redirection","","3xx (Redirection): Further action needs to be taken in order to complete the request",186,null],[13,"ClientError","","4xx (Client Error): The request contains bad syntax or cannot be fulfilled",186,null],[13,"ServerError","","5xx (Server Error): The server failed to fulfill an apparently valid request",186,null],[13,"NoClass","","A status code lower than 100 or higher than 599. These codes do no belong to any class.",186,null],[4,"StatusCode","","An HTTP status code (`status-code` in RFC 7230 et al.).",null,null],[13,"Continue","","100 Continue [RFC7231, Section 6.2.1]",187,null],[13,"SwitchingProtocols","","101 Switching Protocols [RFC7231, Section 6.2.2]",187,null],[13,"Processing","","102 Processing [RFC2518]",187,null],[13,"Ok","","200 OK [RFC7231, Section 6.3.1]",187,null],[13,"Created","","201 Created [RFC7231, Section 6.3.2]",187,null],[13,"Accepted","","202 Accepted [RFC7231, Section 6.3.3]",187,null],[13,"NonAuthoritativeInformation","","203 Non-Authoritative Information [RFC7231, Section 6.3.4]",187,null],[13,"NoContent","","204 No Content [RFC7231, Section 6.3.5]",187,null],[13,"ResetContent","","205 Reset Content [RFC7231, Section 6.3.6]",187,null],[13,"PartialContent","","206 Partial Content [RFC7233, Section 4.1]",187,null],[13,"MultiStatus","","207 Multi-Status [RFC4918]",187,null],[13,"AlreadyReported","","208 Already Reported [RFC5842]",187,null],[13,"ImUsed","","226 IM Used [RFC3229]",187,null],[13,"MultipleChoices","","300 Multiple Choices [RFC7231, Section 6.4.1]",187,null],[13,"MovedPermanently","","301 Moved Permanently [RFC7231, Section 6.4.2]",187,null],[13,"Found","","302 Found [RFC7231, Section 6.4.3]",187,null],[13,"SeeOther","","303 See Other [RFC7231, Section 6.4.4]",187,null],[13,"NotModified","","304 Not Modified [RFC7232, Section 4.1]",187,null],[13,"UseProxy","","305 Use Proxy [RFC7231, Section 6.4.5]",187,null],[13,"TemporaryRedirect","","307 Temporary Redirect [RFC7231, Section 6.4.7]",187,null],[13,"PermanentRedirect","","308 Permanent Redirect [RFC7238]",187,null],[13,"BadRequest","","400 Bad Request [RFC7231, Section 6.5.1]",187,null],[13,"Unauthorized","","401 Unauthorized [RFC7235, Section 3.1]",187,null],[13,"PaymentRequired","","402 Payment Required [RFC7231, Section 6.5.2]",187,null],[13,"Forbidden","","403 Forbidden [RFC7231, Section 6.5.3]",187,null],[13,"NotFound","","404 Not Found [RFC7231, Section 6.5.4]",187,null],[13,"MethodNotAllowed","","405 Method Not Allowed [RFC7231, Section 6.5.5]",187,null],[13,"NotAcceptable","","406 Not Acceptable [RFC7231, Section 6.5.6]",187,null],[13,"ProxyAuthenticationRequired","","407 Proxy Authentication Required [RFC7235, Section 3.2]",187,null],[13,"RequestTimeout","","408 Request Timeout [RFC7231, Section 6.5.7]",187,null],[13,"Conflict","","409 Conflict [RFC7231, Section 6.5.8]",187,null],[13,"Gone","","410 Gone [RFC7231, Section 6.5.9]",187,null],[13,"LengthRequired","","411 Length Required [RFC7231, Section 6.5.10]",187,null],[13,"PreconditionFailed","","412 Precondition Failed [RFC7232, Section 4.2]",187,null],[13,"PayloadTooLarge","","413 Payload Too Large [RFC7231, Section 6.5.11]",187,null],[13,"UriTooLong","","414 URI Too Long [RFC7231, Section 6.5.12]",187,null],[13,"UnsupportedMediaType","","415 Unsupported Media Type [RFC7231, Section 6.5.13]",187,null],[13,"RangeNotSatisfiable","","416 Range Not Satisfiable [RFC7233, Section 4.4]",187,null],[13,"ExpectationFailed","","417 Expectation Failed [RFC7231, Section 6.5.14]",187,null],[13,"ImATeapot","","418 I'm a teapot [curiously, not registered by IANA, but RFC2324]",187,null],[13,"MisdirectedRequest","","421 Misdirected Request RFC7540, Section 9.1.2",187,null],[13,"UnprocessableEntity","","422 Unprocessable Entity [RFC4918]",187,null],[13,"Locked","","423 Locked [RFC4918]",187,null],[13,"FailedDependency","","424 Failed Dependency [RFC4918]",187,null],[13,"UpgradeRequired","","426 Upgrade Required [RFC7231, Section 6.5.15]",187,null],[13,"PreconditionRequired","","428 Precondition Required [RFC6585]",187,null],[13,"TooManyRequests","","429 Too Many Requests [RFC6585]",187,null],[13,"RequestHeaderFieldsTooLarge","","431 Request Header Fields Too Large [RFC6585]",187,null],[13,"UnavailableForLegalReasons","","451 Unavailable For Legal Reasons [RFC7725]",187,null],[13,"InternalServerError","","500 Internal Server Error [RFC7231, Section 6.6.1]",187,null],[13,"NotImplemented","","501 Not Implemented [RFC7231, Section 6.6.2]",187,null],[13,"BadGateway","","502 Bad Gateway [RFC7231, Section 6.6.3]",187,null],[13,"ServiceUnavailable","","503 Service Unavailable [RFC7231, Section 6.6.4]",187,null],[13,"GatewayTimeout","","504 Gateway Timeout [RFC7231, Section 6.6.5]",187,null],[13,"HttpVersionNotSupported","","505 HTTP Version Not Supported [RFC7231, Section 6.6.6]",187,null],[13,"VariantAlsoNegotiates","","506 Variant Also Negotiates [RFC2295]",187,null],[13,"InsufficientStorage","","507 Insufficient Storage [RFC4918]",187,null],[13,"LoopDetected","","508 Loop Detected [RFC5842]",187,null],[13,"NotExtended","","510 Not Extended [RFC2774]",187,null],[13,"NetworkAuthenticationRequired","","511 Network Authentication Required [RFC6585]",187,null],[13,"Unregistered","","A status code not in the IANA HTTP status code registry or very well known",187,null],[4,"HttpError","","",null,null],[13,"InvalidRequest","","When a status code was unexpectedly received for a request's status.",146,null],[13,"RateLimitI64","","When the decoding of a ratelimit header could not be properly decoded into an `i64`.",146,null],[13,"RateLimitUtf8","","When the decoding of a ratelimit header could not be properly decoded from UTF-8.",146,null],[13,"UnknownStatus","","When a status is received, but the verification to ensure the response is valid does not recognize the status.",146,null],[4,"LightMethod","","An method used for ratelimiting special routes.",null,null],[13,"Any","","Indicates that a route is for \"any\" method.",188,null],[13,"Delete","","Indicates that a route is for the `DELETE` method only.",188,null],[13,"Get","","Indicates that a route is for the `GET` method only.",188,null],[13,"Patch","","Indicates that a route is for the `PATCH` method only.",188,null],[13,"Post","","Indicates that a route is for the `POST` method only.",188,null],[13,"Put","","Indicates that a route is for the `PUT` method only.",188,null],[4,"AttachmentType","","Enum that allows a user to pass a `Path` or a `File` type to `send_files`",null,null],[13,"Bytes","","Indicates that the `AttachmentType` is a byte slice with a filename.",189,null],[13,"File","","Indicates that the `AttachmentType` is a `File`",189,null],[13,"Path","","Indicates that the `AttachmentType` is a `Path`",189,null],[4,"GuildPagination","","Representation of the method of a query to send for the [`get_guilds`] function.",null,null],[13,"After","","The Id to get the guilds after.",190,null],[13,"Before","","The Id to get the guilds before.",190,null],[5,"set_token","","Sets the token to be used across all requests which require authentication.",null,{"inputs":[{"name":"str"}],"output":null}],[5,"add_group_recipient","","Adds a [`User`] as a recipient to a [`Group`].",null,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"result"}}],[5,"add_member_role","","Adds a single [`Role`] to a [`Member`] in a [`Guild`].",null,{"inputs":[{"name":"u64"},{"name":"u64"},{"name":"u64"}],"output":{"name":"result"}}],[5,"ban_user","","Bans a [`User`] from a [`Guild`], removing their messages sent in the last X number of days.",null,{"inputs":[{"name":"u64"},{"name":"u64"},{"name":"u8"},{"name":"str"}],"output":{"name":"result"}}],[5,"broadcast_typing","","Broadcasts that the current user is typing in the given [`Channel`].",null,{"inputs":[{"name":"u64"}],"output":{"name":"result"}}],[5,"create_channel","","Creates a [`GuildChannel`] in the [`Guild`] given its Id.",null,{"inputs":[{"name":"u64"},{"name":"value"}],"output":{"name":"result"}}],[5,"create_emoji","","Creates an emoji in the given [`Guild`] with the given data.",null,{"inputs":[{"name":"u64"},{"name":"value"}],"output":{"name":"result"}}],[5,"create_guild","","Creates a guild with the data provided.",null,{"inputs":[{"name":"value"}],"output":{"name":"result"}}],[5,"create_guild_integration","","Creates an [`Integration`] for a [`Guild`].",null,{"inputs":[{"name":"u64"},{"name":"u64"},{"name":"value"}],"output":{"name":"result"}}],[5,"create_invite","","Creates a [`RichInvite`] for the given [channel][`GuildChannel`].",null,{"inputs":[{"name":"u64"},{"name":"map"}],"output":{"name":"result"}}],[5,"create_permission","","Creates a permission override for a member or a role in a channel.",null,{"inputs":[{"name":"u64"},{"name":"u64"},{"name":"value"}],"output":{"name":"result"}}],[5,"create_private_channel","","Creates a private channel with a user.",null,{"inputs":[{"name":"value"}],"output":{"name":"result"}}],[5,"create_reaction","","Reacts to a message.",null,{"inputs":[{"name":"u64"},{"name":"u64"},{"name":"reactiontype"}],"output":{"name":"result"}}],[5,"create_role","","Creates a role.",null,{"inputs":[{"name":"u64"},{"name":"map"}],"output":{"name":"result"}}],[5,"create_webhook","","Creates a webhook for the given [channel][`GuildChannel`]'s Id, passing in the given data.",null,{"inputs":[{"name":"u64"},{"name":"value"}],"output":{"name":"result"}}],[5,"delete_channel","","Deletes a private channel or a channel in a guild.",null,{"inputs":[{"name":"u64"}],"output":{"name":"result"}}],[5,"delete_emoji","","Deletes an emoji from a server.",null,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"result"}}],[5,"delete_guild","","Deletes a guild, only if connected account owns it.",null,{"inputs":[{"name":"u64"}],"output":{"name":"result"}}],[5,"delete_guild_integration","","Remvoes an integration from a guild.",null,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"result"}}],[5,"delete_invite","","Deletes an invite by code.",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[5,"delete_message","","Deletes a message if created by us or we have specific permissions.",null,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"result"}}],[5,"delete_messages","","Deletes a bunch of messages, only works for bots.",null,{"inputs":[{"name":"u64"},{"name":"value"}],"output":{"name":"result"}}],[5,"delete_message_reactions","","Deletes all of the [`Reaction`]s associated with a [`Message`].",null,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"result"}}],[5,"delete_permission","","Deletes a permission override from a role or a member in a channel.",null,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"result"}}],[5,"delete_reaction","","Deletes a reaction from a message if owned by us or we have specific permissions.",null,{"inputs":[{"name":"u64"},{"name":"u64"},{"name":"option"},{"name":"reactiontype"}],"output":{"name":"result"}}],[5,"delete_role","","Deletes a role from a server. Can't remove the default everyone role.",null,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"result"}}],[5,"delete_webhook","","Deletes a [`Webhook`] given its Id.",null,{"inputs":[{"name":"u64"}],"output":{"name":"result"}}],[5,"delete_webhook_with_token","","Deletes a [`Webhook`] given its Id and unique token.",null,{"inputs":[{"name":"u64"},{"name":"str"}],"output":{"name":"result"}}],[5,"edit_channel","","Changes channel information.",null,{"inputs":[{"name":"u64"},{"name":"map"}],"output":{"name":"result"}}],[5,"edit_emoji","","Changes emoji information.",null,{"inputs":[{"name":"u64"},{"name":"u64"},{"name":"value"}],"output":{"name":"result"}}],[5,"edit_guild","","Changes guild information.",null,{"inputs":[{"name":"u64"},{"name":"map"}],"output":{"name":"result"}}],[5,"edit_guild_embed","","Edits a [`Guild`]'s embed setting.",null,{"inputs":[{"name":"u64"},{"name":"value"}],"output":{"name":"result"}}],[5,"edit_member","","Does specific actions to a member.",null,{"inputs":[{"name":"u64"},{"name":"u64"},{"name":"map"}],"output":{"name":"result"}}],[5,"edit_message","","Edits a message by Id.",null,{"inputs":[{"name":"u64"},{"name":"u64"},{"name":"value"}],"output":{"name":"result"}}],[5,"edit_nickname","","Edits the current user's nickname for the provided [`Guild`] via its Id.",null,{"inputs":[{"name":"u64"},{"name":"option"}],"output":{"name":"result"}}],[5,"edit_profile","","Edits the current user's profile settings.",null,{"inputs":[{"name":"map"}],"output":{"name":"result"}}],[5,"edit_role","","Changes a role in a guild.",null,{"inputs":[{"name":"u64"},{"name":"u64"},{"name":"map"}],"output":{"name":"result"}}],[5,"edit_webhook","","Edits a the webhook with the given data.",null,{"inputs":[{"name":"u64"},{"name":"value"}],"output":{"name":"result"}}],[5,"edit_webhook_with_token","","Edits the webhook with the given data.",null,{"inputs":[{"name":"u64"},{"name":"str"},{"name":"map"}],"output":{"name":"result"}}],[5,"execute_webhook","","Executes a webhook, posting a [`Message`] in the webhook's associated [`Channel`].",null,{"inputs":[{"name":"u64"},{"name":"str"},{"name":"bool"},{"name":"map"}],"output":{"name":"result"}}],[5,"get_active_maintenances","","Gets the active maintenances from Discord's Status API.",null,{"inputs":[],"output":{"name":"result"}}],[5,"get_bans","","Gets all the users that are banned in specific guild.",null,{"inputs":[{"name":"u64"}],"output":{"name":"result"}}],[5,"get_audit_logs","","Gets all audit logs in a specific guild.",null,{"inputs":[{"name":"u64"}],"output":{"name":"result"}}],[5,"get_bot_gateway","","Gets current bot gateway.",null,{"inputs":[],"output":{"name":"result"}}],[5,"get_channel_invites","","Gets all invites for a channel.",null,{"inputs":[{"name":"u64"}],"output":{"name":"result"}}],[5,"get_channel_webhooks","","Retrieves the webhooks for the given [channel][`GuildChannel`]'s Id.",null,{"inputs":[{"name":"u64"}],"output":{"name":"result"}}],[5,"get_channel","","Gets channel information.",null,{"inputs":[{"name":"u64"}],"output":{"name":"result"}}],[5,"get_channels","","Gets all channels in a guild.",null,{"inputs":[{"name":"u64"}],"output":{"name":"result"}}],[5,"get_current_application_info","","Gets information about the current application.",null,{"inputs":[],"output":{"name":"result"}}],[5,"get_current_user","","Gets information about the user we're connected with.",null,{"inputs":[],"output":{"name":"result"}}],[5,"get_gateway","","Gets current gateway.",null,{"inputs":[],"output":{"name":"result"}}],[5,"get_guild","","Gets guild information.",null,{"inputs":[{"name":"u64"}],"output":{"name":"result"}}],[5,"get_guild_embed","","Gets a guild embed information.",null,{"inputs":[{"name":"u64"}],"output":{"name":"result"}}],[5,"get_guild_integrations","","Gets integrations that a guild has.",null,{"inputs":[{"name":"u64"}],"output":{"name":"result"}}],[5,"get_guild_invites","","Gets all invites to a guild.",null,{"inputs":[{"name":"u64"}],"output":{"name":"result"}}],[5,"get_guild_members","","Gets the members of a guild. Optionally pass a `limit` and the Id of the user to offset the result by.",null,{"inputs":[{"name":"u64"},{"name":"option"},{"name":"option"}],"output":{"name":"result"}}],[5,"get_guild_prune_count","","Gets the amount of users that can be pruned.",null,{"inputs":[{"name":"u64"},{"name":"value"}],"output":{"name":"result"}}],[5,"get_guild_regions","","Gets regions that a guild can use. If a guild has [`Feature::VipRegions`] enabled, then additional VIP-only regions are returned.",null,{"inputs":[{"name":"u64"}],"output":{"name":"result"}}],[5,"get_guild_roles","","Retrieves a list of roles in a [`Guild`].",null,{"inputs":[{"name":"u64"}],"output":{"name":"result"}}],[5,"get_guild_webhooks","","Retrieves the webhooks for the given [guild][`Guild`]'s Id.",null,{"inputs":[{"name":"u64"}],"output":{"name":"result"}}],[5,"get_guilds","","Gets a paginated list of the current user's guilds.",null,{"inputs":[{"name":"guildpagination"},{"name":"u64"}],"output":{"name":"result"}}],[5,"get_invite","","Gets information about a specific invite.",null,{"inputs":[{"name":"str"},{"name":"bool"}],"output":{"name":"result"}}],[5,"get_member","","Gets member of a guild.",null,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"result"}}],[5,"get_message","","Gets a message by an Id, bots only.",null,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"result"}}],[5,"get_messages","","Gets X messages from a channel.",null,{"inputs":[{"name":"u64"},{"name":"str"}],"output":{"name":"result"}}],[5,"get_pins","","Gets all pins of a channel.",null,{"inputs":[{"name":"u64"}],"output":{"name":"result"}}],[5,"get_reaction_users","","Gets user Ids based on their reaction to a message. This endpoint is dumb.",null,{"inputs":[{"name":"u64"},{"name":"u64"},{"name":"reactiontype"},{"name":"u8"},{"name":"option"}],"output":{"name":"result"}}],[5,"get_unresolved_incidents","","Gets the current unresolved incidents from Discord's Status API.",null,{"inputs":[],"output":{"name":"result"}}],[5,"get_upcoming_maintenances","","Gets the upcoming (planned) maintenances from Discord's Status API.",null,{"inputs":[],"output":{"name":"result"}}],[5,"get_user","","Gets a user by Id.",null,{"inputs":[{"name":"u64"}],"output":{"name":"result"}}],[5,"get_user_dm_channels","","Gets our DM channels.",null,{"inputs":[],"output":{"name":"result"}}],[5,"get_voice_regions","","Gets all voice regions.",null,{"inputs":[],"output":{"name":"result"}}],[5,"get_webhook","","Retrieves a webhook given its Id.",null,{"inputs":[{"name":"u64"}],"output":{"name":"result"}}],[5,"get_webhook_with_token","","Retrieves a webhook given its Id and unique token.",null,{"inputs":[{"name":"u64"},{"name":"str"}],"output":{"name":"result"}}],[5,"kick_member","","Kicks a member from a guild.",null,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"result"}}],[5,"leave_group","","Leaves a group DM.",null,{"inputs":[{"name":"u64"}],"output":{"name":"result"}}],[5,"leave_guild","","Leaves a guild.",null,{"inputs":[{"name":"u64"}],"output":{"name":"result"}}],[5,"remove_group_recipient","","Deletes a user from group DM.",null,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"result"}}],[5,"send_files","","Sends file(s) to a channel.",null,{"inputs":[{"name":"u64"},{"name":"vec"},{"name":"map"}],"output":{"name":"result"}}],[5,"send_message","","Sends a message to a channel.",null,{"inputs":[{"name":"u64"},{"name":"value"}],"output":{"name":"result"}}],[5,"pin_message","","Pins a message in a channel.",null,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"result"}}],[5,"remove_ban","","Unbans a user from a guild.",null,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"result"}}],[5,"remove_member_role","","Deletes a single [`Role`] from a [`Member`] in a [`Guild`].",null,{"inputs":[{"name":"u64"},{"name":"u64"},{"name":"u64"}],"output":{"name":"result"}}],[5,"start_guild_prune","","Starts removing some members from a guild based on the last time they've been online.",null,{"inputs":[{"name":"u64"},{"name":"value"}],"output":{"name":"result"}}],[5,"start_integration_sync","","Starts syncing an integration with a guild.",null,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"result"}}],[5,"unpin_message","","Unpins a message from a channel.",null,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"result"}}],[0,"ratelimiting","","Routes are used for ratelimiting. These are to differentiate between the different types of routes - such as getting the current user's channels - for the most part, with the exception being major parameters.",null,null],[3,"GLOBAL","serenity::http::ratelimiting","The global mutex is a mutex unlocked and then immediately re-locked prior to every request, to abide by Discord's global ratelimit.",null,null],[3,"ROUTES","","The routes mutex is a HashMap of each [`Route`] and their respective ratelimit information.",null,null],[3,"RateLimit","","A set of data containing information about the ratelimits for a particular [`Route`], which is stored in the [`ROUTES`] mutex.",null,null],[12,"limit","","The total number of requests that can be made in a period of time.",191,null],[12,"remaining","","The number of requests remaining in the period of time.",191,null],[12,"reset","","When the interval resets and the the [`limit`] resets to the value of [`remaining`].",191,null],[4,"Route","","A representation of all routes registered within the library. These are safe and memory-efficient representations of each path that functions exist for in the [`http`] module.",null,null],[13,"ChannelsId","","Route for the `/channels/:channel_id` path.",192,null],[13,"ChannelsIdInvites","","Route for the `/channels/:channel_id/invites` path.",192,null],[13,"ChannelsIdMessages","","Route for the `/channels/:channel_id/messages` path.",192,null],[13,"ChannelsIdMessagesBulkDelete","","Route for the `/channels/:channel_id/messages/bulk-delete` path.",192,null],[13,"ChannelsIdMessagesId","","Route for the `/channels/:channel_id/messages/:message_id` path.",192,null],[13,"ChannelsIdMessagesIdAck","","Route for the `/channels/:channel_id/messages/:message_id/ack` path.",192,null],[13,"ChannelsIdMessagesIdReactions","","Route for the `/channels/:channel_id/messages/:message_id/reactions` path.",192,null],[13,"ChannelsIdMessagesIdReactionsUserIdType","","Route for the `/channels/:channel_id/messages/:message_id/reactions/:reaction/@me` path.",192,null],[13,"ChannelsIdPermissionsOverwriteId","","Route for the `/channels/:channel_id/permissions/:target_id` path.",192,null],[13,"ChannelsIdPins","","Route for the `/channels/:channel_id/pins` path.",192,null],[13,"ChannelsIdPinsMessageId","","Route for the `/channels/:channel_id/pins/:message_id` path.",192,null],[13,"ChannelsIdTyping","","Route for the `/channels/:channel_id/typing` path.",192,null],[13,"ChannelsIdWebhooks","","Route for the `/channels/:channel_id/webhooks` path.",192,null],[13,"Gateway","","Route for the `/gateway` path.",192,null],[13,"GatewayBot","","Route for the `/gateway/bot` path.",192,null],[13,"Guilds","","Route for the `/guilds` path.",192,null],[13,"GuildsId","","Route for the `/guilds/:guild_id` path.",192,null],[13,"GuildsIdBans","","Route for the `/guilds/:guild_id/bans` path.",192,null],[13,"GuildsIdAuditLogs","","Route for the `/guilds/:guild_id/audit-logs` path. The data is the relevant [`GuildId`].",192,null],[13,"GuildsIdBansUserId","","Route for the `/guilds/:guild_id/bans/:user_id` path.",192,null],[13,"GuildsIdChannels","","Route for the `/guilds/:guild_id/channels/:channel_id` path.",192,null],[13,"GuildsIdEmbed","","Route for the `/guilds/:guild_id/embed` path.",192,null],[13,"GuildsIdEmojis","","Route for the `/guilds/:guild_id/emojis` path.",192,null],[13,"GuildsIdEmojisId","","Route for the `/guilds/:guild_id/emojis/:emoji_id` path.",192,null],[13,"GuildsIdIntegrations","","Route for the `/guilds/:guild_id/integrations` path.",192,null],[13,"GuildsIdIntegrationsId","","Route for the `/guilds/:guild_id/integrations/:integration_id` path.",192,null],[13,"GuildsIdIntegrationsIdSync","","Route for the `/guilds/:guild_id/integrations/:integration_id/sync` path.",192,null],[13,"GuildsIdInvites","","Route for the `/guilds/:guild_id/invites` path.",192,null],[13,"GuildsIdMembers","","Route for the `/guilds/:guild_id/members` path.",192,null],[13,"GuildsIdMembersId","","Route for the `/guilds/:guild_id/members/:user_id` path.",192,null],[13,"GuildsIdMembersIdRolesId","","Route for the `/guilds/:guild_id/members/:user_id/roles/:role_id` path.",192,null],[13,"GuildsIdMembersMeNick","","Route for the `/guilds/:guild_id/members/@me/nick` path.",192,null],[13,"GuildsIdPrune","","Route for the `/guilds/:guild_id/prune` path.",192,null],[13,"GuildsIdRegions","","Route for the `/guilds/:guild_id/regions` path.",192,null],[13,"GuildsIdRoles","","Route for the `/guilds/:guild_id/roles` path.",192,null],[13,"GuildsIdRolesId","","Route for the `/guilds/:guild_id/roles/:role_id` path.",192,null],[13,"GuildsIdWebhooks","","Route for the `/guilds/:guild_id/webhooks` path.",192,null],[13,"InvitesCode","","Route for the `/invites/:code` path.",192,null],[13,"UsersId","","Route for the `/users/:user_id` path.",192,null],[13,"UsersMe","","Route for the `/users/@me` path.",192,null],[13,"UsersMeChannels","","Route for the `/users/@me/channels` path.",192,null],[13,"UsersMeGuilds","","Route for the `/users/@me/guilds` path.",192,null],[13,"UsersMeGuildsId","","Route for the `/users/@me/guilds/:guild_id` path.",192,null],[13,"VoiceRegions","","Route for the `/voice/regions` path.",192,null],[13,"WebhooksId","","Route for the `/webhooks/:webhook_id` path.",192,null],[13,"None","","Route where no ratelimit headers are in place (i.e. user account-only routes).",192,null],[11,"deref","","",193,{"inputs":[{"name":"self"}],"output":{"name":"arc"}}],[11,"initialize","","",193,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",194,{"inputs":[{"name":"self"}],"output":{"name":"arc"}}],[11,"initialize","","",194,{"inputs":[{"name":"self"}],"output":null}],[11,"clone","","",192,{"inputs":[{"name":"self"}],"output":{"name":"route"}}],[11,"fmt","","",192,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",192,null],[11,"eq","","",192,{"inputs":[{"name":"self"},{"name":"route"}],"output":{"name":"bool"}}],[11,"ne","","",192,{"inputs":[{"name":"self"},{"name":"route"}],"output":{"name":"bool"}}],[11,"clone","","",191,{"inputs":[{"name":"self"}],"output":{"name":"ratelimit"}}],[11,"fmt","","",191,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",191,{"inputs":[],"output":{"name":"ratelimit"}}],[11,"clone","serenity::prelude","",146,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"fmt","","",146,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",146,null],[11,"eq","","",146,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"ne","","",146,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"fmt","","",146,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"fmtresult"}}],[11,"description","","",146,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clone","serenity::http","",188,{"inputs":[{"name":"self"}],"output":{"name":"lightmethod"}}],[11,"fmt","","",188,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",188,null],[11,"eq","","",188,{"inputs":[{"name":"self"},{"name":"lightmethod"}],"output":{"name":"bool"}}],[11,"from","","",189,null],[11,"from","","",189,{"inputs":[{"name":"str"}],"output":{"name":"attachmenttype"}}],[11,"from","","",189,{"inputs":[{"name":"pathbuf"}],"output":{"name":"attachmenttype"}}],[11,"from","","",189,null],[0,"utils","serenity","A set of utilities to help with common use cases that are not required to fully use the library.",null,null],[3,"Colour","serenity::utils","A utility struct to help with working with the basic representation of a colour. This is particularly useful when working with a [`Role`]'s colour, as the API works with an integer value instead of an RGB value.",null,null],[12,"0","","",195,null],[3,"Content","","Describes formatting on string content",null,null],[12,"italic","","",196,null],[12,"bold","","",196,null],[12,"strikethrough","","",196,null],[12,"inner","","",196,null],[12,"code","","",196,null],[12,"underline","","",196,null],[3,"MessageBuilder","","The Message Builder is an ergonomic utility to easily build a message, by adding text and mentioning mentionable structs.",null,null],[12,"0","","",197,null],[4,"ContentModifier","","Formatting modifiers for MessageBuilder content pushes",null,null],[13,"Italic","","",198,null],[13,"Bold","","",198,null],[13,"Strikethrough","","",198,null],[13,"Code","","",198,null],[13,"Underline","","",198,null],[5,"is_nsfw","","Determines if a name is NSFW.",null,{"inputs":[{"name":"str"}],"output":{"name":"bool"}}],[5,"parse_invite","","Retrieves the \"code\" part of an invite out of a URL.",null,{"inputs":[{"name":"str"}],"output":{"name":"str"}}],[5,"parse_username","","Retreives an Id from a user mention.",null,{"inputs":[{"name":"str"}],"output":{"name":"option"}}],[5,"parse_role","","Retreives an Id from a role mention.",null,{"inputs":[{"name":"str"}],"output":{"name":"option"}}],[5,"parse_channel","","Retreives an Id from a channel mention.",null,{"inputs":[{"name":"str"}],"output":{"name":"option"}}],[5,"parse_emoji","","Retreives the name and Id from an emoji mention, in the form of an `EmojiIdentifier`.",null,{"inputs":[{"name":"str"}],"output":{"name":"option"}}],[5,"read_image","","Reads an image from a path and encodes it into base64.",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[5,"parse_quotes","","Turns a string into a vector of string arguments, splitting by spaces, but parsing content within quotes as one individual argument.",null,{"inputs":[{"name":"str"}],"output":{"name":"vec"}}],[5,"shard_id","","Calculates the Id of the shard responsible for a guild, given its Id and total number of shards used.",null,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"u64"}}],[5,"with_cache","","A function for doing automatic `read`ing (and the releasing of the guard as well) This is particularly useful if you just want to use the cache for this one time, or don't want to be messing with the `RwLock` directly.",null,{"inputs":[{"name":"f"}],"output":{"name":"t"}}],[5,"with_cache_mut","","Like [`with_cache`] but as the name says, allows for modifications to be done.",null,{"inputs":[{"name":"f"}],"output":{"name":"t"}}],[11,"clone","","",195,{"inputs":[{"name":"self"}],"output":{"name":"colour"}}],[11,"fmt","","",195,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",195,{"inputs":[{"name":"self"},{"name":"colour"}],"output":{"name":"ordering"}}],[11,"eq","","",195,{"inputs":[{"name":"self"},{"name":"colour"}],"output":{"name":"bool"}}],[11,"ne","","",195,{"inputs":[{"name":"self"},{"name":"colour"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",195,{"inputs":[{"name":"self"},{"name":"colour"}],"output":{"name":"option"}}],[11,"lt","","",195,{"inputs":[{"name":"self"},{"name":"colour"}],"output":{"name":"bool"}}],[11,"le","","",195,{"inputs":[{"name":"self"},{"name":"colour"}],"output":{"name":"bool"}}],[11,"gt","","",195,{"inputs":[{"name":"self"},{"name":"colour"}],"output":{"name":"bool"}}],[11,"ge","","",195,{"inputs":[{"name":"self"},{"name":"colour"}],"output":{"name":"bool"}}],[11,"new","","Generates a new Colour with the given integer value set.",195,{"inputs":[{"name":"u32"}],"output":{"name":"colour"}}],[11,"from_rgb","","Generates a new Colour from an RGB value, creating an inner u32 representation.",195,{"inputs":[{"name":"u8"},{"name":"u8"},{"name":"u8"}],"output":{"name":"colour"}}],[11,"r","","Returns the red RGB component of this Colour.",195,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"g","","Returns the green RGB component of this Colour.",195,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"b","","Returns the blue RGB component of this Colour.",195,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"tuple","","Returns a tuple of the red, green, and blue components of this Colour.",195,null],[11,"from","","Constructs a Colour from a i32.",195,{"inputs":[{"name":"i32"}],"output":{"name":"colour"}}],[11,"from","","Constructs a Colour from a u32.",195,{"inputs":[{"name":"u32"}],"output":{"name":"colour"}}],[11,"from","","Constructs a Colour from a u32.",195,{"inputs":[{"name":"u64"}],"output":{"name":"colour"}}],[11,"from","","Constructs a Colour from rgb.",195,null],[11,"blitz_blue","","Creates a new `Colour`, setting its RGB value to `(111, 198, 226)`.",195,{"inputs":[],"output":{"name":"colour"}}],[11,"blue","","Creates a new `Colour`, setting its RGB value to `(52, 152, 219)`.",195,{"inputs":[],"output":{"name":"colour"}}],[11,"blurple","","Creates a new `Colour`, setting its RGB value to `(114, 137, 218)`.",195,{"inputs":[],"output":{"name":"colour"}}],[11,"dark_blue","","Creates a new `Colour`, setting its RGB value to `(32, 102, 148)`.",195,{"inputs":[],"output":{"name":"colour"}}],[11,"dark_gold","","Creates a new `Colour`, setting its RGB value to `(194, 124, 14)`.",195,{"inputs":[],"output":{"name":"colour"}}],[11,"dark_green","","Creates a new `Colour`, setting its RGB value to `(31, 139, 76)`.",195,{"inputs":[],"output":{"name":"colour"}}],[11,"dark_grey","","Creates a new `Colour`, setting its RGB value to `(96, 125, 139)`.",195,{"inputs":[],"output":{"name":"colour"}}],[11,"dark_magenta","","Creates a new `Colour`, setting its RGB value to `(173, 20, 87)`.",195,{"inputs":[],"output":{"name":"colour"}}],[11,"dark_orange","","Creates a new `Colour`, setting its RGB value to `(168, 67, 0)`.",195,{"inputs":[],"output":{"name":"colour"}}],[11,"dark_purple","","Creates a new `Colour`, setting its RGB value to `(113, 54, 138)`.",195,{"inputs":[],"output":{"name":"colour"}}],[11,"dark_red","","Creates a new `Colour`, setting its RGB value to `(153, 45, 34)`.",195,{"inputs":[],"output":{"name":"colour"}}],[11,"dark_teal","","Creates a new `Colour`, setting its RGB value to `(17, 128, 106)`.",195,{"inputs":[],"output":{"name":"colour"}}],[11,"darker_grey","","Creates a new `Colour`, setting its RGB value to `(84, 110, 122)`.",195,{"inputs":[],"output":{"name":"colour"}}],[11,"fabled_pink","","Creates a new `Colour`, setting its RGB value to `(250, 177, 237)`.",195,{"inputs":[],"output":{"name":"colour"}}],[11,"faded_purple","","Creates a new `Colour`, setting its RGB value to `(136, 130, 196)`.`",195,{"inputs":[],"output":{"name":"colour"}}],[11,"fooyoo","","Creates a new `Colour`, setting its RGB value to `(17, 202, 128)`.",195,{"inputs":[],"output":{"name":"colour"}}],[11,"gold","","Creates a new `Colour`, setting its RGB value to `(241, 196, 15)`.",195,{"inputs":[],"output":{"name":"colour"}}],[11,"kerbal","","Creates a new `Colour`, setting its RGB value to `(186, 218, 85)`.",195,{"inputs":[],"output":{"name":"colour"}}],[11,"light_grey","","Creates a new `Colour`, setting its RGB value to `(151, 156, 159)`.",195,{"inputs":[],"output":{"name":"colour"}}],[11,"lighter_grey","","Creates a new `Colour`, setting its RGB value to `(149, 165, 166)`.",195,{"inputs":[],"output":{"name":"colour"}}],[11,"magenta","","Creates a new `Colour`, setting its RGB value to `(233, 30, 99)`.",195,{"inputs":[],"output":{"name":"colour"}}],[11,"meibe_pink","","Creates a new `Colour`, setting its RGB value to `(230, 131, 151)`.",195,{"inputs":[],"output":{"name":"colour"}}],[11,"orange","","Creates a new `Colour`, setting its RGB value to `(230, 126, 34)`.",195,{"inputs":[],"output":{"name":"colour"}}],[11,"purple","","Creates a new `Colour`, setting its RGB value to `(155, 89, 182)`.",195,{"inputs":[],"output":{"name":"colour"}}],[11,"red","","Creates a new `Colour`, setting its RGB value to `(231, 76, 60)`.",195,{"inputs":[],"output":{"name":"colour"}}],[11,"rohrkatze_blue","","Creates a new `Colour`, setting its RGB value to `(117, 150, 255)`.",195,{"inputs":[],"output":{"name":"colour"}}],[11,"rosewater","","Creates a new `Colour`, setting its RGB value to `(246, 219, 216)`.",195,{"inputs":[],"output":{"name":"colour"}}],[11,"teal","","Creates a new `Colour`, setting its RGB value to `(26, 188, 156)`.",195,{"inputs":[],"output":{"name":"colour"}}],[11,"default","","Creates a default value for a `Colour`, setting the inner value to `0`.",195,{"inputs":[],"output":{"name":"colour"}}],[11,"clone","","",197,{"inputs":[{"name":"self"}],"output":{"name":"messagebuilder"}}],[11,"fmt","","",197,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",197,{"inputs":[],"output":{"name":"messagebuilder"}}],[11,"new","","Creates a new, empty builder.",197,{"inputs":[],"output":{"name":"messagebuilder"}}],[11,"build","","Pulls the inner value out of the builder.",197,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"channel","","Mentions the [`GuildChannel`] in the built message.",197,{"inputs":[{"name":"self"},{"name":"c"}],"output":{"name":"self"}}],[11,"emoji","","Displays the given emoji in the built message.",197,{"inputs":[{"name":"self"},{"name":"emoji"}],"output":{"name":"self"}}],[11,"mention","","Mentions something that implements the [`Mentionable`] trait.",197,{"inputs":[{"name":"self"},{"name":"m"}],"output":{"name":"self"}}],[11,"push","","Pushes a string to the internal message content.",197,{"inputs":[{"name":"self"},{"name":"d"}],"output":{"name":"self"}}],[11,"push_codeblock","","Pushes a codeblock to the content, with optional syntax highlighting.",197,{"inputs":[{"name":"self"},{"name":"d"},{"name":"option"}],"output":{"name":"self"}}],[11,"push_mono","","Pushes inlined monospaced text to the content.",197,{"inputs":[{"name":"self"},{"name":"d"}],"output":{"name":"self"}}],[11,"push_italic","","Pushes inlined italicized text to the content.",197,{"inputs":[{"name":"self"},{"name":"d"}],"output":{"name":"self"}}],[11,"push_bold","","Pushes an inline bold text to the content.",197,{"inputs":[{"name":"self"},{"name":"d"}],"output":{"name":"self"}}],[11,"push_underline","","Pushes an underlined inline text to the content.",197,{"inputs":[{"name":"self"},{"name":"d"}],"output":{"name":"self"}}],[11,"push_strike","","Pushes a strikethrough inline text to the content.",197,{"inputs":[{"name":"self"},{"name":"d"}],"output":{"name":"self"}}],[11,"push_line","","Pushes the given text with a newline appended to the content.",197,{"inputs":[{"name":"self"},{"name":"d"}],"output":{"name":"self"}}],[11,"push_mono_line","","Pushes inlined monospace text with an added newline to the content.",197,{"inputs":[{"name":"self"},{"name":"d"}],"output":{"name":"self"}}],[11,"push_italic_line","","Pushes an inlined italicized text with an added newline to the content.",197,{"inputs":[{"name":"self"},{"name":"d"}],"output":{"name":"self"}}],[11,"push_bold_line","","Pushes an inline bold text with an added newline to the content.",197,{"inputs":[{"name":"self"},{"name":"d"}],"output":{"name":"self"}}],[11,"push_underline_line","","Pushes an underlined inline text with an added newline to the content.",197,{"inputs":[{"name":"self"},{"name":"d"}],"output":{"name":"self"}}],[11,"push_strike_line","","Pushes a strikethrough inline text with a newline added to the content.",197,{"inputs":[{"name":"self"},{"name":"d"}],"output":{"name":"self"}}],[11,"push_safe","","Pushes text to your message, but normalizing content - that means ensuring that there's no unwanted formatting, mention spam etc.",197,{"inputs":[{"name":"self"},{"name":"c"}],"output":{"name":"self"}}],[11,"push_codeblock_safe","","Pushes a code-block to your message normalizing content.",197,{"inputs":[{"name":"self"},{"name":"d"},{"name":"option"}],"output":{"name":"self"}}],[11,"push_mono_safe","","Pushes an inline monospaced text to the content normalizing content.",197,{"inputs":[{"name":"self"},{"name":"d"}],"output":{"name":"self"}}],[11,"push_italic_safe","","Pushes an inline italicized text to the content normalizing content.",197,{"inputs":[{"name":"self"},{"name":"d"}],"output":{"name":"self"}}],[11,"push_bold_safe","","Pushes an inline bold text to the content normalizing content.",197,{"inputs":[{"name":"self"},{"name":"d"}],"output":{"name":"self"}}],[11,"push_underline_safe","","Pushes an underlined inline text to the content normalizing content.",197,{"inputs":[{"name":"self"},{"name":"d"}],"output":{"name":"self"}}],[11,"push_strike_safe","","Pushes a strikethrough inline text to the content normalizing content.",197,{"inputs":[{"name":"self"},{"name":"d"}],"output":{"name":"self"}}],[11,"push_line_safe","","Pushes text with a newline appended to the content normalizing content.",197,{"inputs":[{"name":"self"},{"name":"d"}],"output":{"name":"self"}}],[11,"push_mono_line_safe","","Pushes an inline monospaced text with added newline to the content normalizing content.",197,{"inputs":[{"name":"self"},{"name":"d"}],"output":{"name":"self"}}],[11,"push_italic_line_safe","","Pushes an inline italicized text with added newline to the content normalizing content.",197,{"inputs":[{"name":"self"},{"name":"d"}],"output":{"name":"self"}}],[11,"push_bold_line_safe","","Pushes an inline bold text with added newline to the content normalizing content.",197,{"inputs":[{"name":"self"},{"name":"d"}],"output":{"name":"self"}}],[11,"push_underline_line_safe","","Pushes an underlined inline text with added newline to the content normalizing content.",197,{"inputs":[{"name":"self"},{"name":"d"}],"output":{"name":"self"}}],[11,"push_strike_line_safe","","Pushes a strikethrough inline text with added newline to the content normalizing content.",197,{"inputs":[{"name":"self"},{"name":"d"}],"output":{"name":"self"}}],[11,"role","","Mentions the [`Role`] in the built message.",197,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"self"}}],[11,"user","","Mentions the [`User`] in the built message.",197,{"inputs":[{"name":"self"},{"name":"u"}],"output":{"name":"self"}}],[11,"fmt","","Formats the message builder into a string.",197,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",196,{"inputs":[],"output":{"name":"content"}}],[11,"clone","","",196,{"inputs":[{"name":"self"}],"output":{"name":"content"}}],[11,"add","","",196,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"content"}}],[11,"add","","",198,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"content"}}],[11,"add","","",196,{"inputs":[{"name":"self"},{"name":"contentmodifier"}],"output":{"name":"content"}}],[11,"add","","",198,{"inputs":[{"name":"self"},{"name":"contentmodifier"}],"output":{"name":"content"}}],[11,"apply","","",196,{"inputs":[{"name":"self"},{"name":"contentmodifier"}],"output":null}],[11,"to_string","","",196,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"from","","",196,{"inputs":[{"name":"contentmodifier"}],"output":{"name":"content"}}],[11,"fmt","serenity","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",0,{"inputs":[{"name":"formaterror"}],"output":{"name":"error"}}],[11,"from","","",0,{"inputs":[{"name":"gatewayerror"}],"output":{"name":"error"}}],[11,"from","","",0,{"inputs":[{"name":"hypererror"}],"output":{"name":"error"}}],[11,"from","","",0,{"inputs":[{"name":"ioerror"}],"output":{"name":"error"}}],[11,"from","","",0,{"inputs":[{"name":"jsonerror"}],"output":{"name":"error"}}],[11,"from","","",0,{"inputs":[{"name":"parseinterror"}],"output":{"name":"error"}}],[11,"from","","",0,{"inputs":[{"name":"modelerror"}],"output":{"name":"error"}}],[11,"from","","",0,{"inputs":[{"name":"tlserror"}],"output":{"name":"error"}}],[11,"from","","",0,{"inputs":[{"name":"websocketerror"}],"output":{"name":"error"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[6,"Result","","The common result type between most library functions.",null,null],[11,"deref","","",199,{"inputs":[{"name":"self"}],"output":{"name":"rwlock"}}],[11,"initialize","","",199,{"inputs":[{"name":"self"}],"output":null}],[14,"command","","A macro to generate \"named parameters\". This is useful to avoid manually using the \"arguments\" parameter and manually parsing types.",null,null],[11,"fmt","serenity::http","",186,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",187,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",187,{"inputs":[{"name":"self"},{"name":"statuscode"}],"output":{"name":"bool"}}],[11,"eq","","",186,{"inputs":[{"name":"self"},{"name":"statusclass"}],"output":{"name":"bool"}}],[11,"hash","","",187,null],[11,"fmt","","",187,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"partial_cmp","","",187,{"inputs":[{"name":"self"},{"name":"statuscode"}],"output":{"name":"option"}}],[11,"partial_cmp","","",186,{"inputs":[{"name":"self"},{"name":"statusclass"}],"output":{"name":"option"}}],[11,"cmp","","",186,{"inputs":[{"name":"self"},{"name":"statusclass"}],"output":{"name":"ordering"}}],[11,"cmp","","",187,{"inputs":[{"name":"self"},{"name":"statuscode"}],"output":{"name":"ordering"}}],[11,"clone","","",186,{"inputs":[{"name":"self"}],"output":{"name":"statusclass"}}],[11,"clone","","",187,{"inputs":[{"name":"self"}],"output":{"name":"statuscode"}}],[11,"dmd","serenity::model","",141,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"reason","","",141,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"default_code","serenity::http","Get the default status code for the class.",186,{"inputs":[{"name":"self"}],"output":{"name":"statuscode"}}],[11,"canonical_reason","","Get the standardised `reason-phrase` for this status code.",187,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"class","","Determine the class of a status code, based on its first digit.",187,{"inputs":[{"name":"self"}],"output":{"name":"statusclass"}}],[11,"is_informational","","Check if class is Informational.",187,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_success","","Check if class is Success.",187,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_redirection","","Check if class is Redirection.",187,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_client_error","","Check if class is ClientError.",187,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_server_error","","Check if class is ServerError.",187,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_strange_status","","Check if class is NoClass",187,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}]],"paths":[[4,"Error"],[4,"OpCode"],[4,"VoiceOpCode"],[3,"Attachment"],[3,"Embed"],[3,"EmbedAuthor"],[3,"EmbedField"],[3,"EmbedFooter"],[3,"EmbedImage"],[3,"EmbedProvider"],[3,"EmbedThumbnail"],[3,"EmbedVideo"],[3,"Group"],[3,"GuildChannel"],[3,"Message"],[3,"MessageReaction"],[3,"PrivateChannel"],[3,"Reaction"],[3,"ChannelCategory"],[3,"PermissionOverwrite"],[3,"BotGateway"],[3,"Game"],[3,"Gateway"],[3,"Presence"],[3,"Ready"],[3,"Emoji"],[3,"Integration"],[3,"IntegrationAccount"],[3,"Member"],[3,"PartialGuild"],[3,"Role"],[3,"Change"],[3,"AuditLogs"],[3,"AuditLogEntry"],[3,"Ban"],[3,"Guild"],[3,"GuildEmbed"],[3,"GuildPrune"],[3,"GuildInfo"],[3,"GuildUnavailable"],[3,"Invite"],[3,"InviteChannel"],[3,"InviteGuild"],[3,"RichInvite"],[3,"EmojiIdentifier"],[3,"AffectedComponent"],[3,"Incident"],[3,"IncidentUpdate"],[3,"Maintenance"],[3,"CurrentUser"],[3,"User"],[3,"VoiceRegion"],[3,"VoiceState"],[3,"Webhook"],[3,"ChannelId"],[3,"EmojiId"],[3,"GuildId"],[3,"IntegrationId"],[3,"MessageId"],[3,"RoleId"],[3,"UserId"],[3,"WebhookId"],[3,"AuditLogEntryId"],[3,"ApplicationInfo"],[3,"BotApplication"],[3,"CurrentApplicationInfo"],[4,"MessageType"],[4,"ReactionType"],[4,"Channel"],[4,"ChannelType"],[4,"PermissionOverwriteType"],[4,"ModelError"],[4,"GameType"],[4,"Feature"],[4,"Target"],[4,"Action"],[4,"ActionChannel"],[4,"ActionChannelOverwrite"],[4,"ActionMember"],[4,"ActionRole"],[4,"ActionInvite"],[4,"ActionWebhook"],[4,"ActionEmoji"],[4,"GuildStatus"],[4,"VerificationLevel"],[4,"UserParseError"],[4,"UserIdParseError"],[4,"RoleParseError"],[4,"RoleIdParseError"],[4,"IncidentStatus"],[4,"DefaultAvatar"],[4,"NotificationLevel"],[4,"OnlineStatus"],[4,"GuildContainer"],[4,"Region"],[3,"ChannelCreateEvent"],[3,"ChannelDeleteEvent"],[3,"ChannelPinsUpdateEvent"],[3,"ChannelRecipientAddEvent"],[3,"ChannelRecipientRemoveEvent"],[3,"ChannelUpdateEvent"],[3,"GuildBanAddEvent"],[3,"GuildBanRemoveEvent"],[3,"GuildCreateEvent"],[3,"GuildDeleteEvent"],[3,"GuildEmojisUpdateEvent"],[3,"GuildIntegrationsUpdateEvent"],[3,"GuildMemberAddEvent"],[3,"GuildMemberRemoveEvent"],[3,"GuildMemberUpdateEvent"],[3,"GuildMembersChunkEvent"],[3,"GuildRoleCreateEvent"],[3,"GuildRoleDeleteEvent"],[3,"GuildRoleUpdateEvent"],[3,"GuildUnavailableEvent"],[3,"GuildUpdateEvent"],[3,"MessageCreateEvent"],[3,"MessageDeleteBulkEvent"],[3,"MessageDeleteEvent"],[3,"MessageUpdateEvent"],[3,"PresenceUpdateEvent"],[3,"PresencesReplaceEvent"],[3,"ReactionAddEvent"],[3,"ReactionRemoveEvent"],[3,"ReactionRemoveAllEvent"],[3,"ReadyEvent"],[3,"ResumedEvent"],[3,"TypingStartEvent"],[3,"UnknownEvent"],[3,"UserUpdateEvent"],[3,"VoiceServerUpdateEvent"],[3,"VoiceStateUpdateEvent"],[3,"WebhookUpdateEvent"],[3,"VoiceHeartbeat"],[3,"VoiceHello"],[3,"VoiceSessionDescription"],[3,"VoiceSpeaking"],[4,"GatewayEvent"],[4,"Event"],[4,"VoiceEvent"],[3,"Permissions"],[8,"BanOptions"],[8,"Mentionable"],[3,"Context"],[4,"ClientError"],[4,"GatewayError"],[4,"HttpError"],[8,"EventHandler"],[3,"CreateEmbed"],[3,"CreateEmbedAuthor"],[3,"CreateEmbedField"],[3,"CreateEmbedFooter"],[3,"CreateInvite"],[3,"CreateMessage"],[3,"EditChannel"],[3,"EditGuild"],[3,"EditMember"],[3,"EditProfile"],[3,"EditRole"],[3,"ExecuteWebhook"],[3,"GetMessages"],[3,"Cache"],[3,"Client"],[3,"ShardManager"],[3,"ShardQueuer"],[3,"ShardId"],[3,"ShardRunnerInfo"],[4,"ShardManagerMessage"],[4,"ShardQueuerMessage"],[3,"ShardRunner"],[3,"CloseHandle"],[3,"Command"],[3,"CommandGroup"],[3,"CreateCommand"],[3,"CreateGroup"],[3,"StandardFramework"],[4,"CommandType"],[4,"CommandOrAlias"],[4,"ArgError"],[4,"DispatchError"],[3,"CommandError"],[3,"Configuration"],[3,"Args"],[8,"Framework"],[3,"Shard"],[4,"ConnectionStage"],[4,"StatusClass"],[4,"StatusCode"],[4,"LightMethod"],[4,"AttachmentType"],[4,"GuildPagination"],[3,"RateLimit"],[4,"Route"],[3,"GLOBAL"],[3,"ROUTES"],[3,"Colour"],[3,"Content"],[3,"MessageBuilder"],[4,"ContentModifier"],[3,"CACHE"]]};
searchIndex["sha1"] = {"doc":"A minimal implementation of SHA1 for rust.","items":[[3,"Sha1","sha1","Represents a Sha1 hash object in memory.",null,null],[3,"Digest","","Digest generated from a `Sha1` instance.",null,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"sha1"}}],[11,"new","","Creates an fresh sha1 hash object.",0,{"inputs":[],"output":{"name":"sha1"}}],[11,"reset","","Resets the hash object to it's initial state.",0,{"inputs":[{"name":"self"}],"output":null}],[11,"update","","Update hash with input data.",0,null],[11,"digest","","Retrieve digest result.",0,{"inputs":[{"name":"self"}],"output":{"name":"digest"}}],[11,"bytes","","Returns the 160 bit (20 byte) digest as a byte array.",1,null],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"Sha1"],[3,"Digest"]]};
searchIndex["siphasher"] = {"doc":"","items":[[0,"sip","siphasher","An implementation of SipHash.",null,null],[3,"SipHasher13","siphasher::sip","An implementation of SipHash 1-3.",null,null],[3,"SipHasher24","","An implementation of SipHash 2-4.",null,null],[3,"SipHasher","","An implementation of SipHash 2-4.",null,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"siphasher13"}}],[11,"default","","",0,{"inputs":[],"output":{"name":"siphasher13"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"siphasher24"}}],[11,"default","","",1,{"inputs":[],"output":{"name":"siphasher24"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"siphasher"}}],[11,"default","","",2,{"inputs":[],"output":{"name":"siphasher"}}],[11,"new","","Creates a new `SipHasher` with the two initial keys set to 0.",2,{"inputs":[],"output":{"name":"siphasher"}}],[11,"new_with_keys","","Creates a `SipHasher` that is keyed off the provided keys.",2,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"siphasher"}}],[11,"keys","","Get the keys used by this hasher",2,null],[11,"new","","Creates a new `SipHasher13` with the two initial keys set to 0.",0,{"inputs":[],"output":{"name":"siphasher13"}}],[11,"new_with_keys","","Creates a `SipHasher13` that is keyed off the provided keys.",0,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"siphasher13"}}],[11,"keys","","Get the keys used by this hasher",0,null],[11,"new","","Creates a new `SipHasher24` with the two initial keys set to 0.",1,{"inputs":[],"output":{"name":"siphasher24"}}],[11,"new_with_keys","","Creates a `SipHasher24` that is keyed off the provided keys.",1,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"siphasher24"}}],[11,"keys","","Get the keys used by this hasher",1,null],[11,"write","","",2,null],[11,"finish","","",2,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"write","","",0,null],[11,"finish","","",0,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"write","","",1,null],[11,"finish","","",1,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[0,"sip128","siphasher","An implementation of SipHash with a 128-bit output.",null,null],[3,"Hash128","siphasher::sip128","A 128-bit (2x64) hash output",null,null],[12,"h1","","",3,null],[12,"h2","","",3,null],[3,"SipHasher13","","An implementation of SipHash128 1-3.",null,null],[3,"SipHasher24","","An implementation of SipHash128 2-4.",null,null],[3,"SipHasher","","An implementation of SipHash128 2-4.",null,null],[8,"Hasher128","","",null,null],[10,"finish128","","Return a 128-bit hash",4,{"inputs":[{"name":"self"}],"output":{"name":"hash128"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"hash128"}}],[11,"default","","",3,{"inputs":[],"output":{"name":"hash128"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"siphasher13"}}],[11,"default","","",5,{"inputs":[],"output":{"name":"siphasher13"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"siphasher24"}}],[11,"default","","",6,{"inputs":[],"output":{"name":"siphasher24"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"siphasher"}}],[11,"default","","",7,{"inputs":[],"output":{"name":"siphasher"}}],[11,"new","","Creates a new `SipHasher` with the two initial keys set to 0.",7,{"inputs":[],"output":{"name":"siphasher"}}],[11,"new_with_keys","","Creates a `SipHasher` that is keyed off the provided keys.",7,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"siphasher"}}],[11,"keys","","Get the keys used by this hasher",7,null],[11,"finish128","","Return a 128-bit hash",7,{"inputs":[{"name":"self"}],"output":{"name":"hash128"}}],[11,"new","","Creates a new `SipHasher13` with the two initial keys set to 0.",5,{"inputs":[],"output":{"name":"siphasher13"}}],[11,"new_with_keys","","Creates a `SipHasher13` that is keyed off the provided keys.",5,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"siphasher13"}}],[11,"keys","","Get the keys used by this hasher",5,null],[11,"finish128","","Return a 128-bit hash",5,{"inputs":[{"name":"self"}],"output":{"name":"hash128"}}],[11,"new","","Creates a new `SipHasher24` with the two initial keys set to 0.",6,{"inputs":[],"output":{"name":"siphasher24"}}],[11,"new_with_keys","","Creates a `SipHasher24` that is keyed off the provided keys.",6,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"siphasher24"}}],[11,"keys","","Get the keys used by this hasher",6,null],[11,"finish128","","Return a 128-bit hash",6,{"inputs":[{"name":"self"}],"output":{"name":"hash128"}}],[11,"write","","",7,null],[11,"finish","","",7,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"write","","",5,null],[11,"finish","","",5,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"write","","",6,null],[11,"finish","","",6,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"as_bytes","","Convert into a 16-bytes vector",3,null]],"paths":[[3,"SipHasher13"],[3,"SipHasher24"],[3,"SipHasher"],[3,"Hash128"],[8,"Hasher128"],[3,"SipHasher13"],[3,"SipHasher24"],[3,"SipHasher"]]};
searchIndex["smallvec"] = {"doc":"Small vectors in various sizes. These store a certain number of elements inline, and fall back to the heap for larger allocations.  This can be a useful optimization for improving cache locality and reducing allocator traffic for workloads that fit within the inline buffer.","items":[[3,"Drain","smallvec","",null,null],[3,"SmallVec","","A `Vec`-like container that can store a small number of elements inline.",null,null],[3,"IntoIter","","",null,null],[6,"SmallVec1","","Deprecated alias to ease transition from an earlier version.",null,null],[6,"SmallVec2","","Deprecated alias to ease transition from an earlier version.",null,null],[6,"SmallVec4","","Deprecated alias to ease transition from an earlier version.",null,null],[6,"SmallVec8","","Deprecated alias to ease transition from an earlier version.",null,null],[6,"SmallVec16","","Deprecated alias to ease transition from an earlier version.",null,null],[6,"SmallVec24","","Deprecated alias to ease transition from an earlier version.",null,null],[6,"SmallVec32","","Deprecated alias to ease transition from an earlier version.",null,null],[8,"VecLike","","Common operations implemented by both `Vec` and `SmallVec`.",null,null],[10,"push","","Append an element to the vector.",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[8,"ExtendFromSlice","","Trait to be implemented by a collection that can be extended from a slice",null,null],[10,"extend_from_slice","","Extends a collection from a slice of its element type",1,null],[8,"Array","","Types that can be used as the backing store for a SmallVec",null,null],[16,"Item","","",2,null],[10,"size","","",2,{"inputs":[],"output":{"name":"usize"}}],[10,"ptr","","",2,null],[10,"ptr_mut","","",2,null],[11,"next","","",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",3,null],[11,"next_back","","",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"drop","","",3,{"inputs":[{"name":"self"}],"output":null}],[11,"new","","Construct an empty vector",4,{"inputs":[],"output":{"name":"smallvec"}}],[11,"with_capacity","","Construct an empty vector with enough capacity pre-allocated to store at least `n` elements.",4,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"from_vec","","Construct a new `SmallVec` from a `Vec<A::Item>` without copying elements.",4,{"inputs":[{"name":"vec"}],"output":{"name":"smallvec"}}],[11,"from_buf","","Constructs a new `SmallVec` on the stack from an `A` without copying elements.",4,{"inputs":[{"name":"a"}],"output":{"name":"smallvec"}}],[11,"set_len","","Sets the length of a vector.",4,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"inline_size","","The maximum number of elements this vector can hold inline",4,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"len","","The number of elements stored in the vector",4,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns `true` if the vector is empty",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"capacity","","The number of items the vector can hold without reallocating",4,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"spilled","","Returns `true` if the data has spilled into a separate heap-allocated buffer.",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"drain","","Empty the vector and return an iterator over its former contents.",4,{"inputs":[{"name":"self"}],"output":{"name":"drain"}}],[11,"push","","Append an item to the vector.",4,null],[11,"push_all_move","","Append elements from an iterator.",4,{"inputs":[{"name":"self"},{"name":"v"}],"output":null}],[11,"pop","","Remove an item from the end of the vector and return it, or None if empty.",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"grow","","Re-allocate to set the capacity to `new_cap`.",4,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"reserve","","Reserve capacity for `additional` more elements to be inserted.",4,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"reserve_exact","","Reserve the minumum capacity for `additional` more elements to be inserted.",4,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"shrink_to_fit","","Shrink the capacity of the vector as much as possible.",4,{"inputs":[{"name":"self"}],"output":null}],[11,"truncate","","Shorten the vector, keeping the first `len` elements and dropping the rest.",4,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"as_slice","","Extracts a slice containing the entire vector.",4,null],[11,"as_mut_slice","","Extracts a mutable slice of the entire vector.",4,null],[11,"swap_remove","","Remove the element at position `index`, replacing it with the last element.",4,null],[11,"clear","","Remove all elements from the vector.",4,{"inputs":[{"name":"self"}],"output":null}],[11,"remove","","Remove and return the element at position `index`, shifting all elements after it to the left.",4,null],[11,"insert","","Insert an element at position `index`, shifting all elements after it to the right.",4,null],[11,"insert_many","","",4,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"i"}],"output":null}],[11,"into_vec","","Convert a SmallVec to a Vec, without reallocating if the SmallVec has already spilled onto the heap.",4,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"retain","","Retains only the elements specified by the predicate.",4,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"from_slice","","",4,null],[11,"insert_from_slice","","",4,null],[11,"extend_from_slice","","",4,null],[11,"deref","","",4,null],[11,"deref_mut","","",4,null],[11,"as_ref","","",4,null],[11,"as_mut","","",4,null],[11,"borrow","","",4,null],[11,"borrow_mut","","",4,null],[11,"write","","",4,null],[11,"write_all","","",4,null],[11,"flush","","",4,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"from","","",4,null],[11,"index","","",4,null],[11,"index_mut","","",4,null],[11,"index","","",4,null],[11,"index_mut","","",4,null],[11,"index","","",4,null],[11,"index_mut","","",4,null],[11,"index","","",4,null],[11,"index_mut","","",4,null],[11,"index","","",4,null],[11,"index_mut","","",4,null],[11,"extend_from_slice","","",4,null],[11,"push","","",4,null],[11,"from_iter","","",4,{"inputs":[{"name":"i"}],"output":{"name":"smallvec"}}],[11,"extend","","",4,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",4,{"inputs":[],"output":{"name":"smallvec"}}],[11,"drop","","",4,{"inputs":[{"name":"self"}],"output":null}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"smallvec"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"smallvec"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"smallvec"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",4,{"inputs":[{"name":"self"},{"name":"smallvec"}],"output":{"name":"option"}}],[11,"cmp","","",4,{"inputs":[{"name":"self"},{"name":"smallvec"}],"output":{"name":"ordering"}}],[11,"hash","","",4,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"drop","","",5,{"inputs":[{"name":"self"}],"output":null}],[11,"next","","",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",5,null],[11,"next_back","","",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"into_iter","","",4,null]],"paths":[[8,"VecLike"],[8,"ExtendFromSlice"],[8,"Array"],[3,"Drain"],[3,"SmallVec"],[3,"IntoIter"]]};
searchIndex["stable_deref_trait"] = {"doc":"This module defines an unsafe marker trait, StableDeref, for container types that deref to a fixed address which is valid even when the containing type is moved. For example, Box, Vec, Rc, Arc and String implement this trait. Additionally, it defines CloneStableDeref for types like Rc where clones deref to the same address.","items":[[8,"StableDeref","stable_deref_trait","An unsafe marker trait for types that deref to a stable address, even when moved. For example, this is implemented by Box, Vec, Rc, Arc and String, among others. Even when a Box is moved, the underlying storage remains at a fixed location.",null,null],[8,"CloneStableDeref","","An unsafe marker trait for types where clones deref to the same address. This has all the requirements of StableDeref, and additionally requires that after calling clone(), both the old and new value deref to the same address. For example, Rc and Arc implement CloneStableDeref, but Box and Vec do not.",null,null]],"paths":[]};
searchIndex["syn"] = {"doc":"","items":[[3,"Attribute","syn","Doc-comments are promoted to attributes that have `is_sugared_doc` = true",null,null],[12,"style","","",0,null],[12,"value","","",0,null],[12,"is_sugared_doc","","",0,null],[3,"Field","","A field of a struct or enum variant.",null,null],[12,"ident","","Name of the field, if any.",1,null],[12,"vis","","Visibility of the field.",1,null],[12,"attrs","","Attributes tagged on the field.",1,null],[12,"ty","","Type of the field.",1,null],[3,"Variant","","An enum variant.",null,null],[12,"ident","","Name of the variant.",2,null],[12,"attrs","","Attributes tagged on the variant.",2,null],[12,"data","","Type of variant.",2,null],[12,"discriminant","","Explicit discriminant, e.g. `Foo = 1`",2,null],[3,"Arm","","An arm of a 'match'.",null,null],[12,"attrs","","",3,null],[12,"pats","","",3,null],[12,"guard","","",3,null],[12,"body","","",3,null],[3,"Block","","A Block (`{ .. }`).",null,null],[12,"stmts","","Statements in a block",4,null],[3,"Expr","","An expression.",null,null],[12,"node","","Type of the expression.",5,null],[12,"attrs","","Attributes tagged on the expression.",5,null],[3,"FieldPat","","A single field in a struct pattern",null,null],[12,"ident","","The identifier for the field",6,null],[12,"pat","","The pattern the field is destructured to",6,null],[12,"is_shorthand","","",6,null],[12,"attrs","","",6,null],[3,"FieldValue","","A field-value pair in a struct literal.",null,null],[12,"ident","","Name of the field.",7,null],[12,"expr","","Value of the field.",7,null],[12,"is_shorthand","","Whether this is a shorthand field, e.g. `Struct { x }` instead of `Struct { x: x }`.",7,null],[12,"attrs","","Attributes tagged on the field.",7,null],[3,"Local","","Local represents a `let` statement, e.g., `let <pat>:<ty> = <expr>;`",null,null],[12,"pat","","",8,null],[12,"ty","","",8,null],[12,"init","","Initializer expression to set the value, if any",8,null],[12,"attrs","","",8,null],[3,"Generics","","Represents lifetimes and type parameters attached to a declaration of a function, enum, trait, etc.",null,null],[12,"lifetimes","","",9,null],[12,"ty_params","","",9,null],[12,"where_clause","","",9,null],[3,"Lifetime","","",null,null],[12,"ident","","",10,null],[3,"LifetimeDef","","A lifetime definition, e.g. `'a: 'b+'c+'d`",null,null],[12,"attrs","","",11,null],[12,"lifetime","","",11,null],[12,"bounds","","",11,null],[3,"TyParam","","A generic type parameter, e.g. `T: Into<String>`.",null,null],[12,"attrs","","",12,null],[12,"ident","","",12,null],[12,"bounds","","",12,null],[12,"default","","",12,null],[3,"WhereBoundPredicate","","A type bound.",null,null],[12,"bound_lifetimes","","Any lifetimes from a `for` binding",13,null],[12,"bounded_ty","","The type being bounded",13,null],[12,"bounds","","Trait and lifetime bounds (`Clone+Send+'static`)",13,null],[3,"WhereClause","","A `where` clause in a definition",null,null],[12,"predicates","","",14,null],[3,"WhereEqPredicate","","An equality predicate (unsupported).",null,null],[12,"lhs_ty","","",15,null],[12,"rhs_ty","","",15,null],[3,"WhereRegionPredicate","","A lifetime predicate.",null,null],[12,"lifetime","","",16,null],[12,"bounds","","",16,null],[3,"ImplGenerics","","Returned by `Generics::split_for_impl`.",null,null],[3,"Turbofish","","Returned by `TyGenerics::as_turbofish`.",null,null],[3,"TyGenerics","","Returned by `Generics::split_for_impl`.",null,null],[3,"Ident","","",null,null],[3,"FnDecl","","Header (not the body) of a function declaration.",null,null],[12,"inputs","","",17,null],[12,"output","","",17,null],[12,"variadic","","",17,null],[3,"ForeignItem","","",null,null],[12,"ident","","",18,null],[12,"attrs","","",18,null],[12,"node","","",18,null],[12,"vis","","",18,null],[3,"ForeignMod","","Foreign module declaration.",null,null],[12,"abi","","",19,null],[12,"items","","",19,null],[3,"ImplItem","","",null,null],[12,"ident","","",20,null],[12,"vis","","",20,null],[12,"defaultness","","",20,null],[12,"attrs","","",20,null],[12,"node","","",20,null],[3,"Item","","An item",null,null],[12,"ident","","",21,null],[12,"vis","","",21,null],[12,"attrs","","",21,null],[12,"node","","",21,null],[3,"MethodSig","","Represents a method's signature in a trait declaration, or in an implementation.",null,null],[12,"unsafety","","",22,null],[12,"constness","","",22,null],[12,"abi","","",22,null],[12,"decl","","",22,null],[12,"generics","","",22,null],[3,"PathListItem","","",null,null],[12,"name","","",23,null],[12,"rename","","renamed in list, e.g. `use foo::{bar as baz};`",23,null],[3,"TraitItem","","Represents an item declaration within a trait declaration, possibly including a default implementation. A trait item is either required (meaning it doesn't have an implementation, just a signature) or provided (meaning it has a default implementation).",null,null],[12,"ident","","",24,null],[12,"attrs","","",24,null],[12,"node","","",24,null],[3,"Crate","","",null,null],[12,"shebang","","",25,null],[12,"attrs","","",25,null],[12,"items","","",25,null],[3,"ByteStrLit","","",null,null],[12,"value","","",26,null],[12,"style","","",26,null],[3,"FloatLit","","",null,null],[12,"value","","",27,null],[12,"suffix","","",27,null],[3,"IntLit","","",null,null],[12,"value","","",28,null],[12,"suffix","","",28,null],[3,"StrLit","","",null,null],[12,"value","","",29,null],[12,"style","","",29,null],[3,"Delimited","","",null,null],[12,"delim","","The type of delimiter",30,null],[12,"tts","","The delimited sequence of token trees",30,null],[3,"Mac","","Represents a macro invocation. The Path indicates which macro is being invoked, and the vector of token-trees contains the source of the macro invocation.",null,null],[12,"path","","",31,null],[12,"tts","","",31,null],[3,"DeriveInput","","Struct or enum sent to a `proc_macro_derive` macro.",null,null],[12,"ident","","Name of the struct or enum.",32,null],[12,"vis","","Visibility of the struct or enum.",32,null],[12,"attrs","","Attributes tagged on the whole struct or enum.",32,null],[12,"generics","","Generics required to complete the definition.",32,null],[12,"body","","Data within the struct or enum.",32,null],[3,"AngleBracketedParameterData","","A path like `Foo<'a, T>`",null,null],[12,"lifetimes","","The lifetime parameters for this path segment.",33,null],[12,"types","","The type parameters for this path segment, if present.",33,null],[12,"bindings","","Bindings (equality constraints) on associated types, if present.",33,null],[3,"BareFnArg","","An argument in a function type.",null,null],[12,"name","","",34,null],[12,"ty","","",34,null],[3,"BareFnTy","","",null,null],[12,"unsafety","","",35,null],[12,"abi","","",35,null],[12,"lifetimes","","",35,null],[12,"inputs","","",35,null],[12,"output","","",35,null],[12,"variadic","","",35,null],[3,"MutTy","","",null,null],[12,"ty","","",36,null],[12,"mutability","","",36,null],[3,"ParenthesizedParameterData","","A path like `Foo(A,B) -> C`",null,null],[12,"inputs","","`(A, B)`",37,null],[12,"output","","`C`",37,null],[3,"Path","","A \"Path\" is essentially Rust's notion of a name.",null,null],[12,"global","","A `::foo` path, is relative to the crate root rather than current module (like paths in an import).",38,null],[12,"segments","","The segments in the path: the things separated by `::`.",38,null],[3,"PathSegment","","A segment of a path: an identifier, an optional lifetime, and a set of types.",null,null],[12,"ident","","The identifier portion of this path segment.",39,null],[12,"parameters","","Type/lifetime parameters attached to this path. They come in two flavors: `Path<A,B,C>` and `Path(A,B) -> C`. Note that this is more than just simple syntactic sugar; the use of parens affects the region binding rules, so we preserve the distinction.",39,null],[3,"PolyTraitRef","","",null,null],[12,"bound_lifetimes","","The `'a` in `<'a> Foo<&'a T>`",40,null],[12,"trait_ref","","The `Foo<&'a T>` in `<'a> Foo<&'a T>`",40,null],[3,"QSelf","","The explicit Self type in a \"qualified path\". The actual path, including the trait and the associated item, is stored separately. `position` represents the index of the associated item qualified with this Self type.",null,null],[12,"ty","","",41,null],[12,"position","","",41,null],[3,"TypeBinding","","Bind a type to an associated type: `A=Foo`.",null,null],[12,"ident","","",42,null],[12,"ty","","",42,null],[4,"AttrStyle","","Distinguishes between Attributes that decorate items and Attributes that are contained as statements within items. These two cases need to be distinguished for pretty-printing.",null,null],[13,"Outer","","Attribute of the form `#![...]`.",43,null],[13,"Inner","","Attribute of the form `#[...]`.",43,null],[4,"MetaItem","","A compile-time attribute item.",null,null],[13,"Word","","Word meta item.",44,null],[13,"List","","List meta item.",44,null],[13,"NameValue","","Name-value meta item.",44,null],[4,"NestedMetaItem","","Possible values inside of compile-time attribute lists.",null,null],[13,"MetaItem","","A full `MetaItem`.",45,null],[13,"Literal","","A Rust literal.",45,null],[4,"ConstExpr","","",null,null],[13,"Call","","A function call",46,null],[13,"Binary","","A binary operation (For example: `a + b`, `a * b`)",46,null],[13,"Unary","","A unary operation (For example: `!x`, `*x`)",46,null],[13,"Lit","","A literal (For example: `1`, `\"foo\"`)",46,null],[13,"Cast","","A cast (`foo as f64`)",46,null],[13,"Path","","Variable reference, possibly containing `::` and/or type parameters, e.g. foo::bar::.",46,null],[13,"Index","","An indexing operation (`foo[2]`)",46,null],[13,"Paren","","No-op: used solely so we can pretty-print faithfully",46,null],[13,"Other","","If compiling with full support for expression syntax, any expression is allowed",46,null],[4,"VariantData","","Data stored within an enum variant or struct.",null,null],[13,"Struct","","Struct variant, e.g. `Point { x: f64, y: f64 }`.",47,null],[13,"Tuple","","Tuple variant, e.g. `Some(T)`.",47,null],[13,"Unit","","Unit variant, e.g. `None`.",47,null],[4,"Visibility","","Visibility level of an item.",null,null],[13,"Public","","Public, i.e. `pub`.",48,null],[13,"Crate","","Crate-visible, i.e. `pub(crate)`.",48,null],[13,"Restricted","","Restricted, e.g. `pub(some::module)`.",48,null],[13,"Inherited","","Inherited, i.e. private.",48,null],[4,"BindingMode","","",null,null],[13,"ByRef","","",49,null],[13,"ByValue","","",49,null],[4,"CaptureBy","","A capture clause",null,null],[13,"Value","","",50,null],[13,"Ref","","",50,null],[4,"ExprKind","","",null,null],[13,"Box","","A `box x` expression.",51,null],[13,"InPlace","","First expr is the place; second expr is the value.",51,null],[13,"Array","","An array, e.g. `[a, b, c, d]`.",51,null],[13,"Call","","A function call.",51,null],[13,"MethodCall","","A method call (`x.foo::<Bar, Baz>(a, b, c, d)`)",51,null],[13,"Tup","","A tuple, e.g. `(a, b, c, d)`.",51,null],[13,"Binary","","A binary operation, e.g. `a + b`, `a * b`.",51,null],[13,"Unary","","A unary operation, e.g. `!x`, `*x`.",51,null],[13,"Lit","","A literal, e.g. `1`, `\"foo\"`.",51,null],[13,"Cast","","A cast, e.g. `foo as f64`.",51,null],[13,"Type","","A type ascription, e.g. `foo: f64`.",51,null],[13,"If","","An `if` block, with an optional else block",51,null],[13,"IfLet","","An `if let` expression with an optional else block",51,null],[13,"While","","A while loop, with an optional label",51,null],[13,"WhileLet","","A while-let loop, with an optional label.",51,null],[13,"ForLoop","","A for loop, with an optional label.",51,null],[13,"Loop","","Conditionless loop with an optional label.",51,null],[13,"Match","","A `match` block.",51,null],[13,"Closure","","A closure (for example, `move |a, b, c| a + b + c`)",51,null],[13,"Block","","A block (`{ ... }` or `unsafe { ... }`)",51,null],[13,"Assign","","An assignment (`a = foo()`)",51,null],[13,"AssignOp","","An assignment with an operator",51,null],[13,"Field","","Access of a named struct field (`obj.foo`)",51,null],[13,"TupField","","Access of an unnamed field of a struct or tuple-struct",51,null],[13,"Index","","An indexing operation (`foo[2]`)",51,null],[13,"Range","","A range (`1..2`, `1..`, `..2`, `1...2`, `1...`, `...2`)",51,null],[13,"Path","","Variable reference, possibly containing `::` and/or type parameters, e.g. foo::bar::.",51,null],[13,"AddrOf","","A referencing operation (`&a` or `&mut a`)",51,null],[13,"Break","","A `break`, with an optional label to break, and an optional expression",51,null],[13,"Continue","","A `continue`, with an optional label",51,null],[13,"Ret","","A `return`, with an optional value to be returned",51,null],[13,"Mac","","A macro invocation; pre-expansion",51,null],[13,"Struct","","A struct literal expression.",51,null],[13,"Repeat","","An array literal constructed from one repeated element.",51,null],[13,"Paren","","No-op: used solely so we can pretty-print faithfully",51,null],[13,"Try","","`expr?`",51,null],[4,"MacStmtStyle","","How a macro was invoked.",null,null],[13,"Semicolon","","The macro statement had a trailing semicolon, e.g. `foo! { ... };` `foo!(...);`, `foo![...];`",52,null],[13,"Braces","","The macro statement had braces; e.g. foo! { ... }",52,null],[13,"NoBraces","","The macro statement had parentheses or brackets and no semicolon; e.g. `foo!(...)`. All of these will end up being converted into macro expressions.",52,null],[4,"Pat","","",null,null],[13,"Wild","","Represents a wildcard pattern (`_`)",53,null],[13,"Ident","","A `Pat::Ident` may either be a new bound variable (`ref mut binding @ OPT_SUBPATTERN`), or a unit struct/variant pattern, or a const pattern (in the last two cases the third field must be `None`). Disambiguation cannot be done with parser alone, so it happens during name resolution.",53,null],[13,"Struct","","A struct or struct variant pattern, e.g. `Variant {x, y, ..}`. The `bool` is `true` in the presence of a `..`.",53,null],[13,"TupleStruct","","A tuple struct/variant pattern `Variant(x, y, .., z)`. If the `..` pattern fragment is present, then `Option<usize>` denotes its position. 0 <= position <= subpats.len()",53,null],[13,"Path","","A possibly qualified path pattern. Unquailfied path patterns `A::B::C` can legally refer to variants, structs, constants or associated constants. Quailfied path patterns `<A>::B::C`/`<A as Trait>::B::C` can only legally refer to associated constants.",53,null],[13,"Tuple","","A tuple pattern `(a, b)`. If the `..` pattern fragment is present, then `Option<usize>` denotes its position. 0 <= position <= subpats.len()",53,null],[13,"Box","","A `box` pattern",53,null],[13,"Ref","","A reference pattern, e.g. `&mut (a, b)`",53,null],[13,"Lit","","A literal",53,null],[13,"Range","","A range pattern, e.g. `1...2`",53,null],[13,"Slice","","`[a, b, ..i, y, z]` is represented as: `Pat::Slice(box [a, b], Some(i), box [y, z])`",53,null],[13,"Mac","","A macro pattern; pre-expansion",53,null],[4,"RangeLimits","","Limit types of a range (inclusive or exclusive)",null,null],[13,"HalfOpen","","Inclusive at the beginning, exclusive at the end",54,null],[13,"Closed","","Inclusive at the beginning and end",54,null],[4,"Stmt","","A statement, usually ending in a semicolon.",null,null],[13,"Local","","A local (let) binding.",55,null],[13,"Item","","An item definition.",55,null],[13,"Expr","","Expr without trailing semicolon.",55,null],[13,"Semi","","Expression with trailing semicolon;",55,null],[13,"Mac","","Macro invocation.",55,null],[4,"TraitBoundModifier","","A modifier on a bound, currently this is only used for `?Sized`, where the modifier is `Maybe`. Negative bounds should also be handled here.",null,null],[13,"None","","",56,null],[13,"Maybe","","",56,null],[4,"TyParamBound","","The AST represents all type param bounds as types. `typeck::collect::compute_bounds` matches these against the \"special\" built-in traits (see `middle::lang_items`) and detects Copy, Send and Sync.",null,null],[13,"Trait","","",57,null],[13,"Region","","",57,null],[4,"WherePredicate","","A single predicate in a `where` clause",null,null],[13,"BoundPredicate","","A type binding, e.g. `for<'c> Foo: Send+Clone+'c`",58,null],[13,"RegionPredicate","","A lifetime predicate, e.g. `'a: 'b+'c`",58,null],[13,"EqPredicate","","An equality predicate (unsupported)",58,null],[4,"Constness","","",null,null],[13,"Const","","",59,null],[13,"NotConst","","",59,null],[4,"Defaultness","","",null,null],[13,"Default","","",60,null],[13,"Final","","",60,null],[4,"FnArg","","An argument in a function header.",null,null],[13,"SelfRef","","",61,null],[13,"SelfValue","","",61,null],[13,"Captured","","",61,null],[13,"Ignored","","",61,null],[4,"ForeignItemKind","","An item within an `extern` block",null,null],[13,"Fn","","A foreign function",62,null],[13,"Static","","A foreign static item (`static ext: u8`)",62,null],[4,"ImplItemKind","","",null,null],[13,"Const","","",63,null],[13,"Method","","",63,null],[13,"Type","","",63,null],[13,"Macro","","",63,null],[4,"ImplPolarity","","",null,null],[13,"Positive","","`impl Trait for Type`",64,null],[13,"Negative","","`impl !Trait for Type`",64,null],[4,"ItemKind","","",null,null],[13,"ExternCrate","","An`extern crate` item, with optional original crate name.",65,null],[13,"Use","","A use declaration (`use` or `pub use`) item.",65,null],[13,"Static","","A static item (`static` or `pub static`).",65,null],[13,"Const","","A constant item (`const` or `pub const`).",65,null],[13,"Fn","","A function declaration (`fn` or `pub fn`).",65,null],[13,"Mod","","A module declaration (`mod` or `pub mod`).",65,null],[13,"ForeignMod","","An external module (`extern` or `pub extern`).",65,null],[13,"Ty","","A type alias (`type` or `pub type`).",65,null],[13,"Enum","","An enum definition (`enum` or `pub enum`).",65,null],[13,"Struct","","A struct definition (`struct` or `pub struct`).",65,null],[13,"Union","","A union definition (`union` or `pub union`).",65,null],[13,"Trait","","A Trait declaration (`trait` or `pub trait`).",65,null],[13,"DefaultImpl","","Default trait implementation.",65,null],[13,"Impl","","An implementation.",65,null],[13,"Mac","","A macro invocation (which includes macro definition).",65,null],[4,"TraitItemKind","","",null,null],[13,"Const","","",66,null],[13,"Method","","",66,null],[13,"Type","","",66,null],[13,"Macro","","",66,null],[4,"ViewPath","","",null,null],[13,"Simple","","`foo::bar::baz as quux`",67,null],[13,"Glob","","`foo::bar::*`",67,null],[13,"List","","`foo::bar::{a, b, c}`",67,null],[4,"FloatTy","","",null,null],[13,"F32","","",68,null],[13,"F64","","",68,null],[13,"Unsuffixed","","",68,null],[4,"IntTy","","",null,null],[13,"Isize","","",69,null],[13,"I8","","",69,null],[13,"I16","","",69,null],[13,"I32","","",69,null],[13,"I64","","",69,null],[13,"Usize","","",69,null],[13,"U8","","",69,null],[13,"U16","","",69,null],[13,"U32","","",69,null],[13,"U64","","",69,null],[13,"Unsuffixed","","",69,null],[4,"Lit","","Literal kind.",null,null],[13,"Str","","A string literal (`\"foo\"`)",70,null],[13,"ByteStr","","A byte string (`b\"foo\"`)",70,null],[13,"Byte","","A byte char (`b'f'`)",70,null],[13,"Char","","A character literal (`'a'`)",70,null],[13,"Int","","An integer literal (`1`)",70,null],[13,"Float","","A float literal (`1f64` or `1E10f64` or `1.0E10`)",70,null],[13,"Bool","","A boolean literal",70,null],[4,"StrStyle","","",null,null],[13,"Cooked","","A regular string, like `\"foo\"`",71,null],[13,"Raw","","A raw string, like `r##\"foo\"##`",71,null],[4,"BinOpToken","","",null,null],[13,"Plus","","",72,null],[13,"Minus","","",72,null],[13,"Star","","",72,null],[13,"Slash","","",72,null],[13,"Percent","","",72,null],[13,"Caret","","",72,null],[13,"And","","",72,null],[13,"Or","","",72,null],[13,"Shl","","",72,null],[13,"Shr","","",72,null],[4,"DelimToken","","A delimiter token",null,null],[13,"Paren","","A round parenthesis: `(` or `)`",73,null],[13,"Bracket","","A square bracket: `[` or `]`",73,null],[13,"Brace","","A curly brace: `{` or `}`",73,null],[4,"Token","","",null,null],[13,"Eq","","",74,null],[13,"Lt","","",74,null],[13,"Le","","",74,null],[13,"EqEq","","",74,null],[13,"Ne","","",74,null],[13,"Ge","","",74,null],[13,"Gt","","",74,null],[13,"AndAnd","","",74,null],[13,"OrOr","","",74,null],[13,"Not","","",74,null],[13,"Tilde","","",74,null],[13,"BinOp","","",74,null],[13,"BinOpEq","","",74,null],[13,"At","","",74,null],[13,"Dot","","",74,null],[13,"DotDot","","",74,null],[13,"DotDotDot","","",74,null],[13,"Comma","","",74,null],[13,"Semi","","",74,null],[13,"Colon","","",74,null],[13,"ModSep","","",74,null],[13,"RArrow","","",74,null],[13,"LArrow","","",74,null],[13,"FatArrow","","",74,null],[13,"Pound","","",74,null],[13,"Dollar","","",74,null],[13,"Question","","",74,null],[13,"Literal","","",74,null],[13,"Ident","","",74,null],[13,"Underscore","","",74,null],[13,"Lifetime","","",74,null],[13,"DocComment","","",74,null],[4,"TokenTree","","When the main rust parser encounters a syntax-extension invocation, it parses the arguments to the invocation as a token-tree. This is a very loose structure, such that all sorts of different AST-fragments can be passed to syntax extensions using a uniform type.",null,null],[13,"Token","","A single token",75,null],[13,"Delimited","","A delimited sequence of token trees",75,null],[4,"Body","","Body of a derived struct or enum.",null,null],[13,"Enum","","It's an enum.",76,null],[13,"Struct","","It's a struct.",76,null],[4,"BinOp","","",null,null],[13,"Add","","The `+` operator (addition)",77,null],[13,"Sub","","The `-` operator (subtraction)",77,null],[13,"Mul","","The `*` operator (multiplication)",77,null],[13,"Div","","The `/` operator (division)",77,null],[13,"Rem","","The `%` operator (modulus)",77,null],[13,"And","","The `&&` operator (logical and)",77,null],[13,"Or","","The `||` operator (logical or)",77,null],[13,"BitXor","","The `^` operator (bitwise xor)",77,null],[13,"BitAnd","","The `&` operator (bitwise and)",77,null],[13,"BitOr","","The `|` operator (bitwise or)",77,null],[13,"Shl","","The `<<` operator (shift left)",77,null],[13,"Shr","","The `>>` operator (shift right)",77,null],[13,"Eq","","The `==` operator (equality)",77,null],[13,"Lt","","The `<` operator (less than)",77,null],[13,"Le","","The `<=` operator (less than or equal to)",77,null],[13,"Ne","","The `!=` operator (not equal to)",77,null],[13,"Ge","","The `>=` operator (greater than or equal to)",77,null],[13,"Gt","","The `>` operator (greater than)",77,null],[4,"UnOp","","",null,null],[13,"Deref","","The `*` operator for dereferencing",78,null],[13,"Not","","The `!` operator for logical inversion",78,null],[13,"Neg","","The `-` operator for negation",78,null],[4,"Abi","","",null,null],[13,"Named","","",79,null],[13,"Rust","","",79,null],[4,"FunctionRetTy","","",null,null],[13,"Default","","Return type is not specified.",80,null],[13,"Ty","","Everything else",80,null],[4,"Mutability","","",null,null],[13,"Mutable","","",81,null],[13,"Immutable","","",81,null],[4,"PathParameters","","Parameters of a path segment.",null,null],[13,"AngleBracketed","","The `<'a, A, B, C>` in `foo::bar::baz::<'a, A, B, C>`",82,null],[13,"Parenthesized","","The `(A, B)` and `C` in `Foo(A, B) -> C`",82,null],[4,"Ty","","The different kinds of types recognized by the compiler",null,null],[13,"Slice","","A variable-length array (`[T]`)",83,null],[13,"Array","","A fixed length array (`[T; n]`)",83,null],[13,"Ptr","","A raw pointer (`*const T` or `*mut T`)",83,null],[13,"Rptr","","A reference (`&'a T` or `&'a mut T`)",83,null],[13,"BareFn","","A bare function (e.g. `fn(usize) -> bool`)",83,null],[13,"Never","","The never type (`!`)",83,null],[13,"Tup","","A tuple (`(A, B, C, D, ...)`)",83,null],[13,"Path","","A path (`module::module::...::Type`), optionally \"qualified\", e.g. `<Vec<T> as SomeTrait>::SomeType`.",83,null],[13,"TraitObject","","A trait object type `Bound1 + Bound2 + Bound3` where `Bound` is a trait or a lifetime.",83,null],[13,"ImplTrait","","An `impl Bound1 + Bound2 + Bound3` type where `Bound` is a trait or a lifetime.",83,null],[13,"Paren","","No-op; kept solely so that we can pretty-print faithfully",83,null],[13,"Infer","","TyKind::Infer means the type should be inferred instead of it having been specified. This can appear anywhere in a type.",83,null],[13,"Mac","","A macro in the type position.",83,null],[4,"Unsafety","","",null,null],[13,"Unsafe","","",84,null],[13,"Normal","","",84,null],[5,"parse_derive_input","","",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[5,"parse_crate","","",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[5,"parse_item","","",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[5,"parse_items","","",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[5,"parse_expr","","",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[5,"parse_type","","",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[5,"parse_path","","",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[5,"parse_where_clause","","",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[5,"parse_token_trees","","",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[5,"parse_ident","","",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[5,"parse_ty_param_bound","","",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[5,"parse_outer_attr","","",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[5,"parse_inner_attr","","",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[0,"aster","","",null,null],[5,"id","syn::aster","",null,{"inputs":[{"name":"i"}],"output":{"name":"ident"}}],[5,"from_generics","","",null,{"inputs":[{"name":"generics"}],"output":{"name":"genericsbuilder"}}],[5,"where_predicate","","",null,{"inputs":[],"output":{"name":"wherepredicatebuilder"}}],[5,"ty","","",null,{"inputs":[],"output":{"name":"tybuilder"}}],[5,"path","","",null,{"inputs":[],"output":{"name":"pathbuilder"}}],[0,"generics","","",null,null],[3,"GenericsBuilder","syn::aster::generics","",null,null],[11,"new","","",85,{"inputs":[],"output":{"name":"self"}}],[11,"from_generics","","",85,{"inputs":[{"name":"generics"}],"output":{"name":"self"}}],[11,"with_callback","","",85,{"inputs":[{"name":"f"}],"output":{"name":"self"}}],[11,"from_generics_with_callback","","",85,{"inputs":[{"name":"generics"},{"name":"f"}],"output":{"name":"self"}}],[11,"with","","",85,{"inputs":[{"name":"self"},{"name":"generics"}],"output":{"name":"self"}}],[11,"with_lifetimes","","",85,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"self"}}],[11,"with_lifetime_names","","",85,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"self"}}],[11,"with_lifetime","","",85,{"inputs":[{"name":"self"},{"name":"lifetimedef"}],"output":{"name":"self"}}],[11,"lifetime_name","","",85,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"self"}}],[11,"lifetime","","",85,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"lifetimedefbuilder"}}],[11,"with_ty_params","","",85,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"self"}}],[11,"with_ty_param_ids","","",85,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"self"}}],[11,"with_ty_param","","",85,{"inputs":[{"name":"self"},{"name":"typaram"}],"output":{"name":"self"}}],[11,"ty_param_id","","",85,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"self"}}],[11,"ty_param","","",85,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"typarambuilder"}}],[11,"with_predicates","","",85,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"self"}}],[11,"with_predicate","","",85,{"inputs":[{"name":"self"},{"name":"wherepredicate"}],"output":{"name":"self"}}],[11,"predicate","","",85,{"inputs":[{"name":"self"}],"output":{"name":"wherepredicatebuilder"}}],[11,"add_lifetime_bound","","",85,{"inputs":[{"name":"self"},{"name":"l"}],"output":{"name":"self"}}],[11,"add_ty_param_bound","","",85,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"self"}}],[11,"strip_bounds","","",85,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"strip_lifetimes","","",85,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"strip_ty_params","","",85,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"strip_predicates","","",85,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"build","","",85,null],[11,"invoke","","",85,{"inputs":[{"name":"self"},{"name":"lifetimedef"}],"output":{"name":"self"}}],[11,"invoke","","",85,{"inputs":[{"name":"self"},{"name":"typaram"}],"output":{"name":"self"}}],[11,"invoke","","",85,{"inputs":[{"name":"self"},{"name":"wherepredicate"}],"output":{"name":"self"}}],[0,"ident","syn::aster","",null,null],[8,"ToIdent","syn::aster::ident","",null,null],[10,"to_ident","","",86,{"inputs":[{"name":"self"}],"output":{"name":"ident"}}],[11,"to_ident","syn","",87,{"inputs":[{"name":"self"}],"output":{"name":"ident"}}],[0,"invoke","syn::aster","",null,null],[3,"Identity","syn::aster::invoke","",null,null],[8,"Invoke","","",null,null],[16,"Result","","",88,null],[10,"invoke","","",88,null],[11,"clone","","",89,{"inputs":[{"name":"self"}],"output":{"name":"identity"}}],[11,"invoke","","",89,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"a"}}],[0,"lifetime","syn::aster","",null,null],[3,"LifetimeDefBuilder","syn::aster::lifetime","",null,null],[8,"IntoLifetime","","",null,null],[10,"into_lifetime","","",90,{"inputs":[{"name":"self"}],"output":{"name":"lifetime"}}],[8,"IntoLifetimeDef","","",null,null],[10,"into_lifetime_def","","",91,{"inputs":[{"name":"self"}],"output":{"name":"lifetimedef"}}],[11,"into_lifetime","syn","",10,{"inputs":[{"name":"self"}],"output":{"name":"lifetime"}}],[11,"into_lifetime_def","","",11,{"inputs":[{"name":"self"}],"output":{"name":"lifetimedef"}}],[11,"into_lifetime_def","","",10,{"inputs":[{"name":"self"}],"output":{"name":"lifetimedef"}}],[11,"new","syn::aster::lifetime","",92,{"inputs":[{"name":"n"}],"output":{"name":"self"}}],[11,"with_callback","","",92,{"inputs":[{"name":"n"},{"name":"f"}],"output":{"name":"self"}}],[11,"bound","","",92,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"self"}}],[11,"build","","",92,null],[0,"path","syn::aster","",null,null],[3,"PathBuilder","syn::aster::path","",null,null],[3,"PathSegmentsBuilder","","",null,null],[3,"PathSegmentBuilder","","",null,null],[3,"TypeBindingBuilder","","",null,null],[3,"PathSegmentReturnBuilder","","",null,null],[8,"IntoPath","","",null,null],[10,"into_path","","",93,{"inputs":[{"name":"self"}],"output":{"name":"path"}}],[11,"into_path","syn","",38,{"inputs":[{"name":"self"}],"output":{"name":"path"}}],[11,"into_path","","",87,{"inputs":[{"name":"self"}],"output":{"name":"path"}}],[11,"new","syn::aster::path","",94,{"inputs":[],"output":{"name":"self"}}],[11,"with_callback","","",94,{"inputs":[{"name":"f"}],"output":{"name":"self"}}],[11,"build","","",94,null],[11,"global","","",94,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"ids","","",94,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"pathsegmentsbuilder"}}],[11,"id","","",94,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"pathsegmentsbuilder"}}],[11,"segment","","",94,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"pathsegmentbuilder"}}],[11,"ids","","",95,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"pathsegmentsbuilder"}}],[11,"id","","",95,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"pathsegmentsbuilder"}}],[11,"segment","","",95,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"pathsegmentbuilder"}}],[11,"build","","",95,null],[11,"invoke","","",95,{"inputs":[{"name":"self"},{"name":"pathsegment"}],"output":{"name":"self"}}],[11,"with_callback","","",96,{"inputs":[{"name":"i"},{"name":"f"}],"output":{"name":"self"}}],[11,"with_generics","","",96,{"inputs":[{"name":"self"},{"name":"generics"}],"output":{"name":"self"}}],[11,"with_lifetimes","","",96,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"self"}}],[11,"with_lifetime","","",96,{"inputs":[{"name":"self"},{"name":"l"}],"output":{"name":"self"}}],[11,"lifetime","","",96,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"self"}}],[11,"with_tys","","",96,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"self"}}],[11,"with_ty","","",96,{"inputs":[{"name":"self"},{"name":"ty"}],"output":{"name":"self"}}],[11,"ty","","",96,{"inputs":[{"name":"self"}],"output":{"name":"tybuilder"}}],[11,"with_binding","","",96,{"inputs":[{"name":"self"},{"name":"typebinding"}],"output":{"name":"self"}}],[11,"binding","","",96,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"tybuilder"}}],[11,"no_return","","",96,null],[11,"return_","","",96,{"inputs":[{"name":"self"}],"output":{"name":"tybuilder"}}],[11,"build_return","","",96,null],[11,"build","","",96,null],[11,"invoke","","",96,{"inputs":[{"name":"self"},{"name":"ty"}],"output":{"name":"self"}}],[11,"invoke","","",97,null],[11,"invoke","","",98,null],[0,"qpath","syn::aster","",null,null],[3,"QPathBuilder","syn::aster::qpath","",null,null],[3,"QPathTyBuilder","","",null,null],[3,"QPathQSelfBuilder","","",null,null],[11,"new","","",99,{"inputs":[],"output":{"name":"self"}}],[11,"with_callback","","Construct a `QPathBuilder` that will call the `callback` with a constructed `QSelf` and `Path`.",99,{"inputs":[{"name":"f"}],"output":{"name":"self"}}],[11,"with_ty","","Build a qualified path first by starting with a type builder.",99,{"inputs":[{"name":"self"},{"name":"ty"}],"output":{"name":"qpathtybuilder"}}],[11,"ty","","Build a qualified path first by starting with a type builder.",99,{"inputs":[{"name":"self"}],"output":{"name":"tybuilder"}}],[11,"build","","Build a qualified path with a concrete type and path.",99,null],[11,"invoke","","",99,{"inputs":[{"name":"self"},{"name":"ty"}],"output":{"name":"qpathtybuilder"}}],[11,"as_","","Build a qualified path with a path builder.",100,{"inputs":[{"name":"self"}],"output":{"name":"pathbuilder"}}],[11,"id","","",100,null],[11,"segment","","",100,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"pathsegmentbuilder"}}],[11,"invoke","","",100,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"qpathqselfbuilder"}}],[11,"id","","",101,null],[11,"segment","","",101,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"pathsegmentbuilder"}}],[11,"invoke","","",101,null],[0,"ty","syn::aster","",null,null],[3,"TyBuilder","syn::aster::ty","",null,null],[3,"TyPathBuilder","","",null,null],[3,"TyQPathBuilder","","",null,null],[3,"TySliceBuilder","","",null,null],[3,"TyRefBuilder","","",null,null],[3,"TyOptionBuilder","","",null,null],[3,"TyResultOkBuilder","","",null,null],[3,"TyResultErrBuilder","","",null,null],[3,"TyPhantomDataBuilder","","",null,null],[3,"TyBoxBuilder","","",null,null],[3,"TyIteratorBuilder","","",null,null],[3,"TyImplTraitTyBuilder","","",null,null],[3,"TyTupleBuilder","","",null,null],[11,"new","","",102,{"inputs":[],"output":{"name":"self"}}],[11,"with_callback","","",102,{"inputs":[{"name":"f"}],"output":{"name":"self"}}],[11,"build","","",102,null],[11,"id","","",102,null],[11,"build_path","","",102,null],[11,"build_qpath","","",102,null],[11,"path","","",102,{"inputs":[{"name":"self"}],"output":{"name":"pathbuilder"}}],[11,"qpath","","",102,{"inputs":[{"name":"self"}],"output":{"name":"qpathbuilder"}}],[11,"isize","","",102,null],[11,"i8","","",102,null],[11,"i16","","",102,null],[11,"i32","","",102,null],[11,"i64","","",102,null],[11,"usize","","",102,null],[11,"u8","","",102,null],[11,"u16","","",102,null],[11,"u32","","",102,null],[11,"u64","","",102,null],[11,"f32","","",102,null],[11,"f64","","",102,null],[11,"bool","","",102,null],[11,"unit","","",102,null],[11,"tuple","","",102,{"inputs":[{"name":"self"}],"output":{"name":"tytuplebuilder"}}],[11,"build_slice","","",102,null],[11,"slice","","",102,{"inputs":[{"name":"self"}],"output":{"name":"tybuilder"}}],[11,"ref_","","",102,{"inputs":[{"name":"self"}],"output":{"name":"tyrefbuilder"}}],[11,"never","","",102,null],[11,"infer","","",102,null],[11,"option","","",102,{"inputs":[{"name":"self"}],"output":{"name":"tybuilder"}}],[11,"result","","",102,{"inputs":[{"name":"self"}],"output":{"name":"tybuilder"}}],[11,"phantom_data","","",102,{"inputs":[{"name":"self"}],"output":{"name":"tybuilder"}}],[11,"box_","","",102,{"inputs":[{"name":"self"}],"output":{"name":"tybuilder"}}],[11,"iterator","","",102,{"inputs":[{"name":"self"}],"output":{"name":"tybuilder"}}],[11,"impl_trait","","",102,{"inputs":[{"name":"self"}],"output":{"name":"tyimpltraittybuilder"}}],[11,"invoke","","",103,null],[11,"invoke","","",104,null],[11,"invoke","","",105,null],[11,"mut_","","",106,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"lifetime","","",106,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"self"}}],[11,"build_ty","","",106,null],[11,"ty","","",106,{"inputs":[{"name":"self"}],"output":{"name":"tybuilder"}}],[11,"invoke","","",106,null],[11,"invoke","","",107,null],[11,"invoke","","",108,{"inputs":[{"name":"self"},{"name":"ty"}],"output":{"name":"tybuilder"}}],[11,"invoke","","",109,null],[11,"invoke","","",110,null],[11,"invoke","","",111,null],[11,"invoke","","",112,null],[11,"with_bounds","","",113,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"self"}}],[11,"with_bound","","",113,{"inputs":[{"name":"self"},{"name":"typarambound"}],"output":{"name":"self"}}],[11,"bound","","",113,{"inputs":[{"name":"self"}],"output":{"name":"typaramboundbuilder"}}],[11,"with_generics","","",113,{"inputs":[{"name":"self"},{"name":"generics"}],"output":{"name":"self"}}],[11,"with_lifetimes","","",113,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"self"}}],[11,"lifetime","","",113,{"inputs":[{"name":"self"},{"name":"l"}],"output":{"name":"self"}}],[11,"build","","",113,null],[11,"invoke","","",113,{"inputs":[{"name":"self"},{"name":"typarambound"}],"output":{"name":"self"}}],[11,"with_tys","","",114,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"self"}}],[11,"with_ty","","",114,{"inputs":[{"name":"self"},{"name":"ty"}],"output":{"name":"self"}}],[11,"ty","","",114,{"inputs":[{"name":"self"}],"output":{"name":"tybuilder"}}],[11,"build","","",114,null],[11,"invoke","","",114,{"inputs":[{"name":"self"},{"name":"ty"}],"output":{"name":"self"}}],[0,"ty_param","syn::aster","",null,null],[3,"TyParamBuilder","syn::aster::ty_param","",null,null],[3,"TyParamBoundBuilder","","",null,null],[3,"TraitTyParamBoundBuilder","","",null,null],[3,"PolyTraitRefBuilder","","",null,null],[11,"new","","",115,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"from_ty_param","","",115,{"inputs":[{"name":"typaram"}],"output":{"name":"self"}}],[11,"with_callback","","",115,{"inputs":[{"name":"i"},{"name":"f"}],"output":{"name":"self"}}],[11,"from_ty_param_with_callback","","",115,{"inputs":[{"name":"f"},{"name":"typaram"}],"output":{"name":"self"}}],[11,"with_default","","",115,{"inputs":[{"name":"self"},{"name":"ty"}],"output":{"name":"self"}}],[11,"default","","",115,{"inputs":[{"name":"self"}],"output":{"name":"tybuilder"}}],[11,"with_bound","","",115,{"inputs":[{"name":"self"},{"name":"typarambound"}],"output":{"name":"self"}}],[11,"bound","","",115,{"inputs":[{"name":"self"}],"output":{"name":"typaramboundbuilder"}}],[11,"with_trait_bound","","",115,{"inputs":[{"name":"self"},{"name":"polytraitref"}],"output":{"name":"self"}}],[11,"trait_bound","","",115,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"polytraitrefbuilder"}}],[11,"lifetime_bound","","",115,{"inputs":[{"name":"self"},{"name":"l"}],"output":{"name":"self"}}],[11,"build","","",115,null],[11,"invoke","","",115,{"inputs":[{"name":"self"},{"name":"ty"}],"output":{"name":"self"}}],[11,"invoke","","",115,{"inputs":[{"name":"self"},{"name":"typarambound"}],"output":{"name":"self"}}],[11,"invoke","","",115,{"inputs":[{"name":"self"},{"name":"polytraitref"}],"output":{"name":"self"}}],[11,"new","","",116,{"inputs":[],"output":{"name":"self"}}],[11,"with_callback","","",116,{"inputs":[{"name":"f"}],"output":{"name":"self"}}],[11,"build_trait","","",116,null],[11,"trait_","","",116,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"polytraitrefbuilder"}}],[11,"maybe_trait","","",116,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"polytraitrefbuilder"}}],[11,"iterator","","",116,{"inputs":[{"name":"self"},{"name":"ty"}],"output":{"name":"polytraitrefbuilder"}}],[11,"lifetime","","",116,null],[11,"invoke","","",117,null],[11,"with_callback","","",118,{"inputs":[{"name":"p"},{"name":"f"}],"output":{"name":"self"}}],[11,"with_lifetime","","",118,{"inputs":[{"name":"self"},{"name":"l"}],"output":{"name":"self"}}],[11,"lifetime","","",118,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"lifetimedefbuilder"}}],[11,"build","","",118,null],[11,"invoke","","",118,{"inputs":[{"name":"self"},{"name":"lifetimedef"}],"output":{"name":"self"}}],[0,"where_predicate","syn::aster","",null,null],[3,"WherePredicateBuilder","syn::aster::where_predicate","",null,null],[3,"WhereBoundPredicateBuilder","","",null,null],[3,"WhereBoundPredicateTyBuilder","","",null,null],[3,"WhereBoundPredicateTyBoundsBuilder","","",null,null],[3,"WhereRegionPredicateBuilder","","",null,null],[11,"new","","",119,{"inputs":[],"output":{"name":"self"}}],[11,"with_callback","","",119,{"inputs":[{"name":"f"}],"output":{"name":"self"}}],[11,"bound","","",119,{"inputs":[{"name":"self"}],"output":{"name":"tybuilder"}}],[11,"lifetime","","",119,{"inputs":[{"name":"self"},{"name":"l"}],"output":{"name":"whereregionpredicatebuilder"}}],[11,"invoke","","",119,null],[11,"invoke","","",120,null],[11,"with_for_lifetime","","",121,{"inputs":[{"name":"self"},{"name":"l"}],"output":{"name":"self"}}],[11,"for_lifetime","","",121,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"lifetimedefbuilder"}}],[11,"with_bound","","",121,{"inputs":[{"name":"self"},{"name":"typarambound"}],"output":{"name":"whereboundpredicatetyboundsbuilder"}}],[11,"bound","","",121,{"inputs":[{"name":"self"}],"output":{"name":"typaramboundbuilder"}}],[11,"trait_","","",121,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"polytraitrefbuilder"}}],[11,"lifetime","","",121,{"inputs":[{"name":"self"},{"name":"l"}],"output":{"name":"whereboundpredicatetyboundsbuilder"}}],[11,"invoke","","",121,{"inputs":[{"name":"self"},{"name":"lifetimedef"}],"output":{"name":"self"}}],[11,"invoke","","",121,null],[11,"with_for_lifetime","","",122,{"inputs":[{"name":"self"},{"name":"l"}],"output":{"name":"self"}}],[11,"for_lifetime","","",122,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"lifetimedefbuilder"}}],[11,"with_bound","","",122,{"inputs":[{"name":"self"},{"name":"typarambound"}],"output":{"name":"self"}}],[11,"bound","","",122,{"inputs":[{"name":"self"}],"output":{"name":"typaramboundbuilder"}}],[11,"trait_","","",122,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"polytraitrefbuilder"}}],[11,"lifetime","","",122,{"inputs":[{"name":"self"},{"name":"l"}],"output":{"name":"self"}}],[11,"build","","",122,null],[11,"invoke","","",122,{"inputs":[{"name":"self"},{"name":"lifetimedef"}],"output":{"name":"self"}}],[11,"invoke","","",122,{"inputs":[{"name":"self"},{"name":"typarambound"}],"output":{"name":"self"}}],[11,"bound","","",123,{"inputs":[{"name":"self"},{"name":"l"}],"output":{"name":"self"}}],[11,"build","","",123,null],[11,"to_tokens","syn","",0,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",44,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",45,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"attribute"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"attribute"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"attribute"}],"output":{"name":"bool"}}],[11,"hash","","",0,null],[11,"name","","",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",43,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",43,{"inputs":[{"name":"self"}],"output":{"name":"attrstyle"}}],[11,"eq","","",43,{"inputs":[{"name":"self"},{"name":"attrstyle"}],"output":{"name":"bool"}}],[11,"hash","","",43,null],[11,"fmt","","",44,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",44,{"inputs":[{"name":"self"}],"output":{"name":"metaitem"}}],[11,"eq","","",44,{"inputs":[{"name":"self"},{"name":"metaitem"}],"output":{"name":"bool"}}],[11,"ne","","",44,{"inputs":[{"name":"self"},{"name":"metaitem"}],"output":{"name":"bool"}}],[11,"hash","","",44,null],[11,"name","","Name of the item.",44,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",45,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",45,{"inputs":[{"name":"self"}],"output":{"name":"nestedmetaitem"}}],[11,"eq","","",45,{"inputs":[{"name":"self"},{"name":"nestedmetaitem"}],"output":{"name":"bool"}}],[11,"ne","","",45,{"inputs":[{"name":"self"},{"name":"nestedmetaitem"}],"output":{"name":"bool"}}],[11,"hash","","",45,null],[11,"to_tokens","","",46,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",46,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",46,{"inputs":[{"name":"self"}],"output":{"name":"constexpr"}}],[11,"eq","","",46,{"inputs":[{"name":"self"},{"name":"constexpr"}],"output":{"name":"bool"}}],[11,"ne","","",46,{"inputs":[{"name":"self"},{"name":"constexpr"}],"output":{"name":"bool"}}],[11,"hash","","",46,null],[11,"to_tokens","","",2,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",47,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",1,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",48,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"variant"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"variant"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"variant"}],"output":{"name":"bool"}}],[11,"hash","","",2,null],[11,"fmt","","",47,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",47,{"inputs":[{"name":"self"}],"output":{"name":"variantdata"}}],[11,"eq","","",47,{"inputs":[{"name":"self"},{"name":"variantdata"}],"output":{"name":"bool"}}],[11,"ne","","",47,{"inputs":[{"name":"self"},{"name":"variantdata"}],"output":{"name":"bool"}}],[11,"hash","","",47,null],[11,"fields","","Slice containing the fields stored in the variant.",47,null],[11,"fields_mut","","Mutable slice containing the fields stored in the variant.",47,null],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"field"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"field"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"field"}],"output":{"name":"bool"}}],[11,"hash","","",1,null],[11,"fmt","","",48,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",48,{"inputs":[{"name":"self"}],"output":{"name":"visibility"}}],[11,"eq","","",48,{"inputs":[{"name":"self"},{"name":"visibility"}],"output":{"name":"bool"}}],[11,"ne","","",48,{"inputs":[{"name":"self"},{"name":"visibility"}],"output":{"name":"bool"}}],[11,"hash","","",48,null],[11,"to_tokens","","",5,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",7,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",3,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",53,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",6,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",49,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",50,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",4,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",55,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",8,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"expr"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"expr"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"self"},{"name":"expr"}],"output":{"name":"bool"}}],[11,"hash","","",5,null],[11,"from","","",5,{"inputs":[{"name":"exprkind"}],"output":{"name":"expr"}}],[11,"fmt","","",51,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",51,{"inputs":[{"name":"self"}],"output":{"name":"exprkind"}}],[11,"eq","","",51,{"inputs":[{"name":"self"},{"name":"exprkind"}],"output":{"name":"bool"}}],[11,"ne","","",51,{"inputs":[{"name":"self"},{"name":"exprkind"}],"output":{"name":"bool"}}],[11,"hash","","",51,null],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"fieldvalue"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"fieldvalue"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"self"},{"name":"fieldvalue"}],"output":{"name":"bool"}}],[11,"hash","","",7,null],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"block"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"block"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"block"}],"output":{"name":"bool"}}],[11,"hash","","",4,null],[11,"fmt","","",55,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",55,{"inputs":[{"name":"self"}],"output":{"name":"stmt"}}],[11,"eq","","",55,{"inputs":[{"name":"self"},{"name":"stmt"}],"output":{"name":"bool"}}],[11,"ne","","",55,{"inputs":[{"name":"self"},{"name":"stmt"}],"output":{"name":"bool"}}],[11,"hash","","",55,null],[11,"fmt","","",52,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",52,{"inputs":[{"name":"self"}],"output":{"name":"macstmtstyle"}}],[11,"eq","","",52,{"inputs":[{"name":"self"},{"name":"macstmtstyle"}],"output":{"name":"bool"}}],[11,"hash","","",52,null],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"local"}}],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"local"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"self"},{"name":"local"}],"output":{"name":"bool"}}],[11,"hash","","",8,null],[11,"fmt","","",53,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",53,{"inputs":[{"name":"self"}],"output":{"name":"pat"}}],[11,"eq","","",53,{"inputs":[{"name":"self"},{"name":"pat"}],"output":{"name":"bool"}}],[11,"ne","","",53,{"inputs":[{"name":"self"},{"name":"pat"}],"output":{"name":"bool"}}],[11,"hash","","",53,null],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"arm"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"arm"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"arm"}],"output":{"name":"bool"}}],[11,"hash","","",3,null],[11,"fmt","","",50,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",50,{"inputs":[{"name":"self"}],"output":{"name":"captureby"}}],[11,"eq","","",50,{"inputs":[{"name":"self"},{"name":"captureby"}],"output":{"name":"bool"}}],[11,"hash","","",50,null],[11,"fmt","","",54,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",54,{"inputs":[{"name":"self"}],"output":{"name":"rangelimits"}}],[11,"eq","","",54,{"inputs":[{"name":"self"},{"name":"rangelimits"}],"output":{"name":"bool"}}],[11,"hash","","",54,null],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"fieldpat"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"fieldpat"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"self"},{"name":"fieldpat"}],"output":{"name":"bool"}}],[11,"hash","","",6,null],[11,"fmt","","",49,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",49,{"inputs":[{"name":"self"}],"output":{"name":"bindingmode"}}],[11,"eq","","",49,{"inputs":[{"name":"self"},{"name":"bindingmode"}],"output":{"name":"bool"}}],[11,"ne","","",49,{"inputs":[{"name":"self"},{"name":"bindingmode"}],"output":{"name":"bool"}}],[11,"hash","","",49,null],[11,"to_tokens","","",9,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",124,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",125,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",126,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",10,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",11,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",12,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",57,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",14,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",58,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",13,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",16,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",15,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"generics"}}],[11,"eq","","",9,{"inputs":[{"name":"self"},{"name":"generics"}],"output":{"name":"bool"}}],[11,"ne","","",9,{"inputs":[{"name":"self"},{"name":"generics"}],"output":{"name":"bool"}}],[11,"default","","",9,{"inputs":[],"output":{"name":"generics"}}],[11,"hash","","",9,null],[11,"fmt","","",124,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",125,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",126,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"split_for_impl","","Split a type's generics into the pieces required for impl'ing a trait for that type.",9,null],[11,"as_turbofish","","Turn a type's generics like `<X, Y>` into a turbofish like `::<X, Y>`.",125,{"inputs":[{"name":"self"}],"output":{"name":"turbofish"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"lifetime"}}],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"lifetime"}],"output":{"name":"bool"}}],[11,"ne","","",10,{"inputs":[{"name":"self"},{"name":"lifetime"}],"output":{"name":"bool"}}],[11,"hash","","",10,null],[11,"cmp","","",10,{"inputs":[{"name":"self"},{"name":"lifetime"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",10,{"inputs":[{"name":"self"},{"name":"lifetime"}],"output":{"name":"option"}}],[11,"lt","","",10,{"inputs":[{"name":"self"},{"name":"lifetime"}],"output":{"name":"bool"}}],[11,"le","","",10,{"inputs":[{"name":"self"},{"name":"lifetime"}],"output":{"name":"bool"}}],[11,"gt","","",10,{"inputs":[{"name":"self"},{"name":"lifetime"}],"output":{"name":"bool"}}],[11,"ge","","",10,{"inputs":[{"name":"self"},{"name":"lifetime"}],"output":{"name":"bool"}}],[11,"new","","",10,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"lifetimedef"}}],[11,"eq","","",11,{"inputs":[{"name":"self"},{"name":"lifetimedef"}],"output":{"name":"bool"}}],[11,"ne","","",11,{"inputs":[{"name":"self"},{"name":"lifetimedef"}],"output":{"name":"bool"}}],[11,"hash","","",11,null],[11,"new","","",11,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"typaram"}}],[11,"eq","","",12,{"inputs":[{"name":"self"},{"name":"typaram"}],"output":{"name":"bool"}}],[11,"ne","","",12,{"inputs":[{"name":"self"},{"name":"typaram"}],"output":{"name":"bool"}}],[11,"hash","","",12,null],[11,"from","","",12,{"inputs":[{"name":"ident"}],"output":{"name":"self"}}],[11,"fmt","","",57,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",57,{"inputs":[{"name":"self"}],"output":{"name":"typarambound"}}],[11,"eq","","",57,{"inputs":[{"name":"self"},{"name":"typarambound"}],"output":{"name":"bool"}}],[11,"ne","","",57,{"inputs":[{"name":"self"},{"name":"typarambound"}],"output":{"name":"bool"}}],[11,"hash","","",57,null],[11,"fmt","","",56,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",56,{"inputs":[{"name":"self"}],"output":{"name":"traitboundmodifier"}}],[11,"eq","","",56,{"inputs":[{"name":"self"},{"name":"traitboundmodifier"}],"output":{"name":"bool"}}],[11,"hash","","",56,null],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"whereclause"}}],[11,"eq","","",14,{"inputs":[{"name":"self"},{"name":"whereclause"}],"output":{"name":"bool"}}],[11,"ne","","",14,{"inputs":[{"name":"self"},{"name":"whereclause"}],"output":{"name":"bool"}}],[11,"default","","",14,{"inputs":[],"output":{"name":"whereclause"}}],[11,"hash","","",14,null],[11,"none","","",14,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",58,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",58,{"inputs":[{"name":"self"}],"output":{"name":"wherepredicate"}}],[11,"eq","","",58,{"inputs":[{"name":"self"},{"name":"wherepredicate"}],"output":{"name":"bool"}}],[11,"ne","","",58,{"inputs":[{"name":"self"},{"name":"wherepredicate"}],"output":{"name":"bool"}}],[11,"hash","","",58,null],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"whereboundpredicate"}}],[11,"eq","","",13,{"inputs":[{"name":"self"},{"name":"whereboundpredicate"}],"output":{"name":"bool"}}],[11,"ne","","",13,{"inputs":[{"name":"self"},{"name":"whereboundpredicate"}],"output":{"name":"bool"}}],[11,"hash","","",13,null],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"whereregionpredicate"}}],[11,"eq","","",16,{"inputs":[{"name":"self"},{"name":"whereregionpredicate"}],"output":{"name":"bool"}}],[11,"ne","","",16,{"inputs":[{"name":"self"},{"name":"whereregionpredicate"}],"output":{"name":"bool"}}],[11,"hash","","",16,null],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"whereeqpredicate"}}],[11,"eq","","",15,{"inputs":[{"name":"self"},{"name":"whereeqpredicate"}],"output":{"name":"bool"}}],[11,"ne","","",15,{"inputs":[{"name":"self"},{"name":"whereeqpredicate"}],"output":{"name":"bool"}}],[11,"hash","","",15,null],[11,"to_tokens","","",87,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",87,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",87,{"inputs":[{"name":"self"}],"output":{"name":"ident"}}],[11,"hash","","",87,null],[11,"cmp","","",87,{"inputs":[{"name":"self"},{"name":"ident"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",87,{"inputs":[{"name":"self"},{"name":"ident"}],"output":{"name":"option"}}],[11,"lt","","",87,{"inputs":[{"name":"self"},{"name":"ident"}],"output":{"name":"bool"}}],[11,"le","","",87,{"inputs":[{"name":"self"},{"name":"ident"}],"output":{"name":"bool"}}],[11,"gt","","",87,{"inputs":[{"name":"self"},{"name":"ident"}],"output":{"name":"bool"}}],[11,"ge","","",87,{"inputs":[{"name":"self"},{"name":"ident"}],"output":{"name":"bool"}}],[11,"new","","",87,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"from","","",87,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"from","","",87,{"inputs":[{"name":"cow"}],"output":{"name":"self"}}],[11,"from","","",87,{"inputs":[{"name":"string"}],"output":{"name":"self"}}],[11,"from","","",87,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"as_ref","","",87,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",87,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",87,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"to_tokens","","",21,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",67,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",23,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",24,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",20,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",18,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",61,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",59,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",60,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",64,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"item"}}],[11,"eq","","",21,{"inputs":[{"name":"self"},{"name":"item"}],"output":{"name":"bool"}}],[11,"ne","","",21,{"inputs":[{"name":"self"},{"name":"item"}],"output":{"name":"bool"}}],[11,"hash","","",21,null],[11,"fmt","","",65,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",65,{"inputs":[{"name":"self"}],"output":{"name":"itemkind"}}],[11,"eq","","",65,{"inputs":[{"name":"self"},{"name":"itemkind"}],"output":{"name":"bool"}}],[11,"ne","","",65,{"inputs":[{"name":"self"},{"name":"itemkind"}],"output":{"name":"bool"}}],[11,"hash","","",65,null],[11,"from","","",21,{"inputs":[{"name":"deriveinput"}],"output":{"name":"item"}}],[11,"fmt","","",67,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",67,{"inputs":[{"name":"self"}],"output":{"name":"viewpath"}}],[11,"eq","","",67,{"inputs":[{"name":"self"},{"name":"viewpath"}],"output":{"name":"bool"}}],[11,"ne","","",67,{"inputs":[{"name":"self"},{"name":"viewpath"}],"output":{"name":"bool"}}],[11,"hash","","",67,null],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"pathlistitem"}}],[11,"eq","","",23,{"inputs":[{"name":"self"},{"name":"pathlistitem"}],"output":{"name":"bool"}}],[11,"ne","","",23,{"inputs":[{"name":"self"},{"name":"pathlistitem"}],"output":{"name":"bool"}}],[11,"hash","","",23,null],[11,"fmt","","",59,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",59,{"inputs":[{"name":"self"}],"output":{"name":"constness"}}],[11,"eq","","",59,{"inputs":[{"name":"self"},{"name":"constness"}],"output":{"name":"bool"}}],[11,"hash","","",59,null],[11,"fmt","","",60,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",60,{"inputs":[{"name":"self"}],"output":{"name":"defaultness"}}],[11,"eq","","",60,{"inputs":[{"name":"self"},{"name":"defaultness"}],"output":{"name":"bool"}}],[11,"hash","","",60,null],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"foreignmod"}}],[11,"eq","","",19,{"inputs":[{"name":"self"},{"name":"foreignmod"}],"output":{"name":"bool"}}],[11,"ne","","",19,{"inputs":[{"name":"self"},{"name":"foreignmod"}],"output":{"name":"bool"}}],[11,"hash","","",19,null],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"foreignitem"}}],[11,"eq","","",18,{"inputs":[{"name":"self"},{"name":"foreignitem"}],"output":{"name":"bool"}}],[11,"ne","","",18,{"inputs":[{"name":"self"},{"name":"foreignitem"}],"output":{"name":"bool"}}],[11,"hash","","",18,null],[11,"fmt","","",62,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",62,{"inputs":[{"name":"self"}],"output":{"name":"foreignitemkind"}}],[11,"eq","","",62,{"inputs":[{"name":"self"},{"name":"foreignitemkind"}],"output":{"name":"bool"}}],[11,"ne","","",62,{"inputs":[{"name":"self"},{"name":"foreignitemkind"}],"output":{"name":"bool"}}],[11,"hash","","",62,null],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"traititem"}}],[11,"eq","","",24,{"inputs":[{"name":"self"},{"name":"traititem"}],"output":{"name":"bool"}}],[11,"ne","","",24,{"inputs":[{"name":"self"},{"name":"traititem"}],"output":{"name":"bool"}}],[11,"hash","","",24,null],[11,"fmt","","",66,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",66,{"inputs":[{"name":"self"}],"output":{"name":"traititemkind"}}],[11,"eq","","",66,{"inputs":[{"name":"self"},{"name":"traititemkind"}],"output":{"name":"bool"}}],[11,"ne","","",66,{"inputs":[{"name":"self"},{"name":"traititemkind"}],"output":{"name":"bool"}}],[11,"hash","","",66,null],[11,"fmt","","",64,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",64,{"inputs":[{"name":"self"}],"output":{"name":"implpolarity"}}],[11,"eq","","",64,{"inputs":[{"name":"self"},{"name":"implpolarity"}],"output":{"name":"bool"}}],[11,"hash","","",64,null],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"implitem"}}],[11,"eq","","",20,{"inputs":[{"name":"self"},{"name":"implitem"}],"output":{"name":"bool"}}],[11,"ne","","",20,{"inputs":[{"name":"self"},{"name":"implitem"}],"output":{"name":"bool"}}],[11,"hash","","",20,null],[11,"fmt","","",63,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",63,{"inputs":[{"name":"self"}],"output":{"name":"implitemkind"}}],[11,"eq","","",63,{"inputs":[{"name":"self"},{"name":"implitemkind"}],"output":{"name":"bool"}}],[11,"ne","","",63,{"inputs":[{"name":"self"},{"name":"implitemkind"}],"output":{"name":"bool"}}],[11,"hash","","",63,null],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"methodsig"}}],[11,"eq","","",22,{"inputs":[{"name":"self"},{"name":"methodsig"}],"output":{"name":"bool"}}],[11,"ne","","",22,{"inputs":[{"name":"self"},{"name":"methodsig"}],"output":{"name":"bool"}}],[11,"hash","","",22,null],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"fndecl"}}],[11,"eq","","",17,{"inputs":[{"name":"self"},{"name":"fndecl"}],"output":{"name":"bool"}}],[11,"ne","","",17,{"inputs":[{"name":"self"},{"name":"fndecl"}],"output":{"name":"bool"}}],[11,"hash","","",17,null],[11,"fmt","","",61,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",61,{"inputs":[{"name":"self"}],"output":{"name":"fnarg"}}],[11,"eq","","",61,{"inputs":[{"name":"self"},{"name":"fnarg"}],"output":{"name":"bool"}}],[11,"ne","","",61,{"inputs":[{"name":"self"},{"name":"fnarg"}],"output":{"name":"bool"}}],[11,"hash","","",61,null],[11,"to_tokens","","",25,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",25,{"inputs":[{"name":"self"}],"output":{"name":"crate"}}],[11,"eq","","",25,{"inputs":[{"name":"self"},{"name":"crate"}],"output":{"name":"bool"}}],[11,"ne","","",25,{"inputs":[{"name":"self"},{"name":"crate"}],"output":{"name":"bool"}}],[11,"hash","","",25,null],[11,"to_tokens","","",70,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",69,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",68,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",70,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",70,{"inputs":[{"name":"self"}],"output":{"name":"lit"}}],[11,"eq","","",70,{"inputs":[{"name":"self"},{"name":"lit"}],"output":{"name":"bool"}}],[11,"ne","","",70,{"inputs":[{"name":"self"},{"name":"lit"}],"output":{"name":"bool"}}],[11,"hash","","",70,null],[11,"fmt","","",71,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",71,{"inputs":[{"name":"self"}],"output":{"name":"strstyle"}}],[11,"eq","","",71,{"inputs":[{"name":"self"},{"name":"strstyle"}],"output":{"name":"bool"}}],[11,"ne","","",71,{"inputs":[{"name":"self"},{"name":"strstyle"}],"output":{"name":"bool"}}],[11,"hash","","",71,null],[11,"from","","",70,{"inputs":[{"name":"string"}],"output":{"name":"lit"}}],[11,"from","","",70,{"inputs":[{"name":"str"}],"output":{"name":"lit"}}],[11,"from","","",70,{"inputs":[{"name":"vec"}],"output":{"name":"lit"}}],[11,"from","","",70,null],[11,"from","","",70,{"inputs":[{"name":"char"}],"output":{"name":"lit"}}],[11,"from","","",70,{"inputs":[{"name":"bool"}],"output":{"name":"lit"}}],[11,"fmt","","",69,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",69,{"inputs":[{"name":"self"}],"output":{"name":"intty"}}],[11,"eq","","",69,{"inputs":[{"name":"self"},{"name":"intty"}],"output":{"name":"bool"}}],[11,"hash","","",69,null],[11,"fmt","","",68,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",68,{"inputs":[{"name":"self"}],"output":{"name":"floatty"}}],[11,"eq","","",68,{"inputs":[{"name":"self"},{"name":"floatty"}],"output":{"name":"bool"}}],[11,"hash","","",68,null],[11,"from","","",70,{"inputs":[{"name":"isize"}],"output":{"name":"lit"}}],[11,"from","","",70,{"inputs":[{"name":"i8"}],"output":{"name":"lit"}}],[11,"from","","",70,{"inputs":[{"name":"i16"}],"output":{"name":"lit"}}],[11,"from","","",70,{"inputs":[{"name":"i32"}],"output":{"name":"lit"}}],[11,"from","","",70,{"inputs":[{"name":"i64"}],"output":{"name":"lit"}}],[11,"from","","",70,{"inputs":[{"name":"usize"}],"output":{"name":"lit"}}],[11,"from","","",70,{"inputs":[{"name":"u8"}],"output":{"name":"lit"}}],[11,"from","","",70,{"inputs":[{"name":"u16"}],"output":{"name":"lit"}}],[11,"from","","",70,{"inputs":[{"name":"u32"}],"output":{"name":"lit"}}],[11,"from","","",70,{"inputs":[{"name":"u64"}],"output":{"name":"lit"}}],[11,"from","","",70,{"inputs":[{"name":"f32"}],"output":{"name":"lit"}}],[11,"from","","",70,{"inputs":[{"name":"f64"}],"output":{"name":"lit"}}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",29,{"inputs":[{"name":"self"}],"output":{"name":"strlit"}}],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",26,{"inputs":[{"name":"self"}],"output":{"name":"bytestrlit"}}],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",28,{"inputs":[{"name":"self"}],"output":{"name":"intlit"}}],[11,"fmt","","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",27,{"inputs":[{"name":"self"}],"output":{"name":"floatlit"}}],[11,"to_tokens","","",31,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",75,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",30,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",74,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",72,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",31,{"inputs":[{"name":"self"}],"output":{"name":"mac"}}],[11,"eq","","",31,{"inputs":[{"name":"self"},{"name":"mac"}],"output":{"name":"bool"}}],[11,"ne","","",31,{"inputs":[{"name":"self"},{"name":"mac"}],"output":{"name":"bool"}}],[11,"hash","","",31,null],[11,"fmt","","",75,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",75,{"inputs":[{"name":"self"}],"output":{"name":"tokentree"}}],[11,"eq","","",75,{"inputs":[{"name":"self"},{"name":"tokentree"}],"output":{"name":"bool"}}],[11,"ne","","",75,{"inputs":[{"name":"self"},{"name":"tokentree"}],"output":{"name":"bool"}}],[11,"hash","","",75,null],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",30,{"inputs":[{"name":"self"}],"output":{"name":"delimited"}}],[11,"eq","","",30,{"inputs":[{"name":"self"},{"name":"delimited"}],"output":{"name":"bool"}}],[11,"ne","","",30,{"inputs":[{"name":"self"},{"name":"delimited"}],"output":{"name":"bool"}}],[11,"hash","","",30,null],[11,"fmt","","",74,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",74,{"inputs":[{"name":"self"}],"output":{"name":"token"}}],[11,"eq","","",74,{"inputs":[{"name":"self"},{"name":"token"}],"output":{"name":"bool"}}],[11,"ne","","",74,{"inputs":[{"name":"self"},{"name":"token"}],"output":{"name":"bool"}}],[11,"hash","","",74,null],[11,"fmt","","",72,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",72,{"inputs":[{"name":"self"}],"output":{"name":"binoptoken"}}],[11,"eq","","",72,{"inputs":[{"name":"self"},{"name":"binoptoken"}],"output":{"name":"bool"}}],[11,"hash","","",72,null],[11,"fmt","","",73,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",73,{"inputs":[{"name":"self"}],"output":{"name":"delimtoken"}}],[11,"eq","","",73,{"inputs":[{"name":"self"},{"name":"delimtoken"}],"output":{"name":"bool"}}],[11,"hash","","",73,null],[11,"to_tokens","","",32,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",32,{"inputs":[{"name":"self"}],"output":{"name":"deriveinput"}}],[11,"eq","","",32,{"inputs":[{"name":"self"},{"name":"deriveinput"}],"output":{"name":"bool"}}],[11,"ne","","",32,{"inputs":[{"name":"self"},{"name":"deriveinput"}],"output":{"name":"bool"}}],[11,"hash","","",32,null],[11,"fmt","","",76,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",76,{"inputs":[{"name":"self"}],"output":{"name":"body"}}],[11,"eq","","",76,{"inputs":[{"name":"self"},{"name":"body"}],"output":{"name":"bool"}}],[11,"ne","","",76,{"inputs":[{"name":"self"},{"name":"body"}],"output":{"name":"bool"}}],[11,"hash","","",76,null],[11,"op","","",77,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"assign_op","","",77,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_tokens","","",77,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"op","","",78,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"to_tokens","","",78,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",77,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",77,{"inputs":[{"name":"self"}],"output":{"name":"binop"}}],[11,"eq","","",77,{"inputs":[{"name":"self"},{"name":"binop"}],"output":{"name":"bool"}}],[11,"hash","","",77,null],[11,"fmt","","",78,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",78,{"inputs":[{"name":"self"}],"output":{"name":"unop"}}],[11,"eq","","",78,{"inputs":[{"name":"self"},{"name":"unop"}],"output":{"name":"bool"}}],[11,"hash","","",78,null],[11,"to_tokens","","",83,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",81,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",38,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",39,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",82,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",33,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",42,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",37,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",40,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",35,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",34,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",84,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",79,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",83,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",83,{"inputs":[{"name":"self"}],"output":{"name":"ty"}}],[11,"eq","","",83,{"inputs":[{"name":"self"},{"name":"ty"}],"output":{"name":"bool"}}],[11,"ne","","",83,{"inputs":[{"name":"self"},{"name":"ty"}],"output":{"name":"bool"}}],[11,"hash","","",83,null],[11,"fmt","","",36,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",36,{"inputs":[{"name":"self"}],"output":{"name":"mutty"}}],[11,"eq","","",36,{"inputs":[{"name":"self"},{"name":"mutty"}],"output":{"name":"bool"}}],[11,"ne","","",36,{"inputs":[{"name":"self"},{"name":"mutty"}],"output":{"name":"bool"}}],[11,"hash","","",36,null],[11,"fmt","","",81,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",81,{"inputs":[{"name":"self"}],"output":{"name":"mutability"}}],[11,"eq","","",81,{"inputs":[{"name":"self"},{"name":"mutability"}],"output":{"name":"bool"}}],[11,"hash","","",81,null],[11,"fmt","","",38,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",38,{"inputs":[{"name":"self"}],"output":{"name":"path"}}],[11,"eq","","",38,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"bool"}}],[11,"ne","","",38,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"bool"}}],[11,"hash","","",38,null],[11,"from","","",38,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"fmt","","",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",39,{"inputs":[{"name":"self"}],"output":{"name":"pathsegment"}}],[11,"eq","","",39,{"inputs":[{"name":"self"},{"name":"pathsegment"}],"output":{"name":"bool"}}],[11,"ne","","",39,{"inputs":[{"name":"self"},{"name":"pathsegment"}],"output":{"name":"bool"}}],[11,"hash","","",39,null],[11,"from","","",39,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"fmt","","",82,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",82,{"inputs":[{"name":"self"}],"output":{"name":"pathparameters"}}],[11,"eq","","",82,{"inputs":[{"name":"self"},{"name":"pathparameters"}],"output":{"name":"bool"}}],[11,"ne","","",82,{"inputs":[{"name":"self"},{"name":"pathparameters"}],"output":{"name":"bool"}}],[11,"hash","","",82,null],[11,"none","","",82,{"inputs":[],"output":{"name":"self"}}],[11,"is_empty","","",82,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",33,{"inputs":[{"name":"self"}],"output":{"name":"anglebracketedparameterdata"}}],[11,"eq","","",33,{"inputs":[{"name":"self"},{"name":"anglebracketedparameterdata"}],"output":{"name":"bool"}}],[11,"ne","","",33,{"inputs":[{"name":"self"},{"name":"anglebracketedparameterdata"}],"output":{"name":"bool"}}],[11,"default","","",33,{"inputs":[],"output":{"name":"anglebracketedparameterdata"}}],[11,"hash","","",33,null],[11,"fmt","","",42,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",42,{"inputs":[{"name":"self"}],"output":{"name":"typebinding"}}],[11,"eq","","",42,{"inputs":[{"name":"self"},{"name":"typebinding"}],"output":{"name":"bool"}}],[11,"ne","","",42,{"inputs":[{"name":"self"},{"name":"typebinding"}],"output":{"name":"bool"}}],[11,"hash","","",42,null],[11,"fmt","","",37,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",37,{"inputs":[{"name":"self"}],"output":{"name":"parenthesizedparameterdata"}}],[11,"eq","","",37,{"inputs":[{"name":"self"},{"name":"parenthesizedparameterdata"}],"output":{"name":"bool"}}],[11,"ne","","",37,{"inputs":[{"name":"self"},{"name":"parenthesizedparameterdata"}],"output":{"name":"bool"}}],[11,"hash","","",37,null],[11,"fmt","","",40,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",40,{"inputs":[{"name":"self"}],"output":{"name":"polytraitref"}}],[11,"eq","","",40,{"inputs":[{"name":"self"},{"name":"polytraitref"}],"output":{"name":"bool"}}],[11,"ne","","",40,{"inputs":[{"name":"self"},{"name":"polytraitref"}],"output":{"name":"bool"}}],[11,"hash","","",40,null],[11,"fmt","","",41,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",41,{"inputs":[{"name":"self"}],"output":{"name":"qself"}}],[11,"eq","","",41,{"inputs":[{"name":"self"},{"name":"qself"}],"output":{"name":"bool"}}],[11,"ne","","",41,{"inputs":[{"name":"self"},{"name":"qself"}],"output":{"name":"bool"}}],[11,"hash","","",41,null],[11,"fmt","","",35,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",35,{"inputs":[{"name":"self"}],"output":{"name":"barefnty"}}],[11,"eq","","",35,{"inputs":[{"name":"self"},{"name":"barefnty"}],"output":{"name":"bool"}}],[11,"ne","","",35,{"inputs":[{"name":"self"},{"name":"barefnty"}],"output":{"name":"bool"}}],[11,"hash","","",35,null],[11,"fmt","","",84,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",84,{"inputs":[{"name":"self"}],"output":{"name":"unsafety"}}],[11,"eq","","",84,{"inputs":[{"name":"self"},{"name":"unsafety"}],"output":{"name":"bool"}}],[11,"hash","","",84,null],[11,"fmt","","",79,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",79,{"inputs":[{"name":"self"}],"output":{"name":"abi"}}],[11,"eq","","",79,{"inputs":[{"name":"self"},{"name":"abi"}],"output":{"name":"bool"}}],[11,"ne","","",79,{"inputs":[{"name":"self"},{"name":"abi"}],"output":{"name":"bool"}}],[11,"hash","","",79,null],[11,"fmt","","",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",34,{"inputs":[{"name":"self"}],"output":{"name":"barefnarg"}}],[11,"eq","","",34,{"inputs":[{"name":"self"},{"name":"barefnarg"}],"output":{"name":"bool"}}],[11,"ne","","",34,{"inputs":[{"name":"self"},{"name":"barefnarg"}],"output":{"name":"bool"}}],[11,"hash","","",34,null],[11,"fmt","","",80,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",80,{"inputs":[{"name":"self"}],"output":{"name":"functionretty"}}],[11,"eq","","",80,{"inputs":[{"name":"self"},{"name":"functionretty"}],"output":{"name":"bool"}}],[11,"ne","","",80,{"inputs":[{"name":"self"},{"name":"functionretty"}],"output":{"name":"bool"}}],[11,"hash","","",80,null],[0,"visit","","AST walker. Each overridden visit method has full control over what happens with its node, it can do its own traversal of the node's children, call `visit::walk_*` to apply the default traversal algorithm, or prevent deeper traversal by doing nothing.",null,null],[5,"walk_opt_ident","syn::visit","",null,{"inputs":[{"name":"v"},{"name":"option"}],"output":null}],[5,"walk_lifetime_def","","",null,{"inputs":[{"name":"v"},{"name":"lifetimedef"}],"output":null}],[5,"walk_poly_trait_ref","","",null,{"inputs":[{"name":"v"},{"name":"polytraitref"},{"name":"traitboundmodifier"}],"output":null}],[5,"walk_derive_input","","",null,{"inputs":[{"name":"v"},{"name":"deriveinput"}],"output":null}],[5,"walk_variant","","",null,{"inputs":[{"name":"v"},{"name":"variant"},{"name":"generics"}],"output":null}],[5,"walk_ty","","",null,{"inputs":[{"name":"v"},{"name":"ty"}],"output":null}],[5,"walk_path","","",null,{"inputs":[{"name":"v"},{"name":"path"}],"output":null}],[5,"walk_path_segment","","",null,{"inputs":[{"name":"v"},{"name":"pathsegment"}],"output":null}],[5,"walk_path_parameters","","",null,{"inputs":[{"name":"v"},{"name":"pathparameters"}],"output":null}],[5,"walk_assoc_type_binding","","",null,{"inputs":[{"name":"v"},{"name":"typebinding"}],"output":null}],[5,"walk_ty_param_bound","","",null,{"inputs":[{"name":"v"},{"name":"typarambound"}],"output":null}],[5,"walk_generics","","",null,{"inputs":[{"name":"v"},{"name":"generics"}],"output":null}],[5,"walk_fn_ret_ty","","",null,{"inputs":[{"name":"v"},{"name":"functionretty"}],"output":null}],[5,"walk_variant_data","","",null,{"inputs":[{"name":"v"},{"name":"variantdata"}],"output":null}],[5,"walk_field","","",null,{"inputs":[{"name":"v"},{"name":"field"}],"output":null}],[5,"walk_const_expr","","",null,{"inputs":[{"name":"v"},{"name":"constexpr"}],"output":null}],[5,"walk_mac","","",null,{"inputs":[{"name":"v"},{"name":"mac"}],"output":null}],[5,"walk_crate","","",null,{"inputs":[{"name":"v"},{"name":"crate"}],"output":null}],[5,"walk_item","","",null,{"inputs":[{"name":"v"},{"name":"item"}],"output":null}],[5,"walk_expr","","",null,{"inputs":[{"name":"v"},{"name":"expr"}],"output":null}],[5,"walk_foreign_item","","",null,{"inputs":[{"name":"v"},{"name":"foreignitem"}],"output":null}],[5,"walk_pat","","",null,{"inputs":[{"name":"v"},{"name":"pat"}],"output":null}],[5,"walk_fn_decl","","",null,{"inputs":[{"name":"v"},{"name":"fndecl"}],"output":null}],[5,"walk_trait_item","","",null,{"inputs":[{"name":"v"},{"name":"traititem"}],"output":null}],[5,"walk_impl_item","","",null,{"inputs":[{"name":"v"},{"name":"implitem"}],"output":null}],[5,"walk_method_sig","","",null,{"inputs":[{"name":"v"},{"name":"methodsig"}],"output":null}],[5,"walk_stmt","","",null,{"inputs":[{"name":"v"},{"name":"stmt"}],"output":null}],[5,"walk_local","","",null,{"inputs":[{"name":"v"},{"name":"local"}],"output":null}],[5,"walk_view_path","","",null,{"inputs":[{"name":"v"},{"name":"viewpath"}],"output":null}],[8,"Visitor","","Each method of the Visitor trait is a hook to be potentially overridden.  Each method's default implementation recursively visits the substructure of the input via the corresponding `walk` method; e.g. the `visit_mod` method by default calls `visit::walk_mod`.",null,null],[11,"visit_ident","","",127,{"inputs":[{"name":"self"},{"name":"ident"}],"output":null}],[11,"visit_derive_input","","",127,{"inputs":[{"name":"self"},{"name":"deriveinput"}],"output":null}],[11,"visit_ty","","",127,{"inputs":[{"name":"self"},{"name":"ty"}],"output":null}],[11,"visit_generics","","",127,{"inputs":[{"name":"self"},{"name":"generics"}],"output":null}],[11,"visit_ty_param_bound","","",127,{"inputs":[{"name":"self"},{"name":"typarambound"}],"output":null}],[11,"visit_poly_trait_ref","","",127,{"inputs":[{"name":"self"},{"name":"polytraitref"},{"name":"traitboundmodifier"}],"output":null}],[11,"visit_variant_data","","",127,{"inputs":[{"name":"self"},{"name":"variantdata"},{"name":"ident"},{"name":"generics"}],"output":null}],[11,"visit_field","","",127,{"inputs":[{"name":"self"},{"name":"field"}],"output":null}],[11,"visit_variant","","",127,{"inputs":[{"name":"self"},{"name":"variant"},{"name":"generics"}],"output":null}],[11,"visit_lifetime","","",127,{"inputs":[{"name":"self"},{"name":"lifetime"}],"output":null}],[11,"visit_lifetime_def","","",127,{"inputs":[{"name":"self"},{"name":"lifetimedef"}],"output":null}],[11,"visit_path","","",127,{"inputs":[{"name":"self"},{"name":"path"}],"output":null}],[11,"visit_path_segment","","",127,{"inputs":[{"name":"self"},{"name":"pathsegment"}],"output":null}],[11,"visit_path_parameters","","",127,{"inputs":[{"name":"self"},{"name":"pathparameters"}],"output":null}],[11,"visit_assoc_type_binding","","",127,{"inputs":[{"name":"self"},{"name":"typebinding"}],"output":null}],[11,"visit_attribute","","",127,{"inputs":[{"name":"self"},{"name":"attribute"}],"output":null}],[11,"visit_fn_ret_ty","","",127,{"inputs":[{"name":"self"},{"name":"functionretty"}],"output":null}],[11,"visit_const_expr","","",127,{"inputs":[{"name":"self"},{"name":"constexpr"}],"output":null}],[11,"visit_lit","","",127,{"inputs":[{"name":"self"},{"name":"lit"}],"output":null}],[11,"visit_mac","","",127,{"inputs":[{"name":"self"},{"name":"mac"}],"output":null}],[11,"visit_crate","","",127,{"inputs":[{"name":"self"},{"name":"crate"}],"output":null}],[11,"visit_item","","",127,{"inputs":[{"name":"self"},{"name":"item"}],"output":null}],[11,"visit_expr","","",127,{"inputs":[{"name":"self"},{"name":"expr"}],"output":null}],[11,"visit_foreign_item","","",127,{"inputs":[{"name":"self"},{"name":"foreignitem"}],"output":null}],[11,"visit_pat","","",127,{"inputs":[{"name":"self"},{"name":"pat"}],"output":null}],[11,"visit_fn_decl","","",127,{"inputs":[{"name":"self"},{"name":"fndecl"}],"output":null}],[11,"visit_trait_item","","",127,{"inputs":[{"name":"self"},{"name":"traititem"}],"output":null}],[11,"visit_impl_item","","",127,{"inputs":[{"name":"self"},{"name":"implitem"}],"output":null}],[11,"visit_method_sig","","",127,{"inputs":[{"name":"self"},{"name":"methodsig"}],"output":null}],[11,"visit_stmt","","",127,{"inputs":[{"name":"self"},{"name":"stmt"}],"output":null}],[11,"visit_local","","",127,{"inputs":[{"name":"self"},{"name":"local"}],"output":null}],[11,"visit_view_path","","",127,{"inputs":[{"name":"self"},{"name":"viewpath"}],"output":null}],[0,"parse","syn","This module contains a set of exported nom parsers which can be used to parse custom grammars when used alongside the `synom` crate.",null,null],[4,"IResult","syn::parse","The result of a parser.",null,null],[13,"Done","","Parsing succeeded. The first field contains the rest of the unparsed data and the second field contains the parse result.",128,null],[13,"Error","","Parsing failed.",128,null],[5,"item","","",null,{"inputs":[{"name":"str"}],"output":{"name":"iresult"}}],[5,"expr","","",null,{"inputs":[{"name":"str"}],"output":{"name":"iresult"}}],[5,"pat","","",null,{"inputs":[{"name":"str"}],"output":{"name":"iresult"}}],[5,"block","","",null,{"inputs":[{"name":"str"}],"output":{"name":"iresult"}}],[5,"stmt","","",null,{"inputs":[{"name":"str"}],"output":{"name":"iresult"}}],[5,"lit","","",null,{"inputs":[{"name":"str"}],"output":{"name":"iresult"}}],[5,"string","","",null,{"inputs":[{"name":"str"}],"output":{"name":"iresult"}}],[5,"byte_string","","",null,{"inputs":[{"name":"str"}],"output":{"name":"iresult"}}],[5,"byte","","",null,{"inputs":[{"name":"str"}],"output":{"name":"iresult"}}],[5,"character","","",null,{"inputs":[{"name":"str"}],"output":{"name":"iresult"}}],[5,"float","","",null,{"inputs":[{"name":"str"}],"output":{"name":"iresult"}}],[5,"int","","",null,{"inputs":[{"name":"str"}],"output":{"name":"iresult"}}],[5,"boolean","","",null,{"inputs":[{"name":"str"}],"output":{"name":"iresult"}}],[5,"ty","","",null,{"inputs":[{"name":"str"}],"output":{"name":"iresult"}}],[5,"path","","",null,{"inputs":[{"name":"str"}],"output":{"name":"iresult"}}],[5,"tt","","",null,{"inputs":[{"name":"str"}],"output":{"name":"iresult"}}],[5,"ident","","",null,{"inputs":[{"name":"str"}],"output":{"name":"iresult"}}],[5,"lifetime","","",null,{"inputs":[{"name":"str"}],"output":{"name":"iresult"}}],[11,"expect","","Unwraps the result, asserting the the parse is complete. Panics with a message based on the given string if the parse failed or is incomplete.",128,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"o"}}],[11,"fmt","","",128,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",128,{"inputs":[{"name":"self"}],"output":{"name":"iresult"}}],[11,"eq","","",128,{"inputs":[{"name":"self"},{"name":"iresult"}],"output":{"name":"bool"}}],[11,"ne","","",128,{"inputs":[{"name":"self"},{"name":"iresult"}],"output":{"name":"bool"}}]],"paths":[[3,"Attribute"],[3,"Field"],[3,"Variant"],[3,"Arm"],[3,"Block"],[3,"Expr"],[3,"FieldPat"],[3,"FieldValue"],[3,"Local"],[3,"Generics"],[3,"Lifetime"],[3,"LifetimeDef"],[3,"TyParam"],[3,"WhereBoundPredicate"],[3,"WhereClause"],[3,"WhereEqPredicate"],[3,"WhereRegionPredicate"],[3,"FnDecl"],[3,"ForeignItem"],[3,"ForeignMod"],[3,"ImplItem"],[3,"Item"],[3,"MethodSig"],[3,"PathListItem"],[3,"TraitItem"],[3,"Crate"],[3,"ByteStrLit"],[3,"FloatLit"],[3,"IntLit"],[3,"StrLit"],[3,"Delimited"],[3,"Mac"],[3,"DeriveInput"],[3,"AngleBracketedParameterData"],[3,"BareFnArg"],[3,"BareFnTy"],[3,"MutTy"],[3,"ParenthesizedParameterData"],[3,"Path"],[3,"PathSegment"],[3,"PolyTraitRef"],[3,"QSelf"],[3,"TypeBinding"],[4,"AttrStyle"],[4,"MetaItem"],[4,"NestedMetaItem"],[4,"ConstExpr"],[4,"VariantData"],[4,"Visibility"],[4,"BindingMode"],[4,"CaptureBy"],[4,"ExprKind"],[4,"MacStmtStyle"],[4,"Pat"],[4,"RangeLimits"],[4,"Stmt"],[4,"TraitBoundModifier"],[4,"TyParamBound"],[4,"WherePredicate"],[4,"Constness"],[4,"Defaultness"],[4,"FnArg"],[4,"ForeignItemKind"],[4,"ImplItemKind"],[4,"ImplPolarity"],[4,"ItemKind"],[4,"TraitItemKind"],[4,"ViewPath"],[4,"FloatTy"],[4,"IntTy"],[4,"Lit"],[4,"StrStyle"],[4,"BinOpToken"],[4,"DelimToken"],[4,"Token"],[4,"TokenTree"],[4,"Body"],[4,"BinOp"],[4,"UnOp"],[4,"Abi"],[4,"FunctionRetTy"],[4,"Mutability"],[4,"PathParameters"],[4,"Ty"],[4,"Unsafety"],[3,"GenericsBuilder"],[8,"ToIdent"],[3,"Ident"],[8,"Invoke"],[3,"Identity"],[8,"IntoLifetime"],[8,"IntoLifetimeDef"],[3,"LifetimeDefBuilder"],[8,"IntoPath"],[3,"PathBuilder"],[3,"PathSegmentsBuilder"],[3,"PathSegmentBuilder"],[3,"TypeBindingBuilder"],[3,"PathSegmentReturnBuilder"],[3,"QPathBuilder"],[3,"QPathTyBuilder"],[3,"QPathQSelfBuilder"],[3,"TyBuilder"],[3,"TyPathBuilder"],[3,"TyQPathBuilder"],[3,"TySliceBuilder"],[3,"TyRefBuilder"],[3,"TyOptionBuilder"],[3,"TyResultOkBuilder"],[3,"TyResultErrBuilder"],[3,"TyPhantomDataBuilder"],[3,"TyBoxBuilder"],[3,"TyIteratorBuilder"],[3,"TyImplTraitTyBuilder"],[3,"TyTupleBuilder"],[3,"TyParamBuilder"],[3,"TyParamBoundBuilder"],[3,"TraitTyParamBoundBuilder"],[3,"PolyTraitRefBuilder"],[3,"WherePredicateBuilder"],[3,"WhereBoundPredicateBuilder"],[3,"WhereBoundPredicateTyBuilder"],[3,"WhereBoundPredicateTyBoundsBuilder"],[3,"WhereRegionPredicateBuilder"],[3,"ImplGenerics"],[3,"TyGenerics"],[3,"Turbofish"],[8,"Visitor"],[4,"IResult"]]};
searchIndex["synom"] = {"doc":"Adapted from `nom` by removing the `IResult::Incomplete` variant which:","items":[[4,"IResult","synom","The result of a parser.",null,null],[13,"Done","","Parsing succeeded. The first field contains the rest of the unparsed data and the second field contains the parse result.",0,null],[13,"Error","","Parsing failed.",0,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"iresult"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"iresult"}],"output":{"name":"bool"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"iresult"}}],[11,"expect","","Unwraps the result, asserting the the parse is complete. Panics with a message based on the given string if the parse failed or is incomplete.",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"o"}}],[14,"punct","","Parse a piece of punctuation like \"+\" or \"+=\".",null,null],[14,"keyword","","Parse a keyword like \"fn\" or \"struct\".",null,null],[14,"option","","Turn a failed parse into `None` and a successful parse into `Some`.",null,null],[14,"opt_vec","","Turn a failed parse into an empty vector. The argument parser must itself return a vector.",null,null],[14,"epsilon","","Parses nothing and always succeeds.",null,null],[14,"separated_list","","Zero or more values separated by some separator. Does not allow a trailing seperator.",null,null],[14,"terminated_list","","Zero or more values separated by some separator. A trailing separator is allowed.",null,null],[14,"named","","Define a function from a parser combination.",null,null],[14,"call","","Invoke the given parser function with the passed in arguments.",null,null],[14,"map","","Transform the result of a parser by applying a function or closure.",null,null],[14,"not","","Parses successfully if the given parser fails to parse. Does not consume any of the input.",null,null],[14,"cond","","Conditionally execute the given parser.",null,null],[14,"cond_reduce","","Fail to parse if condition is false, otherwise parse the given parser.",null,null],[14,"preceded","","Parse two things, returning the value of the second.",null,null],[14,"terminated","","Parse two things, returning the value of the first.",null,null],[14,"many0","","Parse zero or more values using the given parser.",null,null],[14,"peek","","Parse a value without consuming it from the input data.",null,null],[14,"take_until","","Parse the part of the input up to but not including the given string. Fail to parse if the given string is not present in the input.",null,null],[14,"tag","","Parse the given string from exactly the current position in the input. You almost always want `punct!` or `keyword!` instead of this.",null,null],[14,"switch","","Pattern-match the result of a parser to select which other parser to run.",null,null],[14,"value","","Produce the given value without parsing anything. Useful as an argument to `switch!`.",null,null],[14,"delimited","","Value surrounded by a pair of delimiters.",null,null],[14,"separated_nonempty_list","","One or more values separated by some separator. Does not allow a trailing separator.",null,null],[14,"tuple","","Run a series of parsers and produce all of the results in a tuple.",null,null],[14,"alt","","Run a series of parsers, returning the result of the first one which succeeds.",null,null],[14,"do_parse","","Run a series of parsers, one after another, optionally assigning the results a name. Fail if any of the parsers fails.",null,null]],"paths":[[4,"IResult"]]};
searchIndex["tempdir"] = {"doc":"Temporary directories of files.","items":[[3,"TempDir","tempdir","A directory in the filesystem that is automatically deleted when it goes out of scope.",null,null],[11,"new","","Attempts to make a temporary directory inside of `env::temp_dir()` whose name will have the prefix, `prefix`. The directory and everything inside it will be automatically deleted once the returned `TempDir` is destroyed.",0,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"new_in","","Attempts to make a temporary directory inside of `tmpdir` whose name will have the prefix `prefix`. The directory and everything inside it will be automatically deleted once the returned `TempDir` is destroyed.",0,{"inputs":[{"name":"p"},{"name":"str"}],"output":{"name":"result"}}],[11,"path","","Accesses the [`Path`] to the temporary directory.",0,{"inputs":[{"name":"self"}],"output":{"name":"path"}}],[11,"into_path","","Unwraps the [`Path`] contained in the `TempDir` and returns it. This destroys the `TempDir` without deleting the directory represented by the returned `Path`.",0,{"inputs":[{"name":"self"}],"output":{"name":"pathbuf"}}],[11,"close","","Closes and removes the temporary directory, returing a `Result`.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"as_ref","","",0,{"inputs":[{"name":"self"}],"output":{"name":"path"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drop","","",0,{"inputs":[{"name":"self"}],"output":null}]],"paths":[[3,"TempDir"]]};
searchIndex["thread_local"] = {"doc":"Per-object thread-local storage","items":[[3,"ThreadLocal","thread_local","Thread-local variable wrapper",null,null],[3,"IterMut","","Mutable iterator over the contents of a `ThreadLocal`.",null,null],[3,"IntoIter","","An iterator that moves out of a `ThreadLocal`.",null,null],[3,"CachedThreadLocal","","Wrapper around `ThreadLocal` which adds a fast path for a single thread.",null,null],[6,"CachedIterMut","","Mutable iterator over the contents of a `CachedThreadLocal`.",null,null],[6,"CachedIntoIter","","An iterator that moves out of a `CachedThreadLocal`.",null,null],[11,"default","","",0,{"inputs":[],"output":{"name":"threadlocal"}}],[11,"drop","","",0,{"inputs":[{"name":"self"}],"output":null}],[11,"new","","Creates a new empty `ThreadLocal`.",0,{"inputs":[],"output":{"name":"threadlocal"}}],[11,"get","","Returns the element for the current thread, if it exists.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"get_or","","Returns the element for the current thread, or creates it if it doesn't exist.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"get_or_try","","Returns the element for the current thread, or creates it if it doesn't exist. If `create` fails, that error is returned and no element is added.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"iter_mut","","Returns a mutable iterator over the local values of all threads.",0,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"clear","","Removes all thread-specific values from the `ThreadLocal`, effectively reseting it to its original state.",0,{"inputs":[{"name":"self"}],"output":null}],[11,"into_iter","","",0,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"get_default","","Returns the element for the current thread, or creates a default one if it doesn't exist.",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",1,null],[11,"next","","",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",2,null],[11,"default","","",3,{"inputs":[],"output":{"name":"cachedthreadlocal"}}],[11,"new","","Creates a new empty `CachedThreadLocal`.",3,{"inputs":[],"output":{"name":"cachedthreadlocal"}}],[11,"get","","Returns the element for the current thread, if it exists.",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"get_or","","Returns the element for the current thread, or creates it if it doesn't exist.",3,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"get_or_try","","Returns the element for the current thread, or creates it if it doesn't exist. If `create` fails, that error is returned and no element is added.",3,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"iter_mut","","Returns a mutable iterator over the local values of all threads.",3,{"inputs":[{"name":"self"}],"output":{"name":"cacheditermut"}}],[11,"clear","","Removes all thread-specific values from the `ThreadLocal`, effectively reseting it to its original state.",3,{"inputs":[{"name":"self"}],"output":null}],[11,"into_iter","","",3,{"inputs":[{"name":"self"}],"output":{"name":"cachedintoiter"}}],[11,"get_default","","Returns the element for the current thread, or creates a default one if it doesn't exist.",3,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"ThreadLocal"],[3,"IterMut"],[3,"IntoIter"],[3,"CachedThreadLocal"]]};
searchIndex["time"] = {"doc":"Simple time handling.","items":[[3,"Duration","time","ISO 8601 time duration with nanosecond precision. This also allows for the negative duration; see individual methods for details.",null,null],[3,"OutOfRangeError","","Represents error when converting `Duration` to/from a standard library implementation",null,null],[3,"Timespec","","A record specifying a time value in seconds and nanoseconds, where nanoseconds represent the offset from the given second.",null,null],[12,"sec","","",0,null],[12,"nsec","","",0,null],[3,"PreciseTime","","An opaque structure representing a moment in time.",null,null],[3,"SteadyTime","","A structure representing a moment in time.",null,null],[3,"Tm","","Holds a calendar date and time broken down into its components (year, month, day, and so on), also called a broken-down time value.",null,null],[12,"tm_sec","","Seconds after the minute - [0, 60]",1,null],[12,"tm_min","","Minutes after the hour - [0, 59]",1,null],[12,"tm_hour","","Hours after midnight - [0, 23]",1,null],[12,"tm_mday","","Day of the month - [1, 31]",1,null],[12,"tm_mon","","Months since January - [0, 11]",1,null],[12,"tm_year","","Years since 1900",1,null],[12,"tm_wday","","Days since Sunday - [0, 6]. 0 = Sunday, 1 = Monday, ..., 6 = Saturday.",1,null],[12,"tm_yday","","Days since January 1 - [0, 365]",1,null],[12,"tm_isdst","","Daylight Saving Time flag.",1,null],[12,"tm_utcoff","","Identifies the time zone that was used to compute this broken-down time value, including any adjustment for Daylight Saving Time. This is the number of seconds east of UTC. For example, for U.S. Pacific Daylight Time, the value is -76060 = -25200.",1,null],[12,"tm_nsec","","Nanoseconds after the second - [0, 109 - 1]",1,null],[3,"TmFmt","","A wrapper around a `Tm` and format string that implements Display.",null,null],[4,"ParseError","","",null,null],[13,"InvalidSecond","","",2,null],[13,"InvalidMinute","","",2,null],[13,"InvalidHour","","",2,null],[13,"InvalidDay","","",2,null],[13,"InvalidMonth","","",2,null],[13,"InvalidYear","","",2,null],[13,"InvalidDayOfWeek","","",2,null],[13,"InvalidDayOfMonth","","",2,null],[13,"InvalidDayOfYear","","",2,null],[13,"InvalidZoneOffset","","",2,null],[13,"InvalidTime","","",2,null],[13,"InvalidSecondsSinceEpoch","","",2,null],[13,"MissingFormatConverter","","",2,null],[13,"InvalidFormatSpecifier","","",2,null],[13,"UnexpectedCharacter","","",2,null],[5,"strptime","","Parses the time from the string according to the format string.",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"result"}}],[5,"get_time","","Returns the current time as a `timespec` containing the seconds and nanoseconds since 1970-01-01T00:00:00Z.",null,{"inputs":[],"output":{"name":"timespec"}}],[5,"precise_time_ns","","Returns the current value of a high-resolution performance counter in nanoseconds since an unspecified epoch.",null,{"inputs":[],"output":{"name":"u64"}}],[5,"precise_time_s","","Returns the current value of a high-resolution performance counter in seconds since an unspecified epoch.",null,{"inputs":[],"output":{"name":"f64"}}],[5,"tzset","","",null,{"inputs":[],"output":null}],[5,"empty_tm","","",null,{"inputs":[],"output":{"name":"tm"}}],[5,"at_utc","","Returns the specified time in UTC",null,{"inputs":[{"name":"timespec"}],"output":{"name":"tm"}}],[5,"now_utc","","Returns the current time in UTC",null,{"inputs":[],"output":{"name":"tm"}}],[5,"at","","Returns the specified time in the local timezone",null,{"inputs":[{"name":"timespec"}],"output":{"name":"tm"}}],[5,"now","","Returns the current time in the local timezone",null,{"inputs":[],"output":{"name":"tm"}}],[5,"strftime","","Formats the time according to the format string.",null,{"inputs":[{"name":"str"},{"name":"tm"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"duration"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"option"}}],[11,"lt","","",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"le","","",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"gt","","",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"ge","","",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"cmp","","",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"ordering"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"weeks","","Makes a new `Duration` with given number of weeks. Equivalent to `Duration::seconds(weeks * 7 * 24 * 60 * 60)` with overflow checks. Panics when the duration is out of bounds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"days","","Makes a new `Duration` with given number of days. Equivalent to `Duration::seconds(days * 24 * 60 * 60)` with overflow checks. Panics when the duration is out of bounds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"hours","","Makes a new `Duration` with given number of hours. Equivalent to `Duration::seconds(hours * 60 * 60)` with overflow checks. Panics when the duration is out of bounds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"minutes","","Makes a new `Duration` with given number of minutes. Equivalent to `Duration::seconds(minutes * 60)` with overflow checks. Panics when the duration is out of bounds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"seconds","","Makes a new `Duration` with given number of seconds. Panics when the duration is more than `i64::MAX` milliseconds or less than `i64::MIN` milliseconds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"milliseconds","","Makes a new `Duration` with given number of milliseconds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"microseconds","","Makes a new `Duration` with given number of microseconds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"nanoseconds","","Makes a new `Duration` with given number of nanoseconds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"span","","Runs a closure, returning the duration of time it took to run the closure.",4,{"inputs":[{"name":"f"}],"output":{"name":"duration"}}],[11,"num_weeks","","Returns the total number of whole weeks in the duration.",4,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"num_days","","Returns the total number of whole days in the duration.",4,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"num_hours","","Returns the total number of whole hours in the duration.",4,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"num_minutes","","Returns the total number of whole minutes in the duration.",4,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"num_seconds","","Returns the total number of whole seconds in the duration.",4,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"num_milliseconds","","Returns the total number of whole milliseconds in the duration,",4,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"num_microseconds","","Returns the total number of whole microseconds in the duration, or `None` on overflow (exceeding 2^63 microseconds in either direction).",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"num_nanoseconds","","Returns the total number of whole nanoseconds in the duration, or `None` on overflow (exceeding 2^63 nanoseconds in either direction).",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"checked_add","","Add two durations, returning `None` if overflow occurred.",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"option"}}],[11,"checked_sub","","Subtract two durations, returning `None` if overflow occurred.",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"option"}}],[11,"min_value","","The minimum possible `Duration`: `i64::MIN` milliseconds.",4,{"inputs":[],"output":{"name":"duration"}}],[11,"max_value","","The maximum possible `Duration`: `i64::MAX` milliseconds.",4,{"inputs":[],"output":{"name":"duration"}}],[11,"zero","","A duration where the stored seconds and nanoseconds are equal to zero.",4,{"inputs":[],"output":{"name":"duration"}}],[11,"is_zero","","Returns `true` if the duration equals `Duration::zero()`.",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_std","","Creates a `time::Duration` object from `std::time::Duration`",4,{"inputs":[{"name":"stdduration"}],"output":{"name":"result"}}],[11,"to_std","","Creates a `std::time::Duration` object from `time::Duration`",4,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"neg","","",4,{"inputs":[{"name":"self"}],"output":{"name":"duration"}}],[11,"add","","",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"duration"}}],[11,"sub","","",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"duration"}}],[11,"mul","","",4,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"duration"}}],[11,"div","","",4,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"duration"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"outofrangeerror"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"outofrangeerror"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"self"},{"name":"outofrangeerror"}],"output":{"name":"bool"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",5,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"timespec"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"timespec"}],"output":{"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"self"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"self"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"self"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"self"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"timespec"}],"output":{"name":"ordering"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",0,null],[11,"new","","",0,{"inputs":[{"name":"i64"},{"name":"i32"}],"output":{"name":"timespec"}}],[11,"add","","",0,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"timespec"}}],[11,"sub","","",0,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"timespec"}}],[11,"sub","","",0,{"inputs":[{"name":"self"},{"name":"timespec"}],"output":{"name":"duration"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"precisetime"}}],[11,"now","","Returns a `PreciseTime` representing the current moment in time.",6,{"inputs":[],"output":{"name":"precisetime"}}],[11,"to","","Returns a `Duration` representing the span of time from the value of `self` to the value of `later`.",6,{"inputs":[{"name":"self"},{"name":"precisetime"}],"output":{"name":"duration"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"steadytime"}}],[11,"partial_cmp","","",7,{"inputs":[{"name":"self"},{"name":"steadytime"}],"output":{"name":"option"}}],[11,"lt","","",7,{"inputs":[{"name":"self"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"le","","",7,{"inputs":[{"name":"self"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"gt","","",7,{"inputs":[{"name":"self"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"ge","","",7,{"inputs":[{"name":"self"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"cmp","","",7,{"inputs":[{"name":"self"},{"name":"steadytime"}],"output":{"name":"ordering"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"self"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"now","","Returns a `SteadyTime` representing the current moment in time.",7,{"inputs":[],"output":{"name":"steadytime"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"sub","","",7,{"inputs":[{"name":"self"},{"name":"steadytime"}],"output":{"name":"duration"}}],[11,"sub","","",7,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"steadytime"}}],[11,"add","","",7,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"steadytime"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"tm"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"tm"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"tm"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",1,null],[11,"add","","The resulting Tm is in UTC.",1,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"tm"}}],[11,"sub","","The resulting Tm is in UTC.",1,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"tm"}}],[11,"sub","","",1,{"inputs":[{"name":"self"},{"name":"tm"}],"output":{"name":"duration"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"tm"}],"output":{"name":"option"}}],[11,"cmp","","",1,{"inputs":[{"name":"self"},{"name":"tm"}],"output":{"name":"ordering"}}],[11,"to_timespec","","Convert time to the seconds from January 1, 1970",1,{"inputs":[{"name":"self"}],"output":{"name":"timespec"}}],[11,"to_local","","Convert time to the local timezone",1,{"inputs":[{"name":"self"}],"output":{"name":"tm"}}],[11,"to_utc","","Convert time to the UTC",1,{"inputs":[{"name":"self"}],"output":{"name":"tm"}}],[11,"ctime","","Returns a TmFmt that outputs according to the `asctime` format in ISO C, in the local timezone.",1,{"inputs":[{"name":"self"}],"output":{"name":"tmfmt"}}],[11,"asctime","","Returns a TmFmt that outputs according to the `asctime` format in ISO C.",1,{"inputs":[{"name":"self"}],"output":{"name":"tmfmt"}}],[11,"strftime","","Formats the time according to the format string.",1,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"rfc822","","Returns a TmFmt that outputs according to RFC 822.",1,{"inputs":[{"name":"self"}],"output":{"name":"tmfmt"}}],[11,"rfc822z","","Returns a TmFmt that outputs according to RFC 822 with Zulu time.",1,{"inputs":[{"name":"self"}],"output":{"name":"tmfmt"}}],[11,"rfc3339","","Returns a TmFmt that outputs according to RFC 3339. RFC 3339 is compatible with ISO 8601.",1,{"inputs":[{"name":"self"}],"output":{"name":"tmfmt"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"parseerror"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",2,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"Timespec"],[3,"Tm"],[4,"ParseError"],[3,"TmFmt"],[3,"Duration"],[3,"OutOfRangeError"],[3,"PreciseTime"],[3,"SteadyTime"]]};
searchIndex["toml"] = {"doc":"A [TOML]-parsing library","items":[[0,"value","toml","Definition of a TOML value",null,null],[3,"Datetime","toml::value","A parsed TOML datetime value",null,null],[3,"DatetimeParseError","","Error returned from parsing a `Datetime` in the `FromStr` implementation.",null,null],[4,"Value","","Representation of a TOML value.",null,null],[13,"String","","Represents a TOML string",0,null],[13,"Integer","","Represents a TOML integer",0,null],[13,"Float","","Represents a TOML float",0,null],[13,"Boolean","","Represents a TOML boolean",0,null],[13,"Datetime","","Represents a TOML datetime",0,null],[13,"Array","","Represents a TOML array",0,null],[13,"Table","","Represents a TOML table",0,null],[6,"Array","","Type representing a TOML array, payload of the `Value::Array` variant",null,null],[6,"Table","","Type representing a TOML table, payload of the `Value::Table` variant",null,null],[8,"Index","","Types that can be used to index a `toml::Value`",null,null],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"value"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"value"}],"output":{"name":"bool"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"value"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"try_from","","Convert a `T` into `toml::Value` which is an enum that can represent any valid TOML data.",0,{"inputs":[{"name":"t"}],"output":{"name":"result"}}],[11,"try_into","","Interpret a `toml::Value` as an instance of type `T`.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"get","","Index into a TOML array or map. A string index can be used to access a value in a map, and a usize index can be used to access an element of an array.",0,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"option"}}],[11,"get_mut","","Mutably index into a TOML array or map. A string index can be used to access a value in a map, and a usize index can be used to access an element of an array.",0,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"option"}}],[11,"as_integer","","Extracts the integer value if it is an integer.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_integer","","Tests whether this value is an integer",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_float","","Extracts the float value if it is a float.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_float","","Tests whether this value is a float",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_bool","","Extracts the boolean value if it is a boolean.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_bool","","Tests whether this value is a boolean",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_str","","Extracts the string of this value if it is a string.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_str","","Tests if this value is a string",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_datetime","","Extracts the datetime value if it is a datetime.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_datetime","","Tests whether this value is a datetime",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_array","","Extracts the array value if it is an array.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_array_mut","","Extracts the array value if it is an array.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_array","","Tests whether this value is an array",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_table","","Extracts the table value if it is a table.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_table_mut","","Extracts the table value if it is a table.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_table","","Extracts the table value if it is a table.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"same_type","","Tests whether this and another value have the same type.",0,{"inputs":[{"name":"self"},{"name":"value"}],"output":{"name":"bool"}}],[11,"type_str","","Returns a human-readable representation of the type of this value.",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"index","","",0,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"value"}}],[11,"index_mut","","",0,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"value"}}],[11,"from","","",0,{"inputs":[{"name":"str"}],"output":{"name":"value"}}],[11,"from","","",0,{"inputs":[{"name":"vec"}],"output":{"name":"value"}}],[11,"from","","",0,{"inputs":[{"name":"btreemap"}],"output":{"name":"value"}}],[11,"from","","",0,{"inputs":[{"name":"hashmap"}],"output":{"name":"value"}}],[11,"from","","",0,{"inputs":[{"name":"string"}],"output":{"name":"value"}}],[11,"from","","",0,{"inputs":[{"name":"i64"}],"output":{"name":"value"}}],[11,"from","","",0,{"inputs":[{"name":"i32"}],"output":{"name":"value"}}],[11,"from","","",0,{"inputs":[{"name":"i8"}],"output":{"name":"value"}}],[11,"from","","",0,{"inputs":[{"name":"u8"}],"output":{"name":"value"}}],[11,"from","","",0,{"inputs":[{"name":"u32"}],"output":{"name":"value"}}],[11,"from","","",0,{"inputs":[{"name":"f64"}],"output":{"name":"value"}}],[11,"from","","",0,{"inputs":[{"name":"f32"}],"output":{"name":"value"}}],[11,"from","","",0,{"inputs":[{"name":"bool"}],"output":{"name":"value"}}],[11,"from","","",0,{"inputs":[{"name":"datetime"}],"output":{"name":"value"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",0,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"serialize","","",0,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",0,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"deserialize_any","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",0,null],[11,"deserialize_option","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",0,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",0,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",0,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",0,null],[11,"deserialize_tuple","","",0,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_identifier","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"into_deserializer","","",0,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"datetime"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"datetime"}],"output":{"name":"bool"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"datetime"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"datetimeparseerror"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",1,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"serialize","","",1,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",1,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",2,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[0,"ser","toml","Serializing Rust structures into TOML.",null,null],[3,"Serializer","toml::ser","Serialization implementation for TOML.",null,null],[4,"Error","","Errors that can occur when serializing a type.",null,null],[13,"UnsupportedType","","Indicates that a Rust type was requested to be serialized but it was not supported.",3,null],[13,"KeyNotString","","The key of all TOML maps must be strings, but serialization was attempted where the key of a map was not a string.",3,null],[13,"ArrayMixedType","","Arrays in TOML must have a homogenous type, but a heterogeneous array was emitted.",3,null],[13,"ValueAfterTable","","All values in a TOML table must be emitted before further tables are emitted. If a value is emitted after a table then this error is generated.",3,null],[13,"DateInvalid","","A serialized date was invalid.",3,null],[13,"NumberInvalid","","A serialized number was invalid.",3,null],[13,"UnsupportedNone","","None was attempted to be serialized, but it's not supported.",3,null],[13,"Custom","","A custom error which could be generated when serializing a particular type.",3,null],[5,"to_vec","","Serialize the given data structure as a TOML byte vector.",null,{"inputs":[{"name":"t"}],"output":{"name":"result"}}],[5,"to_string","","Serialize the given data structure as a String of TOML.",null,{"inputs":[{"name":"t"}],"output":{"name":"result"}}],[5,"to_string_pretty","","Serialize the given data structure as a \"pretty\" String of TOML.",null,{"inputs":[{"name":"t"}],"output":{"name":"result"}}],[5,"tables_last","","Convenience function to serialize items in a map in an order valid with TOML.",null,{"inputs":[{"name":"i"},{"name":"s"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"new","","Creates a new serializer which will emit TOML into the buffer provided.",4,{"inputs":[{"name":"string"}],"output":{"name":"serializer"}}],[11,"pretty","","Instantiate a \"pretty\" formatter",4,{"inputs":[{"name":"string"}],"output":{"name":"serializer"}}],[11,"pretty_string","","Enable or Disable pretty strings",4,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"pretty_string_literal","","Enable or Disable Literal strings for pretty strings ",4,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"pretty_array","","Enable or Disable pretty arrays",4,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"pretty_array_indent","","Set the indent for pretty arrays",4,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"self"}}],[11,"pretty_array_trailing_comma","","Specify whether to use a trailing comma when serializing pretty arrays",4,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",3,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"custom","","",3,{"inputs":[{"name":"t"}],"output":{"name":"error"}}],[0,"de","toml","Deserializing TOML into Rust structures.",null,null],[3,"Error","toml::de","Errors that can occur when deserializing a type.",null,null],[3,"Deserializer","","Deserialization implementation for TOML.",null,null],[5,"from_slice","","Deserializes a byte slice into a type.",null,null],[5,"from_str","","Deserializes a string into a type.",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"new","","Creates a new deserializer which will be deserializing the string provided.",6,{"inputs":[{"name":"str"}],"output":{"name":"deserializer"}}],[11,"end","","The `Deserializer::end` method should be called after a value has been fully deserialized.  This allows the `Deserializer` to validate that the input stream is at the end or that it only has trailing whitespace/comments.",6,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"set_require_newline_after_table","","Historical versions of toml-rs accidentally allowed a newline after a table definition, but the TOML spec requires a newline after a table definition header.",6,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"line_col","","Produces a (line, column) pair of the position of the error if available",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",5,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"custom","","",5,{"inputs":[{"name":"t"}],"output":{"name":"error"}}]],"paths":[[4,"Value"],[3,"Datetime"],[3,"DatetimeParseError"],[4,"Error"],[3,"Serializer"],[3,"Error"],[3,"Deserializer"]]};
searchIndex["traitobject"] = {"doc":"traitobject","items":[[5,"data","traitobject","Get the data pointer from this trait object.",null,null],[5,"data_mut","","Get the data pointer from this trait object, mutably.",null,null],[8,"Trait","","A trait implemented for all trait objects.",null,null]],"paths":[]};
searchIndex["typeable"] = {"doc":"Exposes `Typeable`, which exposes the `get_type` method, which gives the `TypeId` of any 'static type.","items":[[8,"Typeable","typeable","Universal mixin trait for adding a `get_type` method.",null,null],[11,"get_type","","Get the `TypeId` of this object.",0,{"inputs":[{"name":"self"}],"output":{"name":"typeid"}}]],"paths":[[8,"Typeable"]]};
searchIndex["typemap"] = {"doc":"A type-based key value store where one value type is allowed for each key.","items":[[3,"TypeMap","typemap","A map keyed by types.",null,null],[3,"OccupiedEntry","","A view onto an occupied entry in a TypeMap.",null,null],[3,"VacantEntry","","A view onto an unoccupied entry in a TypeMap.",null,null],[4,"Entry","","A view onto an entry in a TypeMap.",null,null],[13,"Occupied","","A view onto an occupied entry in a TypeMap.",0,null],[13,"Vacant","","A view onto an unoccupied entry in a TypeMap.",0,null],[6,"SendMap","","A version of `TypeMap` containing only `Send` types.",null,null],[6,"SyncMap","","A version of `TypeMap` containing only `Sync` types.",null,null],[6,"ShareMap","","A version of `TypeMap` containing only `Send + Sync` types.",null,null],[6,"CloneMap","","A version of `TypeMap` containing only `Clone` types.",null,null],[6,"ShareCloneMap","","A version of `TypeMap` containing only `Clone + Send + Sync` types.",null,null],[6,"DebugMap","","A version of `TypeMap` containing only `Debug` types.",null,null],[6,"ShareDebugMap","","A version of `TypeMap` containing only `Debug + Send + Sync` types.",null,null],[8,"CloneAny","","A marker trait meant for use as the `A` parameter in `TypeMap`.",null,null],[8,"DebugAny","","A marker trait meant for use as the `A` parameter in `TypeMap`.",null,null],[8,"Key","","This trait defines the relationship between keys and values in a TypeMap.",null,null],[16,"Value","","The value type associated with this key type.",1,null],[11,"default","","",2,{"inputs":[],"output":{"name":"typemap"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"typemap"}}],[11,"new","","Create a new, empty TypeMap.",2,{"inputs":[],"output":{"name":"typemap"}}],[11,"custom","","Create a new, empty TypeMap.",2,{"inputs":[],"output":{"name":"typemap"}}],[11,"insert","","Insert a value into the map with a specified key type.",2,null],[11,"get","","Find a value in the map and get a reference to it.",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"get_mut","","Find a value in the map and get a mutable reference to it.",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"contains","","Check if a key has an associated value stored in the map.",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"remove","","Remove a value from the map.",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"entry","","Get the given key's corresponding entry in the map for in-place manipulation.",2,{"inputs":[{"name":"self"}],"output":{"name":"entry"}}],[11,"data","","Read the underlying HashMap",2,{"inputs":[{"name":"self"}],"output":{"name":"hashmap"}}],[11,"data_mut","","Get a mutable reference to the underlying HashMap",2,{"inputs":[{"name":"self"}],"output":{"name":"hashmap"}}],[11,"len","","Get the number of values stored in the map.",2,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Return true if the map contains no values.",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clear","","Remove all entries from the map.",2,{"inputs":[{"name":"self"}],"output":null}],[11,"or_insert","","Ensures a value is in the entry by inserting the default if empty, and returns a mutable reference to the value in the entry.",0,null],[11,"or_insert_with","","Ensures a value is in the entry by inserting the result of the default function if empty, and returns a mutable reference to the value in the entry.",0,null],[11,"get","","Get a reference to the entry's value.",3,null],[11,"get_mut","","Get a mutable reference to the entry's value.",3,null],[11,"into_mut","","Transform the entry into a mutable reference with the same lifetime as the map.",3,null],[11,"insert","","Set the entry's value and return the previous value.",3,null],[11,"remove","","Move the entry's value out of the map, consuming the entry.",3,null],[11,"insert","","Set the entry's value and return a mutable reference to it.",4,null]],"paths":[[4,"Entry"],[8,"Key"],[3,"TypeMap"],[3,"OccupiedEntry"],[3,"VacantEntry"]]};
searchIndex["unicase"] = {"doc":"Case","items":[[3,"UniCase","unicase","Case Insensitive wrapper of strings.",null,null],[12,"0","","",0,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"unicase"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",0,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"deref_mut","","",0,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"as_ref","","",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"s2"}],"output":{"name":"bool"}}],[11,"from_str","","",0,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"hash","","",0,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"from","","",0,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"from","","",0,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"from","","",0,{"inputs":[{"name":"string"}],"output":{"name":"self"}}],[11,"from","","",0,{"inputs":[{"name":"string"}],"output":{"name":"self"}}],[11,"into","","",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"into","","",0,{"inputs":[{"name":"self"}],"output":{"name":"string"}}]],"paths":[[3,"UniCase"]]};
searchIndex["unicode_bidi"] = {"doc":"This crate implements the [Unicode Bidirectional Algorithm][tr9] for display of mixed right-to-left and left-to-right text.  It is written in safe Rust, compatible with the current stable release.","items":[[3,"ParagraphInfo","unicode_bidi","Bidi information about a single paragraph",null,null],[12,"range","","The paragraphs boundaries within the text, as byte indices.",0,null],[12,"level","","The paragraph embedding level.",0,null],[3,"InitialInfo","","Initial bidi information of the text.",null,null],[12,"text","","The text",1,null],[12,"original_classes","","The BidiClass of the character at each byte in the text. If a character is multiple bytes, its class will appear multiple times in the vector.",1,null],[12,"paragraphs","","The boundaries and level of each paragraph within the text.",1,null],[3,"BidiInfo","","Bidi information of the text.",null,null],[12,"text","","The text",2,null],[12,"original_classes","","The BidiClass of the character at each byte in the text.",2,null],[12,"levels","","The directional embedding level of each byte in the text.",2,null],[12,"paragraphs","","The boundaries and paragraph embedding level of each paragraph within the text.",2,null],[4,"BidiClass","","Represents values of the Unicode character property `Bidi_Class`, also known as the bidirectional character type.",null,null],[13,"AL","","",3,null],[13,"AN","","",3,null],[13,"B","","",3,null],[13,"BN","","",3,null],[13,"CS","","",3,null],[13,"EN","","",3,null],[13,"ES","","",3,null],[13,"ET","","",3,null],[13,"FSI","","",3,null],[13,"L","","",3,null],[13,"LRE","","",3,null],[13,"LRI","","",3,null],[13,"LRO","","",3,null],[13,"NSM","","",3,null],[13,"ON","","",3,null],[13,"PDF","","",3,null],[13,"PDI","","",3,null],[13,"R","","",3,null],[13,"RLE","","",3,null],[13,"RLI","","",3,null],[13,"RLO","","",3,null],[13,"S","","",3,null],[13,"WS","","",3,null],[5,"bidi_class","","Find the `BidiClass` of a single char.",null,{"inputs":[{"name":"char"}],"output":{"name":"bidiclass"}}],[0,"deprecated","","This module holds deprecated assets only.",null,null],[5,"visual_runs","unicode_bidi::deprecated","Find the level runs within a line and return them in visual order.",null,null],[0,"format_chars","unicode_bidi","Directional Formatting Characters",null,null],[17,"ALM","unicode_bidi::format_chars","ARABIC LETTER MARK",null,null],[17,"LRM","","LEFT-TO-RIGHT MARK",null,null],[17,"RLM","","RIGHT-TO-LEFT MARK",null,null],[17,"LRI","","LEFT‑TO‑RIGHT ISOLATE",null,null],[17,"RLI","","RIGHT‑TO‑LEFT ISOLATE",null,null],[17,"FSI","","FIRST STRONG ISOLATE",null,null],[17,"PDI","","POP DIRECTIONAL ISOLATE",null,null],[17,"LRE","","LEFT-TO-RIGHT EMBEDDING",null,null],[17,"RLE","","RIGHT-TO-LEFT EMBEDDING",null,null],[17,"PDF","","POP DIRECTIONAL FORMATTING",null,null],[17,"LRO","","LEFT-TO-RIGHT OVERRIDE",null,null],[17,"RLO","","RIGHT-TO-LEFT OVERRIDE",null,null],[0,"level","unicode_bidi","Bidi Embedding Level",null,null],[3,"Level","unicode_bidi::level","Embedding Level",null,null],[4,"Error","","Errors that can occur on Level creation or mutation",null,null],[13,"OutOfRangeNumber","","Out-of-range (invalid) embedding level number.",4,null],[5,"has_rtl","","If levels has any RTL (odd) level",null,null],[17,"LTR_LEVEL","","",null,null],[17,"RTL_LEVEL","","",null,null],[17,"MAX_EXPLICIT_DEPTH","","During explicit level resolution, embedding level can go as high as `max_depth`.",null,null],[17,"MAX_IMPLICIT_DEPTH","","During implicit level resolution, embedding level can go as high as `max_depth + 1`.",null,null],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"level"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",5,{"inputs":[{"name":"self"},{"name":"level"}],"output":{"name":"ordering"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"level"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"self"},{"name":"level"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",5,{"inputs":[{"name":"self"},{"name":"level"}],"output":{"name":"option"}}],[11,"lt","","",5,{"inputs":[{"name":"self"},{"name":"level"}],"output":{"name":"bool"}}],[11,"le","","",5,{"inputs":[{"name":"self"},{"name":"level"}],"output":{"name":"bool"}}],[11,"gt","","",5,{"inputs":[{"name":"self"},{"name":"level"}],"output":{"name":"bool"}}],[11,"ge","","",5,{"inputs":[{"name":"self"},{"name":"level"}],"output":{"name":"bool"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"ltr","","New LTR level with smallest number value (0).",5,{"inputs":[],"output":{"name":"level"}}],[11,"rtl","","New RTL level with smallest number value (1).",5,{"inputs":[],"output":{"name":"level"}}],[11,"max_implicit_depth","","Maximum depth of the directional status stack during implicit resolutions.",5,{"inputs":[],"output":{"name":"u8"}}],[11,"max_explicit_depth","","Maximum depth of the directional status stack during explicit resolutions.",5,{"inputs":[],"output":{"name":"u8"}}],[11,"new","","Create new level, fail if number is larger than `max_depth + 1`.",5,{"inputs":[{"name":"u8"}],"output":{"name":"result"}}],[11,"new_explicit","","Create new level, fail if number is larger than `max_depth`.",5,{"inputs":[{"name":"u8"}],"output":{"name":"result"}}],[11,"number","","The level number.",5,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"is_ltr","","If this level is left-to-right.",5,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_rtl","","If this level is right-to-left.",5,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"raise","","Raise level by `amount`, fail if number is larger than `max_depth + 1`.",5,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"result"}}],[11,"raise_explicit","","Raise level by `amount`, fail if number is larger than `max_depth`.",5,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"result"}}],[11,"lower","","Lower level by `amount`, fail if number goes below zero.",5,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"result"}}],[11,"new_explicit_next_ltr","","The next LTR (even) level greater than this, or fail if number is larger than `max_depth`.",5,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"new_explicit_next_rtl","","The next RTL (odd) level greater than this, or fail if number is larger than `max_depth`.",5,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"new_lowest_ge_rtl","","The lowest RTL (odd) level greater than or equal to this, or fail if number is larger than `max_depth + 1`.",5,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"bidi_class","","Generate a character type based on a level (as specified in steps X10 and N2).",5,{"inputs":[{"name":"self"}],"output":{"name":"bidiclass"}}],[11,"vec","","",5,null],[11,"into","","Convert to the level number",5,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"from","","Create level by number",5,{"inputs":[{"name":"u8"}],"output":{"name":"level"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"bool"}}],[11,"clone","unicode_bidi","",3,{"inputs":[{"name":"self"}],"output":{"name":"bidiclass"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"bidiclass"}],"output":{"name":"bool"}}],[6,"LevelRun","","A maximal substring of characters with the same embedding level.",null,null],[17,"UNICODE_VERSION","","The Unicode version of data",null,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"paragraphinfo"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"paragraphinfo"}],"output":{"name":"bool"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"initialinfo"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"initialinfo"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Find the paragraphs and BidiClasses in a string of text.",1,{"inputs":[{"name":"str"},{"name":"option"}],"output":{"name":"initialinfo"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"bidiinfo"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"bidiinfo"}],"output":{"name":"bool"}}],[11,"new","","Split the text into paragraphs and determine the bidi embedding levels for each paragraph.",2,{"inputs":[{"name":"str"},{"name":"option"}],"output":{"name":"bidiinfo"}}],[11,"reordered_levels","","Re-order a line based on resolved levels and return only the embedding levels, one `Level` per byte.",2,{"inputs":[{"name":"self"},{"name":"paragraphinfo"},{"name":"range"}],"output":{"name":"vec"}}],[11,"reordered_levels_per_char","","Re-order a line based on resolved levels and return only the embedding levels, one `Level` per character.",2,{"inputs":[{"name":"self"},{"name":"paragraphinfo"},{"name":"range"}],"output":{"name":"vec"}}],[11,"reorder_line","","Re-order a line based on resolved levels and return the line in display order.",2,{"inputs":[{"name":"self"},{"name":"paragraphinfo"},{"name":"range"}],"output":{"name":"cow"}}],[11,"visual_runs","","Find the level runs within a line and return them in visual order.",2,null],[11,"has_rtl","","If processed text has any computed RTL levels",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}]],"paths":[[3,"ParagraphInfo"],[3,"InitialInfo"],[3,"BidiInfo"],[4,"BidiClass"],[4,"Error"],[3,"Level"]]};
searchIndex["unicode_normalization"] = {"doc":"Unicode character composition and decomposition utilities as described in Unicode Standard Annex #15.","items":[[3,"Decompositions","unicode_normalization","External iterator for a string decomposition's characters.",null,null],[3,"Recompositions","","External iterator for a string recomposition's characters.",null,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"decompositions"}}],[11,"next","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",0,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"recompositions"}}],[11,"next","","",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"char","","Methods for composing and decomposing characters.",null,null],[5,"decompose_canonical","unicode_normalization::char","Compute canonical Unicode decomposition for character. See Unicode Standard Annex #15 for more information.",null,{"inputs":[{"name":"char"},{"name":"f"}],"output":null}],[5,"decompose_compatible","","Compute canonical or compatible Unicode decomposition for character. See Unicode Standard Annex #15 for more information.",null,{"inputs":[{"name":"char"},{"name":"f"}],"output":null}],[5,"compose","","Compose two characters into a single character, if possible. See Unicode Standard Annex #15 for more information.",null,{"inputs":[{"name":"char"},{"name":"char"}],"output":{"name":"option"}}],[5,"canonical_combining_class","","",null,{"inputs":[{"name":"char"}],"output":{"name":"u8"}}],[5,"is_combining_mark","","Return whether the given character is a combining mark (`General_Category=Mark`)",null,{"inputs":[{"name":"char"}],"output":{"name":"bool"}}],[17,"UNICODE_VERSION","unicode_normalization","The version of Unicode that this version of unicode-normalization is based on.",null,null],[8,"UnicodeNormalization","","Methods for iterating over strings while applying Unicode normalizations as described in Unicode Standard Annex #15.",null,null],[10,"nfd","","Returns an iterator over the string in Unicode Normalization Form D (canonical decomposition).",2,{"inputs":[{"name":"self"}],"output":{"name":"decompositions"}}],[10,"nfkd","","Returns an iterator over the string in Unicode Normalization Form KD (compatibility decomposition).",2,{"inputs":[{"name":"self"}],"output":{"name":"decompositions"}}],[10,"nfc","","An Iterator over the string in Unicode Normalization Form C (canonical decomposition followed by canonical composition).",2,{"inputs":[{"name":"self"}],"output":{"name":"recompositions"}}],[10,"nfkc","","An Iterator over the string in Unicode Normalization Form KC (compatibility decomposition followed by canonical composition).",2,{"inputs":[{"name":"self"}],"output":{"name":"recompositions"}}]],"paths":[[3,"Decompositions"],[3,"Recompositions"],[8,"UnicodeNormalization"]]};
searchIndex["unicode_xid"] = {"doc":"Determine if a `char` is a valid identifier for a parser and/or lexer according to Unicode Standard Annex #31 rules.","items":[[17,"UNICODE_VERSION","unicode_xid","The version of Unicode that this version of unicode-xid is based on.",null,null],[8,"UnicodeXID","","Methods for determining if a character is a valid identifier character.",null,null],[10,"is_xid_start","","Returns whether the specified character satisfies the 'XID_Start' Unicode property.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_xid_continue","","Returns whether the specified `char` satisfies the 'XID_Continue' Unicode property.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}]],"paths":[[8,"UnicodeXID"]]};
searchIndex["unreachable"] = {"doc":"unreachable","items":[[5,"unreachable","unreachable","Hint to the optimizer that any code path which calls this function is statically unreachable and can be removed.",null,null],[8,"UncheckedOptionExt","","An extension trait for `Option<T>` providing unchecked unwrapping methods.",null,null],[10,"unchecked_unwrap","","Get the value out of this Option without checking for None.",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[10,"unchecked_unwrap_none","","Assert that this Option is a None to the optimizer.",0,{"inputs":[{"name":"self"}],"output":null}],[8,"UncheckedResultExt","","An extension trait for `Result<T, E>` providing unchecked unwrapping methods.",null,null],[10,"unchecked_unwrap_ok","","Get the value out of this Result without checking for Err.",1,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[10,"unchecked_unwrap_err","","Get the error out of this Result without checking for Ok.",1,{"inputs":[{"name":"self"}],"output":{"name":"e"}}]],"paths":[[8,"UncheckedOptionExt"],[8,"UncheckedResultExt"]]};
searchIndex["unsafe_any"] = {"doc":"Traits for unsafe downcasting from trait objects to & or &mut references of concrete types. These should only be used if you are absolutely certain of the type of the data in said trait object - there be dragons etc.","items":[[8,"UnsafeAny","unsafe_any","A trait providing unchecked downcasting to its contents when stored in a trait object.",null,null],[8,"UnsafeAnyExt","","An extension trait for unchecked downcasting of trait objects.",null,null],[11,"downcast_ref_unchecked","","Returns a reference to the contained value, assuming that it is of type `T`.",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"downcast_mut_unchecked","","Returns a mutable reference to the contained value, assuming that it is of type `T`.",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"downcast_unchecked","","Returns a the contained value, assuming that it is of type `T`.",0,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"downcast_ref_unchecked","","Returns a reference to the contained value, assuming that it is of type `T`.",1,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"downcast_mut_unchecked","","Returns a mutable reference to the contained value, assuming that it is of type `T`.",1,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"downcast_unchecked","","Returns a the contained value, assuming that it is of type `T`.",1,{"inputs":[{"name":"box"}],"output":{"name":"box"}}]],"paths":[[8,"UnsafeAnyExt"],[8,"UnsafeAny"]]};
searchIndex["url"] = {"doc":"rust-url is an implementation of the URL Standard for the Rust programming language.","items":[[3,"OpaqueOrigin","url","Opaque identifier for URLs that have file or other schemes",null,null],[3,"HostAndPort","","This mostly exists because coherence rules don’t allow us to implement `ToSocketAddrs for (Host<S>, u16)`.",null,null],[12,"host","","",0,null],[12,"port","","",0,null],[3,"SocketAddrs","","Socket addresses for an URL.",null,null],[3,"PathSegmentsMut","","Exposes methods to manipulate the path of an URL that is not cannot-be-base.",null,null],[3,"Url","","A parsed URL record.",null,null],[3,"ParseOptions","","Full configuration for the URL parser.",null,null],[3,"UrlQuery","","Implementation detail of `Url::query_pairs_mut`. Typically not used directly.",null,null],[4,"Origin","","The origin of an URL",null,null],[13,"Opaque","","A globally unique identifier",1,null],[13,"Tuple","","Consists of the URL's scheme, host and port",1,null],[4,"Host","","The host name of an URL.",null,null],[13,"Domain","","A DNS domain name, as '.' dot-separated labels. Non-ASCII labels are encoded in punycode per IDNA.",2,null],[13,"Ipv4","","An IPv4 address. `Url::host_str` returns the serialization of this address, as four decimal integers separated by `.` dots.",2,null],[13,"Ipv6","","An IPv6 address. `Url::host_str` returns the serialization of that address between `[` and `]` brackets, in the format per RFC 5952 A Recommendation for IPv6 Address Text Representation: lowercase hexadecimal with maximal `::` compression.",2,null],[4,"ParseError","","Errors that can occur during parsing.",null,null],[13,"EmptyHost","","",3,null],[13,"IdnaError","","",3,null],[13,"InvalidPort","","",3,null],[13,"InvalidIpv4Address","","",3,null],[13,"InvalidIpv6Address","","",3,null],[13,"InvalidDomainCharacter","","",3,null],[13,"RelativeUrlWithoutBase","","",3,null],[13,"RelativeUrlWithCannotBeABaseBase","","",3,null],[13,"SetHostOnCannotBeABaseUrl","","",3,null],[13,"Overflow","","",3,null],[4,"Position","","Indicates a position within a URL based on its components.",null,null],[13,"BeforeScheme","","",4,null],[13,"AfterScheme","","",4,null],[13,"BeforeUsername","","",4,null],[13,"AfterUsername","","",4,null],[13,"BeforePassword","","",4,null],[13,"AfterPassword","","",4,null],[13,"BeforeHost","","",4,null],[13,"AfterHost","","",4,null],[13,"BeforePort","","",4,null],[13,"AfterPort","","",4,null],[13,"BeforePath","","",4,null],[13,"AfterPath","","",4,null],[13,"BeforeQuery","","",4,null],[13,"AfterQuery","","",4,null],[13,"BeforeFragment","","",4,null],[13,"AfterFragment","","",4,null],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"host"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"host"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"host"}],"output":{"name":"bool"}}],[11,"cmp","","",2,{"inputs":[{"name":"self"},{"name":"host"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",2,{"inputs":[{"name":"self"},{"name":"host"}],"output":{"name":"option"}}],[11,"lt","","",2,{"inputs":[{"name":"self"},{"name":"host"}],"output":{"name":"bool"}}],[11,"le","","",2,{"inputs":[{"name":"self"},{"name":"host"}],"output":{"name":"bool"}}],[11,"gt","","",2,{"inputs":[{"name":"self"},{"name":"host"}],"output":{"name":"bool"}}],[11,"ge","","",2,{"inputs":[{"name":"self"},{"name":"host"}],"output":{"name":"bool"}}],[11,"hash","","",2,null],[11,"to_owned","","Return a copy of `self` that owns an allocated `String` but does not borrow an `&Url`.",2,{"inputs":[{"name":"self"}],"output":{"name":"host"}}],[11,"parse","","Parse a host: either an IPv6 address in [] square brackets, or a domain.",2,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"hostandport"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"to_owned","","Return a copy of `self` that owns an allocated `String` but does not borrow an `&Url`.",0,{"inputs":[{"name":"self"}],"output":{"name":"hostandport"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"to_socket_addrs","","",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"origin"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"origin"}],"output":{"name":"bool"}}],[11,"hash","","",1,null],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"origin"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new_opaque","","Creates a new opaque origin that is only equal to itself.",1,{"inputs":[],"output":{"name":"origin"}}],[11,"is_tuple","","Return whether this origin is a (scheme, host, port) tuple (as opposed to an opaque origin).",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"ascii_serialization","","https://html.spec.whatwg.org/multipage/#ascii-serialisation-of-an-origin",1,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"unicode_serialization","","https://html.spec.whatwg.org/multipage/#unicode-serialisation-of-an-origin",1,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"opaqueorigin"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"self"},{"name":"opaqueorigin"}],"output":{"name":"bool"}}],[11,"hash","","",6,null],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"opaqueorigin"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drop","","",7,{"inputs":[{"name":"self"}],"output":null}],[11,"clear","","Remove all segments in the path, leaving the minimal `url.path() == \"/\"`.",7,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"pop_if_empty","","Remove the last segment of this URL’s path if it is empty, except if these was only one segment to begin with.",7,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"pop","","Remove the last segment of this URL’s path.",7,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"push","","Append the given segment at the end of this URL’s path.",7,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"extend","","Append each segment from the given iterator at the end of this URL’s path.",7,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"self"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"parseerror"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",3,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",3,{"inputs":[{"name":"errors"}],"output":{"name":"parseerror"}}],[11,"index","","",8,{"inputs":[{"name":"self"},{"name":"rangefull"}],"output":{"name":"str"}}],[11,"index","","",8,{"inputs":[{"name":"self"},{"name":"rangefrom"}],"output":{"name":"str"}}],[11,"index","","",8,{"inputs":[{"name":"self"},{"name":"rangeto"}],"output":{"name":"str"}}],[11,"index","","",8,{"inputs":[{"name":"self"},{"name":"range"}],"output":{"name":"str"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"position"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"form_urlencoded","","Parser and serializer for the `application/x-www-form-urlencoded` syntax, as used by HTML forms.",null,null],[3,"Parse","url::form_urlencoded","The return type of `parse()`.",null,null],[3,"ParseIntoOwned","","Like `Parse`, but yields pairs of `String` instead of pairs of `Cow<str>`.",null,null],[3,"ByteSerialize","","Return value of `byte_serialize()`.",null,null],[3,"Serializer","","The `application/x-www-form-urlencoded` serializer.",null,null],[5,"parse","","Convert a byte string in the `application/x-www-form-urlencoded` syntax into a iterator of (name, value) pairs.",null,null],[5,"byte_serialize","","The `application/x-www-form-urlencoded` byte serializer.",null,null],[8,"Target","","",null,null],[10,"as_mut_string","","",9,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[10,"finish","","",9,null],[16,"Finished","","",9,null],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"parse"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",10,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"into_owned","","Return a new iterator that yields pairs of `String` instead of pairs of `Cow<str>`.",10,{"inputs":[{"name":"self"}],"output":{"name":"parseintoowned"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",11,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",12,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",12,null],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_mut_string","url","",14,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"finish","","",14,{"inputs":[{"name":"self"}],"output":{"name":"url"}}],[11,"new","url::form_urlencoded","Create a new `application/x-www-form-urlencoded` serializer for the given target.",13,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"for_suffix","","Create a new `application/x-www-form-urlencoded` serializer for a suffix of the given target.",13,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"self"}}],[11,"clear","","Remove any existing name/value pair.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"append_pair","","Serialize and append a name/value pair.",13,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"}],"output":{"name":"self"}}],[11,"extend_pairs","","Serialize and append a number of name/value pairs.",13,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"self"}}],[11,"finish","","If this serializer was constructed with a string, take and return that string.",13,null],[11,"clone","url","",8,{"inputs":[{"name":"self"}],"output":{"name":"url"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"parseoptions"}}],[11,"base_url","","Change the base URL",15,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"self"}}],[11,"log_syntax_violation","","Call the provided function or closure on non-fatal parse errors.",15,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"self"}}],[11,"parse","","Parse an URL string with the configuration so far.",15,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"parse","","Parse an absolute URL from a string.",8,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"parse_with_params","","Parse an absolute URL from a string and add params to its query string.",8,{"inputs":[{"name":"str"},{"name":"i"}],"output":{"name":"result"}}],[11,"join","","Parse a string as an URL, with this URL as the base URL.",8,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"options","","Return a default `ParseOptions` that can fully configure the URL parser.",8,{"inputs":[],"output":{"name":"parseoptions"}}],[11,"as_str","","Return the serialization of this URL.",8,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"into_string","","Return the serialization of this URL.",8,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"origin","","Return the origin of this URL (https://url.spec.whatwg.org/#origin)",8,{"inputs":[{"name":"self"}],"output":{"name":"origin"}}],[11,"scheme","","Return the scheme of this URL, lower-cased, as an ASCII string without the ':' delimiter.",8,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"has_authority","","Return whether the URL has an 'authority', which can contain a username, password, host, and port number.",8,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"cannot_be_a_base","","Return whether this URL is a cannot-be-a-base URL, meaning that parsing a relative URL string with this URL as the base will return an error.",8,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"username","","Return the username for this URL (typically the empty string) as a percent-encoded ASCII string.",8,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"password","","Return the password for this URL, if any, as a percent-encoded ASCII string.",8,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"has_host","","Equivalent to `url.host().is_some()`.",8,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"host_str","","Return the string representation of the host (domain or IP address) for this URL, if any.",8,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"host","","Return the parsed representation of the host for this URL. Non-ASCII domain labels are punycode-encoded per IDNA.",8,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"domain","","If this URL has a host and it is a domain name (not an IP address), return it.",8,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"port","","Return the port number for this URL, if any.",8,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"port_or_known_default","","Return the port number for this URL, or the default port number if it is known.",8,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"with_default_port","","If the URL has a host, return something that implements `ToSocketAddrs`.",8,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"path","","Return the path for this URL, as a percent-encoded ASCII string. For cannot-be-a-base URLs, this is an arbitrary string that doesn’t start with '/'. For other URLs, this starts with a '/' slash and continues with slash-separated path segments.",8,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"path_segments","","Unless this URL is cannot-be-a-base, return an iterator of '/' slash-separated path segments, each as a percent-encoded ASCII string.",8,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"query","","Return this URL’s query string, if any, as a percent-encoded ASCII string.",8,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"query_pairs","","Parse the URL’s query string, if any, as `application/x-www-form-urlencoded` and return an iterator of (key, value) pairs.",8,{"inputs":[{"name":"self"}],"output":{"name":"parse"}}],[11,"fragment","","Return this URL’s fragment identifier, if any.",8,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"set_fragment","","Change this URL’s fragment identifier.",8,{"inputs":[{"name":"self"},{"name":"option"}],"output":null}],[11,"set_query","","Change this URL’s query string.",8,{"inputs":[{"name":"self"},{"name":"option"}],"output":null}],[11,"query_pairs_mut","","Manipulate this URL’s query string, viewed as a sequence of name/value pairs in `application/x-www-form-urlencoded` syntax.",8,{"inputs":[{"name":"self"}],"output":{"name":"serializer"}}],[11,"set_path","","Change this URL’s path.",8,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[11,"path_segments_mut","","Return an object with methods to manipulate this URL’s path segments.",8,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"set_port","","Change this URL’s port number.",8,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"set_host","","Change this URL’s host.",8,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"set_ip_host","","Change this URL’s host to the given IP address.",8,{"inputs":[{"name":"self"},{"name":"ipaddr"}],"output":{"name":"result"}}],[11,"set_password","","Change this URL’s password.",8,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"set_username","","Change this URL’s username.",8,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"set_scheme","","Change this URL’s scheme.",8,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"from_file_path","","Convert a file name as `std::path::Path` into an URL in the `file` scheme.",8,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"from_directory_path","","Convert a directory name as `std::path::Path` into an URL in the `file` scheme.",8,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"to_file_path","","Assuming the URL is in the `file` scheme or similar, convert its path to an absolute `std::path::Path`.",8,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"to_socket_addrs","","",8,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"from_str","","",8,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"cmp","","",8,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",8,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[11,"hash","","",8,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"as_ref","","",8,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drop","","",14,{"inputs":[{"name":"self"}],"output":null}],[14,"define_encode_set","","Define a new struct that implements the `EncodeSet` trait, for use in `percent_decode()` and related functions.",null,null]],"paths":[[3,"HostAndPort"],[4,"Origin"],[4,"Host"],[4,"ParseError"],[4,"Position"],[3,"SocketAddrs"],[3,"OpaqueOrigin"],[3,"PathSegmentsMut"],[3,"Url"],[8,"Target"],[3,"Parse"],[3,"ParseIntoOwned"],[3,"ByteSerialize"],[3,"Serializer"],[3,"UrlQuery"],[3,"ParseOptions"]]};
searchIndex["utf8_ranges"] = {"doc":"Crate `utf8-ranges` converts ranges of Unicode scalar values to equivalent ranges of UTF-8 bytes. This is useful for constructing byte based automatons that need to embed UTF-8 decoding.","items":[[3,"Utf8Range","utf8_ranges","A single inclusive range of UTF-8 bytes.",null,null],[12,"start","","Start of byte range (inclusive).",0,null],[12,"end","","End of byte range (inclusive).",0,null],[3,"Utf8Sequences","","An iterator over ranges of matching UTF-8 byte sequences.",null,null],[4,"Utf8Sequence","","Utf8Sequence represents a sequence of byte ranges.",null,null],[13,"One","","One byte range.",1,null],[13,"Two","","Two successive byte ranges.",1,null],[13,"Three","","Three successive byte ranges.",1,null],[13,"Four","","Four successive byte ranges.",1,null],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"utf8sequence"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"utf8sequence"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"utf8sequence"}],"output":{"name":"bool"}}],[11,"as_slice","","Returns the underlying sequence of byte ranges as a slice.",1,null],[11,"len","","Returns the number of byte ranges in this sequence.",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"matches","","Returns true if and only if a prefix of `bytes` matches this sequence of byte ranges.",1,null],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"utf8range"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"utf8range"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"utf8range"}],"output":{"name":"bool"}}],[11,"matches","","Returns true if and only if the given byte is in this range.",0,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new iterator over UTF-8 byte ranges for the scalar value range given.",2,{"inputs":[{"name":"char"},{"name":"char"}],"output":{"name":"self"}}],[11,"next","","",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}]],"paths":[[3,"Utf8Range"],[4,"Utf8Sequence"],[3,"Utf8Sequences"]]};
searchIndex["uuid"] = {"doc":"Generate and parse UUIDs","items":[[3,"Uuid","uuid","A Universally Unique Identifier (UUID).",null,null],[3,"Simple","","An adaptor for formatting a `Uuid` as a simple string.",null,null],[3,"Hyphenated","","An adaptor for formatting a `Uuid` as a hyphenated string.",null,null],[3,"Urn","","An adaptor for formatting a `Uuid` as a URN string.",null,null],[4,"UuidVersion","","The version of the UUID, denoting the generating algorithm.",null,null],[13,"Mac","","Version 1: MAC address",0,null],[13,"Dce","","Version 2: DCE Security",0,null],[13,"Md5","","Version 3: MD5 hash",0,null],[13,"Random","","Version 4: Random",0,null],[13,"Sha1","","Version 5: SHA-1 hash",0,null],[4,"UuidVariant","","The reserved variants of UUIDs.",null,null],[13,"NCS","","Reserved by the NCS for backward compatibility",1,null],[13,"RFC4122","","As described in the RFC4122 Specification (default)",1,null],[13,"Microsoft","","Reserved by Microsoft for backward compatibility",1,null],[13,"Future","","Reserved for future expansion",1,null],[4,"ParseError","","Error details for string parsing failures.",null,null],[13,"InvalidLength","","",2,null],[13,"InvalidCharacter","","",2,null],[13,"InvalidGroups","","",2,null],[13,"InvalidGroupLength","","",2,null],[6,"UuidBytes","","A 128-bit (16 byte) buffer containing the ID.",null,null],[17,"NAMESPACE_DNS","","A UUID of the namespace of fully-qualified domain names",null,null],[17,"NAMESPACE_URL","","A UUID of the namespace of URLs",null,null],[17,"NAMESPACE_OID","","A UUID of the namespace of ISO OIDs",null,null],[17,"NAMESPACE_X500","","A UUID of the namespace of X.500 DNs (in DER or a text output format)",null,null],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"uuidversion"}],"output":{"name":"bool"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"uuidversion"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"uuidvariant"}],"output":{"name":"bool"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"uuidvariant"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"uuid"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"uuid"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"uuid"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",3,{"inputs":[{"name":"self"},{"name":"uuid"}],"output":{"name":"option"}}],[11,"lt","","",3,{"inputs":[{"name":"self"},{"name":"uuid"}],"output":{"name":"bool"}}],[11,"le","","",3,{"inputs":[{"name":"self"},{"name":"uuid"}],"output":{"name":"bool"}}],[11,"gt","","",3,{"inputs":[{"name":"self"},{"name":"uuid"}],"output":{"name":"bool"}}],[11,"ge","","",3,{"inputs":[{"name":"self"},{"name":"uuid"}],"output":{"name":"bool"}}],[11,"cmp","","",3,{"inputs":[{"name":"self"},{"name":"uuid"}],"output":{"name":"ordering"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"parseerror"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"nil","","The 'nil UUID'.",3,{"inputs":[],"output":{"name":"uuid"}}],[11,"new","","Creates a new `Uuid`.",3,{"inputs":[{"name":"uuidversion"}],"output":{"name":"option"}}],[11,"new_v4","","Creates a random `Uuid`.",3,{"inputs":[],"output":{"name":"uuid"}}],[11,"from_fields","","Creates a `Uuid` from four field values.",3,null],[11,"from_bytes","","Creates a `Uuid` using the supplied bytes.",3,null],[11,"get_variant","","Returns the variant of the `Uuid` structure.",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"get_version_num","","Returns the version number of the `Uuid`.",3,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"get_version","","Returns the version of the `Uuid`.",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_bytes","","Return an array of 16 octets containing the UUID data",3,null],[11,"simple","","Returns a wrapper which when formatted via `fmt::Display` will format a string of 32 hexadecimal digits.",3,{"inputs":[{"name":"self"}],"output":{"name":"simple"}}],[11,"hyphenated","","Returns a wrapper which when formatted via `fmt::Display` will format a string of hexadecimal digits separated into groups with a hyphen.",3,{"inputs":[{"name":"self"}],"output":{"name":"hyphenated"}}],[11,"urn","","Returns a wrapper which when formatted via `fmt::Display` will format a string of the UUID as a full URN string.",3,{"inputs":[{"name":"self"}],"output":{"name":"urn"}}],[11,"to_timestamp","","Returns an Optional Tuple of (u64, u16) representing the timestamp and  counter portion of a V1 UUID.  If the supplied UUID is not V1, this  will return None",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"parse_str","","Parses a `Uuid` from a string of hexadecimal digits with optional hyphens.",3,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"is_nil","","Tests if the UUID is nil",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"default","","Returns the nil UUID, which is all zeroes",3,{"inputs":[],"output":{"name":"uuid"}}],[11,"from_str","","Parse a hex string and interpret as a `Uuid`.",3,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",3,{"inputs":[{"name":"self"},{"name":"s"}],"output":null}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"rand","","",3,{"inputs":[{"name":"r"}],"output":{"name":"uuid"}}]],"paths":[[4,"UuidVersion"],[4,"UuidVariant"],[4,"ParseError"],[3,"Uuid"],[3,"Simple"],[3,"Hyphenated"],[3,"Urn"]]};
searchIndex["vec_shift"] = {"doc":"","items":[[8,"Shift","vec_shift","",null,null],[10,"shift","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}]],"paths":[[8,"Shift"]]};
searchIndex["void"] = {"doc":"Void","items":[[4,"Void","void","The empty type for cases which can't occur.",null,null],[5,"unreachable","","A safe version of `intrinsincs::unreachable`.",null,null],[8,"ResultVoidExt","","Extensions to `Result<T, Void>`",null,null],[10,"void_unwrap","","Get the value out of a wrapper.",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[8,"ResultVoidErrExt","","Extensions to `Result<Void, E>`",null,null],[10,"void_unwrap_err","","Get the error out of a wrapper.",1,{"inputs":[{"name":"self"}],"output":{"name":"e"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"void"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",2,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"option"}}]],"paths":[[8,"ResultVoidExt"],[8,"ResultVoidErrExt"],[4,"Void"]]};
initSearch(searchIndex);
